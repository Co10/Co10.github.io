<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2015-12-03CSP-画图</title>
    <url>/2020/03/20/2015-12-03CSP-%E7%94%BB%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="画图"><a href="#画图" class="headerlink" title="画图"></a><strong>画图</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　用 ASCII 字符来画图是一件有趣的事情，并形成了一门被称为 ASCII Art 的艺术。例如，下图是用 ASCII 字符画出来的 CSPRO 字样。</span><br><span class="line">　　..____.____..____..____...___..</span><br><span class="line">　　.&#x2F;.___&#x2F;.___||.._.\|.._.\.&#x2F;._.\.</span><br><span class="line">　　|.|...\___.\|.|_).|.|_).|.|.|.|</span><br><span class="line">　　|.|___.___).|..__&#x2F;|.._.&lt;|.|_|.|</span><br><span class="line">　　.\____|____&#x2F;|_|...|_|.\_\\___&#x2F;.</span><br><span class="line">　　本题要求编程实现一个用 ASCII 字符来画图的程序，支持以下两种操作：</span><br><span class="line">　　 画线：给出两个端点的坐标，画一条连接这两个端点的线段。简便起见题目保证要画的每条线段都是水平或者竖直的。水平线段用字符 - 来画，竖直线段用字符 | 来画。如果一条水平线段和一条竖直线段在某个位置相交，则相交位置用字符 + 代替。</span><br><span class="line">　　 填充：给出填充的起始位置坐标和需要填充的字符，从起始位置开始，用该字符填充相邻位置，直到遇到画布边缘或已经画好的线段。注意这里的相邻位置只需要考虑上下左右 4 个方向，如下图所示，字符 @ 只和 4 个字符 * 相邻。</span><br><span class="line">　　.*.</span><br><span class="line">　　*@*</span><br><span class="line">　　.*.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　第1行有三个整数m, n和q。m和n分别表示画布的宽度和高度，以字符为单位。q表示画图操作的个数。</span><br><span class="line">　　第2行至第q + 1行，每行是以下两种形式之一：</span><br><span class="line">　　 0 x1 y1 x2 y2：表示画线段的操作，(x1, y1)和(x2, y2)分别是线段的两端，满足要么x1 &#x3D; x2 且y1 ≠ y2，要么 y1 &#x3D; y2 且 x1 ≠ x2。</span><br><span class="line">　　 1 x y c：表示填充操作，(x, y)是起始位置，保证不会落在任何已有的线段上；c 为填充字符，是大小写字母。</span><br><span class="line">　　画布的左下角是坐标为 (0, 0) 的位置，向右为x坐标增大的方向，向上为y坐标增大的方向。这q个操作按照数据给出的顺序依次执行。画布最初时所有位置都是字符 .（小数点）。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　输出有n行，每行m个字符，表示依次执行这q个操作后得到的画图结果。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">4 2 3</span><br><span class="line">1 0 0 B</span><br><span class="line">0 1 0 2 0</span><br><span class="line">1 0 0 A</span><br><span class="line">Output: </span><br><span class="line">AAAA</span><br><span class="line">A--A</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">16 13 9</span><br><span class="line">0 3 1 12 1</span><br><span class="line">0 12 1 12 3</span><br><span class="line">0 12 3 6 3</span><br><span class="line">0 6 3 6 9</span><br><span class="line">0 6 9 12 9</span><br><span class="line">0 12 9 12 11</span><br><span class="line">0 12 11 3 11</span><br><span class="line">0 3 11 3 1</span><br><span class="line">1 4 2 C</span><br><span class="line">output: </span><br><span class="line">................</span><br><span class="line">...+--------+...</span><br><span class="line">...|CCCCCCCC|...</span><br><span class="line">...|CC+-----+...</span><br><span class="line">...|CC|.........</span><br><span class="line">...|CC|.........</span><br><span class="line">...|CC|.........</span><br><span class="line">...|CC|.........</span><br><span class="line">...|CC|.........</span><br><span class="line">...|CC+-----+...</span><br><span class="line">...|CCCCCCCC|...</span><br><span class="line">...+--------+...</span><br><span class="line">................</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1.0 s</span><br><span class="line">Memory limit	256 MB</span><br></pre></td></tr></table></figure>
<h2 id="数据规模"><a href="#数据规模" class="headerlink" title="数据规模"></a><strong>数据规模</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　所有的评测用例满足：2 ≤ m, n ≤ 100，0 ≤ q ≤ 100，0 ≤ x &lt; m（x表示输入数据中所有位置的x坐标），0 ≤ y &lt; n（y表示输入数据中所有位置的y坐标）。</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>画线就是一个for循环，if判断对就行，填充的思路就是DFS。</p>
<p>但是，这道题有些坑啊😵……</p>
<h3 id="横纵坐标问题"><a href="#横纵坐标问题" class="headerlink" title="横纵坐标问题"></a>横纵坐标问题</h3><p>输入是<code>0 ≤ x &lt; m, 0 ≤ y &lt; n</code>，然而用数组表示的话，要用<code>array[y][x]</code>来表示点的坐标，因为数组是<code>n</code>行<code>m</code>列的，<code>y</code>为行，列为<code>x</code>。<br>还有就是最后的输出，由于直角坐标第一象限左下角是起始端，然而二维数组左上角是起始端，所以输出要倒过来，第一维逆序遍历，第二维正序遍历。(样例2是水平对称的，但样例1竖直对称、水平不对称，很容易发现错误)</p>
<h3 id="画线交界问题"><a href="#画线交界问题" class="headerlink" title="画线交界问题"></a>画线交界问题</h3><p>题意应该是只要在边界内且遇到的不是<code>-</code>或<code>|</code>就可以直接覆盖，即使是遇到了填充字符串也可以覆盖，此处很容易漏了遇到<code>+</code>的话不能覆盖。<code>|</code>遇到<code>-</code>的话覆盖成<code>+</code>，<code>-</code>遇到|的话覆盖成<code>+</code>，遇到<code>+</code>不覆盖，这边比较容易的。<br>还有就是覆盖时for循环的结束条件。题目给的从一个点(<em>x</em><sub>1</sub>, <em>y</em><sub>1</sub>)到另一个点(<em>x</em><sub>2</sub>, <em>y</em><sub>2</sub>)，for循环就是由小到大或者由大到小，但是终止的时候是<code>&lt;= 或 &gt;= 结束点横/纵坐标</code>而不是<code>!= 结束点横/纵坐标</code>，这边这个<code>=</code>很容易遗漏。</p>
<h3 id="标记到达问题"><a href="#标记到达问题" class="headerlink" title="标记到达问题"></a>标记到达问题</h3><p>由于填充是可以覆盖的，从样例一可以看出，A把B覆盖了，所以每一次填充，<code>reach</code>数组都要重置。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">103</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> canvas[maxN][maxN];<span class="comment">//画布</span></span><br><span class="line"><span class="keyword">bool</span> reach[maxN][maxN];<span class="comment">//标记到达</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> x;</span><br><span class="line">	<span class="keyword">int</span> y;</span><br><span class="line">	dot(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y) :x(_x), y(_y) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x1 == x2 &amp;&amp; y1 != y2) &#123;<span class="comment">// |</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">min</span>(y1, y2); i &lt;= <span class="built_in">max</span>(y1, y2); i++) &#123;<span class="comment">//这边&lt;=容易写成&lt;</span></span><br><span class="line">			<span class="keyword">if</span> (canvas[i][x1] == <span class="string">'-'</span>)<span class="comment">//有交叉</span></span><br><span class="line">				canvas[i][x1] = <span class="string">'+'</span>;</span><br><span class="line">			<span class="keyword">if</span> (canvas[i][x1] == <span class="string">'+'</span>)<span class="comment">//这个容易遗漏判断</span></span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				canvas[i][x1] = <span class="string">'|'</span>;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (y1 == y2 &amp;&amp; x1 != x2) &#123;<span class="comment">// -</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">min</span>(x1, x2); i &lt;= <span class="built_in">max</span>(x1, x2); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (canvas[y1][i] == <span class="string">'|'</span>)<span class="comment">//有交叉</span></span><br><span class="line">				canvas[y1][i] = <span class="string">'+'</span>;</span><br><span class="line">			<span class="keyword">if</span> (canvas[y1][i] == <span class="string">'+'</span>)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				canvas[y1][i] = <span class="string">'-'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;<span class="comment">//右 左</span></span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;<span class="comment">//上 下</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillCanvas</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">char</span> c, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">fill</span>(reach[i], reach[i] + m, <span class="literal">false</span>);<span class="comment">//每次都需要重置</span></span><br><span class="line"></span><br><span class="line">	<span class="function">dot <span class="title">ori</span><span class="params">(x, y)</span></span>;</span><br><span class="line">	<span class="built_in">queue</span>&lt;dot&gt; q;</span><br><span class="line">	q.push(ori);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">		dot temp = q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">int</span> xx = temp.x, yy = temp.y;</span><br><span class="line">		</span><br><span class="line">		canvas[yy][xx] = c;<span class="comment">//入了队的是一定能填充的</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;<span class="comment">//上下右左4个方向</span></span><br><span class="line">			<span class="keyword">int</span> xxx = temp.x + dx[i];</span><br><span class="line">			<span class="keyword">int</span> yyy = temp.y + dy[i];</span><br><span class="line">			<span class="function">dot <span class="title">temp2</span><span class="params">(xxx, yyy)</span></span>;</span><br><span class="line">			<span class="keyword">if</span> (xxx &gt;= <span class="number">0</span> &amp;&amp; xxx &lt; m &amp;&amp; yyy &gt;= <span class="number">0</span> &amp;&amp; yyy &lt; n</span><br><span class="line">				&amp;&amp; canvas[yyy][xxx] != <span class="string">'-'</span></span><br><span class="line">				&amp;&amp; canvas[yyy][xxx] != <span class="string">'+'</span></span><br><span class="line">				&amp;&amp; canvas[yyy][xxx] != <span class="string">'|'</span></span><br><span class="line">				&amp;&amp; reach[yyy][xxx] != <span class="literal">true</span>) &#123;<span class="comment">//在边界内 &amp;&amp; 不是画的线 &amp;&amp; 没到达</span></span><br><span class="line">				q.push(temp2);<span class="comment">//符合条件 可以入队</span></span><br><span class="line">				reach[yyy][xxx] = <span class="literal">true</span>;<span class="comment">//标记到达</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m, n, q;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">fill</span>(canvas[i], canvas[i] + m, <span class="string">'.'</span>);</span><br><span class="line">		<span class="built_in">fill</span>(reach[i], reach[i] + m, <span class="literal">false</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> ops;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; ops;</span><br><span class="line">		<span class="keyword">switch</span> (ops) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>: &#123;<span class="comment">//画线</span></span><br><span class="line">			<span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">			drawLine(x1, y1, x2, y2);</span><br><span class="line">		&#125;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>: &#123;<span class="comment">//填充</span></span><br><span class="line">			<span class="keyword">int</span> x, y;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">			<span class="keyword">char</span> c;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">			fillCanvas(x, y, c, m, n);</span><br><span class="line">		&#125;<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;<span class="comment">//y要记得倒序输出</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; canvas[i][j];</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>201809-3-元素选择器</title>
    <url>/2020/06/08/201809-3-%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a><strong>元素选择器</strong></h1><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a><strong>问题背景</strong></h2><p>层叠样式表 (Cascading Style Sheets, 缩写 CSS) 是一种用来为结构化文档 (如 HTML 文档) 添加样式 (字体、间距和颜色等) 的计算机语言。例如，对于以下的 HTML 文档：</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"Subtitle"</span>&gt;</span>Greetings<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配合以下 CSS 片段可以为其中的标题和段落设置相应的格式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-weight</span>: bold; &#125;</span><br><span class="line"><span class="selector-id">#subtitle</span> &#123; <span class="attribute">font-size</span>: <span class="number">12px</span>; &#125;</span><br></pre></td></tr></table></figure>
<p>这段 CSS 片段为前面 HTML 文档添加了样式，使得标题 “Hello” 具有粗体，使得段落 “Greetings” 具有 12 个像素的字体大小。这里，CSS 片段第 1 行中出现的 <code>h1</code> 是一个选择器，它选中了 HTML 文档第 6 行的 <code>h1</code> 元素。CSS片段第 2 行中出现的 <code>#subtitle</code> 也是一个选择器，选中了 HTML 文档第 7 行 <code>id</code> 属性为 <code>subtitle</code> 的 <code>p</code> 元素。注意它并<strong>没有选中</strong> HTML 文档第 8 行不带属性的 <code>p</code> 元素。</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本题要求实现一个简化版的元素选择器。给出一个结构化文档，和若干个选择器，对每个选择器找出文档中所对应选中的元素。</span><br><span class="line"></span><br><span class="line">【结构化文档】结构化文档由元素组成，一个元素可以包含若干个子元素 (可以没有)。一个文档有一个跟元素，在整体上形成树的结构。以下是本题结构化文档的一个例子：</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line">..head</span><br><span class="line">....title</span><br><span class="line">..body</span><br><span class="line">....h1</span><br><span class="line">....p #subtitle</span><br><span class="line">....div #main</span><br><span class="line">......h2</span><br><span class="line">......p #one</span><br><span class="line">......div</span><br><span class="line">........p #two</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文档中每行表示一个元素，元素的标签由一个或者多个字母或数字组成。标签大小写不敏感，例如 div、Div、DIV 都是同一类标签。</span><br><span class="line">元素可以附加一个 id 属性，属性值也是由一个或者多个字母或数字组成，之前有一个井号 #。id 属性大小写敏感，例如 a 和 A 是两个不同的 id。如果元素有 id 属性，标签和属性之间用一个空格字符分隔。</span><br><span class="line">标签之前的缩进表示元素之间的包含关系：一个元素 E 所在行之后连续的缩进更深的行代表的元素是元素 E 的后代元素，其中缩进恰好深一层的是元素 E 的子元素。为了便于观察，每一级缩进用两个小数点符号 .. 表示。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【选择器】  本题中出现的选择器有三种，分别为：</span><br><span class="line">[标签选择器] 用标签来表示。例如 p 表示选择标签为 p 的所有元素。</span><br><span class="line">[id 选择器] 用 id 属性来表示。例如 #main 表示选择 id 属性为 main 的元素。题目保证文档中不同的元素不会有相同的 id 属性。</span><br><span class="line">[后代选择器] 复合表达式，格式为 A B ，其中 A 和 B 均为 标签选择器或 id 选择器，中间用一个空格字符分隔，表示选择满足选择器 B 的所有元素，且满足这些元素有祖先元素满足选择器 A 。例如，选择器 div p 在上面的文档中会选中最后一行的元素 p ，但不会选中 id 属性为 subtitle 的那个元素 p 。注意，后代选择器可以有更多的组成部分构成， div p 是一个两级的后代选择器，而 div div p 则是一个三级的后代选择器。</span><br></pre></td></tr></table></figure>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入第一行是两个正整数 n, m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10)，分别表示结构化文档的行数，和待查询的选择器的个数，中间用一个空格字符分隔。</span><br><span class="line">第 2 行至 第 n + 1 行逐行给出结构化文档的内容。</span><br><span class="line">第 n + 2 行至第 n + m + 1 行每行给出一个待查询的选择器。记第 n + 1 + i 行的选择器为 si， 1 ≤ i ≤ m。</span><br><span class="line">结构化文档和待查询的选择器每行长度不超过 80 个字符(不包括换行符)，保证输入的结构化文档和待查询的选择器都是合法的。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出共 m 行，每行有若干个整数。第 i 行表示选择器 si 选中的结果 (1 ≤ i ≤ m)。其中第一个整数 ri 表示 si 选中的元素个数。随后 ri 个整数，分别表示选中元素在结构化文档中出现的行号(行号从 1 开始编号)。行号按从小到大排序，相邻整数之间用一个空格字符分隔。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">11 5</span><br><span class="line">html</span><br><span class="line">..head</span><br><span class="line">....title</span><br><span class="line">..body</span><br><span class="line">....h1</span><br><span class="line">....p #subtitle</span><br><span class="line">....div #main</span><br><span class="line">......h2</span><br><span class="line">......p #one</span><br><span class="line">......div</span><br><span class="line">........p #two</span><br><span class="line">p</span><br><span class="line">#subtitle</span><br><span class="line">h3</span><br><span class="line">div p</span><br><span class="line">div div p</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">3 6 9 11</span><br><span class="line">1 6</span><br><span class="line">0</span><br><span class="line">2 9 11</span><br><span class="line">1 11</span><br><span class="line"></span><br><span class="line">Explain:</span><br><span class="line">对于样例中查询的 5 个选择器：</span><br><span class="line">1. p 选中所有的元素 p ；</span><br><span class="line">2. #subtitle 选中第 6 行 id 属性为 subtitle 的元素 p ；</span><br><span class="line">3. 由于没有标签为 h3 的元素，因此 h3 没有选中任何元素；</span><br><span class="line">4. 第 9 行和第 11 行的 p 元素都有祖先是 div 元素，而第 6 行的 p 元素 没有祖先是 div 元素；</span><br><span class="line">5. div div p 要求选中的 p 元素有两级祖先都是 div 元素，只有第 11 行的 p 元素满足这个条件。</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p><del>题目太长了，输入格式还不够 HTML 直观。</del></p>
<p><code>..</code>的数量可以看成级数，整体可以看成文件目录，若没有 <code>..</code> 则为根目录，每一次 <code>..</code> 的增加都是在当前目录下开出了一个新目录，样例可以变成：</p>
<p><img src="https://i.loli.net/2020/06/11/YIOtWJAqvc5uoiC.png" alt="ele_picker.png"></p>
<p>很明显的具有树形结构。根据题意，输入一定是按 HTML 文档顺序输入的，要求也只是查找，因此可以用数组或向量存储数据，不用建立树的结构。</p>
<p>储存的时候，处理数据，根据 <code>..</code> 赋值级数，根据是否有 <code>#</code> 处理 id、标签，并且标签全部转化为小写。并同时用一个变量 <code>father</code> 从后往前遍历向量，标记父节点位置，方便多级查询。</p>
<p>查询的时候，分隔 string，判断是哪一种选择器；若 substring 个数为1，则只需顺序遍历向量进行查询，根据 <code>#</code> 判断是否需要大小写处理；若不只有一个 substring，则从后往前遍历向量，从后往前逐级“剥去” id 或 标签，找到就 push 行数。</p>
<p>最后根据题意输出。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> lev, fa;</span><br><span class="line">	<span class="built_in">string</span> label, id;</span><br><span class="line">	node() &#123; lev = <span class="number">-2</span>; fa = <span class="number">-2</span>; &#125;</span><br><span class="line">	node(<span class="keyword">int</span> l, <span class="keyword">int</span> f, <span class="built_in">string</span> la, <span class="built_in">string</span> ID) :lev(l), fa(f), label(la), id(ID) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">lowerCase</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (c &gt;= <span class="number">65</span> &amp;&amp; c &lt;= <span class="number">90</span>)</span><br><span class="line">		c += <span class="number">32</span>;</span><br><span class="line">	<span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (s[pos] == <span class="string">'.'</span>)</span><br><span class="line">		pos++;</span><br><span class="line">	<span class="keyword">int</span> lev = pos / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> fa;</span><br><span class="line">	<span class="keyword">if</span> (v.empty() || lev == <span class="number">0</span>)</span><br><span class="line">		fa = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = v.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">if</span> (v[i].lev == lev - <span class="number">1</span>) &#123;</span><br><span class="line">				fa = i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">string</span> la, ID;</span><br><span class="line">	<span class="keyword">bool</span> labeled = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span> (pos &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		<span class="keyword">if</span> (s[pos] == <span class="string">'#'</span> || labeled) &#123;</span><br><span class="line">			labeled = <span class="literal">true</span>;</span><br><span class="line">			la += s[pos];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (s[pos] != <span class="string">' '</span>)</span><br><span class="line">				ID += lowerCase(s[pos]);</span><br><span class="line">		&#125;</span><br><span class="line">		pos++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">node <span class="title">tnode</span><span class="params">(lev, fa, la, ID)</span></span>;</span><br><span class="line">	v.push_back(tnode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">lowerCaseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != s.<span class="built_in">size</span>(); i++)</span><br><span class="line">		s[i] = lowerCase(s[i]);</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">lookup</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">	<span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; sv;</span><br><span class="line">	<span class="keyword">while</span> (!ss.eof()) &#123;</span><br><span class="line">		<span class="built_in">string</span> stemp;</span><br><span class="line">		ss &gt;&gt; stemp;</span><br><span class="line">		<span class="keyword">if</span> (stemp[<span class="number">0</span>] != <span class="string">'#'</span>)</span><br><span class="line">			stemp = lowerCaseString(stemp);</span><br><span class="line">		sv.push_back(stemp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = v.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">int</span> pos2 = sv.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (sv[pos2] != v[i].label &amp;&amp; sv[pos2] != v[i].id)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		pos = v[i].fa;</span><br><span class="line">		pos2--;</span><br><span class="line">		<span class="keyword">while</span> (pos &gt;= <span class="number">0</span> &amp;&amp; pos2 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (v[pos].label == sv[pos2] || v[pos].id == sv[pos2])</span><br><span class="line">				pos2--;</span><br><span class="line">			pos = v[pos].fa;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (pos2 == <span class="number">-1</span>)</span><br><span class="line">			ans.push_back(i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	reverse(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="built_in">cin</span>.ignore();</span><br><span class="line">	v.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		getline(<span class="built_in">cin</span>, s);</span><br><span class="line">		initial(s);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		getline(<span class="built_in">cin</span>, s);</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans = lookup(s);</span><br><span class="line">		<span class="keyword">if</span> (ans.empty())</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; ans.<span class="built_in">size</span>();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != ans.<span class="built_in">size</span>(); i++)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; ans[i];</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>ATM</title>
    <url>/2020/05/05/ATM/</url>
    <content><![CDATA[<h1 id="ATM"><a href="#ATM" class="headerlink" title="ATM"></a><strong>ATM</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一家银行计划安装一台用于提取现金的机器, 机器能够按要求的现金量发送适当的账单。</span><br><span class="line">机器使用正好 N 种不同的面额钞票，例如 Dk，k &#x3D; 1, 2, …, N，并且对于每种面额 Dk，机器都有 nk 张钞票。</span><br><span class="line">例如：</span><br><span class="line">N &#x3D; 3，</span><br><span class="line">n1 &#x3D; 10，D1 &#x3D; 100，</span><br><span class="line">n2 &#x3D; 4，D2 &#x3D; 50，</span><br><span class="line">n3 &#x3D; 5，D3 &#x3D; 10</span><br><span class="line">表示机器有10张面额为100的钞票、4张面额为50的钞票、5张面额为10的钞票。</span><br><span class="line"></span><br><span class="line">东东在写一个 ATM 的程序，可根据具体金额请求机器交付现金。</span><br><span class="line">注意，这个程序计算程序得出的最大现金少于或等于可以根据设备的可用票据供应有效交付的现金。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">程序输入来自标准输入。 输入中的每个数据集代表特定交易，其格式为：</span><br><span class="line">Cash N n1 D1 n2 D2 ... nN DN</span><br><span class="line">其中 Cash (0 ≤ Cash ≤ 100000) 是所请求的现金量，N (0 ≤ N ≤ 10) 是纸币面额的数量，nk (0 ≤ nk ≤ 1000) 是 Dk (1 &lt;&#x3D; Dk &lt;&#x3D; 1000，k &#x3D; 1, 2, ..., N) 面额的可用纸币的数量。</span><br><span class="line">输入中的数字之间可以自由出现空格。输入数据正确。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每组数据，程序将在下一行中将结果打印到单独一行上的标准输出中。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">735 3  4 125  6 5  3 350</span><br><span class="line">633 4  500 30  6 100  1 5  0 1</span><br><span class="line">735 0</span><br><span class="line">0 3  10 100  10 50  10 10</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">735</span><br><span class="line">630</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">Explain: </span><br><span class="line">    第一个数据集指定一笔交易，其中请求的现金金额为 735。 机器包含3种面额的纸币：4张钞票 125、6 张钞票 5 和 3 张钞票 350。 机器可以交付所需现金的确切金额。</span><br><span class="line">在第二种情况下，机器的票据供应不能满足所要求的确切现金数量。 可以交付的最大现金为 630。 请注意，在机器中组合钞票以匹配交付的现金有多种可能性。</span><br><span class="line">    在第三种情况下，机器是空的，没有现金交付。 在第四种情况下，请求的现金金额为 0，因此机器不交付现金。</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    10000 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>多重背包问题。</p>
<p><code>f[i][j]</code> 表示前 <em>i</em> 种物品恰放入一个容量为 <em>V</em> 的背包的最大权值。<em>C</em><sub><em>i</em></sub> 表示物品个数。</p>
<script type="math/tex; mode=display">
f_{i, j} = max(f_{i-1, j}, f_{i-1, j-k×w_i} + k × v_i | k=0,1,2,...,C_i)</script><p>本题钞票用数组表示 <em>x</em> 元选 <em>n</em><sub><em>i</em></sub> 张共 <em>x</em> × <em>n</em><sub><em>i</em></sub> 元。将<em>k</em> × <em>v</em><sub><em>i</em></sub> 优化成 <em>v</em><sub><em>i</em></sub> 。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> v, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ve)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = ve.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[v + <span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v + <span class="number">10</span>; i++)</span><br><span class="line">		arr[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = v; j &gt;= ve[i]; j--)</span><br><span class="line">			arr[j] = <span class="built_in">max</span>(arr[j], arr[j - ve[i]] + ve[i]);</span><br><span class="line">	<span class="keyword">return</span> arr[v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> cash, n;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; cash &gt;&gt; n).eof()) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> n0, d0;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; n0 &gt;&gt; d0;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n0; j &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">				v.push_back(j * d0);</span><br><span class="line">				n0 -= j;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (n0)</span><br><span class="line">				v.push_back(n0 * d0);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (cash == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> res = solve(cash, v);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
      </tags>
  </entry>
  <entry>
    <title>4数列选数问题</title>
    <url>/2020/03/19/4%E6%95%B0%E5%88%97%E9%80%89%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="四数列选数问题"><a href="#四数列选数问题" class="headerlink" title="四数列选数问题"></a><strong>四数列选数问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有四个数列 A, B, C, D，每个数列都有 n 个数字。从每个数列中各取出一个数，有多少种方案使得 4 个数的和为 0 ？</span><br><span class="line">(当一个数列中有多个相同的数字的时候，把它们当做不同的数对待。)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行：n (代表数列中数字的个数) (1 ≤ n ≤ 4000)</span><br><span class="line">接下来的 n 行中，第 i 行有四个数字，分别表示数列 A, B, C, D 中的第 i 个数字 (数字不超过 2 的 28 次方)</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出不同组合的个数。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">6</span><br><span class="line">-45 22 42 -16</span><br><span class="line">-41 -27 56 30</span><br><span class="line">-36 53 -37 77</span><br><span class="line">-36 30 -75 -46</span><br><span class="line">26 -38 -10 62</span><br><span class="line">-32 -54 -6 45</span><br><span class="line">Output: </span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		15000 ms</span><br><span class="line">Case time limit	5000 ms</span><br><span class="line">Memory limit	228000 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>有4个数列，用4重<code>for</code>循环暴力求解的话，时间复杂度为<em>O</em>(<em>n</em><sup>4</sup>)，一定会超时，所以要进行优化。</p>
<p>题意很明显求和为0，两个相反数相加为0，因此可以把4个数列优化成2个数列：A和B、C和D依次通过 <em>n</em><sup>2</sup> 次相加得到数列 E(A和B产生)和 F(C和D产生)，然后对F中的每一个数求相反数，A再从新F中找到相同的数即可。时间复杂度优化为<em>O</em>(<em>n</em><sup>2</sup>)。</p>
<p>优化查找效率：二分搜索。<br>标记始末，求得中间，把中间数与目标对比，大则将末改成中间-1，小则将始改成中间+1，循环搜索，直至始末相遇或找到目标。<br>这道题要标记的是有序数组中目标出现的第一个位置，然后从那个位置开始求多少个相同值，就表示有多少个方案，再对这些方案数求和就是答案。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*二分查找 是否存在那个数</span></span><br><span class="line"><span class="comment">  从两端开始往目标逼近*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findNum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> first = <span class="number">0</span>, last = n - <span class="number">1</span>, middle;</span><br><span class="line">	<span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span> (!found &amp;&amp; first &lt;= last) &#123;</span><br><span class="line">		middle = (first + last) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (a[middle] == x)</span><br><span class="line">			found = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (a[middle] &gt; x)</span><br><span class="line">			last = middle - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (a[middle] &lt; x)</span><br><span class="line">			first = middle + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> found;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*找到那个数第一次出现的位置*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFirst</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> first = <span class="number">0</span>, last = n - <span class="number">1</span>, middle;</span><br><span class="line">	<span class="keyword">while</span> (first &lt; last) &#123;</span><br><span class="line">		middle = (first + last) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (a[middle] &lt; x)</span><br><span class="line">			first = middle + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			last = middle;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*其实上面两个二分搜索可以合并成一个的……</span></span><br><span class="line"><span class="comment">  就是后来懒得改了……*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*从那个数的位置开始 计算那个数在有序数组中出现了几次*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountNum</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> x, <span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] != x)</span><br><span class="line">			<span class="keyword">break</span>;<span class="comment">//及时停止</span></span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">int</span>* arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];<span class="comment">//A</span></span><br><span class="line">	<span class="keyword">int</span>* arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];<span class="comment">//B</span></span><br><span class="line">	<span class="keyword">int</span>* arr3 = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];<span class="comment">//C</span></span><br><span class="line">	<span class="keyword">int</span>* arr4 = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];<span class="comment">//D</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; arr1[i];</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; arr2[i];</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; arr3[i];</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; arr4[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span>* a1 = <span class="keyword">new</span> <span class="keyword">int</span>[n * n + <span class="number">10</span>];<span class="comment">//A和B → E</span></span><br><span class="line">	<span class="keyword">int</span>* a2 = <span class="keyword">new</span> <span class="keyword">int</span>[n * n + <span class="number">10</span>];<span class="comment">//C和D → F</span></span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">			a1[count] = arr1[i] + arr2[j];</span><br><span class="line">			a2[count] = (<span class="number">-1</span>) * (arr3[i] + arr4[j]);<span class="comment">//这边直接求相反数</span></span><br><span class="line">			count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	sort(a2, a2 + n * n);<span class="comment">//要先进行排序</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> numCount = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * n; i++) &#123;<span class="comment">//遍历</span></span><br><span class="line">		<span class="keyword">if</span> (findNum(a1[i], a2, n * n) == <span class="literal">true</span>) &#123;<span class="comment">//如果有</span></span><br><span class="line">			<span class="keyword">int</span> first = findFirst(a1[i], a2, n * n);<span class="comment">//找到第一次出现的位置</span></span><br><span class="line">			numCount += CountNum(first, a1[i], a2, n * n);<span class="comment">//计数 出现几次 求和</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; numCount &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>Bézier Curve</title>
    <url>/2020/10/28/Bezier-Curve/</url>
    <content><![CDATA[<h1 id="Curves"><a href="#Curves" class="headerlink" title="Curves"></a>Curves</h1><a id="more"></a>
<h2 id="Hermite-Curve"><a href="#Hermite-Curve" class="headerlink" title="Hermite Curve"></a>Hermite Curve</h2><p>The parametric equation of curves is: </p>
<script type="math/tex; mode=display">
P(t)=a_3t^3+a_2t^2+a_1t+a_0, t∈[0,1]</script><p>Derivate it: </p>
<script type="math/tex; mode=display">
P'(t)=3a_3t^2+2a_2t+a_1</script><p>Let $t=0$ and $t=1$, we get: </p>
<script type="math/tex; mode=display">
P(0)=a_0, P'(0)=a_1, 
P(1)=a_3+a_2+a_1+a_0, P'(1)=3a_3+2a_2+a_1</script><p>So, we take $P_0,P_0’,P_1,P_1’$ as:</p>
<script type="math/tex; mode=display">
P_0=a_0</script><script type="math/tex; mode=display">
P_0'=a_1</script><script type="math/tex; mode=display">
P_1=a_3+a_2+a_1+a_0</script><script type="math/tex; mode=display">
P_1'=3a_3+2a_2+a_1</script><p>so we get: </p>
<script type="math/tex; mode=display">
a_0=P_0</script><script type="math/tex; mode=display">
a_1=P_0'</script><script type="math/tex; mode=display">
a_2=-3P_0-2P_0'+3P_1-P_1'</script><script type="math/tex; mode=display">
a_3=2P_0+P_0'-2P_1+P_1'</script><p>Thus, </p>
<script type="math/tex; mode=display">
P(t)=(2P_0+P_0'-2P_1+P_1')t^3+(-3P_0-2P_0'+3P_1-P_1')t^2+P_0't+P_0</script><p>After simplification: </p>
<script type="math/tex; mode=display">
P(t)=(2t^3-3t^2+1)P_0+(-2t^3+3t^2)P_1+(t^3-2t^2+t)P_0'+(t^3-t^2)P_1',t∈[0,1]</script><p>Let $F_0(t)=2t^3-3t^2+1$, $F_1(t)=-2t^3+3t^2$, $G_0(t)=t^3-2t^2+t$, $G_1(t)=t^3-t^2$. </p>
<script type="math/tex; mode=display">
P(t)=F_0P_0+F_1P_1+G_0P_0'+G_1P_1'=[F_0,F_1,G_0,G_1] \begin{bmatrix}P_0\\P_1\\P_0'\\P_1'\end{bmatrix}</script><p>Let $M=\left[\begin{matrix}1&amp;0&amp;0&amp;0\\0&amp;0&amp;1&amp;0\\ -3&amp;3&amp; -2&amp; -1 \\2&amp; -2 &amp;1&amp;1\end{matrix}\right]$ , so we get: $P(t)=[1,t,t^2,t^3]M\left[\begin{matrix}1&amp;0&amp;0&amp;0\\0&amp;0&amp;1&amp;0\\ -3&amp;3&amp;-2&amp;-1\\2&amp;-2&amp;1&amp;1\end{matrix}\right]$</p>
<h2 id="Bezier-curve"><a href="#Bezier-curve" class="headerlink" title="Bézier curve"></a>Bézier curve</h2><p>The curve is defined by four points: <strong>the initial position</strong> and <strong>the terminating position</strong> i.e $P_0$ and $P_3$ respectively (which are called “anchors”) and <strong>two separate middle points</strong> i.e $P_1$ and $P_2$ (which are called “handles”) in our example.</p>
<p>Given distinct points $P_0$ and $P_1$, a linear Bézier curve is simply a  straight line between those two points. The curve is given by</p>
<script type="math/tex; mode=display">
B(t)=(1-t)P_0+tP_1, t∈[0,1]</script><p>A quadratic Bézier curve is the path traced by the function $B(t)$, given points $P_0$, $P_1$, and $P_2$,</p>
<script type="math/tex; mode=display">
B(t)=(1-t)[(1-t)P_0+tP_1]+t[(1-t)P_1+tP_2],t∈[0,1]</script><script type="math/tex; mode=display">
B(t)=(1-t)^2P_0+2t(1-t)P_1+t^2P_2,t∈[0,1]</script><p>This can be written in a way that highlights the symmetry with respect to $P_1$:</p>
<script type="math/tex; mode=display">
B(t)=P_1+(1-t)^2(P_0-P_1)+t^2(P_2-P_1), t∈[0,1]</script><script type="math/tex; mode=display">
B'(t)=2(1-t)(P_1-P_0)+2t(P_2-P_1)</script><script type="math/tex; mode=display">
B''(t)=2(P_2-2P_1+P_0)</script><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>给定空间 $n+1$ 个点的位置矢量 $P_i(i=0,1,2,…,n)$，则 Bézier 曲线可定义为：</p>
<script type="math/tex; mode=display">
P(t)=\sum^{n}_{i=0}P_iB_{i,n}(t), t∈[0,1]</script><p>where $B_{i,n}(t)$ is Bernstein basis polynomials of degree $n$ :</p>
<script type="math/tex; mode=display">
B_{i,n}(t)=\mbox{C}_n^it^i(1-t)^{n-i}=\frac{n!}{i!(n-i)!}(1-t)^{n-i},(i=0,1,...,n)</script>]]></content>
      <categories>
        <category>CG</category>
      </categories>
      <tags>
        <tag>曲线</tag>
      </tags>
  </entry>
  <entry>
    <title>Connecting to VPS in VS Code</title>
    <url>/2021/03/13/Connecting-to-VPS-in-VS-Code/</url>
    <content><![CDATA[<h1 id="Connecting-to-VPS-in-VS-Code"><a href="#Connecting-to-VPS-in-VS-Code" class="headerlink" title="Connecting to VPS in VS Code"></a>Connecting to VPS in VS Code</h1><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="In-Windows"><a href="#In-Windows" class="headerlink" title="In Windows"></a>In Windows</h3><p>Install VS Code. Install Remote - SSH in VS Code.</p>
<p>Press F1, edit the configuration. Then Connect.</p>
<p>In Explorer, you can open the remote directory.</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>DDL-贪婪算法</title>
    <url>/2020/03/19/DDL-%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="DDL问题"><a href="#DDL问题" class="headerlink" title="DDL问题"></a><strong>DDL问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有 n 个作业，每个作业都有自己的 DDL，如果没有在 DDL 前做完这个作业，那么老师会扣掉这个作业的全部平时分。如何安排做作业的顺序，才能尽可能少扣一点分？</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入包含 T 个测试用例。输入的第一行是单个整数 T，为测试用例的数量。</span><br><span class="line">每个测试用例以一个正整数 N 开头(1 ≤ N ≤ 1000)，表示作业的数量。</span><br><span class="line">然后两行。第一行包含 N 个整数，表示 DDL，下一行包含 N 个整数，表示扣的分。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每个测试用例，您应该输出最小的总降低分数，每个测试用例一行。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">3 3 3</span><br><span class="line">10 5 1</span><br><span class="line">3</span><br><span class="line">1 3 1</span><br><span class="line">6 2 3</span><br><span class="line">7</span><br><span class="line">1 4 6 4 2 4 3</span><br><span class="line">3 2 1 7 6 5 4</span><br><span class="line">Output: </span><br><span class="line">0</span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	32768 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>将扣的分数降序排列，第二关键字按DDL降序排列，然后按照时间线从后往前遍历，并用<code>reach</code>数组标记当天是否被其他作业占用，这样可以保证被扣的分最少，因为每次都优先安排分值大的，且从最晚的DDL往较近的日子安排，这样可以保证后面的晚的DDL对早的DDL的影响最小。</p>
<h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><p>对于时间，我们总是思维定式从前往后，然而本题将时间“倒流”求解，容易得出答案。(助教课上如果没说的话我还真不会往这方面思考🤯)</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">score</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> ddl;<span class="comment">//due</span></span><br><span class="line">	<span class="keyword">int</span> s;<span class="comment">//due后扣的分</span></span><br><span class="line">	score()&#123; &#125;</span><br><span class="line">	score(<span class="keyword">int</span> _ddl, <span class="keyword">int</span> _s) :ddl(_ddl), s(_s) &#123;  &#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> score sc)<span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (s == sc.s)</span><br><span class="line">			<span class="keyword">return</span> ddl &gt; sc.ddl;</span><br><span class="line">		<span class="keyword">return</span> s &gt; sc.s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(score a, score b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">result</span><span class="params">(score* ddl, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> reach[<span class="number">10000</span>];<span class="comment">//标记在哪天是否做了作业</span></span><br><span class="line">	<span class="built_in">memset</span>(reach, <span class="number">0</span>, <span class="number">10000</span>);</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> x = ddl[i].ddl;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">bool</span> setdown = <span class="literal">false</span>;<span class="comment">//标记某作业是否完成</span></span><br><span class="line">		<span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;<span class="comment">//从第x天(也就是DDL)开始安排 可安排就安置</span></span><br><span class="line">			<span class="keyword">if</span> (reach[x] == <span class="number">0</span>) &#123;<span class="comment">//有空</span></span><br><span class="line">				reach[x] = <span class="number">1</span>;<span class="comment">//占用当天</span></span><br><span class="line">				setdown = <span class="literal">true</span>;<span class="comment">//做了这个作业</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			x--;<span class="comment">//不然继续往前一天看看是否可安排</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (setdown == <span class="literal">false</span>)<span class="comment">//若前面这些天都被占用了</span></span><br><span class="line">			sum += ddl[i].s;<span class="comment">//无法完成作业 扣分</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;<span class="comment">//t组数据</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;<span class="comment">//n个DDL</span></span><br><span class="line">		<span class="keyword">int</span>* arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">5</span>];</span><br><span class="line">		<span class="keyword">int</span>* arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">5</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; arr1[j];<span class="comment">//DDL</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; arr2[j];<span class="comment">//分</span></span><br><span class="line"></span><br><span class="line">		score* DDL = <span class="keyword">new</span> score[n + <span class="number">10</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;<span class="comment">//整理DDL跟分 存入结构体方便记录</span></span><br><span class="line">			<span class="function">score <span class="title">sc</span><span class="params">(arr1[j], arr2[j])</span></span>;</span><br><span class="line">			DDL[j] = sc;</span><br><span class="line">		&#125;</span><br><span class="line">		sort(DDL, DDL + n, cmp);<span class="comment">//按扣的分数降序 第二关键字按DDL降序</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; result(DDL, n) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//丢入函数处理</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>贪婪算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Delicious子串</title>
    <url>/2020/05/06/Delicious%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="Delicious子串"><a href="#Delicious子串" class="headerlink" title="Delicious子串"></a><strong>Delicious子串</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有个字符串，只由 A 或 B 组成，求有多少个子串是Delicious的。</span><br><span class="line">Delicious定义：对于一个字符串，我们认为它是Delicious的，当且仅当它的每一个字符都属于一个大于 1 的回文子串中。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入第一行一个正整数 n，表示字符串长度。(n ≤ 300000)</span><br><span class="line">接下来一行，一个长度为 n 只由大写字母 A、B 构成的字符串。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出仅一行，表示符合题目要求的子串的个数。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">5</span><br><span class="line">AABBB</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">6</span><br><span class="line"></span><br><span class="line">Explain: </span><br><span class="line">    对于该样例，符合条件的六个子串分别是：</span><br><span class="line">AA AABB AABBB BB BBB BB</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    10000 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>题目可能有点难理解，刚开始想 AABB 不是回文， AABBAA 这样的才是回文啊……然后多观察了几下，就是求出多少个回文子串，并把这些位置连续的回文子串组合。</p>
<p>比如AABBB的回文子串是：<strong><em>AA</em></strong>BBB，AA<strong><em>BB</em></strong>B，AAB<strong><em>BB</em></strong>，AA<strong><em>BBB</em></strong>。Delicious子串包括这 4 个，再加上组合的 <strong><em>AABB</em></strong>B 跟 <strong><em>AABBB</em></strong>，共6个。</p>
<p>做题思路就是，找出所有子串，然后把他们拼起来……好像很难拼啊，不一定是两两拼接，还可能是3个、4个……然后想到连通图的问题了……然后我崩了，最后一个数据点都没过。</p>
<p>赛后看了别人的思路：所有子串个数是 <em>n</em>(<em>n</em> -1)/2，把它扣去不是Delicious子串的个数就好了……</p>
<p>问题变成什么不是Delicious子串：<em>ABB..B</em> &amp; <em>BAA..A</em>，<em>AA…AB</em> &amp; <em>BB..BA</em>。<br>从头到尾扫一遍，可以去除后者；从尾到头，可以去除前者。</p>
<p>然而这样 <em>AB</em> 跟 <em>BA</em> 子串会多减一次，所以要加回来。</p>
<p>注意数据范围，用 <code>long long</code>。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> maxN = <span class="number">300020</span>;</span><br><span class="line"><span class="keyword">char</span> arr[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans = n * (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> same = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (arr[i - <span class="number">1</span>] == arr[i])</span><br><span class="line">			same++;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			ans -= same;</span><br><span class="line">			same = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	same = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">if</span> (arr[i] == arr[i + <span class="number">1</span>])</span><br><span class="line">			same++;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			ans -= same;</span><br><span class="line">			same = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">		<span class="keyword">if</span> (arr[i - <span class="number">1</span>] != arr[i])</span><br><span class="line">			ans++;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n).eof()) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> ans = solve(n);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>Boxplot</title>
    <url>/2020/10/07/Boxplot/</url>
    <content><![CDATA[<h1 id="Boxplot"><a href="#Boxplot" class="headerlink" title="Boxplot"></a>Boxplot</h1><a id="more"></a>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>疫情数据找来找去都太不合适了，样本差距比较大，数据不集中后来我就找了气温的数据。</p>
<p>使用的是2020年青岛6、7、8月份的日高低温<sup><a href="http://www.weather.com.cn/weather40dn/101120201.shtml" target="_blank" rel="noopener">[1]</a></sup>。</p>
<p>先找一个模板<sup><a href="https://www.d3-graph-gallery.com/graph/boxplot_show_individual_points.html" target="_blank" rel="noopener">[2]</a></sup>，然后修改。</p>
<p>先是写了高温的数据，然后在旁边显示低温数据，用于对比。</p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><html>
    <body>
        <meta charset="utf-8">
        <script src="https://d3js.org/d3.v4.js"></script>
        <p>Qingdao daily high and low temperature of Jun, Jul and Aug, 2020</p>
        <div id="qdtempera"></div>
        <script>
            var margin = {top: 10, right: 30, bottom: 30, left: 40},
                width = 460 - margin.left - margin.right,
                height = 400 - margin.top - margin.bottom;
            var svg = d3.select("#qdtempera")
                .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                svg.append("text")
                    .attr("x", 6)
                    .attr("y", 0)
                    .text("Temperature / ℃")
                    .style("font-size", "10px")
                    .attr("alignment-baseline","middle")
            d3.csv("https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/02/qingdao_temperature.csv", function(data) {
                var sumstat = d3.nest()
                    .key(function(d) { return d.month; })
                    .rollup(function(d) {
                    q1 = d3.quantile(d.map(function(g) { return g.high;}).sort(d3.ascending),.25)
                    median = d3.quantile(d.map(function(g) { return g.high;}).sort(d3.ascending),.5)
                    q3 = d3.quantile(d.map(function(g) { return g.high;}).sort(d3.ascending),.75)
                    interQuantileRange = q3 - q1
                    min = q1 - 1.5 * interQuantileRange;
                    max = q3 + 1.5 * interQuantileRange;
                    return({q1: q1, median: median, q3: q3, interQuantileRange: interQuantileRange, min: min, max: max})
                })
                .entries(data)
                var sumstat2 = d3.nest()
                    .key(function(d) { return d.month; })
                    .rollup(function(d) {
                    q1 = d3.quantile(d.map(function(g) { return g.low;}).sort(d3.ascending),.25)
                    median = d3.quantile(d.map(function(g) { return g.low;}).sort(d3.ascending),.5)
                    q3 = d3.quantile(d.map(function(g) { return g.low;}).sort(d3.ascending),.75)
                    interQuantileRange = q3 - q1
                    min = q1 - 1.5 * interQuantileRange;
                    max = q3 + 1.5 * interQuantileRange;
                    return({q1: q1, median: median, q3: q3, interQuantileRange: interQuantileRange, min: min, max: max})
                })
                .entries(data)
                var color1 = ["#e85d04", "#f48c06", "#faa307", "#ffba08"];
                var color2 = ["#00b4d8", "#48cae4", "#90e0ef", "#ade8f4"];
                var x = d3.scaleBand()
                    .range([0, width])
                    .domain(["Jun", "Jul", "Aug"])
                    .paddingInner(1)
                    .paddingOuter(.5)
                svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x))
                var y = d3.scaleLinear()
                    .domain([13,33])
                    .range([height, 0])
                svg.append("g").call(d3.axisLeft(y))
                var fillopa = 0.8;
                svg.selectAll("vertLines")
                    .data(sumstat)
                    .enter()
                    .append("line")
                    .attr("x1", function(d){return(x(d.key))})
                    .attr("x2", function(d){return(x(d.key))})
                    .attr("y1", function(d){return(y(d.value.min))})
                    .attr("y2", function(d){return(y(d.value.max))})
                    .attr("fill-opacity",fillopa)
                    .attr("stroke", color1[1])
                    .style("stroke-dasharray", ("4, 4"))
                var s2offset = 20;
                var s20 = svg.selectAll("vertLines")
                    .data(sumstat2)
                    .enter()
                    .append("line")
                    .attr("x1", function(d){return(x(d.key)+s2offset)})
                    .attr("x2", function(d){return(x(d.key)+s2offset)})
                    .attr("y1", function(d){return(y(d.value.min))})
                    .attr("y2", function(d){return(y(d.value.max))})
                    .attr("fill-opacity",fillopa)
                    .attr("stroke", color2[1])
                    .style("stroke-dasharray", ("4, 4"))
                var boxWidth = 100;
                svg.selectAll("boxes")
                    .data(sumstat)
                    .enter()
                    .append("rect")
                    .attr("x", function(d){return(x(d.key)-boxWidth/2)})
                    .attr("y", function(d){return(y(d.value.q3))})
                    .attr("height", function(d){return(y(d.value.q1)-y(d.value.q3))})
                    .attr("width", boxWidth )
                    .attr("fill-opacity",fillopa)
                    .attr("stroke", color1[1])
                    .attr("fill-opacity",fillopa)
                    .style("fill", color1[0]);
                var s21 = svg.selectAll("boxes")
                    .data(sumstat2)
                    .enter()
                    .append("rect")
                    .attr("x", function(d){return(x(d.key)-boxWidth/2 + s2offset)})
                    .attr("y", function(d){return(y(d.value.q3))})
                    .attr("height", function(d){return(y(d.value.q1)-y(d.value.q3))})
                    .attr("width", boxWidth )
                    .attr("fill-opacity",fillopa)
                    .attr("stroke", color2[1])
                    .attr("fill-opacity",fillopa)
                    .style("fill", color2[0]);
                svg.selectAll("medianLines")
                    .data(sumstat)
                    .enter()
                    .append("line")
                    .attr("x1", function(d){return(x(d.key)-boxWidth/2) })
                    .attr("x2", function(d){return(x(d.key)+boxWidth/2) })
                    .attr("y1", function(d){return(y(d.value.median))})
                    .attr("y2", function(d){return(y(d.value.median))})
                    .attr("fill-opacity",fillopa)
                    .attr("stroke", color1[2])
                    .style("width", 80);
                var s22 = svg.selectAll("medianLines")
                    .data(sumstat2)
                    .enter()
                    .append("line")
                    .attr("x1", function(d){return(x(d.key)-boxWidth/2+s2offset) })
                    .attr("x2", function(d){return(x(d.key)+boxWidth/2+s2offset) })
                    .attr("y1", function(d){return(y(d.value.median))})
                    .attr("y2", function(d){return(y(d.value.median))})
                    .attr("fill-opacity",fillopa)
                    .attr("stroke", color2[2])
                    .style("width", 80);
                var jitterWidth = 60;
                svg.selectAll("indPoints")
                    .data(data)
                    .enter()
                    .append("circle")
                    .attr("cx", function(d){return(x(d.month) - jitterWidth/2 + Math.random()*jitterWidth )})
                    .attr("cy", function(d){return(y(d.high))})
                    .attr("r", 4)
                    .attr("fill-opacity",fillopa)
                    .style("fill", color1[3]);
                var s23 = svg.selectAll("indPoints")
                    .data(data)
                    .enter()
                    .append("circle")
                    .attr("cx", function(d){return(x(d.month) - jitterWidth/2 + Math.random()*jitterWidth + s2offset )})
                    .attr("cy", function(d){return(y(d.low))})
                    .attr("r", 4)
                    .attr("fill-opacity",fillopa)
                    .style("fill", color2[3]);
            });
        </script>
    </body>
</html>

<h2 id="HTML源代码"><a href="#HTML源代码" class="headerlink" title="HTML源代码"></a>HTML源代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Qingdao daily high and low temperature of Jun, Jul and Aug, 2020<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> = <span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"https://d3js.org/d3.v4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"qdtempera"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> p = d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="actionscript">            p.style(<span class="string">"color"</span>,<span class="string">"#6d6875"</span>).style(<span class="string">"font-size"</span>,<span class="string">"24px"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> margin = &#123;top: <span class="number">10</span>, right: <span class="number">30</span>, bottom: <span class="number">30</span>, left: <span class="number">40</span>&#125;,</span></span><br><span class="line">                width = 460 - margin.left - margin.right,</span><br><span class="line">                height = 400 - margin.top - margin.bottom;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> svg = d3.select(<span class="string">"#qdtempera"</span>)</span></span><br><span class="line"><span class="actionscript">                .append(<span class="string">"svg"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"width"</span>, width + margin.left + margin.right)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"height"</span>, height + margin.top + margin.bottom)</span></span><br><span class="line"><span class="actionscript">                .append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x"</span>, <span class="number">6</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y"</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">                    .text(<span class="string">"Temperature / ℃"</span>)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"font-size"</span>, <span class="string">"10px"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            d3.csv(<span class="string">"https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/02/qingdao_temperature.csv"</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> sumstat = d3.nest()</span></span><br><span class="line"><span class="actionscript">                    .key(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> d.month; &#125;)</span></span><br><span class="line"><span class="actionscript">                    .rollup(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    q1 = d3.quantile(d.map(<span class="function"><span class="keyword">function</span><span class="params">(g)</span> </span>&#123; <span class="keyword">return</span> g.high;&#125;).sort(d3.ascending),<span class="number">.25</span>)</span></span><br><span class="line"><span class="actionscript">                    median = d3.quantile(d.map(<span class="function"><span class="keyword">function</span><span class="params">(g)</span> </span>&#123; <span class="keyword">return</span> g.high;&#125;).sort(d3.ascending),<span class="number">.5</span>)</span></span><br><span class="line"><span class="actionscript">                    q3 = d3.quantile(d.map(<span class="function"><span class="keyword">function</span><span class="params">(g)</span> </span>&#123; <span class="keyword">return</span> g.high;&#125;).sort(d3.ascending),<span class="number">.75</span>)</span></span><br><span class="line">                    interQuantileRange = q3 - q1</span><br><span class="line">                    min = q1 - 1.5 * interQuantileRange;</span><br><span class="line">                    max = q3 + 1.5 * interQuantileRange;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span>(&#123;q1: q1, median: median, q3: q3, interQuantileRange: interQuantileRange, min: min, max: max&#125;)</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .entries(data)</span><br><span class="line">                </span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> sumstat2 = d3.nest()</span></span><br><span class="line"><span class="actionscript">                    .key(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> d.month; &#125;)</span></span><br><span class="line"><span class="actionscript">                    .rollup(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    q1 = d3.quantile(d.map(<span class="function"><span class="keyword">function</span><span class="params">(g)</span> </span>&#123; <span class="keyword">return</span> g.low;&#125;).sort(d3.ascending),<span class="number">.25</span>)</span></span><br><span class="line"><span class="actionscript">                    median = d3.quantile(d.map(<span class="function"><span class="keyword">function</span><span class="params">(g)</span> </span>&#123; <span class="keyword">return</span> g.low;&#125;).sort(d3.ascending),<span class="number">.5</span>)</span></span><br><span class="line"><span class="actionscript">                    q3 = d3.quantile(d.map(<span class="function"><span class="keyword">function</span><span class="params">(g)</span> </span>&#123; <span class="keyword">return</span> g.low;&#125;).sort(d3.ascending),<span class="number">.75</span>)</span></span><br><span class="line">                    interQuantileRange = q3 - q1</span><br><span class="line">                    min = q1 - 1.5 * interQuantileRange;</span><br><span class="line">                    max = q3 + 1.5 * interQuantileRange;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span>(&#123;q1: q1, median: median, q3: q3, interQuantileRange: interQuantileRange, min: min, max: max&#125;)</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .entries(data)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> color1 = [<span class="string">"#e85d04"</span>, <span class="string">"#f48c06"</span>, <span class="string">"#faa307"</span>, <span class="string">"#ffba08"</span>];</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> color2 = [<span class="string">"#00b4d8"</span>, <span class="string">"#48cae4"</span>, <span class="string">"#90e0ef"</span>, <span class="string">"#ade8f4"</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> x = d3.scaleBand()</span></span><br><span class="line">                    .range([0, width])</span><br><span class="line"><span class="actionscript">                    .domain([<span class="string">"Jun"</span>, <span class="string">"Jul"</span>, <span class="string">"Aug"</span>])</span></span><br><span class="line">                    .paddingInner(1)</span><br><span class="line">                    .paddingOuter(.5)</span><br><span class="line"><span class="actionscript">                svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>)</span></span><br><span class="line">                    .call(d3.axisBottom(x))</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> y = d3.scaleLinear()</span></span><br><span class="line">                    .domain([13,33])</span><br><span class="line">                    .range([height, 0])</span><br><span class="line"><span class="actionscript">                svg.append(<span class="string">"g"</span>).call(d3.axisLeft(y))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> fillopa = <span class="number">0.8</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                svg.selectAll(<span class="string">"vertLines"</span>)</span></span><br><span class="line">                    .data(sumstat)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"line"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.min))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.max))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"stroke"</span>, color1[<span class="number">1</span>])</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"stroke-dasharray"</span>, (<span class="string">"4, 4"</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> s2offset = <span class="number">20</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> s20 = svg.selectAll(<span class="string">"vertLines"</span>)</span></span><br><span class="line">                    .data(sumstat2)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"line"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)+s2offset)&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)+s2offset)&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.min))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.max))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"stroke"</span>, color2[<span class="number">1</span>])</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"stroke-dasharray"</span>, (<span class="string">"4, 4"</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> boxWidth = <span class="number">100</span>;</span></span><br><span class="line"><span class="actionscript">                svg.selectAll(<span class="string">"boxes"</span>)</span></span><br><span class="line">                    .data(sumstat)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)-boxWidth/<span class="number">2</span>)&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.q3))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.q1)-y(d.value.q3))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"width"</span>, boxWidth )</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"stroke"</span>, color1[<span class="number">1</span>])</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"fill"</span>, color1[<span class="number">0</span>]);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> s21 = svg.selectAll(<span class="string">"boxes"</span>)</span></span><br><span class="line">                    .data(sumstat2)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)-boxWidth/<span class="number">2</span> + s2offset)&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.q3))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.q1)-y(d.value.q3))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"width"</span>, boxWidth )</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"stroke"</span>, color2[<span class="number">1</span>])</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"fill"</span>, color2[<span class="number">0</span>]);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                svg.selectAll(<span class="string">"medianLines"</span>)</span></span><br><span class="line">                    .data(sumstat)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"line"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)-boxWidth/<span class="number">2</span>) &#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)+boxWidth/<span class="number">2</span>) &#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.median))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.median))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"stroke"</span>, color1[<span class="number">2</span>])</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"width"</span>, <span class="number">80</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> s22 = svg.selectAll(<span class="string">"medianLines"</span>)</span></span><br><span class="line">                    .data(sumstat2)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"line"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)-boxWidth/<span class="number">2</span>+s2offset) &#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)+boxWidth/<span class="number">2</span>+s2offset) &#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.median))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.median))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"stroke"</span>, color2[<span class="number">2</span>])</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"width"</span>, <span class="number">80</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> jitterWidth = <span class="number">60</span>;</span></span><br><span class="line"><span class="actionscript">                svg.selectAll(<span class="string">"indPoints"</span>)</span></span><br><span class="line">                    .data(data)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="javascript">                    .attr(<span class="string">"cx"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span>(x(d.month) - jitterWidth/<span class="number">2</span> + <span class="built_in">Math</span>.random()*jitterWidth )&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"cy"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.high))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"fill"</span>, color1[<span class="number">3</span>]);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> s23 = svg.selectAll(<span class="string">"indPoints"</span>)</span></span><br><span class="line">                    .data(data)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="javascript">                    .attr(<span class="string">"cx"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span>(x(d.month) - jitterWidth/<span class="number">2</span> + <span class="built_in">Math</span>.random()*jitterWidth + s2offset )&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"cy"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.low))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"fill"</span>, color2[<span class="number">3</span>]);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p><code>d3.nest()</code>分组数据，然后计算<em>Q</em><sub>1</sub>、<em>Q</em><sub>2</sub>、<em>Q</em><sub>3</sub>、Interquartile range (IQR)、<em>max</em>、<em>min</em> <sup><a href="https://en.wikipedia.org/wiki/Box_plot" target="_blank" rel="noopener">[3]</a></sup>。</p>
<p><em>Q</em><sub>1</sub> 为0.25的数据点，<em>Q</em><sub>2</sub> 为中间数，<em>Q</em><sub>3</sub> 为0.75的数据点，<em>IQR</em> 为四分位差。</p>
<script type="math/tex; mode=display">
IQR = Q{_3} - Q{_1}</script><p>最大值区间：</p>
<script type="math/tex; mode=display">
max = Q{_3} + 1.5IQR</script><p>最小值区间：</p>
<script type="math/tex; mode=display">
min = Q{_1} - 1.5IQR</script><p>后面的数据点用<code>Math.random()</code>增加 <em>x</em> 方向的偏移量，避免集中在一条直线上。</p>
<p>低温的数据直接 copy 高温数据建立的代码就行，然后增加 <em>x</em> 方向的偏移量和透明度，再改个颜色，这样好看许多。</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>首先要了解 boxplot 是什么，几个点怎么计算的。</p>
<p>boxplot 的数据选择一定要选数据点集中的，不然做不起来。</p>
<p>boxplot 可以反映出数据集中在哪里，围绕着哪条线上下波动。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="http://www.weather.com.cn/weather40dn/101120201.shtml" target="_blank" rel="noopener">http://www.weather.com.cn/weather40dn/101120201.shtml</a></p>
<p>[2] <a href="https://www.d3-graph-gallery.com/graph/boxplot_show_individual_points.html" target="_blank" rel="noopener">https://www.d3-graph-gallery.com/graph/boxplot_show_individual_points.html</a></p>
<p>[3] <a href="https://en.wikipedia.org/wiki/Box_plot" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Box_plot</a></p>
]]></content>
      <categories>
        <category>Visualization</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>D3</tag>
      </tags>
  </entry>
  <entry>
    <title>Comparison</title>
    <url>/2020/10/09/Comparison/</url>
    <content><![CDATA[<h2 id="Data-Collection"><a href="#Data-Collection" class="headerlink" title="Data Collection"></a>Data Collection</h2><a id="more"></a>
<p>The raw data are from <a href="https://github.com/ZeningQu/World-Bank-Data-by-Indicators" target="_blank" rel="noopener">Word-Bank-Data-by-Indicators</a> . And I picked the <a href="https://github.com/ZeningQu/World-Bank-Data-by-Indicators/tree/master/environment" target="_blank" rel="noopener">Environment data</a> . </p>
<p>数据来源于 <a href="https://github.com/ZeningQu/World-Bank-Data-by-Indicators" target="_blank" rel="noopener">Word-Bank-Data-by-Indicators</a> . 我挑出了 <a href="https://github.com/ZeningQu/World-Bank-Data-by-Indicators/tree/master/environment" target="_blank" rel="noopener">Environment data</a> . </p>
<p>However, the raw data are large, widely-ranged, and unobservable. So I sorted them in Excel and choose the data of China simply because I’m a Chinese and I want to explore the historical environment changes in China, where I am living now.</p>
<p>So I put forward some questions: </p>
<ul>
<li>Did the environment changed a great deal in a particular time, or it just simply gets better or worse as time goes by?</li>
<li>Does it has anything to do with the economy? Do we just develop by means of changing our environment? </li>
<li>Compared to some countries around us, such as Japan, what can we learn?</li>
</ul>
<h2 id="Visual-Analysis"><a href="#Visual-Analysis" class="headerlink" title="Visual Analysis"></a>Visual Analysis</h2><h3 id="Adjusted-savings"><a href="#Adjusted-savings" class="headerlink" title="Adjusted savings"></a>Adjusted savings</h3><p><img src="https://i.loli.net/2020/10/24/4tdHxinfRMJ2GyK.png" alt="image.png"></p>
<p>很明显可以看出，固定资本消费(consumption of <a href="https://en.wikipedia.org/wiki/Fixed_capital" target="_blank" rel="noopener">fixed capital</a>)是最高的，毕竟中国在发展，在某一方面的投入比重会很大(具体哪一方面不知道)，但同时，二氧化碳的危害也是俱增的，两条折线几乎平行且比重较大。</p>
<p>能源损耗和矿产损耗也是呈现增长的趋势，但可以发现 <code>[1995, 2005]</code> 这个区间，矿产消耗有一段的急剧下滑，猜测跟当时的某个大事件有关(1999年的洪水？猜的)。</p>
<h3 id="Emissions"><a href="#Emissions" class="headerlink" title="Emissions"></a>Emissions</h3><p><img src="https://i.loli.net/2020/10/24/QKk3WYCTRH9aA7D.png" alt="image.png"></p>
<p>氧化气体的排放量逐年增加，同时也可以看出一个特别的波动：1970、1980与1990年的排放量三者均脱离原始趋势而飙升，次年复原。推测是某个事件引起，或者说数据错了。</p>
<p>同时也可以看出，在2002年后，三者增幅明显增加。</p>
<h3 id="Fisheries-Production"><a href="#Fisheries-Production" class="headerlink" title="Fisheries Production"></a>Fisheries Production</h3><p><img src="https://i.loli.net/2020/10/24/ZE46Lfh3B1mKyiT.png" alt="image.png"></p>
<p>1985年以前，以捕鱼业为主。1985年之后，以水产养殖业为主。从中可以看出中国的发展的：随着人民经济水平的提高，从较原始的捕鱼业(自给自足)转向水产养殖业(商品买卖)。</p>
<h3 id="Rents"><a href="#Rents" class="headerlink" title="Rents"></a>Rents</h3><p><img src="https://i.loli.net/2020/10/24/teqo9G2ZNP6yDKC.png" alt="image-20201024201932114.png"></p>
<p>6条曲线，其中天然气、矿产、森林资源非常接近0，可见收入主要是煤和石油。</p>
<p><del>（就是说中国还有大量的地下资源可以开采嘛）</del></p>
<h3 id="Area"><a href="#Area" class="headerlink" title="Area"></a>Area</h3><p><img src="https://i.loli.net/2020/10/24/kUVSTDBOKNLui9x.png" alt="image.png"></p>
<p>陆地和森林面几有基础突起的波动——总觉得是数据错了。</p>
<p>森林面积虽然说逐年增长，但总觉得跟陆地面积比起来还是差了好多。</p>
<h3 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h3><h4 id="Area-amp-Forest"><a href="#Area-amp-Forest" class="headerlink" title="Area &amp; Forest"></a>Area &amp; Forest</h4><p><img src="https://i.loli.net/2020/10/24/KZcJGF6pd51Ms4e.png" alt="image.png"></p>
<p>左上：中日陆地面积对比；左下：1991年至2015年中日森林面积的变化；右：1991年至2015年中日森林面积占陆地面积的比重。</p>
<p>显而易见，中国陆地面积比日本大得多，森林面积也比日本多，但问题在于，中国森林面积占陆地面积的比重是远低于日本的。</p>
<p>虽然说中国森林面积逐年增长，比重也逐年增大，但对于日本森林面积基本维持不变的状况，我们不难思考：是日本的森林面积受限于陆地面积而停止增长，还是说，发展到如此程度后，对森林资源的开发和再生已经达到了一种可持续的动态平衡？</p>
<p><img src="https://i.loli.net/2020/10/24/zNierkafZgVwBL1.png" alt="image.png"></p>
<p>结合该图可知，日本收入来源基本不包含森林，而中国收入来源森林的比重也越来越低，可见，为了我们的环境，不要破坏森林。</p>
<h4 id="Fishing-Production"><a href="#Fishing-Production" class="headerlink" title="Fishing Production"></a>Fishing Production</h4><p><img src="https://i.loli.net/2020/10/24/JLafBIbjz8XFEtv.png" alt="image.png"></p>
<p>1990年是个转折点，之后中国水产超过日本，日本不断降低，中国增幅明显增大。难道说，日本在刻意的保护本国资源，其需要的资源靠进口？</p>
<h4 id="CO2-排放量"><a href="#CO2-排放量" class="headerlink" title="CO2 排放量"></a>CO<sub>2</sub> 排放量</h4><p><img src="https://i.loli.net/2020/10/24/Zhf3ILgAjl5ENkF.png" alt="image.png"></p>
<p>日本二氧化碳排放量挺稳定的，而且比中国低，中国的排放实在是太猛了，而且增幅一直变大。</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><ol>
<li>中国在不断发展，从 CO<sub>2</sub> 、CH<sub>4</sub> 、NO 等排放量可知，环境越来越差。</li>
<li>某些历史时期的突破事件可能源于对环境的破坏，大自然的惩罚才缓解了我们对他的索取与破坏。然后时过境迁，烂事依旧。</li>
<li>煤矿、石油资源不断开发，不可持续，以后迟早耗尽。这点该学日本，靠进口，抑制本土不可再生资源的开发。</li>
<li>为了生物多样性，捕鱼业道理同上，需要适当降低。</li>
<li>森林面积的曲线不够陡，占比还是太低了。</li>
<li>虽然说森林面积在增大，但资源也不断在开发、 CO<sub>2</sub> 排放恐怖增加，对环境的保护力度会明显低于破坏力度。</li>
<li>中国太广了，地貌也不尽相同，没有各个地区的自对比很难得出哪里环境变差，哪里环境得到改善，但可以明确2016年比1960年的环境差了非常多。</li>
</ol>
<h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><p>Too many.</p>
<p>Lazy to paste.</p>
]]></content>
      <categories>
        <category>Visualization</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>D3</tag>
      </tags>
  </entry>
  <entry>
    <title>Force Directed Graph Layout</title>
    <url>/2020/11/20/Force-Directed-Graph-Layout/</url>
    <content><![CDATA[<h1 id="Force-Directed-Graph-Layout"><a href="#Force-Directed-Graph-Layout" class="headerlink" title="Force Directed Graph Layout"></a>Force Directed Graph Layout</h1><a id="more"></a>
<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><h2 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h2><p>对于所有连接起来的相邻点，可把其当成一个整体，计算弹簧弹力的时候，可以只计算一个整体和另一个整体之间的弹簧弹力，然后再把这个力附加到每一个个体中。</p>
<p>同理计算斥力的时候也可取一堆点的平均分布，代替计算两点间的斥力。</p>
<p>我大概就只会这样了，不过计算斥力的时候我并没有用整体算。</p>
<p>计算力的时候，我把引力和弹簧弹力一起算的，用 <code>if</code> 判断是否需要计算弹力。</p>
<p>不考虑随机生成数据所用时间，算法的时间复杂度是 $O(n^2)$ 。</p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>有两层图，颜色浅的那层是初始数据，颜色深的是计算后的数据。</p>
<p>随机生成 200 个节点：</p>
<p><img src="https://i.loli.net/2020/11/29/3bl2ezqfxiRVnsa.png" alt="image.png"></p>
<p>随机生成 800 个节点：</p>
<p><img src="https://i.loli.net/2020/11/29/tiq7W18bGHkPXIa.png" alt="image.png"></p>
<h2 id="Play-amp-Have-Fun"><a href="#Play-amp-Have-Fun" class="headerlink" title="Play &amp; Have Fun"></a>Play &amp; Have Fun</h2><html>
    <meta charset="utf-8">
    <header>force directed graph</header>
    <style>
        #svgHolder {
            position: relative
        }
        .svg2 {
            position: absolute;
            top: 0px;
            left: 0px;
        }
    </style>
    <body>
    <label for="n_cnt">Nodes Count:</label>
    <input type="number" id="n_cnt" name="n_cnt" value="60" min="30" max="1000">
    <button type="button" onclick="update()">Generate</button><br><br>
    <div id="svgHolder">
        <svg id="svgOne" width="590" height="290"/>
        <svg id="svgTwo" class="svg2" width="590" height="290"/>
    </div>
    <script>
        var margin = {top: 10, right: 10, bottom: 10, left: 10},
          width = 600 - margin.left - margin.right,
          height = 300 - margin.top - margin.bottom;
        var svgns = "http://www.w3.org/2000/svg";
        var colorset1 = ['#FFADAD', '#FFC2A9', '#FFD6A5', '#FDFFB6', '#CAFFBF', '#9BF6FF', '#A0C4FF', '#BDB2FF', '#FFC6FF', '#FFFFFC'];
        var colorset2 = ['#F94144', '#F3722C', '#F8961E', '#F9C74F', '#90BE6D', '#52838F', '#577590', '#7209B7', '#B5179E', '#EDF2F4'];
        let o_nodes = [], nodes = [];
        var node_cnt = 60, maxNodeX = width - 2, maxNodeY = height - 2;
        var connect = [], con_fsx = [], con_fsy = [], con_fs = [];
        var L = 50, K_r = 6250, K_s = 1, delta_t = 0.04;
        var MAX_DIS_SQR = 50;// ???
        gen_d();
        draw_old();
        cal_force();
        update_position();
        draw_new()
        function update() {
            document.getElementById('svgOne').innerHTML = "";
            document.getElementById('svgTwo').innerHTML = "";
            o_nodes.length = 0, nodes.length = 0, node_cnt = document.getElementById("n_cnt").value;
            connect.length = 0, con_fsx.length = 0, con_fsy.length = 0, con_fs.length = 0;
            gen_d();
            draw_old();
            cal_force();
            update_position();
            draw_new();
        }
        function update2(_l, _kr, _ks, _dt, _msd) {
            document.getElementById('svgTwo').innerHTML = "";
            if (_l != -1)
                L = _l;
            if (_kr != -1)
                K_r = _kr;
            if (_ks != -1)
                K_s = _ks;
            if (_dt != -1)
                delta_t = _dt;
            if (_msd != -1)
                MAX_DIS_SQR = _msd;
            con_fs.length = 0;
            for (var i = 0; i < con_fsx.length; i++) {
                for (var j = 0; j < con_fsx[i].length; j++) {
                    con_fsx[i][j] = 0;
                    con_fsy[i][j] = 0;
                }
            }
            nodes.length = 0;
            nodes = deepClone(o_nodes);
            cal_force();
            update_position();
            draw_new();
        }
        function deepClone (obj) {
            if (typeof obj !== 'object')
                return obj;
            if (!obj) // obj null
                return obj;
            if (obj instanceof Date)
                return new Date(obj);
            if (obj instanceof RegExp)
                return new RegExp(obj);
            if (obj instanceof Function)
                return obj;
            let newObj;
            if (obj instanceof Array) {
                newObj = [];
                for(let i = 0, len = obj.length; i < len; i++)
                    newObj.push(deepClone(obj[i]));
                return newObj;
            }
            newObj = {};
            for (let key in obj) {
                if (obj.hasOwnProperty(key)) {
                    if (typeof obj[key] !== 'object')
                        newObj[key] = obj[key];
                    else
                        newObj[key] = deepClone(obj[key]);
                }
            }
            return newObj;
        }
        // generate data....
        function gen_d() {
            var temp_cnt = 0, group = 0;
            while (temp_cnt < node_cnt) {//max-min+1 +min
                // generate nodes
                var x0 = Math.floor(Math.random() * (maxNodeX - 1 + 1) ) + 1;
                var y0 = Math.floor(Math.random() * (maxNodeY - 1 + 1) ) + 1;
                var cnt1 = Math.floor(Math.random() * (15 - 2 + 1) ) + 2;
                if (temp_cnt + cnt1 > node_cnt)
                    cnt1 = node_cnt - temp_cnt;
                var range_g = 50;
                var Fr_x = 0, Fr_y = 0, Fs_x = 0, Fs_y = 0;
                var x = x0, y = y0;
                o_nodes[group] = new Array;
                nodes[group] = new Array;
                o_nodes[group].push({x,y,Fr_x,Fr_y,Fs_x,Fs_y});
                nodes[group].push({x,y,Fr_x,Fr_y,Fs_x,Fs_y});
                for (var i = 1; i < cnt1; i++) { // generate group nodes
                    var dx = Math.floor(Math.random() * (range_g - 1 + 1) ) + 1;
                    var dy = Math.floor(Math.random() * (range_g - 1 + 1) ) + 1;
                    var x1 = x0 + dx, y1 = y0 + dy;
                    var x2 = x0 - dx, y2 = y0 - dy;
                    var x, y;
                    if (x1 > maxNodeX || x1 < 0)
                        x = x2;
                    else x = x1;
                    if (y1 > maxNodeY || y1 < 0)
                        y = y2;
                    else y = y1;
                    o_nodes[group].push({x,y,Fr_x,Fr_y,Fs_x,Fs_y});
                    nodes[group].push({x,y,Fr_x,Fr_y,Fs_x,Fs_y});
                }
                // generate connection
                var con0 = [];
                for (var i = 0; i < cnt1; i++) {
                    con0[i] = new Array(cnt1);
                    con0[i].fill(0, 0, cnt1);
                }
                for (var i = 0; i < cnt1 - 1; i++) {
                    for (var j = i + 1; j < cnt1; j++) {
                        var isconnected = Math.floor(Math.random() * 10);
                        if (isconnected >= 6) {
                            con0[i][j] = 1;
                            con0[j][i] = 1;
                        }
                    }
                }
                connect.push(con0);
                group++;
                temp_cnt += cnt1;
            }
            var con1 = [];
            for (var i = 0; i < group; i++) {
                con1[i] = new Array(group);
                con1[i].fill(0, 0, group);
                con_fsx[i] = new Array(group);
                con_fsx[i].fill(0, 0, group);
                con_fsy[i] = new Array(group);
                con_fsy[i].fill(0, 0, group);
            }
            for (var i = 0; i < group - 1; i++) {
                var newCon = Math.floor(Math.random() * group - i) + i;
                con1[newCon][i] = 1;
                con1[i][newCon] = 1;
                for (var j = i + 1; j < group; j++) {
                    var isconnected = Math.floor(Math.random() * 10);
                    if (isconnected >= 6) {
                        con1[i][j] = 1;
                        con1[j][i] = 1;
                    }
                }
            }
            connect.push(con1);
            console.log("connected? : ", connect);
            console.log("now get data: ", o_nodes);
            console.log("copy nodes: ", nodes);
        }
        function cal_force() {
            // repulsion force between all pairs
            // if they are connected, calculate spring force
            for (var i1 = 0; i1 < nodes.length; i1++) {
                for (var i2 = 0; i2 < nodes[i1].length - 1; i2++) {
                    var node1 = nodes[i1][i2];
                    for(var j1 = i1; j1 < nodes.length; j1++) {
                        for (var j2 = 0; j2 < nodes[j1].length; j2++) {
                            if (j1 == i1 && j2 <= i2)
                                continue;
                            var node2 = nodes[j1][j2];
                            var dx = node2.x - node1.x;
                            var dy = node2.y - node1.y;
                            if (dx != 0 || dy != 0) {
                                var disSqu = dx*dx + dy*dy;
                                var dis = Math.sqrt(disSqu);
                                var force = K_r / disSqu;
                                var fx = force * dx / dis;
                                var fy = force * dy / dis;
                                node1.Fr_x = node1.Fr_x - fx;
                                node1.Fr_y = node1.Fr_y - fy;
                                node2.Fr_x = node2.Fr_x + fx;
                                node2.Fr_y = node2.Fr_y + fy;
                                if (i1 == j1 && connect[i1][i2][j2] == 1) {
                                    var force2 = K_s * (dis - L);
                                    var fx2 = force2 * dx / dis;
                                    var fy2 = force2 * dy / dis;
                                    node1.Fs_x = node1.Fs_x + fx2;
                                    node1.Fs_y = node1.Fs_y + fy2;
                                    node2.Fs_x = node2.Fs_x - fx2;
                                    node2.Fs_y = node2.Fs_y - fy2;
                                }
                                if (i2 == 0 && j2 == 0 && i1 != j1) {
                                    if (connect[nodes.length][i1][j1] == 1) {
                                        var force3 = K_s * (dis - L);
                                        var fx3 = force3 * dx / dis;
                                        var fy3 = force3 * dy / dis;
                                        con_fsx[i1][j1] += fx3;
                                        con_fsy[i1][j1] += fy3;
                                        con_fsx[j1][i1] -= fx3;
                                        con_fsy[j1][i1] -= fy3;
                                    }
                                }
                                nodes[i1][i2] = node1;
                                nodes[j1][j2] = node2;
                            }
                        }
                    }
                }
            }
            for (var i = 0; i < con_fsx.length; i++) {
                var x = 0, y = 0;
                for (var j = 0; j < con_fsx.length; j++) {
                    x = x + con_fsx[i][j];
                    y = y + con_fsy[i][j];
                }
                con_fs.push({x,y});
            }
        }
        function update_position() {
            for (var i1 = 0; i1 < nodes.length; i1++) {
                for (var i2  = 0; i2 < nodes[i1].length; i2++) {
                    var _node = nodes[i1][i2];
                    var dx = delta_t * (_node.Fr_x + _node.Fs_x + con_fs[i1].x);
                    var dy = delta_t * (_node.Fr_y + _node.Fs_y + con_fs[i1].y);
                    var displacement_Sqr = dx*dx + dy*dy;
                    if (displacement_Sqr > MAX_DIS_SQR) {
                        var disS = Math.sqrt(MAX_DIS_SQR / displacement_Sqr);
                        dx = dx * disS;
                        dy = dy * disS;
                    }
                    _node.x = _node.x + dx;
                    _node.y = _node.y + dy;
                    nodes[i1][i2] = _node;
                }
            }
            console.log("old & new nodes are here: ", o_nodes, nodes);
        }
        function draw_old() {
            // draw line
            for (var i = 0; i < connect.length; i++) {
                var temp_con = connect[i];
                for (var j = 0; j < temp_con.length - 1; j++) {
                    for (var k = j + 1; k < temp_con.length; k++) {
                        if (temp_con[j][k] == 1) {
                            var x1, x2, y1, y2;
                            var lineStroke = '#ffdab9';
                            var lineLen = 0.5;
                            if (i == connect.length - 1) {
                                x1 = o_nodes[j][0].x, y1 = o_nodes[j][0].y;
                                x2 = o_nodes[k][0].x, y2 = o_nodes[k][0].y;
                                lineStroke = '#f08080';
                                lineLen = 1.0;
                            }
                            else{
                                x1 = o_nodes[i][j].x, y1 = o_nodes[i][j].y;
                                x2 = o_nodes[i][k].x, y2 = o_nodes[i][k].y;
                            }
                            var line = document.createElementNS(svgns, 'line');
                            line.setAttributeNS(null, 'x1', x1);
                            line.setAttributeNS(null, 'x2', x2);
                            line.setAttributeNS(null, 'y1', y1);
                            line.setAttributeNS(null, 'y2', y2);
                            line.setAttributeNS(null, 'stroke', lineStroke);
                            line.setAttributeNS(null, 'stroke-width', lineLen);
                            document.getElementById('svgOne').appendChild(line);
                        }
                    }
                }
            }
            // draw circle
            for (var i = 0; i < o_nodes.length; i++) {
                for (j = 0; j < o_nodes[i].length; j++) {
                    var getx = o_nodes[i][j].x;
                    var gety = o_nodes[i][j].y;
                    var circle = document.createElementNS(svgns, 'circle');
                    circle.setAttributeNS(null, "cx", getx);
                    circle.setAttributeNS(null, "cy", gety);
                    circle.setAttributeNS(null, "r", 3);
                    circle.setAttributeNS(null, "fill", colorset1[i % colorset1.length]);
                    circle.setAttributeNS(null, "stroke", "none");
                    document.getElementById('svgOne').appendChild(circle);
                }
            }
        }
        function draw_new() {
            // draw line
            for (var i = 0; i < connect.length; i++) {
                var temp_con = connect[i];
                for (var j = 0; j < temp_con.length - 1; j++) {
                    for (var k = j + 1; k < temp_con.length; k++) {
                        if (temp_con[j][k] == 1) {
                            var x1, x2, y1, y2;
                            var lineStroke = '#ffcad4';
                            var lineLen = 1.0;
                            if (i == connect.length - 1) {
                                x1 = nodes[j][0].x, y1 = nodes[j][0].y;
                                x2 = nodes[k][0].x, y2 = nodes[k][0].y;
                                lineStroke = '#9e2a2b';
                                lineLen = 1.5;
                            }
                            else{
                                x1 = nodes[i][j].x, y1 = nodes[i][j].y;
                                x2 = nodes[i][k].x, y2 = nodes[i][k].y;
                            }
                            var line = document.createElementNS(svgns, 'line');
                            line.setAttributeNS(null, 'x1', x1);
                            line.setAttributeNS(null, 'x2', x2);
                            line.setAttributeNS(null, 'y1', y1);
                            line.setAttributeNS(null, 'y2', y2);
                            line.setAttributeNS(null, 'stroke', lineStroke);
                            line.setAttributeNS(null, 'stroke-width', lineLen);
                            document.getElementById('svgTwo').appendChild(line);
                        }
                    }
                }
            }
            // draw circle
            for (var i = 0; i < nodes.length; i++) {
                for (j = 0; j < nodes[i].length; j++) {
                    var getx = nodes[i][j].x;
                    var gety = nodes[i][j].y;
                    var circle = document.createElementNS(svgns, 'circle');
                    circle.setAttributeNS(null, "cx", getx);
                    circle.setAttributeNS(null, "cy", gety);
                    circle.setAttributeNS(null, "r", 4.5);
                    circle.setAttributeNS(null, "fill", colorset2[i % colorset2.length]);
                    circle.setAttributeNS(null, "stroke", "none");
                    document.getElementById('svgTwo').appendChild(circle);
                }
            }
        }
    </script>
    <div class="slidecontainer" id="slidecon">
        <label>L: </label>
        <input type="range" min="10" max="1000" value="50" class="slider" id="s_L" oninput="document.getElementById('l_L').innerHTML = this.value" onchange="update2(this.value, -1, -1, -1, -1)">
        <label id="l_L">50</label>
        <br>
        <label>K_s: </label>
        <input type="range" min="100" max="10000" value="6250" class="slider" id="s_S" oninput="document.getElementById('l_S').innerHTML = this.value" onchange="update2(-1, this.value, -1, -1, -1)">
        <label id="l_S">6250</label>
        <br>
        <label>K_r: </label>
        <input type="range" min="0.01" max="5" value="1" step="0.01" class="slider" id="s_R" oninput="document.getElementById('l_R').innerHTML = this.value" onchange="update2(-1, -1, this.value, -1, -1)">
        <label id="l_R">1</label>
        <br>
        <label>Δt: </label>
        <input type="range" min="0.005" max="5.000" value="0.04" step="0.001" class="slider" id="s_T" oninput="document.getElementById('l_T').innerHTML = this.value" onchange="update2(-1, -1, -1, this.value, -1)">
        <label id="l_T">0.04</label>
        <br>
        <label>MAX_DIS_SQR: </label>
        <input type="range" min="10" max="200" value="50" class="slider" id="s_M" oninput="document.getElementById('l_M').innerHTML = this.value" onchange="update2(-1, -1, -1, -1, this.value)">
        <label id="l_M">50</label>
        <br>
    </div>
    </body>
</html>

<h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;header&gt;force directed graph&lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        #svgHolder &#123;</span></span><br><span class="line"><span class="regexp">            position: relative</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .svg2 &#123;</span></span><br><span class="line"><span class="regexp">            position: absolute;</span></span><br><span class="line"><span class="regexp">            top: 0px;</span></span><br><span class="line"><span class="regexp">            left: 0px;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span> = <span class="string">"n_cnt"</span>&gt;Nodes Count:&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type = "number" id = "n_cnt" name = "n_cnt" value = "60" min = "30" max = "1000"&gt;&lt;/i</span>nput&gt;</span><br><span class="line">    &lt;button type = <span class="string">"button"</span> onclick = <span class="string">"update()"</span>&gt;Generate&lt;<span class="regexp">/button&gt;&lt;br&gt;&lt;/</span>br&gt;</span><br><span class="line">    &lt;div id = <span class="string">"svgHolder"</span>&gt;</span><br><span class="line">        &lt;svg id = <span class="string">"svgOne"</span> width =<span class="string">"1190"</span> height = <span class="string">"590"</span>&gt;&lt;<span class="regexp">/svg&gt;</span></span><br><span class="line"><span class="regexp">        &lt;svg id = "svgTwo" class = "svg2" width ="1190" height = "590"&gt;&lt;/</span>svg&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var margin = &#123;top: 10, right: 10, bottom: 10, left: 10&#125;,</span></span><br><span class="line"><span class="regexp">          width = 1200 - margin.left - margin.right,</span></span><br><span class="line"><span class="regexp">          height = 600 - margin.top - margin.bottom;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        var svgns = "http:/</span><span class="regexp">/www.w3.org/</span><span class="number">2000</span>/svg<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var colorset1 = ['#FFADAD', '#FFC2A9', '#FFD6A5', '#FDFFB6', '#CAFFBF', '#9BF6FF', '#A0C4FF', '#BDB2FF', '#FFC6FF', '#FFFFFC'];</span></span><br><span class="line"><span class="string">        var colorset2 = ['#F94144', '#F3722C', '#F8961E', '#F9C74F', '#90BE6D', '#52838F', '#577590', '#7209B7', '#B5179E', '#EDF2F4'];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        let o_nodes = [], nodes = [];</span></span><br><span class="line"><span class="string">        var node_cnt = 60, maxNodeX = width - 2, maxNodeY = height - 2;</span></span><br><span class="line"><span class="string">        var connect = [], con_fsx = [], con_fsy = [], con_fs = [];</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        var L = 50, K_r = 6250, K_s = 1, delta_t = 0.04;</span></span><br><span class="line"><span class="string">        var MAX_DIS_SQR = 50;// ???</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        gen_d();</span></span><br><span class="line"><span class="string">        draw_old();</span></span><br><span class="line"><span class="string">        cal_force();</span></span><br><span class="line"><span class="string">        update_position();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        draw_new()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        function update() &#123;</span></span><br><span class="line"><span class="string">            document.getElementById('svgOne').innerHTML = "</span><span class="string">";</span></span><br><span class="line"><span class="string">            document.getElementById('svgTwo').innerHTML = "</span><span class="string">";</span></span><br><span class="line"><span class="string">            o_nodes.length = 0, nodes.length = 0, node_cnt = document.getElementById("</span>n_cnt<span class="string">").value;</span></span><br><span class="line"><span class="string">            connect.length = 0, con_fsx.length = 0, con_fsy.length = 0, con_fs.length = 0;</span></span><br><span class="line"><span class="string">            gen_d();</span></span><br><span class="line"><span class="string">            draw_old();</span></span><br><span class="line"><span class="string">            cal_force();</span></span><br><span class="line"><span class="string">            update_position();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            draw_new();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        function update2(_l, _kr, _ks, _dt, _msd) &#123;</span></span><br><span class="line"><span class="string">            document.getElementById('svgTwo').innerHTML = "</span><span class="string">";</span></span><br><span class="line"><span class="string">            if (_l != -1)</span></span><br><span class="line"><span class="string">                L = _l;</span></span><br><span class="line"><span class="string">            if (_kr != -1)</span></span><br><span class="line"><span class="string">                K_r = _kr;</span></span><br><span class="line"><span class="string">            if (_ks != -1)</span></span><br><span class="line"><span class="string">                K_s = _ks;</span></span><br><span class="line"><span class="string">            if (_dt != -1)</span></span><br><span class="line"><span class="string">                delta_t = _dt;</span></span><br><span class="line"><span class="string">            if (_msd != -1)</span></span><br><span class="line"><span class="string">                MAX_DIS_SQR = _msd;</span></span><br><span class="line"><span class="string">            con_fs.length = 0;</span></span><br><span class="line"><span class="string">            for (var i = 0; i &lt; con_fsx.length; i++) &#123;</span></span><br><span class="line"><span class="string">                for (var j = 0; j &lt; con_fsx[i].length; j++) &#123;</span></span><br><span class="line"><span class="string">                    con_fsx[i][j] = 0;</span></span><br><span class="line"><span class="string">                    con_fsy[i][j] = 0;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            nodes.length = 0;</span></span><br><span class="line"><span class="string">            nodes = deepClone(o_nodes);</span></span><br><span class="line"><span class="string">               </span></span><br><span class="line"><span class="string">            cal_force();</span></span><br><span class="line"><span class="string">            update_position();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            draw_new();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        function deepClone (obj) &#123;</span></span><br><span class="line"><span class="string">            if (typeof obj !== 'object')</span></span><br><span class="line"><span class="string">                return obj;</span></span><br><span class="line"><span class="string">            if (!obj) // obj null</span></span><br><span class="line"><span class="string">                return obj;</span></span><br><span class="line"><span class="string">            if (obj instanceof Date)</span></span><br><span class="line"><span class="string">                return new Date(obj);</span></span><br><span class="line"><span class="string">            if (obj instanceof RegExp)</span></span><br><span class="line"><span class="string">                return new RegExp(obj);</span></span><br><span class="line"><span class="string">            if (obj instanceof Function)</span></span><br><span class="line"><span class="string">                return obj;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            let newObj;</span></span><br><span class="line"><span class="string">            if (obj instanceof Array) &#123;</span></span><br><span class="line"><span class="string">                newObj = [];</span></span><br><span class="line"><span class="string">                for(let i = 0, len = obj.length; i &lt; len; i++)</span></span><br><span class="line"><span class="string">                    newObj.push(deepClone(obj[i]));</span></span><br><span class="line"><span class="string">                return newObj;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            newObj = &#123;&#125;;</span></span><br><span class="line"><span class="string">            for (let key in obj) &#123;</span></span><br><span class="line"><span class="string">                if (obj.hasOwnProperty(key)) &#123;</span></span><br><span class="line"><span class="string">                    if (typeof obj[key] !== 'object')</span></span><br><span class="line"><span class="string">                        newObj[key] = obj[key];</span></span><br><span class="line"><span class="string">                    else</span></span><br><span class="line"><span class="string">                        newObj[key] = deepClone(obj[key]);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            return newObj;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // generate data....</span></span><br><span class="line"><span class="string">        function gen_d() &#123;</span></span><br><span class="line"><span class="string">            var temp_cnt = 0, group = 0;</span></span><br><span class="line"><span class="string">            while (temp_cnt &lt; node_cnt) &#123;//max-min+1 +min</span></span><br><span class="line"><span class="string">                // generate nodes</span></span><br><span class="line"><span class="string">                var x0 = Math.floor(Math.random() * (maxNodeX - 1 + 1) ) + 1;</span></span><br><span class="line"><span class="string">                var y0 = Math.floor(Math.random() * (maxNodeY - 1 + 1) ) + 1;</span></span><br><span class="line"><span class="string">                var cnt1 = Math.floor(Math.random() * (15 - 2 + 1) ) + 2;</span></span><br><span class="line"><span class="string">                if (temp_cnt + cnt1 &gt; node_cnt)</span></span><br><span class="line"><span class="string">                    cnt1 = node_cnt - temp_cnt;</span></span><br><span class="line"><span class="string">                var range_g = 50;</span></span><br><span class="line"><span class="string">                var Fr_x = 0, Fr_y = 0, Fs_x = 0, Fs_y = 0;</span></span><br><span class="line"><span class="string">                var x = x0, y = y0;</span></span><br><span class="line"><span class="string">                o_nodes[group] = new Array;</span></span><br><span class="line"><span class="string">                nodes[group] = new Array;</span></span><br><span class="line"><span class="string">                o_nodes[group].push(&#123;x,y,Fr_x,Fr_y,Fs_x,Fs_y&#125;);</span></span><br><span class="line"><span class="string">                nodes[group].push(&#123;x,y,Fr_x,Fr_y,Fs_x,Fs_y&#125;);</span></span><br><span class="line"><span class="string">                for (var i = 1; i &lt; cnt1; i++) &#123; // generate group nodes</span></span><br><span class="line"><span class="string">                    var dx = Math.floor(Math.random() * (range_g - 1 + 1) ) + 1;</span></span><br><span class="line"><span class="string">                    var dy = Math.floor(Math.random() * (range_g - 1 + 1) ) + 1;</span></span><br><span class="line"><span class="string">                    var x1 = x0 + dx, y1 = y0 + dy;</span></span><br><span class="line"><span class="string">                    var x2 = x0 - dx, y2 = y0 - dy;</span></span><br><span class="line"><span class="string">                    var x, y;</span></span><br><span class="line"><span class="string">                    if (x1 &gt; maxNodeX || x1 &lt; 0)</span></span><br><span class="line"><span class="string">                        x = x2;</span></span><br><span class="line"><span class="string">                    else x = x1;</span></span><br><span class="line"><span class="string">                    if (y1 &gt; maxNodeY || y1 &lt; 0)</span></span><br><span class="line"><span class="string">                        y = y2;</span></span><br><span class="line"><span class="string">                    else y = y1;</span></span><br><span class="line"><span class="string">                    o_nodes[group].push(&#123;x,y,Fr_x,Fr_y,Fs_x,Fs_y&#125;);</span></span><br><span class="line"><span class="string">                    nodes[group].push(&#123;x,y,Fr_x,Fr_y,Fs_x,Fs_y&#125;);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                // generate connection</span></span><br><span class="line"><span class="string">                var con0 = [];</span></span><br><span class="line"><span class="string">                for (var i = 0; i &lt; cnt1; i++) &#123;</span></span><br><span class="line"><span class="string">                    con0[i] = new Array(cnt1);</span></span><br><span class="line"><span class="string">                    con0[i].fill(0, 0, cnt1);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                for (var i = 0; i &lt; cnt1 - 1; i++) &#123;</span></span><br><span class="line"><span class="string">                    for (var j = i + 1; j &lt; cnt1; j++) &#123;</span></span><br><span class="line"><span class="string">                        var isconnected = Math.floor(Math.random() * 10);</span></span><br><span class="line"><span class="string">                        if (isconnected &gt;= 6) &#123;</span></span><br><span class="line"><span class="string">                            con0[i][j] = 1;</span></span><br><span class="line"><span class="string">                            con0[j][i] = 1;</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                connect.push(con0);</span></span><br><span class="line"><span class="string">                group++;</span></span><br><span class="line"><span class="string">                temp_cnt += cnt1;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            var con1 = [];</span></span><br><span class="line"><span class="string">            for (var i = 0; i &lt; group; i++) &#123;</span></span><br><span class="line"><span class="string">                con1[i] = new Array(group);</span></span><br><span class="line"><span class="string">                con1[i].fill(0, 0, group);</span></span><br><span class="line"><span class="string">                con_fsx[i] = new Array(group);</span></span><br><span class="line"><span class="string">                con_fsx[i].fill(0, 0, group);</span></span><br><span class="line"><span class="string">                con_fsy[i] = new Array(group);</span></span><br><span class="line"><span class="string">                con_fsy[i].fill(0, 0, group);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            for (var i = 0; i &lt; group - 1; i++) &#123;</span></span><br><span class="line"><span class="string">                var newCon = Math.floor(Math.random() * group - i) + i;</span></span><br><span class="line"><span class="string">                con1[newCon][i] = 1;</span></span><br><span class="line"><span class="string">                con1[i][newCon] = 1;</span></span><br><span class="line"><span class="string">                for (var j = i + 1; j &lt; group; j++) &#123;</span></span><br><span class="line"><span class="string">                    var isconnected = Math.floor(Math.random() * 10);</span></span><br><span class="line"><span class="string">                    if (isconnected &gt;= 6) &#123;</span></span><br><span class="line"><span class="string">                        con1[i][j] = 1;</span></span><br><span class="line"><span class="string">                        con1[j][i] = 1;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            connect.push(con1);</span></span><br><span class="line"><span class="string">            console.log("</span>connected? : <span class="string">", connect);</span></span><br><span class="line"><span class="string">            console.log("</span>now <span class="keyword">get</span> data: ", o_nodes);</span><br><span class="line">            console.log("copy nodes: ", nodes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function cal_force() &#123;</span><br><span class="line">            <span class="comment">// repulsion force between all pairs</span></span><br><span class="line">            <span class="comment">// if they are connected, calculate spring force</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i1 = <span class="number">0</span>; i1 &lt; nodes.length; i1++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i2 = <span class="number">0</span>; i2 &lt; nodes[i1].length - <span class="number">1</span>; i2++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> node1 = nodes[i1][i2];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> j1 = i1; j1 &lt; nodes.length; j1++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> j2 = <span class="number">0</span>; j2 &lt; nodes[j1].length; j2++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (j1 == i1 &amp;&amp; j2 &lt;= i2)</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            <span class="keyword">var</span> node2 = nodes[j1][j2];</span><br><span class="line">                            <span class="keyword">var</span> dx = node2.x - node1.x;</span><br><span class="line">                            <span class="keyword">var</span> dy = node2.y - node1.y;</span><br><span class="line">                            <span class="keyword">if</span> (dx != <span class="number">0</span> || dy != <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">var</span> disSqu = dx*dx + dy*dy;</span><br><span class="line">                                <span class="keyword">var</span> dis = <span class="built_in">Math</span>.sqrt(disSqu);</span><br><span class="line">                                <span class="keyword">var</span> force = K_r / disSqu;</span><br><span class="line">                                <span class="keyword">var</span> fx = force * dx / dis;</span><br><span class="line">                                <span class="keyword">var</span> fy = force * dy / dis;</span><br><span class="line">                                node1.Fr_x = node1.Fr_x - fx;</span><br><span class="line">                                node1.Fr_y = node1.Fr_y - fy;</span><br><span class="line">                                node2.Fr_x = node2.Fr_x + fx;</span><br><span class="line">                                node2.Fr_y = node2.Fr_y + fy;</span><br><span class="line">                                <span class="keyword">if</span> (i1 == j1 &amp;&amp; connect[i1][i2][j2] == <span class="number">1</span>) &#123;</span><br><span class="line">                                    <span class="keyword">var</span> force2 = K_s * (dis - L);</span><br><span class="line">                                    <span class="keyword">var</span> fx2 = force2 * dx / dis;</span><br><span class="line">                                    <span class="keyword">var</span> fy2 = force2 * dy / dis;</span><br><span class="line">                                    node1.Fs_x = node1.Fs_x + fx2;</span><br><span class="line">                                    node1.Fs_y = node1.Fs_y + fy2;</span><br><span class="line">                                    node2.Fs_x = node2.Fs_x - fx2;</span><br><span class="line">                                    node2.Fs_y = node2.Fs_y - fy2;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (i2 == <span class="number">0</span> &amp;&amp; j2 == <span class="number">0</span> &amp;&amp; i1 != j1) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (connect[nodes.length][i1][j1] == <span class="number">1</span>) &#123;</span><br><span class="line">                                        <span class="keyword">var</span> force3 = K_s * (dis - L);</span><br><span class="line">                                        <span class="keyword">var</span> fx3 = force3 * dx / dis;</span><br><span class="line">                                        <span class="keyword">var</span> fy3 = force3 * dy / dis;</span><br><span class="line">                                        con_fsx[i1][j1] += fx3;</span><br><span class="line">                                        con_fsy[i1][j1] += fy3;</span><br><span class="line">                                        con_fsx[j1][i1] -= fx3;</span><br><span class="line">                                        con_fsy[j1][i1] -= fy3;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                nodes[i1][i2] = node1;</span><br><span class="line">                                nodes[j1][j2] = node2;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; con_fsx.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; con_fsx.length; j++) &#123;</span><br><span class="line">                    x = x + con_fsx[i][j];</span><br><span class="line">                    y = y + con_fsy[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">                con_fs.push(&#123;x,y&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">update_position</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i1 = <span class="number">0</span>; i1 &lt; nodes.length; i1++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i2  = <span class="number">0</span>; i2 &lt; nodes[i1].length; i2++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> _node = nodes[i1][i2];</span><br><span class="line">                    <span class="keyword">var</span> dx = delta_t * (_node.Fr_x + _node.Fs_x + con_fs[i1].x);</span><br><span class="line">                    <span class="keyword">var</span> dy = delta_t * (_node.Fr_y + _node.Fs_y + con_fs[i1].y);</span><br><span class="line">                    <span class="keyword">var</span> displacement_Sqr = dx*dx + dy*dy;</span><br><span class="line">                    <span class="keyword">if</span> (displacement_Sqr &gt; MAX_DIS_SQR) &#123;</span><br><span class="line">                        <span class="keyword">var</span> disS = <span class="built_in">Math</span>.sqrt(MAX_DIS_SQR / displacement_Sqr);</span><br><span class="line">                        dx = dx * disS;</span><br><span class="line">                        dy = dy * disS;</span><br><span class="line">                    &#125;</span><br><span class="line">                    _node.x = _node.x + dx;</span><br><span class="line">                    _node.y = _node.y + dy;</span><br><span class="line">                    nodes[i1][i2] = _node;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"old &amp; new nodes are here: "</span>, o_nodes, nodes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">draw_old</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// draw line</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; connect.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp_con = connect[i];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; temp_con.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> k = j + <span class="number">1</span>; k &lt; temp_con.length; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (temp_con[j][k] == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">var</span> x1, x2, y1, y2;</span><br><span class="line">                            <span class="keyword">var</span> lineStroke = <span class="string">'#ffdab9'</span>;</span><br><span class="line">                            <span class="keyword">var</span> lineLen = <span class="number">0.5</span>;</span><br><span class="line">                            <span class="keyword">if</span> (i == connect.length - <span class="number">1</span>) &#123;</span><br><span class="line">                                x1 = o_nodes[j][<span class="number">0</span>].x, y1 = o_nodes[j][<span class="number">0</span>].y;</span><br><span class="line">                                x2 = o_nodes[k][<span class="number">0</span>].x, y2 = o_nodes[k][<span class="number">0</span>].y;</span><br><span class="line">                                lineStroke = <span class="string">'#f08080'</span>;</span><br><span class="line">                                lineLen = <span class="number">1.0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span>&#123;</span><br><span class="line">                                x1 = o_nodes[i][j].x, y1 = o_nodes[i][j].y;</span><br><span class="line">                                x2 = o_nodes[i][k].x, y2 = o_nodes[i][k].y;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">var</span> line = <span class="built_in">document</span>.createElementNS(svgns, <span class="string">'line'</span>);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'x1'</span>, x1);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'x2'</span>, x2);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'y1'</span>, y1);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'y2'</span>, y2);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'stroke'</span>, lineStroke);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'stroke-width'</span>, lineLen);</span><br><span class="line">                            <span class="built_in">document</span>.getElementById(<span class="string">'svgOne'</span>).appendChild(line);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// draw circle</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; o_nodes.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; o_nodes[i].length; j++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> getx = o_nodes[i][j].x;</span><br><span class="line">                    <span class="keyword">var</span> gety = o_nodes[i][j].y;</span><br><span class="line">                    <span class="keyword">var</span> circle = <span class="built_in">document</span>.createElementNS(svgns, <span class="string">'circle'</span>);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"cx"</span>, getx);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"cy"</span>, gety);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"r"</span>, <span class="number">3</span>);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"fill"</span>, colorset1[i % colorset1.length]);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"stroke"</span>, <span class="string">"none"</span>);</span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">'svgOne'</span>).appendChild(circle);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">draw_new</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// draw line</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; connect.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp_con = connect[i];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; temp_con.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> k = j + <span class="number">1</span>; k &lt; temp_con.length; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (temp_con[j][k] == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">var</span> x1, x2, y1, y2;</span><br><span class="line">                            <span class="keyword">var</span> lineStroke = <span class="string">'#ffcad4'</span>;</span><br><span class="line">                            <span class="keyword">var</span> lineLen = <span class="number">1.0</span>;</span><br><span class="line">                            <span class="keyword">if</span> (i == connect.length - <span class="number">1</span>) &#123;</span><br><span class="line">                                x1 = nodes[j][<span class="number">0</span>].x, y1 = nodes[j][<span class="number">0</span>].y;</span><br><span class="line">                                x2 = nodes[k][<span class="number">0</span>].x, y2 = nodes[k][<span class="number">0</span>].y;</span><br><span class="line">                                lineStroke = <span class="string">'#9e2a2b'</span>;</span><br><span class="line">                                lineLen = <span class="number">1.5</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span>&#123;</span><br><span class="line">                                x1 = nodes[i][j].x, y1 = nodes[i][j].y;</span><br><span class="line">                                x2 = nodes[i][k].x, y2 = nodes[i][k].y;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">var</span> line = <span class="built_in">document</span>.createElementNS(svgns, <span class="string">'line'</span>);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'x1'</span>, x1);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'x2'</span>, x2);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'y1'</span>, y1);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'y2'</span>, y2);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'stroke'</span>, lineStroke);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'stroke-width'</span>, lineLen);</span><br><span class="line">                            <span class="built_in">document</span>.getElementById(<span class="string">'svgTwo'</span>).appendChild(line);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// draw circle</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; nodes[i].length; j++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> getx = nodes[i][j].x;</span><br><span class="line">                    <span class="keyword">var</span> gety = nodes[i][j].y;</span><br><span class="line">                    <span class="keyword">var</span> circle = <span class="built_in">document</span>.createElementNS(svgns, <span class="string">'circle'</span>);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"cx"</span>, getx);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"cy"</span>, gety);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"r"</span>, <span class="number">4.5</span>);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"fill"</span>, colorset2[i % colorset2.length]);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"stroke"</span>, <span class="string">"none"</span>);</span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">'svgTwo'</span>).appendChild(circle);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class = "slidecontainer" id = "slidecon"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;label&gt;L: &lt;/</span>label&gt;</span><br><span class="line">        &lt;input type = <span class="string">"range"</span> min = <span class="string">"10"</span> max=<span class="string">"1000"</span> value = <span class="string">"50"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"slider"</span></span><br><span class="line">            id = <span class="string">"s_L"</span> oninput = <span class="string">"document.getElementById('l_L').innerHTML = this.value"</span></span><br><span class="line">            onchange = <span class="string">"update2(this.value, -1, -1, -1, -1)"</span> /&gt;</span><br><span class="line">        &lt;label id = <span class="string">"l_L"</span>&gt;<span class="number">50</span>&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br&gt;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        &lt;label&gt;K_s: &lt;/</span>label&gt;</span><br><span class="line">        &lt;input type = <span class="string">"range"</span> min = <span class="string">"100"</span> max=<span class="string">"10000"</span> value = <span class="string">"6250"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"slider"</span></span><br><span class="line">            id = <span class="string">"s_S"</span> oninput = <span class="string">"document.getElementById('l_S').innerHTML = this.value"</span></span><br><span class="line">            onchange = <span class="string">"update2(-1, this.value, -1, -1, -1)"</span> /&gt;</span><br><span class="line">        &lt;label id = <span class="string">"l_S"</span>&gt;<span class="number">6250</span>&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;label&gt;K_r: &lt;/</span>label&gt;</span><br><span class="line">        &lt;input type = <span class="string">"range"</span> min = <span class="string">"0.01"</span> max=<span class="string">"5"</span> value = <span class="string">"1"</span> step = <span class="string">"0.01"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"slider"</span></span><br><span class="line">            id = <span class="string">"s_R"</span> oninput = <span class="string">"document.getElementById('l_R').innerHTML = this.value"</span></span><br><span class="line">            onchange = <span class="string">"update2(-1, -1, this.value, -1, -1)"</span> /&gt;</span><br><span class="line">        &lt;label id = <span class="string">"l_R"</span>&gt;<span class="number">1</span>&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;label&gt;Δt: &lt;/</span>label&gt;</span><br><span class="line">        &lt;input type = <span class="string">"range"</span> min = <span class="string">"0.005"</span> max=<span class="string">"5.000"</span> value = <span class="string">"0.04"</span> step = <span class="string">"0.001"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"slider"</span></span><br><span class="line">            id = <span class="string">"s_T"</span> oninput = <span class="string">"document.getElementById('l_T').innerHTML = this.value"</span></span><br><span class="line">            onchange = <span class="string">"update2(-1, -1, -1, this.value, -1)"</span> /&gt;</span><br><span class="line">        &lt;label id = <span class="string">"l_T"</span>&gt;<span class="number">0.04</span>&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;label&gt;MAX_DIS_SQR: &lt;/</span>label&gt;</span><br><span class="line">        &lt;input type = <span class="string">"range"</span> min = <span class="string">"10"</span> max=<span class="string">"200"</span> value = <span class="string">"50"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"slider"</span></span><br><span class="line">            id = <span class="string">"s_M"</span> oninput = <span class="string">"document.getElementById('l_M').innerHTML = this.value"</span></span><br><span class="line">            onchange = <span class="string">"update2(-1, -1, -1, -1, this.value)"</span> /&gt;</span><br><span class="line">        &lt;label id = <span class="string">"l_M"</span>&gt;<span class="number">50</span>&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Visualization</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Debug threads using GDB</title>
    <url>/2021/03/26/Debug-threads-using-GDB/</url>
    <content><![CDATA[<h2 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h2><p><code>gdb ./program_name</code> . Start the debugger.</p>
<p><code>disass Function</code> . Show the disassemble code of Function.</p>
<p><code>b x</code> . Set a breakpoint at line x.</p>
<a id="more"></a>
<p><code>b Function</code> . Set a breakpoint at the beginning of function.</p>
<p><code>info b</code> . List the information of breakpoints.</p>
<p><code>info r</code> . List all values of registers.</p>
<p><code>list Function</code> . Show the source code of function.</p>
<p><code>p currentThread</code> . Show the address of the main thread.</p>
<p><code>run</code> . Run from the beginning.</p>
<p><code>c</code> . Continue running.</p>
<p><code>ni/si</code> . Run a step. </p>
<p><code>x *address</code> . Show the function in address.</p>
<h2 id="Get-started"><a href="#Get-started" class="headerlink" title="Get started"></a>Get started</h2><p>In threads directory: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb ./nachos</span><br></pre></td></tr></table></figure>
<p>Then, show the disassemble code of main function: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">disass main</span><br></pre></td></tr></table></figure>
<p>We can see a few addresses of functions: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0x00001404 &lt;+23&gt;:    call   0x12f0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">0x0000142d &lt;+64&gt;:    call   0x2727 &lt;Initialize(int, char**)&gt;</span><br><span class="line">0x00001435 &lt;+72&gt;:    call   0x32ce &lt;ThreadTest()&gt;</span><br><span class="line">0x0000143a &lt;+77&gt;:    call   0x3730 &lt;SynchTest()&gt;</span><br><span class="line">0x00001449 &lt;+92&gt;:    jle    0x1490 &lt;main(int, char**)+163&gt;</span><br><span class="line">0x00001462 &lt;+117&gt;:   call   0x10e0 &lt;strcmp@plt&gt;</span><br><span class="line">0x0000146c &lt;+127&gt;:   jne    0x1480 &lt;main(int, char**)+147&gt;</span><br><span class="line">0x00001478 &lt;+139&gt;:   call   0x11c0 &lt;printf@plt&gt;</span><br><span class="line">0x0000148e &lt;+161&gt;:   jmp    0x1446 &lt;main(int, char**)+89&gt;</span><br><span class="line">0x0000149c &lt;+175&gt;:   call   0x2cfc &lt;Thread::Finish()&gt;</span><br></pre></td></tr></table></figure>
<p>Start from initialize . <code>disass Initialize</code> but nothing we are looking for.</p>
<p>In <code>ThreadTest()</code> :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0x00003343 &lt;+117&gt;:   call   0x3273 &lt;SimpleThread(int)&gt;</span><br></pre></td></tr></table></figure>
<p>The address of <code>SimpleThread(int)</code> is <code>0x3273</code> .</p>
<p>In <code>SynchTest()</code> , nothing. </p>
<p>Oh, just get started… Now dig into the questions.</p>
<h2 id="Find-the-address-of-Funtion"><a href="#Find-the-address-of-Funtion" class="headerlink" title="Find the address of Funtion"></a>Find the address of Funtion</h2><p>Use <code>b function</code> to set breakpoint, then it returns the address.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) b InterruptEnable</span><br><span class="line">Breakpoint 4 at 0x56558025: file thread.cc, line 242.</span><br><span class="line">(gdb) b SimpleThread</span><br><span class="line">Breakpoint 5 at 0x56558273: file threadtest.cc, line 26.</span><br><span class="line">(gdb) b ThreadFinish</span><br><span class="line">Breakpoint 6 at 0x56557ffa: file thread.cc, line 241.</span><br><span class="line">(gdb) b ThreadRoot</span><br><span class="line">Breakpoint 7 at 0x56559e7a</span><br></pre></td></tr></table></figure>
<h2 id="Find-the-address-of-threads-both-main-and-forked"><a href="#Find-the-address-of-threads-both-main-and-forked" class="headerlink" title="Find the address of threads (both main and forked)"></a>Find the address of threads (both main and forked)</h2><p>Let’s look into the main function, in the first few lines, we can see there is a Initialize function call. Look into it, there seems to be nothing major. Then look down, we see <code>ThreadTest()</code>, then look into it. It calls <code>SimpleThread()</code> in <code>threadtest.cc</code> :</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SimpleThread</span><span class="params">(_int which)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">for</span> (num = <span class="number">0</span>; num &lt; <span class="number">5</span>; num++) &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"*** thread %d looped %d times\n"</span>, (<span class="keyword">int</span>) which, num);</span><br><span class="line">        currentThread-&gt;Yield();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can see a <code>Yield()</code> function, which makes the current thread to give up CPU to another thread, so we make a breakpoint here. When it yields, it’s obviously another thread running, so we can see the address of thread.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) list SimpleThread</span><br><span class="line">(gdb) b 31</span><br><span class="line">Breakpoint 1 at 0x32ae: file threadtest.cc, line 31.</span><br><span class="line">run</span><br><span class="line">Starting program: /root/OS/threads/nachos </span><br><span class="line">*** thread 0 looped 0 times</span><br><span class="line"></span><br><span class="line">Breakpoint 1, SimpleThread (which=0) at threadtest.cc:31</span><br><span class="line">31              currentThread-&gt;Yield();</span><br><span class="line">(gdb) p currentThread</span><br><span class="line"><span class="meta">$</span><span class="bash">1 = (Thread *) 0x56563ca0</span></span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line"></span><br><span class="line">Breakpoint 1, SimpleThread (which=1) at threadtest.cc:31</span><br><span class="line">31              currentThread-&gt;Yield();</span><br><span class="line">(gdb) p currentThread</span><br><span class="line"><span class="meta">$</span><span class="bash">2 = (Thread *) 0x56563d00</span></span><br></pre></td></tr></table></figure>
<p>We can see the thread switch and also the address of threads using <code>p currentThread</code></p>
<p>So the main thread of the Nachos is <code>0x56563ca0</code> , and the forked thread created by the main thread is <code>0x56563d00</code> .</p>
<h2 id="Digging-into-SWITCH"><a href="#Digging-into-SWITCH" class="headerlink" title="Digging into SWITCH()"></a>Digging into <code>SWITCH()</code></h2><blockquote>
<p>When the main thread executes <code>SWITCH()</code> function for the first time, to what address  the CPU returns when it executes the last instruction <code>ret</code> of <code>SWITCH()</code>? What location in the  program that address is referred to? </p>
<p>When the forked thread executes <code>SWITCH()</code> function for the first time, to what  address the CPU returns when it executes the last instruction <code>ret</code> of <code>SWITCH()</code>? What  location in the program that address is referred to?</p>
</blockquote>
<p>Looking through all files in the directory, one thing is sure that the <code>SWITCH()</code> function is written in disassemble language.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) disass SWITCH</span><br><span class="line">Dump of assembler code for function SWITCH:</span><br><span class="line">   0x56559e84 &lt;+0&gt;:     mov    %eax,0x5655e054</span><br><span class="line">   0x56559e89 &lt;+5&gt;:     mov    0x4(%esp),%eax</span><br><span class="line">   0x56559e8d &lt;+9&gt;:     mov    %ebx,0x8(%eax)</span><br><span class="line">   0x56559e90 &lt;+12&gt;:    mov    %ecx,0xc(%eax)</span><br><span class="line">   0x56559e93 &lt;+15&gt;:    mov    %edx,0x10(%eax)</span><br><span class="line">   0x56559e96 &lt;+18&gt;:    mov    %esi,0x18(%eax)</span><br><span class="line">   0x56559e99 &lt;+21&gt;:    mov    %edi,0x1c(%eax)</span><br><span class="line">   0x56559e9c &lt;+24&gt;:    mov    %ebp,0x14(%eax)</span><br><span class="line">   0x56559e9f &lt;+27&gt;:    mov    %esp,(%eax)</span><br><span class="line">   0x56559ea1 &lt;+29&gt;:    mov    0x5655e054,%ebx</span><br><span class="line">   0x56559ea7 &lt;+35&gt;:    mov    %ebx,0x4(%eax)</span><br><span class="line">   0x56559eaa &lt;+38&gt;:    mov    (%esp),%ebx</span><br><span class="line">   0x56559ead &lt;+41&gt;:    mov    %ebx,0x20(%eax)</span><br><span class="line">   0x56559eb0 &lt;+44&gt;:    mov    0x8(%esp),%eax</span><br><span class="line">   0x56559eb4 &lt;+48&gt;:    mov    0x4(%eax),%ebx</span><br><span class="line">   0x56559eb7 &lt;+51&gt;:    mov    %ebx,0x5655e054</span><br><span class="line">   0x56559ebd &lt;+57&gt;:    mov    0x8(%eax),%ebx</span><br><span class="line">   0x56559ec0 &lt;+60&gt;:    mov    0xc(%eax),%ecx</span><br><span class="line">   0x56559ec3 &lt;+63&gt;:    mov    0x10(%eax),%edx</span><br><span class="line">   0x56559ec6 &lt;+66&gt;:    mov    0x18(%eax),%esi</span><br><span class="line">   0x56559ec9 &lt;+69&gt;:    mov    0x1c(%eax),%edi</span><br><span class="line">   0x56559ecc &lt;+72&gt;:    mov    0x14(%eax),%ebp</span><br><span class="line">   0x56559ecf &lt;+75&gt;:    mov    (%eax),%esp</span><br><span class="line">   0x56559ed1 &lt;+77&gt;:    mov    0x20(%eax),%eax</span><br><span class="line">   0x56559ed4 &lt;+80&gt;:    mov    %eax,(%esp)</span><br><span class="line">   0x56559ed7 &lt;+83&gt;:    mov    0x5655e054,%eax</span><br><span class="line">   0x56559edc &lt;+88&gt;:    ret    </span><br><span class="line">   0x56559edd &lt;+89&gt;:    xchg   %ax,%ax</span><br><span class="line">   0x56559edf &lt;+91&gt;:    nop</span><br></pre></td></tr></table></figure>
<p>In line &lt;+80&gt;, make a breakpoint, <code>run</code>, and look into registers using <code>info r</code> , then show the location by <code>x address</code> .</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) b *0x56559ed4</span><br><span class="line">Breakpoint 2 at 0x56559ed4</span><br><span class="line">(gdb) run</span><br><span class="line">Starting program: /root/OS/threads/nachos </span><br><span class="line">*** thread 0 looped 0 times</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x56559ed4 in SWITCH ()</span><br><span class="line"></span><br><span class="line">(gdb) info r</span><br><span class="line">eax            0x56559e76          1448451702</span><br><span class="line">.............................................</span><br><span class="line">(gdb) x 0x56559e76</span><br><span class="line">0x56559e76 &lt;ThreadRoot&gt;:        0x52e58955</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x56559ed4 in SWITCH ()</span><br><span class="line">(gdb) info r</span><br><span class="line">eax            0x56556a24          1448438308</span><br><span class="line">.............................................</span><br><span class="line">(gdb) x 0x56556a24</span><br><span class="line">0x56556a24 &lt;Scheduler::Run(Thread*)+144&gt;:       0x8d10c483</span><br></pre></td></tr></table></figure>
<p>The CPU returns to address <code>0x56559e76</code> , which located to <code>&lt;ThreadRoot&gt;</code> when it executes the last instruction <code>ret</code> of <code>SWITCH()</code> for the first time when the main thread executes <code>SWITCH()</code> function, and the second time it returns to <code>0x56556a24</code> locating to <code>&lt;Scheduler::Run(Thread*)+144&gt;</code> .</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GCD &amp; 二叉搜索树</title>
    <url>/2020/06/07/GCD-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    <content><![CDATA[<h1 id="GCD-amp-二叉搜索树"><a href="#GCD-amp-二叉搜索树" class="headerlink" title="GCD &amp; 二叉搜索树"></a><strong>GCD &amp; 二叉搜索树</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有一些数，这些数要拼成一棵树。</span><br><span class="line">此树为二叉搜索树，且任意树边相连的两个节点的gcd都超过1。</span><br><span class="line">求这些数是否满足要求。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行一个整数 t，表示数据组数。</span><br><span class="line">对于每组数据，第一行输入一个 n，表示数的个数。</span><br><span class="line">接下来一行有 n 个数，保证输入是升序的。</span><br><span class="line">t ≤ 5，n ≤ 700，ai ≤ 1e9。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每组数据输出一行，如果能够造出来满足题目描述的树，输出Yes，否则输出No。</span><br><span class="line">无行末空格。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">3 6 9 18 36 108</span><br><span class="line">Output: </span><br><span class="line">Yes</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">7 17</span><br><span class="line">9</span><br><span class="line">4 8 10 12 15 18 33 44 81</span><br><span class="line">Output: </span><br><span class="line">No</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      5000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>一开始我是完全当作平衡二叉搜索树来做了，赛后补题才发现只是普通的二叉搜索树……</p>
<p>当时的思路是这样的：</p>
<p>中间位置为 root，分为左右两半，每半的中间位置是 father node，再分为左右两半……以此递归，可以确定节点以及其左右孩子，即确定数组的某位置与哪些位置相连，就像数组模拟的堆结构一样。</p>
<p><img src="https://i.loli.net/2020/06/11/VJabzdpCnRwy1hx.png" alt="bstree.png"></p>
<p>然而这棵树并不平衡，不可用数组这么“偷懒”，(按这么做的话样例 2 是错的，81不符合，当时我怎么就没发现呢。赛后补题觉得样例2好奇怪，看了好久才明白不是平衡二叉搜索树……)</p>
<p>既然他不平衡，如果要建树(我是觉得肯定不可能去写二叉树结构的，太费时间了)插入的时候就很有不确定性，有些节点无法明确插在哪，所以肯定不是要写树的结构。</p>
<p>然后一头雾水了。参考别人解法的时候发现这是个区间 dp 问题。</p>
<p>用两个数组 <code>l[i][j]</code>, <code>r[i][j]</code> 表示以 <em>i</em> 为父节点，向左到 <em>j</em>、向右到 <em>j</em> 可以到达的左子树、右子树。用 <code>dp[i][j]</code> 表示 <em>i</em>, <em>j</em> 可以构成一棵树。</p>
<p>若 <code>l[k][i] = r[k][j] = true</code>，<code>dp[i][j] = true</code>，<em>i</em> 和 <em>j</em> 以 <em>k</em> 为父节点。</p>
<p>状态转移方程为：</p>
<script type="math/tex; mode=display">
l_{j+1,i} |=gcd(a_{j+1},a_k)，i≤k≤j</script><script type="math/tex; mode=display">
r_{i-1,j} |=gcd(a_{i-1},a_k)，i≤k≤j</script><p>初始化时将 <code>l[i][i] = r[i][i] =true</code>，表示当 <em>i</em> 左右子树为空，符合题意。</p>
<p>结果返回 <code>dp[1][n]</code> 表示这个数组是否能建树。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">750</span>;</span><br><span class="line"><span class="keyword">int</span> arr[maxN];</span><br><span class="line"><span class="keyword">bool</span> dp[maxN][maxN], l[maxN][maxN], r[maxN][maxN], g[maxN][maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> _a, <span class="keyword">int</span> _b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> _b == <span class="number">0</span> ? _a : gcd(_b, _a % _b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">has_gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> gcd(a, b) &gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBST_GCD</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n - i + <span class="number">1</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt;= i + j - <span class="number">1</span>; k++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (l[k][j] &amp;&amp; r[k][i + j - <span class="number">1</span>]) &#123;</span><br><span class="line">					dp[j][i + j - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">					l[i + j][j] |= g[i + j][k];</span><br><span class="line">					r[j - <span class="number">1</span>][i + j - <span class="number">1</span>] |= g[j - <span class="number">1</span>][k];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dp[<span class="number">1</span>][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">10</span>; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n + <span class="number">10</span>; j++) &#123;</span><br><span class="line">				l[i][j] = <span class="literal">false</span>;</span><br><span class="line">				r[i][j] = <span class="literal">false</span>;</span><br><span class="line">				dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			l[i][i] = <span class="literal">true</span>;</span><br><span class="line">			r[i][i] = <span class="literal">true</span>;</span><br><span class="line">			dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">				g[i][j] = has_gcd(arr[i], arr[j]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (isBST_GCD(n))</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>GCD</tag>
      </tags>
  </entry>
  <entry>
    <title>GL/glut.h</title>
    <url>/2020/09/17/GL-glut-h/</url>
    <content><![CDATA[<h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><a id="more"></a>
<h2 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h2><h3 id="glutInit"><a href="#glutInit" class="headerlink" title="glutInit()"></a>glutInit()</h3><p><code>glutInit(&amp;argc, argv);</code>    Initialize the GLUT library.</p>
<ul>
<li><p><code>argc</code>: A pointer to the program’s unmodified <code>argc</code> variable from <code>main</code>. Upon return, the value pointed to by <code>argc</code> will be updated, because <code>glutInit</code> extracts any command line options intended for the <code>GLUT</code> library.</p>
</li>
<li><p><code>argv</code>: The program’s unmodified <code>argv</code> variable from main. Like <code>argc</code>, the data for argv will be updated because <code>glutInit</code> extracts any command line options understood by the <code>GLUT</code> library.</p>
</li>
</ul>
<h3 id="glutInitDisplayMode"><a href="#glutInitDisplayMode" class="headerlink" title="glutInitDisplayMode()"></a>glutInitDisplayMode()</h3><p><code>void glutInitDisplayMode(MODE);</code>    sets the <em>initial display mode</em>.</p>
<h4 id="MODE"><a href="#MODE" class="headerlink" title="MODE"></a>MODE</h4><ul>
<li>GLUT_RGBA / GLUT_RGB</li>
</ul>
<p>Bit mask to select an RGBA mode window. This is the default if neither <code>GLUT_RGBA</code> nor <code>GLUT_INDEX</code> are specified.</p>
<ul>
<li>GLUT_INDEX</li>
</ul>
<p>Bit mask to select a color index mode window. This overrides <code>GLUT_RGBA</code> if it is also specified.</p>
<ul>
<li>GLUT_SINGLE</li>
</ul>
<p>Bit mask to select a single buffered window. This is the default if neither <code>GLUT_DOUBLE</code> or <code>GLUT_SINGLE</code> are specified.</p>
<ul>
<li>GLUT_DOUBLE</li>
</ul>
<p>Bit mask to select a double buffered window. This overrides <code>GLUT_SINGLE</code> if it is also specified.</p>
<ul>
<li>GLUT_ACCUM</li>
</ul>
<p>Bit mask to select a window with an accumulation buffer.</p>
<ul>
<li>GLUT_ALPHA</li>
</ul>
<p>Bit mask to select a window with an alpha component to the color buffer(s).</p>
<ul>
<li>GLUT_DEPTH</li>
</ul>
<p>Bit mask to select a window with a depth buffer.</p>
<ul>
<li>GLUT_STENCIL</li>
</ul>
<p>Bit mask to select a window with a stencil buffer.</p>
<ul>
<li>GLUT_MULTISAMPLE</li>
</ul>
<p>Bit mask to select a window with multisampling support. If multisampling is not available, a non-multisampling window will automatically be chosen. Note: both the OpenGL client-side and server-side implementations must support the <code>GLX_SAMPLE_SGIS</code> extension for multisampling to be available.</p>
<ul>
<li>GLUT_STEREO</li>
</ul>
<p>Bit mask to select a stereo window.</p>
<ul>
<li>GLUT_LUMINANCE</li>
</ul>
<p>Bit mask to select a window with a “luminance’’ color model. This model provides the functionality of OpenGL’s RGBA color model, but the green and blue components are not maintained in the frame buffer. Instead each pixel’s red component is converted to an index between zero and <code>glutGet(GLUT_WINDOW_COLORMAP_SIZE)-1</code> and looked up in a per-window color map to determine the color of pixels within the window. The initial colormap of <code>GLUT_LUMINANCE</code> windows is initialized to be a linear gray ramp, but can be modified with GLUT’s colormap routines.</p>
<h3 id="glutInitWindowSize-glutInitWindowPosition"><a href="#glutInitWindowSize-glutInitWindowPosition" class="headerlink" title="glutInitWindowSize(), glutInitWindowPosition()"></a>glutInitWindowSize(), glutInitWindowPosition()</h3><p><code>glutInitWindowSize(int width, int height);</code></p>
<p><code>glutInitWindowPosition(int x, int y);</code></p>
<h3 id="glutCreateWindow"><a href="#glutCreateWindow" class="headerlink" title="glutCreateWindow()"></a>glutCreateWindow()</h3><p><code>glutCreateWindow(string window_name);</code></p>
<h2 id="DIsplay"><a href="#DIsplay" class="headerlink" title="DIsplay"></a>DIsplay</h2><h3 id="glclear-glClearColor"><a href="#glclear-glClearColor" class="headerlink" title="glclear(), glClearColor()"></a>glclear(), glClearColor()</h3><p><code>void glclear(GLbitfield mask);</code></p>
<ul>
<li><p><code>GL_COLOR_BUFFER_BIT</code></p>
<p>Indicates the buffers currently enabled for color writing.</p>
</li>
<li><p><code>GL_DEPTH_BUFFER_BIT</code></p>
<p>Indicates the depth buffer.</p>
</li>
<li><p><code>GL_ACCUM_BUFFER_BIT</code></p>
<p>Indicates the accumulation buffer.</p>
</li>
<li><p><code>GL_STENCIL_BUFFER_BIT</code></p>
<p>Indicates the stencil buffer.</p>
</li>
</ul>
<p>The value to which each buffer is cleared depends on the setting of the clear value for that buffer.</p>
<p><code>void glClearColor(red, green, blue, (alpha))</code></p>
<p><code>glClearColor(, , ,)</code> specifies the red, green, blue, and alpha values used by <code>glClear(, , , )</code> to clear the color buffers. Values specified by <code>glClearColor(, , ,)</code> are clamped to the range 0 1 .</p>
<h3 id="glColor-red-green-blue-alpha"><a href="#glColor-red-green-blue-alpha" class="headerlink" title="glColor(red, green, blue, (alpha))"></a>glColor(red, green, blue, (alpha))</h3><p>set the current color. </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3b</span><span class="params">(<span class="keyword">byte</span>, <span class="keyword">byte</span>, <span class="keyword">byte</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3s</span><span class="params">(short, short, short)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3i</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3f</span><span class="params">(<span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3d</span><span class="params">(<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3ub</span><span class="params">(ubyte, ubyte, ubyte)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3us</span><span class="params">(ushort, ushort, ushort)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3ui</span><span class="params">(uint, uint, uint)</span></span>;</span><br><span class="line">-------</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor4b</span><span class="params">(<span class="keyword">byte</span>, <span class="keyword">byte</span>, <span class="keyword">byte</span>, <span class="keyword">byte</span>)</span></span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="glBegin-glEnd-glFlush"><a href="#glBegin-glEnd-glFlush" class="headerlink" title="glBegin(), glEnd(), glFlush()"></a>glBegin(), glEnd(), glFlush()</h3><h4 id="description"><a href="#description" class="headerlink" title="description"></a>description</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glBegin</span><span class="params">(GLenum mode)</span></span>;</span><br><span class="line">...<span class="comment">//(do something)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glEnd</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>Specifies the primitive or primitives that will be created from vertices presented between glBegin and the subsequent glEnd.</p>
<h4 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h4><p><code>GL_POINTS</code>, <code>GL_LINES</code>, <code>GL_LINE_STRIP</code>, <code>GL_LINE_LOOP</code>, <code>GL_TRIANGLES</code>, <code>GL_TRIANGLE_STRIP</code>, <code>GL_TRIANGLE_FAN</code>, <code>GL_QUADS</code>, <code>GL_QUAD_STRIP</code>, and <code>GL_POLYGON</code>.</p>
<ul>
<li><code>GL_POINTS</code></li>
</ul>
<p>Treats each vertex as a single point. Vertex $n$ defines point $n$. $N$ points are drawn.</p>
<ul>
<li><code>GL_LINES</code></li>
</ul>
<p>Treats each pair of vertices as an independent line segment. Vertices $2n - 1$ and  $2n$ define line $n$. $N/2$ lines are drawn.</p>
<ul>
<li><code>GL_LINE_STRIP</code></li>
</ul>
<p>Draws a connected group of line segments from the first vertex to the last. Vertices $n$ and $n + 1$ define line $n$. $N - 1$ lines are drawn.</p>
<ul>
<li><code>GL_LINE_LOOP</code></li>
</ul>
<p>Draws a connected group of line segments from the first vertex to the last, then back to the first. Vertices $n$ and $n + 1$ define line $n$. The last line, however, is defined by vertices $N$ and $1$ . $N$ lines are drawn.</p>
<ul>
<li><code>GL_TRIANGLES</code></li>
</ul>
<p>Treats each triplet of vertices as an independent triangle. Vertices $3n - 2$ , $3 n - 1$ , and $3n$ define triangle $n$. $N /3$ triangles are drawn.</p>
<ul>
<li><code>GL_TRIANGLE_STRIP</code></li>
</ul>
<p>Draws a connected group of triangles. One triangle is defined for each vertex presented after the first two vertices. For odd $n$, vertices $n$, $n + 1$ , and $n + 2$ define triangle $n$. For even $n$, vertices $n + 1$ , $n$, and $n + 2$ define triangle $n$. $N - 2$ triangles are drawn.</p>
<ul>
<li><code>GL_TRIANGLE_FAN</code></li>
</ul>
<p>Draws a connected group of triangles. One triangle is defined for each vertex presented after the first two vertices. Vertices $1$ , $n + 1$ , and $n + 2$ define triangle $n$. $N - 2$ triangles are drawn.</p>
<ul>
<li><code>GL_QUADS</code></li>
</ul>
<p>Treats each group of four vertices as an independent quadrilateral. Vertices $4 ⁢ n - 3$ , $4 ⁢ n - 2$ , $4 ⁢ n - 1$ , and $4 ⁢ n $ define quadrilateral $n$. $N/4$ quadrilaterals are drawn.</p>
<ul>
<li><code>GL_QUAD_STRIP</code></li>
</ul>
<p>Draws a connected group of quadrilaterals. One quadrilateral is defined for each pair of vertices presented after the first pair. Vertices $2 ⁢ n - 1$ , $2 ⁢ n$ , $2 ⁢ n + 2$ , and $2 ⁢ n + 1$ define quadrilateral $n$. $N/2 - 1$ quadrilaterals are drawn. Note that the order in which vertices are used to construct a quadrilateral from strip data is different from that used with independent data.</p>
<ul>
<li><code>GL_POLYGON</code></li>
</ul>
<p>Draws a single, convex polygon. Vertices $1$ through $N$ define this polygon.</p>
<h3 id="glFlush"><a href="#glFlush" class="headerlink" title="glFlush()"></a>glFlush()</h3><p>Force execution of GL commands in finite time.</p>
<h3 id="glVertex-x-y-z-w-…"><a href="#glVertex-x-y-z-w-…" class="headerlink" title="glVertex(x, y, z, w, …)"></a>glVertex(x, y, z, w, …)</h3><p>Specify a vertex.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex2s</span><span class="params">(short, short)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex2i</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex2f</span><span class="params">(<span class="keyword">float</span>, <span class="keyword">float</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex2d</span><span class="params">(<span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex3s</span><span class="params">(, , )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex3i</span><span class="params">(, , )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex3f</span><span class="params">(, , )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex3d</span><span class="params">(, , )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex4s</span><span class="params">(, , , )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex4i</span><span class="params">(, , , )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex4f</span><span class="params">(, , , )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex4d</span><span class="params">(, , , )</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="glPointSize"><a href="#glPointSize" class="headerlink" title="glPointSize()"></a>glPointSize()</h3><p>Specify the diameter of rasterized points.</p>
<p><code>void glPointSize(float size)</code>. The initial value is 1.</p>
<h3 id="glMatrixMode"><a href="#glMatrixMode" class="headerlink" title="glMatrixMode()"></a>glMatrixMode()</h3><p>Specify which matrix is the current matrix.</p>
<p><code>void glMatrixMode(Glenum mode);</code></p>
<ul>
<li><code>GL_MODELVIEW</code></li>
</ul>
<p>Applies subsequent matrix operations to the modelview matrix stack.</p>
<ul>
<li><code>GL_PROJECTION</code></li>
</ul>
<p>Applies subsequent matrix operations to the projection matrix stack.</p>
<ul>
<li><code>GL_TEXTURE</code></li>
</ul>
<p>Applies subsequent matrix operations to the texture matrix stack.</p>
<ul>
<li><code>GL_COLOR</code></li>
</ul>
<p>Applies subsequent matrix operations to the color matrix stack.</p>
<p>To find out which matrix stack is currently the target of all matrix operations, call <code>glGet()</code> with argument <code>GL_MATRIX_MODE</code>. The initial value is <code>GL_MODELVIEW</code>.</p>
<h3 id="gluOrtho2D"><a href="#gluOrtho2D" class="headerlink" title="gluOrtho2D()"></a>gluOrtho2D()</h3><p>Define a 2D orthographic projection matrix. </p>
<p><code>void gluOrtho2D(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top);</code></p>
<h3 id="glutMouseFunc"><a href="#glutMouseFunc" class="headerlink" title="glutMouseFunc()"></a>glutMouseFunc()</h3><p><code>void glutMouseFunc(void (*func)(int button, int state, int x, int y));</code> sets the mouse callback for the <em>current window</em>.</p>
<p>The <code>button</code> parameter is one of <code>GLUT_LEFT_BUTTON</code>, <code>GLUT_MIDDLE_BUTTON</code>, or <code>GLUT_RIGHT_BUTTON</code>.</p>
<p>The <code>state</code> parameter is either <code>GLUT_UP</code> or <code>GLUT_DOWN</code> indicating whether the callback was due to a release or press respectively.</p>
<p>Passing <code>NULL</code> to <code>glutMouseFunc</code> disables the generation of mouse callbacks.</p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.opengl.org/resources/libraries/glut/" target="_blank" rel="noopener">https://www.opengl.org/resources/libraries/glut/</a></p>
<p><a href="https://www.khronos.org/registry/OpenGL-Refpages/" target="_blank" rel="noopener">https://www.khronos.org/registry/OpenGL-Refpages/</a></p>
]]></content>
      <categories>
        <category>CG</category>
      </categories>
      <tags>
        <tag>GLUT</tag>
      </tags>
  </entry>
  <entry>
    <title>Grouped Bar</title>
    <url>/2020/09/25/Grouped-Bar/</url>
    <content><![CDATA[<blockquote>
<p>不同地区、不同季度销售量。</p>
</blockquote>
<a id="more"></a>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>表格给出的数据具有同类项：同季度或者同地区。</p>
<p>可以把相同季度的数据组合，以区域为横轴，销售量为纵轴，每个季度中画出4个季度的销售量(方案1)。</p>
<p>也可以反过来，以季度为横轴，销售量为纵轴，每个季度中画出3个区域的销售量(方案2)。</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>Sales of different Regions and Quarters<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"https://d3js.org/d3.v4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"sales"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// title</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> p = d3.select(<span class="string">"body"</span>)</span></span><br><span class="line"><span class="actionscript">            .selectAll(<span class="string">"p"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"color"</span>,<span class="string">"#1979a9"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>,<span class="string">"24px"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// dimensions and margins</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> margin = &#123; top: <span class="number">10</span>, right: <span class="number">30</span>, bottom: <span class="number">20</span>, left: <span class="number">50</span> &#125;,</span></span><br><span class="line">          width = 460 - margin.left - margin.right,</span><br><span class="line">          height = 400 - margin.top - margin.bottom;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// append the svg object to the body of the page</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> svg = d3.select(<span class="string">"#sales"</span>)</span></span><br><span class="line"><span class="actionscript">            .append(<span class="string">"svg"</span>)</span></span><br><span class="line"><span class="actionscript">              .attr(<span class="string">"width"</span>, width + margin.left + margin.right)</span></span><br><span class="line"><span class="actionscript">              .attr(<span class="string">"height"</span>, height + margin.top + margin.bottom)</span></span><br><span class="line"><span class="actionscript">            .append(<span class="string">"g"</span>) <span class="comment">// group</span></span></span><br><span class="line"><span class="actionscript">              .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Data</span></span></span><br><span class="line"><span class="actionscript">          d3.csv(<span class="string">"https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/01/quarter_region_data.csv"</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// List of subgroups = header of the csv files = soil condition here</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> subgroups = data.columns.slice(<span class="number">1</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// List of groups = species here = value of the first column called group -&gt; I show them on the X axis</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> groups = d3.map(data, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> (d.group) &#125;).keys()</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Add X axis</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> x = d3.scaleBand()</span></span><br><span class="line">            .domain(groups)</span><br><span class="line">            .range([0, width])</span><br><span class="line">            .padding([0.4])</span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>)</span></span><br><span class="line">            .call(d3.axisBottom(x).tickSize(0));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Add Y axis</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> y = d3.scaleLinear()</span></span><br><span class="line">            .domain([0, 90])</span><br><span class="line">            .range([height, 0]);</span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"g"</span>)</span></span><br><span class="line">            .call(d3.axisLeft(y));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Another scale for subgroup position?</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> xSubgroup = d3.scaleBand()</span></span><br><span class="line">            .domain(subgroups)</span><br><span class="line">            .range([0, x.bandwidth()])</span><br><span class="line">            .padding([0.2])</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// color</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> color = d3.scaleOrdinal()</span></span><br><span class="line">            .domain(subgroups)</span><br><span class="line"><span class="actionscript">            .range([<span class="string">'#248760'</span>,<span class="string">'#e33617'</span>,<span class="string">'#ecb814'</span>,<span class="string">'#66abdd'</span>])</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> gbars = svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">            .selectAll(<span class="string">"g"</span>)</span></span><br><span class="line">            .data(data)</span><br><span class="line">            .enter()</span><br><span class="line"><span class="actionscript">            .append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> <span class="string">"translate("</span> + x(d.group) + <span class="string">",0)"</span>; &#125;);</span></span><br><span class="line"><span class="actionscript">          gbars.selectAll(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">            .data(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> subgroups.map(<span class="function"><span class="keyword">function</span><span class="params">(key)</span> </span>&#123; <span class="keyword">return</span> &#123;key: key, value: d[key]&#125;; &#125;); &#125;)</span></span><br><span class="line"><span class="actionscript">            .enter().append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> xSubgroup(d.key); &#125;)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> y(d.value); &#125;)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"width"</span>, xSubgroup.bandwidth())</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> height - y(d.value); &#125;)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"fill"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> color(d.key); &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>,<span class="number">5</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>,<span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"Sales"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cx"</span>,<span class="number">280</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cy"</span>,<span class="number">10</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"fill"</span>, color(<span class="number">1</span>))</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cx"</span>,<span class="number">280</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cy"</span>,<span class="number">30</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"fill"</span>, color(<span class="number">2</span>))</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cx"</span>,<span class="number">280</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cy"</span>,<span class="number">50</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"fill"</span>, color(<span class="number">3</span>))</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cx"</span>,<span class="number">280</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cy"</span>,<span class="number">70</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"fill"</span>, color(<span class="number">4</span>))</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">290</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">10</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"Quarter 1"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">290</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">30</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"Quarter 2"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">290</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">50</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"Quarter 3"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">290</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">70</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"Quarter 4"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line">          &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><h4 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>Sales of different Quarters and Regions<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"https://d3js.org/d3.v4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"sales"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// title</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> p = d3.select(<span class="string">"body"</span>)</span></span><br><span class="line"><span class="actionscript">            .selectAll(<span class="string">"p"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"color"</span>, <span class="string">"#1979a9"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>,<span class="string">"24px"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// dimensions and margins</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> margin = &#123; top: <span class="number">10</span>, right: <span class="number">30</span>, bottom: <span class="number">20</span>, left: <span class="number">50</span> &#125;,</span></span><br><span class="line">          width = 460 - margin.left - margin.right,</span><br><span class="line">          height = 400 - margin.top - margin.bottom;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// append the svg object to the body of the page</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> svg = d3.select(<span class="string">"#sales"</span>)</span></span><br><span class="line"><span class="actionscript">            .append(<span class="string">"svg"</span>)</span></span><br><span class="line"><span class="actionscript">              .attr(<span class="string">"width"</span>, width + margin.left + margin.right)</span></span><br><span class="line"><span class="actionscript">              .attr(<span class="string">"height"</span>, height + margin.top + margin.bottom)</span></span><br><span class="line"><span class="actionscript">            .append(<span class="string">"g"</span>) <span class="comment">// group</span></span></span><br><span class="line"><span class="actionscript">              .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Data</span></span></span><br><span class="line"><span class="actionscript">          d3.csv(<span class="string">"https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/01/region_quarter_data.csv"</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// List of subgroups = header of the csv files = soil condition here</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> subgroups = data.columns.slice(<span class="number">1</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// List of groups = species here = value of the first column called group -&gt; I show them on the X axis</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> groups = d3.map(data, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> (d.group) &#125;).keys()</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Add X axis</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> x = d3.scaleBand()</span></span><br><span class="line">            .domain(groups)</span><br><span class="line">            .range([0, width])</span><br><span class="line">            .padding([0.4])</span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>)</span></span><br><span class="line">            .call(d3.axisBottom(x).tickSize(0));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Add Y axis</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> y = d3.scaleLinear()</span></span><br><span class="line">            .domain([0, 90])</span><br><span class="line">            .range([height, 0]);</span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"g"</span>)</span></span><br><span class="line">            .call(d3.axisLeft(y));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Another scale for subgroup position?</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> xSubgroup = d3.scaleBand()</span></span><br><span class="line">            .domain(subgroups)</span><br><span class="line">            .range([0, x.bandwidth()])</span><br><span class="line">            .padding([0.2])</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// color</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> color = d3.scaleOrdinal()</span></span><br><span class="line">            .domain(subgroups)</span><br><span class="line"><span class="actionscript">            .range([<span class="string">'#99cccc'</span>,<span class="string">'#66b2b2'</span>,<span class="string">'#329999'</span>])</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> gbars = svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">            .selectAll(<span class="string">"g"</span>)</span></span><br><span class="line">            .data(data)</span><br><span class="line">            .enter()</span><br><span class="line"><span class="actionscript">            .append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> <span class="string">"translate("</span> + x(d.group) + <span class="string">",0)"</span>; &#125;);</span></span><br><span class="line"><span class="actionscript">          gbars.selectAll(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">            .data(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> subgroups.map(<span class="function"><span class="keyword">function</span><span class="params">(key)</span> </span>&#123; <span class="keyword">return</span> &#123;key: key, value: d[key]&#125;; &#125;); &#125;)</span></span><br><span class="line"><span class="actionscript">            .enter().append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> xSubgroup(d.key); &#125;)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> y(d.value); &#125;)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"width"</span>, xSubgroup.bandwidth())</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> height - y(d.value); &#125;)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"fill"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> color(d.key); &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>,<span class="number">5</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>,<span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"Sales"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cx"</span>,<span class="number">350</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cy"</span>,<span class="number">10</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"fill"</span>, color(<span class="number">1</span>))</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cx"</span>,<span class="number">350</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cy"</span>,<span class="number">30</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"fill"</span>, color(<span class="number">2</span>))</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cx"</span>,<span class="number">350</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cy"</span>,<span class="number">50</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"fill"</span>, color(<span class="number">3</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">360</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">10</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"East"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">360</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">30</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"West"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">360</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">50</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"North"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line">        </span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">360</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">380</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"Quarter"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line">          &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>通过 <code>d3.map</code> 实现组合。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>方案1主要比较的是同一地区、不同季度的销售额：东部：第三季度尤为突出；西部：二、三季度较为突出；北部：4季度持平。</p>
<p>方案2主要比较的是同一季度、不同地区的销售额：1、2、4季度均是东部 &lt; 西部 &lt; 北部的明显阶梯形式，然而第三季度东部反常，销售额极高。</p>
<p>由于题目也没给太多信息(卖的是什么，销售额的单位)，可以反思，是否是第三季度东部地区的销售额的数据错了。</p>
<h2 id="参考模板"><a href="#参考模板" class="headerlink" title="参考模板"></a>参考模板</h2><p><a href="https://www.d3-graph-gallery.com/graph/barplot_grouped_basicWide.html" target="_blank" rel="noopener">https://www.d3-graph-gallery.com/graph/barplot_grouped_basicWide.html</a></p>
]]></content>
      <categories>
        <category>Visualization</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>D3</tag>
      </tags>
  </entry>
  <entry>
    <title>Liang-Barsky Algorithm</title>
    <url>/2020/10/14/Liang-Barsky-Algorithm/</url>
    <content><![CDATA[<h1 id="Liang-Barsky"><a href="#Liang-Barsky" class="headerlink" title="Liang-Barsky"></a>Liang-Barsky</h1><a id="more"></a>
<h2 id="参数方程"><a href="#参数方程" class="headerlink" title="参数方程"></a>参数方程</h2><p>两点式：</p>
<script type="math/tex; mode=display">
\frac{x-x_1}{y-y_1}=\frac{x_2-x_1}{y_2-y_1}</script><p>换下位置，并设其等于 $t$ ：</p>
<script type="math/tex; mode=display">
\frac{x-x_1}{x_2-x_1}=\frac{y-y_1}{y_2-y_1}=t, t∈[0,1]</script><p>其中 $(x_1,y_1)$ 为左下边界， $(x_2,y_2)$ 为右上边界， $(x,y)$ 位于其间。</p>
<p>则参数方程可表示为：</p>
<script type="math/tex; mode=display">
x=x_1+t(x_2-x_1)</script><script type="math/tex; mode=display">
y=y_1+t(y_2-y_1)</script><h2 id="裁剪窗口不等式"><a href="#裁剪窗口不等式" class="headerlink" title="裁剪窗口不等式"></a>裁剪窗口不等式</h2><script type="math/tex; mode=display">
xw_{min}≤x_1+t(x_2-x_1)≤xw_{max}</script><script type="math/tex; mode=display">
yw_{min}≤y_1+t(y_2-y_1)≤yw_{max}</script><p>( $xw,yw$ 为边界)</p>
<p>不等式可表示为：</p>
<script type="math/tex; mode=display">
tp_k≤q_k</script><p>其中， $k=1,2,3,4$ 分别表示左右下上四边界。</p>
<p>$p$ 与 $q$ 的定义为：</p>
<script type="math/tex; mode=display">
p_1 = -(x_2-x_1),  q_1 = x_1 - xw_{min} (左边界)</script><script type="math/tex; mode=display">
p_2 =  (x_2-x_1),  q_2 = xw_{max} - x_1 (右边界)</script><script type="math/tex; mode=display">
p_3 = -(y_2-y_1),  q_3 = y_1 - yw_{min} (下边界)</script><script type="math/tex; mode=display">
p_4 = (y_2-y_1),  q_4 = yw_{max} - y_1 (上边界)</script><h3 id="判定"><a href="#判定" class="headerlink" title="判定"></a>判定</h3><div class="table-container">
<table>
<thead>
<tr>
<th>条件</th>
<th>线的位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>$p_k=0$</td>
<td>平行于裁剪边界</td>
</tr>
<tr>
<td>$p_k=0$ 且 $q_k&lt;0$</td>
<td>完全在边界外</td>
</tr>
<tr>
<td>$p_k = 0$ 且 $q_k ≥ 0$</td>
<td>在边界内</td>
</tr>
<tr>
<td>$p_k &lt; 0$</td>
<td>线从外到内</td>
</tr>
<tr>
<td>$p_k &gt; 0$</td>
<td>线从内到外</td>
</tr>
</tbody>
</table>
</div>
<p>参数 $t_1,t_2$ 可以判定线的某部分位于裁剪矩形内，当：</p>
<script type="math/tex; mode=display">
p_k<0, 取maximum(0,\frac{q_k}{p_k})</script><script type="math/tex; mode=display">
p_k>0, 取minimum(1,\frac{q_k}{p_k})</script><p>若 $t_1 &gt; t_2$, 则线完全在窗口外，可舍弃；否则，裁剪线的止点可由参数 $t$ 决定。</p>
<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><ol>
<li>Set $t_{min}=0, t_{max}=1$.</li>
<li>Calculate the values of $t$ ($t(left)$, $t(right)$, $t(top)$, $t(bottom)$),<br>(a) If $t &lt; t_{min}$ ignore that and move to the next edge.<br>(b) else separate the $t$ values as entering or exiting values using the inner product.<br>(c) If $t$ is entering value, set $t_{min}=t$; if $t$ is existing value, set $t_{max} = t$.</li>
<li>If $t_{min} &lt; t_{max}$, draw a line from $(x_1 + t_{min}(x_2-x_1), y_1 + t_{min}(y_2-y_1))$ to $(x_1 + t_{max}(x_2-x_1), y_1 + t_{max}(y_2-y_1))$</li>
<li>If the line crosses over the window, $(x_1 + t_{min}(x_2-x_1), y_1 + t_{min}(y_2-y_1))$ and $(x_1 + t_{max}(x_2-x_1), y_1 + t_{max}(y_2-y_1))$ are the intersection point of line and edge.</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.geeksforgeeks.org/liang-barsky-algorithm/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/liang-barsky-algorithm/</a></p>
]]></content>
      <categories>
        <category>CG</category>
      </categories>
      <tags>
        <tag>裁剪</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Commands</title>
    <url>/2021/03/05/Linux-Commands/</url>
    <content><![CDATA[<h2 id="File-Commands"><a href="#File-Commands" class="headerlink" title="File Commands"></a>File Commands</h2><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a><code>pwd</code></h3><p><strong>P</strong>rint <strong>W</strong>orking <strong>D</strong>irectory. Find out the <em>path</em> of the current working directory.</p>
<h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a><code>cd</code></h3><p><strong>C</strong>hange <strong>D</strong>irectory. Change the current working directory</p>
<ul>
<li><strong>cd <em>somewhere</em></strong> to go to that directory.</li>
<li><strong>cd ..</strong> (with two dots) to move one directory up.</li>
<li><strong>cd</strong> to go straight to the home folder.</li>
<li><strong>cd-</strong> (with a hyphen) to move to your previous directory.</li>
</ul>
<h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a><code>ls</code></h3><p>List. View the contents of a directory.</p>
<ul>
<li><strong>ls</strong> will list current directory.</li>
<li><strong>ls <em>somewhere</em></strong> will list the directory named.</li>
<li><strong>ls -R</strong> will list all the files in the sub-directories as well.</li>
<li><strong>ls -a</strong> will show the hidden files.</li>
<li><strong>ls -al</strong> will list the files and directories with detailed information like the permissions, size, owner, etc.</li>
</ul>
<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a><code>cat</code></h3><p>Concatenate. List the contents of a file on the standard output (<code>stdout</code>).</p>
<ul>
<li><strong>cat filename (or filename1 filename2 filename3 …)</strong> will show content of given filename(s).</li>
<li><strong>cat -n filename</strong> will show contents with line numbers.</li>
<li><strong>cat &gt; filename</strong> creates a new file</li>
<li><strong>cat filename1 filename2 &gt; filename3</strong> joins two files (1 and 2) and stores the output of them in a new file (3)</li>
<li>to convert a file to upper or lower case use, <strong>cat filename | tr a-z A-Z &gt; output.txt</strong></li>
</ul>
<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a><code>cp</code></h3><p>Copy. <strong>cp <em>filename</em> <em>somewhere</em></strong> will copy file to the directory.</p>
<h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a><code>mv</code></h3><p>Move files, and also can be used to rename files. </p>
<ul>
<li><strong>mv <em>filename</em> <em>somewhere</em></strong> will move the file to the directory.</li>
<li><strong>mv <em>old_filename</em> <em>new_filename</em></strong> will rename the file with a new name.</li>
</ul>
<h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><code>mkdir</code></h3><p>Make Directory. </p>
<ul>
<li><strong>mkdir <em>somewhere</em></strong></li>
<li><strong>mkdir <em>somewhere1/somewhere2/…/destination</em></strong></li>
<li><strong>mkdir <em>somewhere1/destination/somewhere2</em></strong></li>
</ul>
<h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a><code>rmdir</code></h3><p>Remove Directory. Only allows you to delete empty directories.</p>
<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h3><p>Remove Files. <code>rm -r</code> alternative to <code>rmdir</code>. </p>
<h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a><code>touch</code></h3><p>Create a blank new file.</p>
<h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a><code>locate</code></h3><p>Locate a file. Use <code>locate -i</code> to be case-insensitive. <code>locate A*B</code> search files contain <code>A</code> and <code>B</code>.</p>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a><code>find</code></h3><p>Similar to locate. But you need to give it a directory.</p>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a><code>grep</code></h3><p>Search through all the text in a given file.</p>
<h2 id="Higher"><a href="#Higher" class="headerlink" title="Higher"></a>Higher</h2><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a><code>sudo</code></h3><p><strong>S</strong>uper<strong>U</strong>ser <strong>Do</strong>.</p>
<h3 id="df"><a href="#df" class="headerlink" title="df"></a><code>df</code></h3><p>Get a report on the system’s disk space usage, shown in percentage and KBs.</p>
<p><code>df -m</code> to show in megabytes.</p>
<h3 id="du"><a href="#du" class="headerlink" title="du"></a><code>du</code></h3><p><strong>D</strong>isk <strong>U</strong>sage. type <code>-h</code> to get human readable statics.</p>
<h3 id="head"><a href="#head" class="headerlink" title="head"></a><code>head</code></h3><p>View the first lines of any text file.</p>
<p><strong>head -n somenumber filename.txt</strong>. View fist somenumber lines of file.</p>
<h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a><code>tail</code></h3><p>View last lines.</p>
<h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a><code>diff</code></h3><p>Difference. Compares the contents of two files <em>line by line</em>. After analyzing the files, it will <em>output the lines that do not match</em>.</p>
<h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a><code>tar</code></h3><p>Archive multiple files into a <strong>tarball</strong>.</p>
<h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a><code>chmod</code></h3><p>Change the read, write, and execute permissions of files and directories.</p>
<h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a><code>chown</code></h3><p>Change or transfer the ownership of a file to the specified username.</p>
<h3 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a><code>jobs</code></h3><p>Display all current jobs along with their statuses.</p>
<h3 id="Kill"><a href="#Kill" class="headerlink" title="Kill"></a><code>Kill</code></h3><p>Send a certain signal to an app and instructs the app to terminate itself. Kill by its PID. </p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.hostinger.com/tutorials/linux-commands" target="_blank" rel="noopener">https://www.hostinger.com/tutorials/linux-commands</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>LIS &amp; LCS</title>
    <url>/2020/04/24/LIS-LCS/</url>
    <content><![CDATA[<h1 id="LIS-amp-LCS"><a href="#LIS-amp-LCS" class="headerlink" title="LIS &amp; LCS"></a><strong>LIS &amp; LCS</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有两个序列 A 和 B。</span><br><span class="line">求序列 A 的 LIS(最长上升子序列) 和 序列 A、B 的 LCS(最长公共子序列) 的长度。</span><br><span class="line">注意，LIS 为严格递增的，即 a1 &lt; a2 &lt; … &lt; ak (ai ≤ 1,000,000,000)。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行两个数 n, m（1 ≤ n ≤ 5000, 1 ≤ m ≤ 5000）</span><br><span class="line">第二行n个数，表示序列A</span><br><span class="line">第三行m个数，表示序列B</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出一行数据 ans1 和 ans2，分别代表序列 A 的 LIS 和序列 A、B 的 LCS 的长度</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line"></span><br><span class="line">Output:</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    1048576 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><h3 id="LIS"><a href="#LIS" class="headerlink" title="LIS"></a>LIS</h3><p>(以下算法参考了 <a href="https://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/" target="_blank" rel="noopener">geeksforgeeks</a>)</p>
<p>举个例子，数组 <code>{3, 5, 4}</code>，明显 LIS 是 <code>{3, 5}</code> 或 <code>{3, 4}</code>。</p>
<p>此时若加入元素 <code>{7, 9}</code>，即 <code>{3, 5, 4, 7, 9}</code>，LIS 为 <code>{3, 5, 7, 9}</code> 或 <code>{3, 4, 7, 9}</code>。</p>
<p>此时加入元素 <code>{8}</code>，即 <code>{3, 5, 4, 7, 9, 8}</code>，8 比原来的任何一个 LIS 的最小元素都大，但比原来的 LIS 的最大元素小，因此，8具有替代原来 LIS 的潜在可能。如果加入的是 1，明显 1 无法加入原来的 LIS，但它却具有构成新的 LIS 的可能，比如加入 <code>{1, 2, 3, 4, 5, 6}</code>，即 <code>{3, 5, 4, 7, 9, 1, 2, 3, 4, 5, 6}</code>，LIS 是 <code>{1, 2, 3, 4, 5, 6}</code>。</p>
<p>由此可得，长 LIS 可以看成一个短 LIS 与另一个符合的短 LIS 的组合，随着数组的遍历，合成了一个更加符合的长 LIS。</p>
<p>拿 <code>{3, 7, 5}</code> 来说，<code>{3, 5}</code> 比 <code>{3, 7}</code> 更有可能成为下一个加入元素的 LIS 的开端，因为 <code>5 &lt; 7</code>，比如此时加入 6，即 <code>{3, 7, 5, 6}</code>，明显 LIS 是 <code>{3, 5, 6}</code>，而 <code>{3, 7}</code> 与 <code>{6}</code> 无法合并。</p>
<p>因此得出以下算法：</p>
<ol>
<li>若 <code>A[i]</code> 比原来存的潜在 LIS 的最小元素都小，则将其成为新的潜在 LIS 的开端。</li>
<li>若 <code>A[i]</code> 比原来存的某个/某些潜在 LIS 的最大元素大，则将对应的潜在 LIS 序列<strong>复制</strong>，并加入 <code>A[i]</code>。</li>
<li>若 <code>A[i]</code> 不大不小，则将原来那些潜在 LIS 中可让 <code>A[i]</code> 加入的序列复制，并加入 <code>A[i]</code>。同时只保留与此新序列等长的且潜在 LIS 尾端元素最小的序列。</li>
</ol>
<p><a href="https://en.wikipedia.org/wiki/Longest_increasing_subsequence" target="_blank" rel="noopener">Wiki</a> 上的例子 <code>{0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15}</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A[0] &#x3D; 0. Case 1. 无潜在 LIS，创建之。</span><br><span class="line">0.</span><br><span class="line">----------------------------------------</span><br><span class="line">A[1] &#x3D; 8. Case 2. 复制并加入。</span><br><span class="line">0.</span><br><span class="line">0, 8.</span><br><span class="line">----------------------------------------</span><br><span class="line">A[2] &#x3D; 4. Case 3. 复制，加入，并舍弃。</span><br><span class="line">0.</span><br><span class="line">0, 4.</span><br><span class="line">舍弃&lt;0, 8&gt;.</span><br><span class="line">----------------------------------------</span><br><span class="line">A[3] &#x3D; 12. Case 2.</span><br><span class="line">0.</span><br><span class="line">0, 4.</span><br><span class="line">0, 4, 12.</span><br><span class="line">----------------------------------------</span><br><span class="line">A[4] &#x3D; 2. Case 3.</span><br><span class="line">0.</span><br><span class="line">0, 2.</span><br><span class="line">舍弃&lt;0, 4&gt;.</span><br><span class="line">0, 4, 12.</span><br><span class="line">----------------------------------------</span><br><span class="line">A[5] &#x3D; 10. Case 3.</span><br><span class="line">0.</span><br><span class="line">0, 2.</span><br><span class="line">0, 2, 10.</span><br><span class="line">舍弃&lt;0, 4, 12&gt;.</span><br><span class="line">----------------------------------------</span><br><span class="line">A[6] &#x3D; 6. Case 3.</span><br><span class="line">0.</span><br><span class="line">0, 2.</span><br><span class="line">0, 2, 6.</span><br><span class="line">舍弃&lt;0, 2, 10&gt;.</span><br><span class="line">----------------------------------------</span><br><span class="line">A[7] &#x3D; 14. Case 2.</span><br><span class="line">0.</span><br><span class="line">0, 2.</span><br><span class="line">0, 2, 6.</span><br><span class="line">0, 2, 6, 14.</span><br><span class="line">----------------------------------------</span><br><span class="line">A[8] &#x3D; 1. Case 3.</span><br><span class="line">0.</span><br><span class="line">0, 1.</span><br><span class="line">舍弃&lt;0, 2&gt;.</span><br><span class="line">0, 2, 6.</span><br><span class="line">0, 2, 6, 14.</span><br><span class="line">----------------------------------------</span><br><span class="line">A[9] &#x3D; 9. Case 3.</span><br><span class="line">0.</span><br><span class="line">0, 1.</span><br><span class="line">0, 2, 6.</span><br><span class="line">0, 2, 6, 9.</span><br><span class="line">舍弃&lt;0, 2, 6, 14&gt;.</span><br><span class="line">----------------------------------------</span><br><span class="line">A[10] &#x3D; 5. Case 3.</span><br><span class="line">0.</span><br><span class="line">0, 1.</span><br><span class="line">0, 1, 5.</span><br><span class="line">舍弃&lt;0, 2, 6&gt;.</span><br><span class="line">0, 2, 6, 9.</span><br><span class="line">----------------------------------------</span><br><span class="line">A[11] &#x3D; 13. Case 2.</span><br><span class="line">0.</span><br><span class="line">0, 1.</span><br><span class="line">0, 1, 5.</span><br><span class="line">0, 2, 6, 9.</span><br><span class="line">0, 2, 6, 9, 13.</span><br><span class="line">----------------------------------------</span><br><span class="line">A[12] &#x3D; 3. Case 3.</span><br><span class="line">0.</span><br><span class="line">0, 1.</span><br><span class="line">0, 1, 3.</span><br><span class="line">舍弃&lt;0, 1, 5&gt;.</span><br><span class="line">0, 2, 6, 9.</span><br><span class="line">0, 2, 6, 9, 13.</span><br><span class="line">----------------------------------------</span><br><span class="line">A[13] &#x3D; 11. Case 3.</span><br><span class="line">0.</span><br><span class="line">0, 1.</span><br><span class="line">0, 1, 3.</span><br><span class="line">0, 2, 6, 9.</span><br><span class="line">0, 2, 6, 9, 11.</span><br><span class="line">舍弃&lt;0, 2, 6, 9, 13&gt;.</span><br><span class="line">----------------------------------------</span><br><span class="line">A[14] &#x3D; 7. Case 3.</span><br><span class="line">0.</span><br><span class="line">0, 1.</span><br><span class="line">0, 1, 3.</span><br><span class="line">0, 1, 3, 7.</span><br><span class="line">舍弃&lt;0, 2, 6, 9&gt;.</span><br><span class="line">0, 2, 6, 9, 11.</span><br><span class="line">----------------------------------------</span><br><span class="line">A[15] &#x3D; 15. Case 2.</span><br><span class="line">0.</span><br><span class="line">0, 1.</span><br><span class="line">0, 1, 3.</span><br><span class="line">0, 1, 3, 7.</span><br><span class="line">0, 2, 6, 9, 11.</span><br><span class="line">0, 2, 6, 9, 11, 15.</span><br><span class="line">----------------------------------------</span><br><span class="line">LIS 为 0, 2, 6, 9, 11, 15.</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/06/11/jLY6VIoDGuTHfbp.gif" alt="LISDemo.gif"></p>
<p>(图片来源 Wikipedia)</p>
<h3 id="LCS"><a href="#LCS" class="headerlink" title="LCS"></a>LCS</h3><p>用一个二维数组 <code>f[m][n]</code> 表示 A<sub>1..<em>m</em></sub>, B<sub>1..<em>n</em></sub> 的 LCS 长度。</p>
<p>初始时 <code>f[1][0] = f[0][1] = f[0][0] = 0</code>。若 A<sub><em>i</em></sub> = B<sub><em>j</em></sub>，<code>f[i][j] = f[i-1][j-1] + 1</code>，否则 <code>f[i][j] = max(f[i-1][j], f[i][j-1])</code></p>
<p>比如说， “agree” 和 “aggregate”，最后一个字母相同，则 <code>f[&quot;agree&quot;][&quot;aggregate&quot;] = f[&quot;agre&quot;][&quot;aggregat&quot;] + 1</code>。<br>“cardiac” 和 “ordinal”，最后一个字母不同，则 <code>f[&quot;cardiac&quot;][&quot;ordinal&quot;] = max(f[&quot;cardia&quot;][&quot;ordinal&quot;], f[&quot;cardiac&quot;][&quot;ordina&quot;])</code>。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ceilIndex</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (r - l &gt; <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> m = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (v[m] &gt;= key)</span><br><span class="line">			r = m;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			l = m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lis</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (v.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">tail</span><span class="params">(v.<span class="built_in">size</span>(), <span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">	tail[<span class="number">0</span>] = v[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (v[i] &lt; tail[<span class="number">0</span>])</span><br><span class="line">			tail[<span class="number">0</span>] = v[i];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (v[i] &gt; tail[length - <span class="number">1</span>])</span><br><span class="line">			tail[length++] = v[i];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			tail[ceilIndex(tail, <span class="number">-1</span>, length - <span class="number">1</span>, v[i])] = v[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m = v1.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">int</span> n = v2.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">int</span>** L = <span class="keyword">new</span> <span class="keyword">int</span>* [m + <span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m + <span class="number">10</span>; i++)</span><br><span class="line">		L[i] = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>)</span><br><span class="line">				L[i][j] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (v1[i - <span class="number">1</span>] == v2[j - <span class="number">1</span>])</span><br><span class="line">				L[i][j] = L[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				L[i][j] = <span class="built_in">max</span>(L[i - <span class="number">1</span>][j], L[i][j - <span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> L[m][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m, n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> a;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">		v1.push_back(a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> a;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">		v2.push_back(a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans1 = lis(v1);</span><br><span class="line">	<span class="keyword">int</span> ans2 = lcs(v1, v2);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ans1 &lt;&lt; <span class="string">" "</span> &lt;&lt; ans2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>LIS</tag>
        <tag>LCS</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile in Nachos</title>
    <url>/2021/03/31/Makefile-in-Nachos/</url>
    <content><![CDATA[<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><a id="more"></a>
<p>In <code>code</code> directory, there are <code>Makefile.common</code> and <code>Makefile.dep</code>, and in code’s sub directory, there are usually <code>Makefile</code> and <code>Makefile.local</code>. </p>
<h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a><code>Makefile</code></h3><p>In <code>Makefile</code>, it simply includes: </p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> Makefile.local</span><br><span class="line"><span class="keyword">include</span> ../Makefile.common</span><br></pre></td></tr></table></figure>
<h3 id="Makefile-local"><a href="#Makefile-local" class="headerlink" title="Makefile.local"></a><code>Makefile.local</code></h3><p>In <code>Makefile.local</code>, there are <code>SFILES</code>, <code>CCFILES</code>, <code>INCPATH</code> and <code>DEFINES</code>. </p>
<ul>
<li><code>CCFILES</code> : CC files generating Nachos in the current directory.</li>
<li><code>INCPATH</code> : The directory of header files.</li>
<li><code>DEFINES</code> : Macro Define, use <code>+=</code> because it’s a string.</li>
</ul>
<h3 id="Makefile-dep"><a href="#Makefile-dep" class="headerlink" title="Makefile.dep"></a><code>Makefile.dep</code></h3><p> <code>Makefile.dep</code> defines the environment using Nachos. I’m using Linux, so just look at below: </p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 386, 386BSD Unix, or NetBSD Unix (available via anon ftp from agate.berkeley.edu)</span></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(uname)</span>,Linux)</span><br><span class="line">HOST_LINUX=-linux</span><br><span class="line">HOST = -DHOST_i386 -DHOST_LINUX</span><br><span class="line">CPP=/lib/cpp</span><br><span class="line">CPPFLAGS = <span class="variable">$(INCDIR)</span> -D HOST_i386 -D HOST_LINUX</span><br><span class="line">arch = unknown-i386-linux</span><br><span class="line"><span class="keyword">ifdef</span> MAKEFILE_TEST</span><br><span class="line">GCCDIR = /usr/local/mips/bin/decstation-ultrix-</span><br><span class="line">LDFLAGS = -T script -N</span><br><span class="line">ASFLAGS = -mips2</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>
<p><code>GCCDIR</code> is the directory of <code>gcc MIPS</code> compiler.</p>
<p>And in the last few lines: </p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">arch_dir = arch/<span class="variable">$(arch)</span></span><br><span class="line">obj_dir = <span class="variable">$(arch_dir)</span>/objects</span><br><span class="line">bin_dir = <span class="variable">$(arch_dir)</span>/bin</span><br><span class="line">depends_dir = <span class="variable">$(arch_dir)</span>/depends</span><br></pre></td></tr></table></figure>
<p>Taking <code>threads</code> directory for example, there is a directory called <code>arch</code>, within which there are <code>dec-alpha-osf</code> , <code>dec-mips-ultrix</code> , <code>sun-sparc-sunos</code> , <code>unknown-i386-linux</code> . I’m using Linux, so just look at <code>unknown-i386-linux</code> . The <code>bin</code> stores the executable file (<code>nachos</code>), the <code>depends</code> stores dependence files (like <code>xxxx.d</code>), and the <code>objects</code> stores object files (like <code>xxxx.o</code>). </p>
<p>In <code>threads</code> directory, when <code>make</code>, there will be a link file named nachos linked to <code>arch/unknown-i386-linux/bin/nachos</code> .</p>
<h3 id="Makefile-common"><a href="#Makefile-common" class="headerlink" title="Makefile.common"></a><code>Makefile.common</code></h3><p>The most complex file. First it includes <code>Makefile.dep</code>, then <code>vpath</code> tells gnu make where to look for certain files.</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vpath</span> %.cc  ../network:../filesys:../vm:../userprog:../threads:../machine</span><br><span class="line"><span class="keyword">vpath</span> %.h   ../network:../filesys:../vm:../userprog:../threads:../machine</span><br><span class="line"><span class="keyword">vpath</span> %.s   ../network:../filesys:../vm:../userprog:../threads:../machine</span><br></pre></td></tr></table></figure>
<p>It means if some files are not found in the current directory when compiling, it will look into these directories.</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">s_ofiles = $(SFILES:%.s=<span class="variable">$(obj_dir)</span>/%.o)</span><br><span class="line">c_ofiles = $(CFILES:%.c=<span class="variable">$(obj_dir)</span>/%.o)</span><br><span class="line">cc_ofiles = $(CCFILES:%.cc=<span class="variable">$(obj_dir)</span>/%.o)</span><br></pre></td></tr></table></figure>
<p>The three tells where <code>.o</code> files generated by <code>.s</code>, <code>.cc</code> and <code>.c</code> are. </p>
<p>And below is how the executable files are generated: </p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="variable">$(program)</span>: <span class="variable">$(ofiles)</span></span><br><span class="line"><span class="variable">$(bin_dir)</span>/% :</span><br><span class="line">	@echo <span class="string">"&gt;&gt;&gt; Linking"</span> <span class="variable">$@</span> <span class="string">"&lt;&lt;&lt;"</span></span><br><span class="line">	<span class="variable">$(LD)</span> <span class="variable">$^</span> <span class="variable">$(LDFLAGS)</span> -o <span class="variable">$@</span>		</span><br><span class="line">	ln -sf <span class="variable">$@</span> <span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$@</span>)</span></span><br><span class="line">	</span><br><span class="line"><span class="variable">$(obj_dir)</span>/%.o: %.cc</span><br><span class="line">	@echo <span class="string">"&gt;&gt;&gt; Compiling"</span> <span class="variable">$&lt;</span> <span class="string">"&lt;&lt;&lt;"</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(obj_dir)</span>/%.o: %.c</span><br><span class="line">	@echo <span class="string">"&gt;&gt;&gt; Compiling"</span> <span class="variable">$&lt;</span> <span class="string">"&lt;&lt;&lt;"</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br><span class="line">	</span><br><span class="line"><span class="variable">$(obj_dir)</span>/%.o: %.s</span><br><span class="line">	@echo <span class="string">"&gt;&gt;&gt; Assembling"</span> <span class="variable">$&lt;</span> <span class="string">"&lt;&lt;&lt;"</span></span><br><span class="line">	<span class="variable">$(CPP)</span> <span class="variable">$(CPPFLAGS)</span> <span class="variable">$&lt;</span> &gt; <span class="variable">$(obj_dir)</span>/tmp.s</span><br><span class="line">	<span class="variable">$(AS)</span> -o <span class="variable">$@</span> <span class="variable">$(obj_dir)</span>/tmp.s</span><br><span class="line">	rm <span class="variable">$(obj_dir)</span>/tmp.s</span><br></pre></td></tr></table></figure>
<p>Below is the dependence files, </p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">s_dfiles = $(SFILES:%.s=<span class="variable">$(depends_dir)</span>/%.d)</span><br><span class="line">c_dfiles = $(CFILES:%.c=<span class="variable">$(depends_dir)</span>/%.d)</span><br><span class="line">cc_dfiles = $(CCFILES:%.cc=<span class="variable">$(depends_dir)</span>/%.d)</span><br><span class="line"></span><br><span class="line">dfiles = <span class="variable">$(cc_dfiles)</span> <span class="variable">$(c_dfiles)</span> <span class="variable">$(s_dfiles)</span> </span><br><span class="line"></span><br><span class="line"><span class="variable">$(depends_dir)</span>/%.d: %.cc</span><br><span class="line">	@echo <span class="string">"&gt;&gt;&gt; Building dependency file for "</span> <span class="variable">$&lt;</span> <span class="string">"&lt;&lt;&lt;"</span></span><br><span class="line">	@<span class="variable">$(SHELL)</span> -ec '<span class="variable">$(CC)</span> -MM <span class="variable">$(CFLAGS)</span> <span class="variable">$&lt;</span> \</span><br><span class="line">	| sed '\''s@<span class="variable">$*</span>.o[ ]*:@<span class="variable">$(depends_dir)</span>/<span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$@</span>)</span> <span class="variable">$(obj_dir)</span>/&amp;@g'\'' &gt; <span class="variable">$@</span>'</span><br><span class="line"></span><br><span class="line"><span class="variable">$(depends_dir)</span>/%.d: %.c</span><br><span class="line">	@echo <span class="string">"&gt;&gt;&gt; Building dependency file for"</span> <span class="variable">$&lt;</span> <span class="string">"&lt;&lt;&lt;"</span></span><br><span class="line">	@<span class="variable">$(SHELL)</span> -ec '<span class="variable">$(CC)</span> -MM <span class="variable">$(CFLAGS)</span> <span class="variable">$&lt;</span> \</span><br><span class="line">	| sed '\''s@<span class="variable">$*</span>.o[ ]*:@<span class="variable">$(depends_dir)</span>/<span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$@</span>)</span> <span class="variable">$(obj_dir)</span>/&amp;@g'\'' &gt; <span class="variable">$@</span>'</span><br><span class="line"></span><br><span class="line"><span class="variable">$(depends_dir)</span>/%.d: %.s</span><br><span class="line">	@echo <span class="string">"&gt;&gt;&gt; Building dependency file for"</span> <span class="variable">$&lt;</span> <span class="string">"&lt;&lt;&lt;"</span></span><br><span class="line">	@<span class="variable">$(SHELL)</span> -ec '<span class="variable">$(CPP)</span> -MM <span class="variable">$(CPPFLAGS)</span> <span class="variable">$&lt;</span> \</span><br><span class="line">	| sed '\''s@<span class="variable">$*</span>.o[ ]*:@<span class="variable">$(depends_dir)</span>/<span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$@</span>)</span> <span class="variable">$(obj_dir)</span>/&amp;@g'\'' &gt; <span class="variable">$@</span>'</span><br></pre></td></tr></table></figure>
<h2 id="lab2"><a href="#lab2" class="headerlink" title="lab2"></a>lab2</h2><h3 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h3><p>If you want to modify some files, you’d better do it in other directory with the files associated with <code>Makefile</code> and <code>Makefile.local</code> copied, then it will compile the file you modified dependently first. </p>
<p>So copy <code>Makefile</code> , <code>Makefile.local</code> <code>scheduler.cc</code> , <code>scheduler.h</code> and <code>arch</code> in <code>threads</code> to <code>lab2</code>, and in <code>arch</code> just keep the <code>unknown-i386-linux</code> and within make the three folders empty. </p>
<h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h3><p>Change <code>Makefile.local</code> to make sure the changed or to be changed .h files will found when compiling: </p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">INCPATH += -I../lab2 -I../threads -I../machine</span><br></pre></td></tr></table></figure>
<p>Because I put <code>lab2</code> in front of threads, so it will go to <code>lab2</code> first then to the <code>threads</code> directory.</p>
<p>Then <code>make</code>. It compiles successfully: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Linking arch/unknown-i386-linux/bin/nachos &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 arch/unknown-i386-linux/objects/main.o arch/unknown-i386-linux/objects/list.o arch/unknown-i386-linux/objects/scheduler.o arch/unknown-i386-linux/objects/synch.o arch/unknown-i386-linux/objects/synchlist.o arch/unknown-i386-linux/objects/system.o arch/unknown-i386-linux/objects/thread.o arch/unknown-i386-linux/objects/utility.o arch/unknown-i386-linux/objects/threadtest.o arch/unknown-i386-linux/objects/synchtest.o arch/unknown-i386-linux/objects/interrupt.o arch/unknown-i386-linux/objects/sysdep.o arch/unknown-i386-linux/objects/stats.o arch/unknown-i386-linux/objects/timer.o arch/unknown-i386-linux/objects/switch-linux.o  -o arch/unknown-i386-linux/bin/nachos</span><br><span class="line">ln -sf arch/unknown-i386-linux/bin/nachos nachos</span><br></pre></td></tr></table></figure>
<p>Use <code>touch</code> to change the modification time of file <code>scheduler.h</code> (It won’t change the contents), then <code>make</code> : </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  scheduler.cc &lt;&lt;&lt;</span></span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling scheduler.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/scheduler.o scheduler.cc</span><br></pre></td></tr></table></figure>
<p>Only <code>scheduler.cc</code> is recompiled, while others not associated with <code>scheduler.h</code> are not recompiled.</p>
<p>If touch <code>scheduler.h</code> in threads?</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# touch ../threads/scheduler.h</span><br><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# make</span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../machine/timer.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../machine/sysdep.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../machine/interrupt.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../threads/synchtest.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../threads/threadtest.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../threads/thread.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../threads/system.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../threads/synch.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  scheduler.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../threads/main.cc &lt;&lt;&lt;</span></span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling ../threads/main.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/main.o ../threads/main.cc</span><br></pre></td></tr></table></figure>
<p>We see that all source files associated with <code>scheduler.h</code> in directory <code>machine</code> and <code>threads</code> are all recompiled.</p>
<p>If a file doesn’t include <code>scheduler.h</code> , but it includes a file that includes <code>scheduler.h</code> , it will be recompiled too. So we can use <code>grep</code> to find them, and copy them to <code>lab2</code>.</p>
<p>In threads directory, type <code>grep scheduler.h *</code> , and get: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep: arch: Is a directory</span><br><span class="line">Binary file nachos matches</span><br><span class="line">scheduler.cc:#include "scheduler.h"</span><br><span class="line">scheduler.h:// scheduler.h </span><br><span class="line">system.h:#include "scheduler.h"</span><br></pre></td></tr></table></figure>
<p>We see <code>system.h</code> includes <code>scheduler.h</code> , so we look into <code>system.h</code> by <code>grep system.h *</code> :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep: arch: Is a directory</span><br><span class="line">main.cc:#include "system.h"</span><br><span class="line">Binary file nachos matches</span><br><span class="line">scheduler.cc:#include "system.h"</span><br><span class="line">synch.cc:#include "system.h"</span><br><span class="line">synchtest.cc:#include "system.h"</span><br><span class="line">system.cc:#include "system.h"</span><br><span class="line">system.h:// system.h </span><br><span class="line">thread.cc:#include "system.h"</span><br><span class="line">threadtest.cc:#include "system.h"</span><br></pre></td></tr></table></figure>
<p>So we only need to copy: <code>system.h</code> , <code>main.cc</code> , <code>synch.cc</code> , <code>synchtest.cc</code> , <code>system.cc</code> , <code>thread.cc</code> and <code>threadtest.cc</code> .</p>
<p>Now <code>lab2</code> has: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arch      Makefile.local  scheduler.h   system.cc  threadtest.cc</span><br><span class="line">main.cc   nachos          synch.cc      system.h</span><br><span class="line">Makefile  scheduler.cc    synchtest.cc  thread.cc</span><br></pre></td></tr></table></figure>
<p>Firstly, we update the time of <code>scheduler.h</code> , then <code>make</code> : </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# touch scheduler.h</span><br><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# make</span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  synchtest.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  threadtest.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  thread.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  system.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  synch.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  scheduler.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  main.cc &lt;&lt;&lt;</span></span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling main.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/main.o main.cc</span><br><span class="line">..........................................</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling scheduler.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/scheduler.o scheduler.cc</span><br><span class="line">..........................................</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling synch.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/synch.o synch.cc</span><br><span class="line">..........................................</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling system.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/system.o system.cc</span><br><span class="line">....</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling thread.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/thread.o thread.cc</span><br><span class="line">..........................................</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling threadtest.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/threadtest.o threadtest.cc</span><br><span class="line">..........................................</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling synchtest.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/synchtest.o synchtest.cc</span><br><span class="line">..........................................</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Linking arch/unknown-i386-linux/bin/nachos &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 arch/unknown-i386-linux/objects/main.o arch/unknown-i386-linux/objects/list.o arch/unknown-i386-linux/objects/scheduler.o arch/unknown-i386-linux/objects/synch.o arch/unknown-i386-linux/objects/synchlist.o arch/unknown-i386-linux/objects/system.o arch/unknown-i386-linux/objects/thread.o arch/unknown-i386-linux/objects/utility.o arch/unknown-i386-linux/objects/threadtest.o arch/unknown-i386-linux/objects/synchtest.o arch/unknown-i386-linux/objects/interrupt.o arch/unknown-i386-linux/objects/sysdep.o arch/unknown-i386-linux/objects/stats.o arch/unknown-i386-linux/objects/timer.o arch/unknown-i386-linux/objects/switch-linux.o  -o arch/unknown-i386-linux/bin/nachos</span><br><span class="line">ln -sf arch/unknown-i386-linux/bin/nachos nachos</span><br></pre></td></tr></table></figure>
<p>Then touch <code>scheduler.h</code> in <code>threads</code> directory, then <code>make</code> to see if anything changes: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# touch ../threads/scheduler.h</span><br><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# make</span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../machine/timer.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../machine/sysdep.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../machine/interrupt.cc &lt;&lt;&lt;</span></span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling ../machine/interrupt.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/interrupt.o ../machine/interrupt.cc</span><br><span class="line">...........................</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling ../machine/sysdep.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/sysdep.o ../machine/sysdep.cc</span><br><span class="line">.......</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling ../machine/timer.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/timer.o ../machine/timer.cc</span><br><span class="line">.........</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Linking arch/unknown-i386-linux/bin/nachos &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 arch/unknown-i386-linux/objects/main.o arch/unknown-i386-linux/objects/list.o arch/unknown-i386-linux/objects/scheduler.o arch/unknown-i386-linux/objects/synch.o arch/unknown-i386-linux/objects/synchlist.o arch/unknown-i386-linux/objects/system.o arch/unknown-i386-linux/objects/thread.o arch/unknown-i386-linux/objects/utility.o arch/unknown-i386-linux/objects/threadtest.o arch/unknown-i386-linux/objects/synchtest.o arch/unknown-i386-linux/objects/interrupt.o arch/unknown-i386-linux/objects/sysdep.o arch/unknown-i386-linux/objects/stats.o arch/unknown-i386-linux/objects/timer.o arch/unknown-i386-linux/objects/switch-linux.o  -o arch/unknown-i386-linux/bin/nachos</span><br><span class="line">ln -sf arch/unknown-i386-linux/bin/nachos nachos</span><br></pre></td></tr></table></figure>
<p>Well I get this result, because I didn’t compile it first after I copy all these files, but if I do it a second time:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# touch ../threads/scheduler.h</span><br><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# make</span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line">make: 'arch/unknown-i386-linux/bin/nachos' is up to date.</span><br></pre></td></tr></table></figure>
<p>It shows that it has nothing to do with the file in <code>scheduler.h</code> in <code>threads</code> directory if we change anything in <code>scheduler.h</code> in the current directory, <code>lab2</code> .</p>
<h3 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2"></a>Method 2</h3><p>Change <code>Makefile.local</code> : </p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">INCPATH += -I- -I../lab2 -I../threads -I../machine</span><br></pre></td></tr></table></figure>
<p>Just <code>make</code> . Needn’t copy a bunch of files associated with <code>scheduler.h</code> .</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Setup OpenGL with Visual Studio 2019</title>
    <url>/2020/09/16/Setup-OpenGL-with-Visual-Studio-2019/</url>
    <content><![CDATA[<h1 id="Setup-OpenGL-with-Visual-Studio-2019"><a href="#Setup-OpenGL-with-Visual-Studio-2019" class="headerlink" title="Setup OpenGL with Visual Studio 2019"></a>Setup OpenGL with Visual Studio 2019</h1><a id="more"></a>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol>
<li>Download GLUT header, lib, and dll files from <a href="https://www.opengl.org/resources/libraries/glut/glut_downloads.php" target="_blank" rel="noopener">OpenGL - GLUT</a></li>
<li>Paste <code>include-&gt;GL</code> in <code>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include</code></li>
<li>Download <a href="https://www.opengl.org/resources/libraries/glut/glutdlls37beta.zip" target="_blank" rel="noopener">https://www.opengl.org/resources/libraries/glut/glutdlls37beta.zip</a><br>Paste <code>glut32.lib</code> in <code>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\lib\x86</code><br>and <code>glut.lib</code> in <code>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\lib\x64</code></li>
<li>Paste <code>glut32.dll</code> in <code>C:\Windows\System32</code>, <code>C:\Windows</code>,  and <code>glut.dll</code> in <code>C:\Windows\SysWOW64</code></li>
</ol>
<h2 id="Create-a-project"><a href="#Create-a-project" class="headerlink" title="Create a project"></a>Create a project</h2><ol>
<li><p>Open <code>Visual Studio</code>, select <code>create a new project</code>, choose <code>Empty Project</code>. </p>
</li>
<li><p>Go to <code>Project -&gt; Properties (Alt + F7)</code>, on the top select <code>All Configurations</code> from <code>Configuration</code> dropdown menu.<br>Choose <code>Configuration Properties -&gt; C/C++ -&gt; Precompiled Headers</code>, set <code>Precompiled Header</code>‘s value to <code>Not Using Precompiled Headers</code>.<br>Choose <code>Configuration Properties -&gt; Linker -&gt; Input</code>, click <code>Additional Dependencies</code>, and then click <code>Edit</code>, and type: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opengl32.lib</span><br><span class="line">glu32.lib</span><br><span class="line">glut32.lib</span><br></pre></td></tr></table></figure>
<p>then click OK.</p>
</li>
<li><p>Paste the code I found in Internet to test: </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line">	glColor3f(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line">	glBegin(GL_POINTS);</span><br><span class="line">	glVertex2f(<span class="number">10.0</span>, <span class="number">10.0</span>);</span><br><span class="line">	glVertex2f(<span class="number">150.0</span>, <span class="number">80.0</span>);</span><br><span class="line">	glVertex2f(<span class="number">100.0</span>, <span class="number">20.0</span>);</span><br><span class="line">	glVertex2f(<span class="number">200.0</span>, <span class="number">100.0</span>);</span><br><span class="line">	glEnd();</span><br><span class="line">	glFlush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myinit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	glClearColor(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">	glColor3f(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">	glPointSize(<span class="number">5.0</span>);</span><br><span class="line">	glMatrixMode(GL_PROJECTION);</span><br><span class="line">	glLoadIdentity();</span><br><span class="line">	gluOrtho2D(<span class="number">0.0</span>, <span class="number">499.0</span>, <span class="number">0.0</span>, <span class="number">499.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">	glutInit(&amp;argc, argv);</span><br><span class="line">	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);</span><br><span class="line">	glutInitWindowSize(<span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">	glutInitWindowPosition(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	glutCreateWindow(<span class="string">"Points"</span>);</span><br><span class="line">	glutDisplayFunc(<span class="built_in">display</span>);</span><br><span class="line"></span><br><span class="line">	myinit();</span><br><span class="line">	glutMainLoop();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then Compile and run(x86). </p>
</li>
</ol>
<h2 id="One-more-thing…"><a href="#One-more-thing…" class="headerlink" title="One more thing…"></a>One more thing…</h2><p>If you upgrade VS, you should re-install OpenGL, since the folder is moved to a higher version one.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Special thanks to <a href="https://www.absingh.com/opengl/" target="_blank" rel="noopener">https://www.absingh.com/opengl/</a></p>
]]></content>
      <categories>
        <category>CG</category>
      </categories>
      <tags>
        <tag>GLUT</tag>
      </tags>
  </entry>
  <entry>
    <title>Histogram</title>
    <url>/2020/10/07/Histogram/</url>
    <content><![CDATA[<h1 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h1><a id="more"></a>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>直方图用于统计样本及其数量的度量，由于中国疫情已经过去，使用历史数据筛选出来太麻烦了，所以我找了美国疫情的当天的数据(Cases, Deaths, Recovery, Hospitalization)<sup><a href="https://en.wikipedia.org/wiki/COVID-19_pandemic_in_the_United_States#covid19-container" target="_blank" rel="noopener">[1]</a></sup>。</p>
<p>先找一个模板<sup><a href="https://www.d3-graph-gallery.com/graph/histogram_basic.html" target="_blank" rel="noopener">[2]</a></sup>，然后修改。</p>
<p>后来我又加入了<code>button</code>的功能<sup><a href="https://www.d3-graph-gallery.com/graph/line_change_data.html" target="_blank" rel="noopener">[3]</a></sup>，用于查看那4类数据。</p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><html>
    <body>
        <p>Covid-19 statistics in US of all states, 7th, Oct, 2020</p>
        <meta charset="utf-8">
        <script src="https://d3js.org/d3.v4.js"></script>
        <style>
            .button {
                background-color: #fff5eb;
                border: none;
                border-radius: 8px;
                color: #936223;
                padding: 8px 20px;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                font-size: 16px;
                box-shadow: 0 8px 12px 0 rgba(0,0,0,0.2), 0 3px 6px 0 rgba(0,0,0,0.19);
            }
        </style>
        <button class="button" onclick="choose(1)">Cases</button>
        <button class="button" onclick="choose(2)">Deaths</button>
        <button class="button" onclick="choose(3)">Recov.</button>
        <button class="button" onclick="choose(4)">Hosp.</button>
        <div id="covid19"></div>
        <script>
            var p = d3.select("body").selectAll("p");
            var margin = {top: 30, right: 30, bottom: 30, left: 40},
                width = 600 - margin.left - margin.right,
                height = 450 - margin.top - margin.bottom;
            var svg = d3.select("#covid19")
                .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
            var x = d3.scaleLinear().range([0, width]);
            var xAxis = d3.axisBottom().scale(x);
            svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .attr("class","myXaxis");
            var y = d3.scaleLinear().range([height, 0]);
            var yAxis = d3.axisLeft().scale(y);
            svg.append("g")
                .attr("class","myYaxis");
            var cases = [], deaths = [], recovery = [], hosp = [];
            d3.csv("https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/02/covid-19_US_7th%2COct%2C20.csv", function(data){
                data.map(function(d) {
                    cases.push(d.Cases);
                    deaths.push(d.Deaths);
                    recovery.push(d.Recovery);
                    hosp.push(d.Hospitalization);
                });
            })
            function choose(choice) {
                var datas = [];
                switch(choice){
                    case 1: datas = cases; break;
                    case 2: datas = deaths; break;
                    case 3: datas = recovery; break;
                    case 4: datas = hosp; break;
                    default: datas = cases; break;
                }
                update(datas);
            }
            function update(datas) {
                var durSpeed = 1000;
                var maxX = d3.max(datas, function(d) { return +d });
                x.domain([0, maxX])
                svg.selectAll(".myXaxis").transition()
                    .duration(durSpeed)
                    .call(xAxis);
                var bins = d3.histogram()
                    .domain(x.domain())
                    .thresholds(x.ticks(90))
                    (datas);
                y.domain([0, d3.max(bins, function(d) { return d.length; })]);
                svg.selectAll(".myYaxis")
                    .transition()
                    .duration(durSpeed)
                    .call(yAxis);
                var u = svg.selectAll(".rectTrans")
                    .data(bins);
                u.enter()
                    .append("rect")
                    .attr("class", "rectTrans")
                    .merge(u)
                    .transition()
                    .duration(durSpeed)
                    .attr("x", 1)
                    .attr("transform", function(d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
                    .attr("width", function(d) { return x(d.x1) - x(d.x0) - 1; })
                    .attr("height", function(d) { return height - y(d.length); })
                    .style("fill", "#f26e5d");
                svg.append("text")
                    .attr("x", width)
                    .attr("y", height+10)
                    .text("count")
                    .style("font-size", "10px")
                    .attr("alignment-baseline","middle")
                svg.append("text")
                    .attr("x", 6)
                    .attr("y", 0)
                    .text("frequency")
                    .style("font-size", "10px")
                    .attr("alignment-baseline","middle")
            }
            choose(1);
        </script>
    </body>
</html>

<h2 id="HTML源代码"><a href="#HTML源代码" class="headerlink" title="HTML源代码"></a>HTML源代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Covid-19 statistics in US of all states, 7th, Oct, 2020<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://d3js.org/d3.v4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.button</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#fff5eb</span>;</span></span><br><span class="line">                border: none;</span><br><span class="line">                border-radius: 8px;</span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#936223</span>;</span></span><br><span class="line">                padding: 8px 20px;</span><br><span class="line">                text-align: center;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">                display: inline-block;</span><br><span class="line">                font-size: 16px;</span><br><span class="line"><span class="css">                <span class="selector-tag">box-shadow</span>: 0 8<span class="selector-tag">px</span> 12<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.2</span>), 0 3<span class="selector-tag">px</span> 6<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.19</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span> = <span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"choose(1)"</span>&gt;</span>Cases<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span> = <span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"choose(2)"</span>&gt;</span>Deaths<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span> = <span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"choose(3)"</span>&gt;</span>Recov.<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span> = <span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"choose(4)"</span>&gt;</span>Hosp.<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"covid19"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> p = d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="actionscript">            p.style(<span class="string">"color"</span>,<span class="string">"#87753c"</span>).style(<span class="string">"font-size"</span>,<span class="string">"24px"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> margin = &#123;top: <span class="number">30</span>, right: <span class="number">30</span>, bottom: <span class="number">30</span>, left: <span class="number">40</span>&#125;,</span></span><br><span class="line">                width = 600 - margin.left - margin.right,</span><br><span class="line">                height = 450 - margin.top - margin.bottom;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> svg = d3.select(<span class="string">"#covid19"</span>)</span></span><br><span class="line"><span class="actionscript">                .append(<span class="string">"svg"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"width"</span>, width + margin.left + margin.right)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"height"</span>, height + margin.top + margin.bottom)</span></span><br><span class="line"><span class="actionscript">                .append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> x = d3.scaleLinear().range([<span class="number">0</span>, width]);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> xAxis = d3.axisBottom().scale(x);</span></span><br><span class="line"><span class="actionscript">            svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"class"</span>,<span class="string">"myXaxis"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> y = d3.scaleLinear().range([height, <span class="number">0</span>]);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> yAxis = d3.axisLeft().scale(y);</span></span><br><span class="line"><span class="actionscript">            svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"class"</span>,<span class="string">"myYaxis"</span>);</span></span><br><span class="line">            </span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> cases = [], deaths = [], recovery = [], hosp = [];</span></span><br><span class="line"><span class="actionscript">            d3.csv(<span class="string">"https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/02/covid-19_US_7th%2COct%2C20.csv"</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                data.map(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line">                    cases.push(d.Cases);</span><br><span class="line">                    deaths.push(d.Deaths);</span><br><span class="line">                    recovery.push(d.Recovery);</span><br><span class="line">                    hosp.push(d.Hospitalization);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">choose</span><span class="params">(choice)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> datas = [];</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">switch</span>(choice)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="number">1</span>: datas = cases; <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="number">2</span>: datas = deaths; <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="number">3</span>: datas = recovery; <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="number">4</span>: datas = hosp; <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">default</span>: datas = cases; <span class="keyword">break</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">                update(datas);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(datas)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> durSpeed = <span class="number">1000</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> maxX = d3.max(datas, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> +d &#125;);</span></span><br><span class="line">                x.domain([0, maxX])</span><br><span class="line"><span class="actionscript">                svg.selectAll(<span class="string">".myXaxis"</span>).transition()</span></span><br><span class="line">                    .duration(durSpeed)</span><br><span class="line">                    .call(xAxis);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> bins = d3.histogram()</span></span><br><span class="line">                    .domain(x.domain())</span><br><span class="line">                    .thresholds(x.ticks(90))</span><br><span class="line">                    (datas);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                y.domain([<span class="number">0</span>, d3.max(bins, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> d.length; &#125;)]);</span></span><br><span class="line"><span class="actionscript">                svg.selectAll(<span class="string">".myYaxis"</span>)</span></span><br><span class="line">                    .transition()</span><br><span class="line">                    .duration(durSpeed)</span><br><span class="line">                    .call(yAxis);</span><br><span class="line">                    </span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> u = svg.selectAll(<span class="string">".rectTrans"</span>)</span></span><br><span class="line">                    .data(bins);</span><br><span class="line">                </span><br><span class="line">                u.enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"class"</span>, <span class="string">"rectTrans"</span>)</span></span><br><span class="line">                    .merge(u)</span><br><span class="line">                    .transition()</span><br><span class="line">                    .duration(durSpeed)</span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x"</span>, <span class="number">1</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> <span class="string">"translate("</span> + x(d.x0) + <span class="string">","</span> + y(d.length) + <span class="string">")"</span>; &#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"width"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> x(d.x1) - x(d.x0) - <span class="number">1</span>; &#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> height - y(d.length); &#125;)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"fill"</span>, <span class="string">"#f26e5d"</span>);</span></span><br><span class="line">                    </span><br><span class="line"></span><br><span class="line"><span class="actionscript">                svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x"</span>, width)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y"</span>, height+<span class="number">10</span>)</span></span><br><span class="line"><span class="actionscript">                    .text(<span class="string">"count"</span>)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"font-size"</span>, <span class="string">"10px"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"><span class="actionscript">                svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x"</span>, <span class="number">6</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y"</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">                    .text(<span class="string">"frequency"</span>)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"font-size"</span>, <span class="string">"10px"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            choose(1);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p><code>d3.histogram()</code>创建直方图。用<code>bins</code>存每一桶的数据。</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>数据选的是2020年10月7日(或者说是6日)美国各个州的感染、死亡、恢复、住院数量，各个州差别可能会比较大，所以数据还是太稀疏了，有些数据中间的数据点空了一大片。</p>
<p>修正方法是将X轴中间的空白处折叠，但是我不会折叠啊……</p>
<p>本来也想加入渐变色的，越后面颜色越深表示越严重，但是改来改去没改出来……</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://en.wikipedia.org/wiki/COVID-19_pandemic_in_the_United_States#covid19-container" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/COVID-19_pandemic_in_the_United_States#covid19-container</a></p>
<p>[2] <a href="https://www.d3-graph-gallery.com/graph/histogram_basic.html" target="_blank" rel="noopener">https://www.d3-graph-gallery.com/graph/histogram_basic.html</a></p>
<p>[3] <a href="https://www.d3-graph-gallery.com/graph/line_change_data.html" target="_blank" rel="noopener">https://www.d3-graph-gallery.com/graph/line_change_data.html</a></p>
]]></content>
      <categories>
        <category>Visualization</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>D3</tag>
      </tags>
  </entry>
  <entry>
    <title>Seedr - The best FREE cloud torrenting service</title>
    <url>/2020/07/20/Seedr-The-best-FREE-cloud-torrenting-service/</url>
    <content><![CDATA[<p>It’s been quite a long time since I used Seedr (<a href="https://www.seedr.cc" target="_blank" rel="noopener">https://www.seedr.cc</a>), and here is my experience.</p>
<a id="more"></a>
<p><img src="https://i.loli.net/2020/07/21/ikRurJfACIODz6Q.jpg" alt="seedr.jpg"></p>
<h2 id="Why-Seedr"><a href="#Why-Seedr" class="headerlink" title="Why Seedr"></a>Why Seedr</h2><p>Torrenting a movie is forbidden, as we all know, which results in FBI warning or something worse from your ISP. So the thought of clouding torrent occurred to me. That is to say, the cloud seeds via BT and once it’s done, I can download the file from cloud via HTTP. That’s how seedr works.</p>
<p>At first I googled several cloud torrenting service providers, and seedr, with an obvious ad label marked at the top of search results, draw my attention, and I gave it a try in 2018.</p>
<p>Compared to some other torrenting providers I tried  mostly at the same period, such as FileStream and Bitport, 2GB Seedr providing for free users is considerably sufficient because they only offer 1GB at most for free users. We know that a 720p or 1080p movie is usually around 1.5GB or 2GB if the quality is at least acceptable. Obviously Seedr is the best choice.</p>
<p><img src="https://i.loli.net/2020/07/21/Asa4Qu6lOqrZ7iy.jpg" alt="interface.jpg"></p>
<p><em>User Interface</em></p>
<h2 id="Experience"><a href="#Experience" class="headerlink" title="Experience"></a>Experience</h2><p>Seedr supports both magnet and torrent.</p>
<p>The experience is good, ad-free, and what’s more amazing is that you can <strong>earn free space</strong> by inviting friends, posting blogs, following pinterest and twitter, up to 4Gb at most. That helps a lot since a better quality movie is usually more than 3GB and that solves the problem a bit. </p>
<p><img src="https://i.loli.net/2020/07/21/18C69VDkXPb5EjF.jpg" alt="earnfreespace.jpg"></p>
<p><em>earn free space</em></p>
<h2 id="Speed"><a href="#Speed" class="headerlink" title="Speed"></a>Speed</h2><p>The speed is pretty fast. If a torrent has been downloaded before, I believe it’s stored in the cloud and thus you don’t have to wait for fetching files and just directly download it from the cloud. Mostly a YIFI torrent is instantly accessible, none of which has resulted in waiting as many times as I’ve tried. If a torrent happens to download, you just leave it and have a cup of tea. The speed is okay if it’s not dead. </p>
<p>Free users are allowed to keep it downloading for 3 hours, but if it fails to completely download you may cancel it and restart from the very beginning. It doesn’t bother me since it only happens few times if the torrent has good tracks and seeders.</p>
<p><img src="https://i.loli.net/2020/07/21/9OJGaW4FSD5MxYZ.jpg" alt="cloud speed.jpg"></p>
<p><em>Cloud torrenting speed when fetching files</em></p>
<p>The downloading speed is unlimited, and it’s extremely fast. A 2GB file would be completed within 5 minutes.</p>
<p><img src="https://i.loli.net/2020/07/21/DtWBTmrgjXUV8kd.jpg" alt="downloadingspeed.jpg"></p>
<p><em>local download speed from Seedr</em></p>
<h2 id="One-more-thing"><a href="#One-more-thing" class="headerlink" title="One more thing"></a>One more thing</h2><p>Sadly it currently doesn’t support to choose what to download in a torrent file. So if a torrent contains several videos up to 6GB, but each video is merely 1GB, you may fail to fetch them. Usually packed TV episodes can’t do because of this.  </p>
<p>Free users like me would appreciate it were it improved.</p>
]]></content>
      <categories>
        <category>torrent</category>
      </categories>
  </entry>
  <entry>
    <title>Using FTP in Linux</title>
    <url>/2021/03/13/Using-FTP-in-Linux/</url>
    <content><![CDATA[<h1 id="Using-FTP-in-VPS"><a href="#Using-FTP-in-VPS" class="headerlink" title="Using FTP in VPS"></a>Using FTP in VPS</h1><h2 id="Install-vsftpd"><a href="#Install-vsftpd" class="headerlink" title="Install vsftpd"></a>Install vsftpd</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure>
<p>check vsftpd version</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vsftpd -v</span><br></pre></td></tr></table></figure>
<p>Change FTP password</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo passwd ftp</span><br></pre></td></tr></table></figure>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>The configuration file locates in <code>/etc/vsftpd.conf</code> . Change Below: </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">listen=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=<span class="number">022</span></span><br></pre></td></tr></table></figure>
<p>Go to file <code>/etc/pam.d/vsftpd</code> , change below: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">auth    required        pam_shells.so</span></span><br></pre></td></tr></table></figure>
<h2 id="Install-WinSCP"><a href="#Install-WinSCP" class="headerlink" title="Install WinSCP"></a>Install WinSCP</h2><p>In Windows, install WinSCP .</p>
<p>Choose SFTP. Login to VPS.</p>
<p>Done. Enjoy.</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Sparkclouds</title>
    <url>/2020/12/11/Sparkclouds/</url>
    <content><![CDATA[<h1 id="Sparkclouds"><a href="#Sparkclouds" class="headerlink" title="Sparkclouds"></a>Sparkclouds</h1><a id="more"></a>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>找出 Shakespeares’s Sonnet 1-20, 存为 <code>.txt</code> 文件，但后进行以下操作：</p>
<h3 id="统计词频"><a href="#统计词频" class="headerlink" title="统计词频"></a>统计词频</h3><p>用 C++ 写个程序，统计词频，能处理大小写、标点符号、’s 后缀等，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span>&gt; StrIntMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> marks[] = &#123; <span class="string">','</span>, <span class="string">'.'</span>, <span class="string">':'</span>, <span class="string">'?'</span>, <span class="string">'!'</span>, <span class="string">';'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wordCnt</span><span class="params">(<span class="built_in">std</span>::istream&amp; in, StrIntMap&amp; words)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">while</span> (in &gt;&gt; s) &#123;</span><br><span class="line">		<span class="keyword">if</span> (s.back() == <span class="string">'\0'</span> || s.back() == <span class="string">'\n'</span>)</span><br><span class="line">			s.erase(s.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s.back() == marks[i]) &#123;</span><br><span class="line">				s.erase(s.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (s[<span class="number">0</span>] &gt;= <span class="string">'A'</span> &amp;&amp; s[<span class="number">0</span>] &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">			<span class="keyword">bool</span> changed = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'I'</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">					changed = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">1</span>] &lt; <span class="string">'a'</span> || s[<span class="number">1</span>] &gt; <span class="string">'z'</span>)</span><br><span class="line">					changed = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (s.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (s[i] &lt; <span class="string">'A'</span> || s[i]&gt;<span class="string">'Z'</span>) &#123;</span><br><span class="line">						changed = <span class="literal">true</span>;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						changed = <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (changed)</span><br><span class="line">				s[<span class="number">0</span>] += (<span class="string">'a'</span> - <span class="string">'A'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (s.back() == <span class="string">'s'</span> &amp;&amp; s.<span class="built_in">size</span>() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s[s.<span class="built_in">size</span>() - <span class="number">2</span>] == <span class="string">'\''</span>) &#123;</span><br><span class="line">				s.erase(s.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line">				s.erase(s.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//std::cout &lt;&lt; s &lt;&lt; "\t";</span></span><br><span class="line">		++words[s];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">		<span class="keyword">return</span>(EXIT_FAILURE);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::ifstream <span class="title">in</span><span class="params">(argv[<span class="number">1</span>])</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (!in) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"open error\n"</span>;</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> outname = argv[<span class="number">1</span>];</span><br><span class="line">	outname += <span class="string">".csv"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::fstream opt;</span><br><span class="line">	opt.<span class="built_in">open</span>(outname, <span class="built_in">std</span>::fstream::in | <span class="built_in">std</span>::fstream::out | <span class="built_in">std</span>::fstream::app);</span><br><span class="line">	<span class="keyword">if</span> (!opt) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fail\n"</span>;</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	StrIntMap w;</span><br><span class="line">	wordCnt(in, w);</span><br><span class="line"></span><br><span class="line">	in.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (StrIntMap::iterator p = w.<span class="built_in">begin</span>(); p != w.<span class="built_in">end</span>(); ++p) &#123;</span><br><span class="line">		opt &lt;&lt; p-&gt;first &lt;&lt; <span class="string">","</span> &lt;&lt; p-&gt;second &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	opt.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后处理那 20 个 <code>.txt</code> 文档：</p>
<p><img src="https://i.loli.net/2020/12/18/hEnUSGYgvofrFNu.png" alt="image.png"></p>
<p>当然还有一个 <code>all.txt</code> 用于统计所有词频。</p>
<h3 id="整理数据"><a href="#整理数据" class="headerlink" title="整理数据"></a>整理数据</h3><p>先手动处理了古英语的 <code>&#39;</code> 前缀缩写。</p>
<p>用 Excel 的 <code>VLOOKUP</code> 函数整合统计所有 <code>.csv</code> 文件，最终生成一个：</p>
<p><img src="https://i.loli.net/2020/12/18/epAkbnNBLPSiQfq.png" alt="image.png"></p>
<h3 id="D3-实现"><a href="#D3-实现" class="headerlink" title="D3 实现"></a>D3 实现</h3><p>对于总词频低的单词，统一用小字号；词频高的，根据词频调整字号，并在下方根据 20 个 Sonnets 各自出现频率画出 sparkline 。</p>
<p>根据字号、单词长度，初略计算下一个单词应该出现的坐标。对于词频高的预留大空间。每个新加的单词根据占用空间进行判断位置。</p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://i.loli.net/2020/12/18/CnTXEZc6F8Wafho.png" alt="image.png"></p>
<h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;meta charset = <span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;script src = <span class="string">"https://d3js.org/d3.v4.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id = "word_cloud"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> margin = &#123;<span class="attr">top</span>: <span class="number">20</span>, <span class="attr">right</span>: <span class="number">20</span>, <span class="attr">bottom</span>: <span class="number">20</span>, <span class="attr">left</span>: <span class="number">20</span>&#125;;</span><br><span class="line">        <span class="keyword">var</span> width = <span class="number">800</span> - margin.left - margin.right,</span><br><span class="line">            height = <span class="number">600</span> - margin.top - margin.bottom;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> svg = d3.select(<span class="string">"#word_cloud"</span>).append(<span class="string">"svg"</span>)</span><br><span class="line">            .attr(<span class="string">"width"</span>, width + margin.left + margin.right)</span><br><span class="line">            .attr(<span class="string">"height"</span>, height + margin.top + margin.bottom)</span><br><span class="line">            .append(<span class="string">"g"</span>)</span><br><span class="line">            .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> positionTaken = <span class="keyword">new</span> <span class="built_in">Array</span>(width + <span class="number">101</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; positionTaken.length; i++)</span><br><span class="line">            positionTaken[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(height + <span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; positionTaken.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; positionTaken[i].length; j++) &#123;</span><br><span class="line">                positionTaken[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(positionTaken);</span><br><span class="line"></span><br><span class="line">        d3.csv(<span class="string">"https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/04/0/20_sonets_wordcount.csv"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"data"</span>, data);</span><br><span class="line">            <span class="keyword">var</span> x0 = margin.left, y0 = margin.top;</span><br><span class="line">            <span class="keyword">var</span> thisline = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> lineFunc = d3.line()</span><br><span class="line">                .x(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> x0 + d.x; &#125;)</span><br><span class="line">                .y(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> y0 + d.y; &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> wordsize = <span class="string">"6px"</span>, wordcolor = <span class="string">"#ACAEE3"</span>, bigword = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">var</span> tempsize = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (data[i][<span class="string">"SUM"</span>] &gt; <span class="number">6</span>) &#123;</span><br><span class="line">                    tempsize = data[i][<span class="string">"SUM"</span>];</span><br><span class="line">                    wordsize = tempsize + <span class="string">"px"</span>;</span><br><span class="line">                    wordcolor = <span class="string">"#254170"</span>;</span><br><span class="line">                    bigword = <span class="number">1</span>;</span><br><span class="line">                    thisline = <span class="built_in">Math</span>.max(thisline, tempsize);</span><br><span class="line">                    <span class="keyword">var</span> iii = <span class="number">0</span>, jjj = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (iii = x0; iii &lt;= x0 + data[i][<span class="string">"word"</span>].length*<span class="number">0.5</span>*(+data[i][<span class="string">"SUM"</span>]); iii++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (jjj = y0; jjj &lt;= y0 + data[i][<span class="string">"word"</span>].length*(+data[i][<span class="string">"SUM"</span>]/<span class="number">5</span>); jjj++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((iii &lt;= width + <span class="number">10</span>) &amp;&amp; (jjj &lt;= height + <span class="number">10</span>))</span><br><span class="line">                                positionTaken[iii][jjj] = <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (iii = x0; iii &lt;= x0 + <span class="number">3</span>*(data[i][<span class="string">"word"</span>].length); iii++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (jjj = y0; jjj &lt;= y0 + <span class="number">8</span>; jjj++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((iii &lt;= width + <span class="number">10</span>) &amp;&amp; (jjj &lt;= height + <span class="number">10</span>))</span><br><span class="line">                                positionTaken[iii][jjj] = <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                svg.append(<span class="string">"text"</span>)</span><br><span class="line">                    .attr(<span class="string">"x"</span>, x0).attr(<span class="string">"y"</span>, y0)</span><br><span class="line">                    .text(data[i][<span class="string">"word"</span>])</span><br><span class="line">                    .style(<span class="string">"font-size"</span>, wordsize)</span><br><span class="line">                    .style(<span class="string">"fill"</span>, wordcolor)</span><br><span class="line">                    <span class="comment">//.attr("text-anchor", "start")</span></span><br><span class="line">                    .attr(<span class="string">"alignment-baseline"</span>, <span class="string">"central"</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (bigword == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> newdata = [];</span><br><span class="line">                    <span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; <span class="number">21</span>; j++) &#123;</span><br><span class="line">                        <span class="keyword">var</span> tempS = <span class="string">"S"</span>;</span><br><span class="line">                        tempS += j;</span><br><span class="line">                        <span class="keyword">if</span> (j &gt; <span class="number">1</span>)</span><br><span class="line">                            x += (tempsize*data[i][<span class="string">"word"</span>].length*<span class="number">0.5</span> / <span class="number">20</span>);</span><br><span class="line">                        <span class="keyword">var</span> y = tempsize/<span class="number">2</span> - (+data[i][tempS]);</span><br><span class="line">                        newdata.push(&#123;x, y&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//console.log(newdata);</span></span><br><span class="line">                    svg.append(<span class="string">"path"</span>)</span><br><span class="line">                        .attr(<span class="string">"d"</span>, lineFunc(newdata))</span><br><span class="line">                        .attr(<span class="string">"stroke"</span>, <span class="string">"#254170"</span>)</span><br><span class="line">                        .attr(<span class="string">"fill"</span>, <span class="string">"none"</span>);</span><br><span class="line"></span><br><span class="line">                    svg.append(<span class="string">"line"</span>)</span><br><span class="line">                        .attr(<span class="string">"x1"</span>, x0 + newdata[<span class="number">0</span>].x)</span><br><span class="line">                        .attr(<span class="string">"y1"</span>, y0 + tempsize/<span class="number">2</span>)</span><br><span class="line">                        .attr(<span class="string">"x2"</span>, x0 + newdata[<span class="number">19</span>].x)</span><br><span class="line">                        .attr(<span class="string">"y2"</span>, y0 + tempsize/<span class="number">2</span>)</span><br><span class="line">                        .attr(<span class="string">"stroke"</span>, <span class="string">"#254170"</span>)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> delta_x = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> ii = x0; ii &lt;= width; ii++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (positionTaken[ii][y0] == <span class="number">1</span>)</span><br><span class="line">                        delta_x++;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                x0 += delta_x;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (x0 &gt;= (width - margin.right)) &#123;</span><br><span class="line">                    x0 = margin.left;</span><br><span class="line">                    y0 += <span class="number">8</span>;</span><br><span class="line">                    <span class="comment">//if (thisline &gt; 0) &#123;</span></span><br><span class="line">                        <span class="comment">//y0 += (thisline/2 - 8);</span></span><br><span class="line">                        <span class="comment">//thisline = 0;</span></span><br><span class="line">                    <span class="comment">//&#125;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Visualization</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>D3</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Nachos in Linux</title>
    <url>/2021/03/05/Using-Nachos-in-Linux/</url>
    <content><![CDATA[<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Make sure the Linux is 32-bit!</p>
<p>Go to <a href="https://homes.cs.washington.edu/~tom/nachos/" target="_blank" rel="noopener">https://homes.cs.washington.edu/~tom/nachos/</a>, download <code>nachos-4.0.tar</code>, and download <code>mips-x86.linux-xgcc</code> .</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://www.cs.washington.edu/homes/tom/nachos/nachos-4.0.tar</span><br><span class="line">wget https://inst.eecs.berkeley.edu//~cs162/fa13/Nachos/xgcc/mips-x86_64.linux-xgcc.tar.gz</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Place it to somewhere.</p>
<p>（Well, that’s the original one. But my Experiment uses 3.4 version modified by my teacher.）</p>
<p>Before anything, make sure you have install GNU/GCC, and csh.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install gcc-multilib g++-multilib</span><br><span class="line">sudo apt-get install manpages-dev</span><br><span class="line">sudo apt-get install csh</span><br></pre></td></tr></table></figure>
<p>Unzip it.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf nachos-4.0.tar</span><br></pre></td></tr></table></figure>
<p>Use <code>cp -r</code> to copy <strong>Code</strong> directory to somewhere.</p>
<p>Copy <code>gcc-2.8.1-mips.tar.gz</code> to <code>usr/local</code> directory, and unzip it.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp gcc-2.8.1-mips.tar.gz &#x2F;usr&#x2F;local</span><br><span class="line">cd usr&#x2F;local</span><br><span class="line">tar -xvf gcc-2.8.1-mips.tar.gz</span><br></pre></td></tr></table></figure>
<p>Add permission by <code>chmod +rwx filename</code> .</p>
<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>Go back to the <code>Code</code> folder. Here is what we have in <code>Code</code> directory.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ass3  bin      lab2  lab5    machine          Makefile.dep  network  threads   vm</span><br><span class="line">ass4  filesys  lab3  lab7-8  Makefile.common  monitor       test     userprog</span><br></pre></td></tr></table></figure>
<p>Go to <code>/test/arch/unknown-i386-linux</code> folder, delete files in folders <code>depends</code> and <code>objects</code> (don’t remove the two folders), and in <code>test</code>, delete all files end in <code>.noff</code>.</p>
<h3 id="Test-test"><a href="#Test-test" class="headerlink" title="Test test"></a>Test test</h3><p>Makefile.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>
<p>If failed, remember to add permission to certain files (<code>_the_directory_name_/bin/arch/unknown-i386-linux/bin/coff2noff</code> &amp; <code>coff2flat</code>) suggested. If success, we got some <code>.noff</code> files in test: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arch    halt.flat  Makefile       matmult.c     matmult.noff  shell.c     shell.noff  sort.flat  start.s halt.c  halt.noff  Makefile.orig  matmult.flat  script        shell.flat  sort.c      sort.noff</span><br></pre></td></tr></table></figure>
<p>And something like:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Converting to flat file: arch/unknown-i386-linux/bin/sort.flat &lt;&lt;&lt;</span></span><br><span class="line">../bin/arch/unknown-i386-linux/bin/coff2flat arch/unknown-i386-linux/objects/sort.coff arch/unknown-i386-linux/bin/sort.flat</span><br><span class="line">Loading 3 sections:</span><br><span class="line">        ".text", filepos 0xd0, mempos 0x0, size 0x2c0</span><br><span class="line">        ".data", filepos 0x390, mempos 0x2c0, size 0x0</span><br><span class="line">        ".bss", filepos 0x0, mempos 0x2c0, size 0x1000</span><br><span class="line">Adding stack of size: 1024</span><br></pre></td></tr></table></figure>
<h3 id="Test-threads"><a href="#Test-threads" class="headerlink" title="Test threads"></a>Test threads</h3><p>Make. Ignore Warnings. Then we get something like this: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Assembling switch-linux.s &lt;&lt;&lt;</span></span><br><span class="line">/lib/cpp  -D HOST_i386 -D HOST_LINUX switch-linux.s &gt; arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line">as -o arch/unknown-i386-linux/objects/switch-linux.o arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line">switch-linux.s: Assembler messages:</span><br><span class="line">switch-linux.s:61: Warning: indirect call without `*'</span><br><span class="line">switch-linux.s:62: Warning: indirect call without `*'</span><br><span class="line">switch-linux.s:63: Warning: indirect call without `*'</span><br><span class="line">rm arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Linking arch/unknown-i386-linux/bin/nachos &lt;&lt;&lt;</span></span><br><span class="line">g++ arch/unknown-i386-linux/objects/main.o arch/unknown-i386-linux/objects/list.o arch/unknown-i386-linux/objects/scheduler.o arch/unknown-i386-linux/objects/synch.o arch/unknown-i386-linux/objects/synchlist.o arch/unknown-i386-linux/objects/system.o arch/unknown-i386-linux/objects/thread.o arch/unknown-i386-linux/objects/utility.o arch/unknown-i386-linux/objects/threadtest.o arch/unknown-i386-linux/objects/synchtest.o arch/unknown-i386-linux/objects/interrupt.o arch/unknown-i386-linux/objects/sysdep.o arch/unknown-i386-linux/objects/stats.o arch/unknown-i386-linux/objects/timer.o arch/unknown-i386-linux/objects/switch-linux.o  -o arch/unknown-i386-linux/bin/nachos</span><br><span class="line">ln -sf arch/unknown-i386-linux/bin/nachos nachos</span><br></pre></td></tr></table></figure>
<p>If successful, a link-file named <code>nachos</code> will be generated.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">arch         dump     main.cc         nachos        switch.h        synch.cc      synchlist.h   system.h   threadtest.cc</span><br><span class="line">bool.h       list.cc  Makefile        scheduler.cc  switch-linux.s  synch.h       synchtest.cc  thread.cc  utility.cc</span><br><span class="line">copyright.h  list.h   Makefile.local  scheduler.h   switch.s        synchlist.cc  system.cc     thread.h   utility.h</span><br></pre></td></tr></table></figure>
<p>Run <code>./nachos</code>, then got:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 130, idle 0, system 130, user 0</span><br><span class="line">Disk I/O: reads 0, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure>
<h3 id="Test-filesys"><a href="#Test-filesys" class="headerlink" title="Test filesys"></a>Test filesys</h3><p>Make, and got: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Assembling ../threads/switch-linux.s &lt;&lt;&lt;</span></span><br><span class="line">/lib/cpp  -D HOST_i386 -D HOST_LINUX ../threads/switch-linux.s &gt; arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line">as -o arch/unknown-i386-linux/objects/switch-linux.o arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line">../threads/switch-linux.s: Assembler messages:</span><br><span class="line">../threads/switch-linux.s:61: Warning: indirect call without `*'</span><br><span class="line">../threads/switch-linux.s:62: Warning: indirect call without `*'</span><br><span class="line">../threads/switch-linux.s:63: Warning: indirect call without `*'</span><br><span class="line">rm arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Linking arch/unknown-i386-linux/bin/nachos &lt;&lt;&lt;</span></span><br><span class="line">g++ arch/unknown-i386-linux/objects/main.o arch/unknown-i386-linux/objects/list.o arch/unknown-i386-linux/objects/scheduler.o arch/unknown-i386-linux/objects/synch.o arch/unknown-i386-linux/objects/synchlist.o arch/unknown-i386-linux/objects/system.o arch/unknown-i386-linux/objects/thread.o arch/unknown-i386-linux/objects/utility.o arch/unknown-i386-linux/objects/threadtest.o arch/unknown-i386-linux/objects/synchtest.o arch/unknown-i386-linux/objects/interrupt.o arch/unknown-i386-linux/objects/sysdep.o arch/unknown-i386-linux/objects/stats.o arch/unknown-i386-linux/objects/timer.o arch/unknown-i386-linux/objects/bitmap.o arch/unknown-i386-linux/objects/directory.o arch/unknown-i386-linux/objects/filehdr.o arch/unknown-i386-linux/objects/filesys.o arch/unknown-i386-linux/objects/fstest.o arch/unknown-i386-linux/objects/openfile.o arch/unknown-i386-linux/objects/synchdisk.o arch/unknown-i386-linux/objects/disk.o arch/unknown-i386-linux/objects/switch-linux.o  -o arch/unknown-i386-linux/bin/nachos</span><br><span class="line">ln -sf arch/unknown-i386-linux/bin/nachos nachos</span><br></pre></td></tr></table></figure>
<p>Run <code>./nachos</code>, then got:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 1190, idle 1000, system 190, user 0</span><br><span class="line">Disk I/O: reads 2, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure>
<h3 id="Test-vm"><a href="#Test-vm" class="headerlink" title="Test vm"></a>Test vm</h3><p>Make then run: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 130, idle 0, system 130, user 0</span><br><span class="line">Disk I/O: reads 0, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure>
<h3 id="Test-monitor"><a href="#Test-monitor" class="headerlink" title="Test monitor"></a>Test monitor</h3><p>Make then run: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 590, idle 0, system 590, user 0</span><br><span class="line">Disk I/O: reads 0, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure>
<h3 id="Test-network"><a href="#Test-network" class="headerlink" title="Test network"></a>Test network</h3><p>Make then run: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br></pre></td></tr></table></figure>
<h3 id="Test-userprog"><a href="#Test-userprog" class="headerlink" title="Test userprog"></a>Test userprog</h3><p>Make but I got: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">../Makefile.common:92: recipe for target 'arch/unknown-i386-linux/bin/nachos' failed</span><br><span class="line">make: *** [arch/unknown-i386-linux/bin/nachos] Error 1</span><br></pre></td></tr></table></figure>
<p>Well, forget it.</p>
<h3 id="Test-lab3"><a href="#Test-lab3" class="headerlink" title="Test lab3"></a>Test lab3</h3><p>In <code>prodcons++.cc</code>, add below to use <code>create</code> and <code>write</code> system call</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt; /* create */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;  /* create */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;     /* create */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;    /* write */</span></span></span><br></pre></td></tr></table></figure>
<p>Then make, it should be OK: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Linking arch/unknown-i386-linux/bin/nachos &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 arch/unknown-i386-linux/objects/main.o arch/unknown-i386-linux/objects/list.o arch/unknown-i386-linux/objects/scheduler.o arch/unknown-i386-linux/objects/synch.o arch/unknown-i386-linux/objects/synchlist.o arch/unknown-i386-linux/objects/system.o arch/unknown-i386-linux/objects/thread.o arch/unknown-i386-linux/objects/utility.o arch/unknown-i386-linux/objects/threadtest.o arch/unknown-i386-linux/objects/synchtest.o arch/unknown-i386-linux/objects/interrupt.o arch/unknown-i386-linux/objects/sysdep.o arch/unknown-i386-linux/objects/stats.o arch/unknown-i386-linux/objects/timer.o arch/unknown-i386-linux/objects/prodcons++.o arch/unknown-i386-linux/objects/ring.o arch/unknown-i386-linux/objects/switch-linux.o  -o arch/unknown-i386-linux/bin/nachos</span><br><span class="line">ln -sf arch/unknown-i386-linux/bin/nachos nachos</span><br></pre></td></tr></table></figure>
<p>Run <code>./nachos</code> .</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 10, idle 0, system 10, user 0</span><br><span class="line">Disk I/O: reads 0, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure>
<h3 id="Test-lab5"><a href="#Test-lab5" class="headerlink" title="Test lab5"></a>Test lab5</h3><p>First add a <code>Makefile</code> (copied from lab3), well, forget it…</p>
<h3 id="Test-lab7-8"><a href="#Test-lab7-8" class="headerlink" title="Test lab7-8"></a>Test lab7-8</h3><p>Edit <code>Makefile.local</code> :</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># include ../ass2/Makefile.local</span></span><br></pre></td></tr></table></figure>
<p>Then Make and Run: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 130, idle 0, system 130, user 0</span><br><span class="line">Disk I/O: reads 0, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure>
<h2 id="If-using-x64-Ubuntu"><a href="#If-using-x64-Ubuntu" class="headerlink" title="If using x64 Ubuntu"></a>If using x64 Ubuntu</h2><p>Install <code>libc6-dev-i386</code>: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libc6-dev-i386</span><br></pre></td></tr></table></figure>
<p>In <code>code</code> directory, edit <code>Makefile.common</code> :</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CFLAGS = -g -Wall -Wshadow $(INCPATH) $(DEFINES) $(HOST) -DCHANGED</span></span><br><span class="line">CFLAGS = -g -Wall -Wshadow -m32 <span class="variable">$(INCPATH)</span> <span class="variable">$(DEFINES)</span> <span class="variable">$(HOST)</span> -DCHANGED</span><br></pre></td></tr></table></figure>
<p>Also edit <code>Makefile.dep</code> :</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#CPP=/lib/cpp</span></span><br><span class="line"><span class="comment">#CC = g++</span></span><br><span class="line"><span class="comment">#LD = g++</span></span><br><span class="line"><span class="comment">#AS = as</span></span><br><span class="line">CPP= gcc -E -m32</span><br><span class="line">CC = g++ -m32</span><br><span class="line">LD = g++ -m32</span><br><span class="line">AS = as --32</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Squarified Treemap</title>
    <url>/2020/11/13/Squarified-Treemap/</url>
    <content><![CDATA[<h1 id="Squarified-Treemap"><a href="#Squarified-Treemap" class="headerlink" title="Squarified Treemap"></a>Squarified Treemap</h1><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">procedure squarify(list of real children, list of real row, real w)</span><br><span class="line">begin</span><br><span class="line">	real c = head(children);</span><br><span class="line">	<span class="keyword">if</span> worst(row, w)  worst(row++[c], w) then</span><br><span class="line">		squarify(tail(children), row++[c], w)</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		layoutrow(row);</span><br><span class="line">		squarify(children, [], width());</span><br><span class="line">	fi</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><img src="https://www.researchgate.net/profile/Fernando_Marson3/publication/47696530/figure/fig13/AS:325701468213287@1454664689810/Example-of-squarified-treemap-process-6.png" alt="img-001"></p>
<p>如图所示，数据为 <code>[6, 6, 4, 3, 2, 2, 1]</code> , <code>sum = 24 = 6 * 4</code> 所以 treemap 可用 $6×4$ 的矩形表示。</p>
<ol>
<li>放入 6，优先靠着短边放，比例为 <code>4:1.5</code>， 标记灰色(表示可更改)。</li>
<li>放入 6，测试与原先放置的 6 堆叠，靠着短边放，所得 2 个 $2×3$ 的矩形，<code>长边:短边=3:2</code> ，小于 <code>4:1.5</code> 的放置方式。可取，同时加入灰色标记。</li>
<li>放入 4， 如 Step 3 所示，<code>max(长边:短边) in step3</code> &gt; <code>max(长边:短边) in step 4</code> ，故采取 Step 4 的放置方式，同时把原先标记灰色的部分画出来，标记白色(表示不可更改)。灰色清空，新加入的 4 标记灰色。</li>
<li>循环方式如前述，最后把剩余空间填满。</li>
</ol>
<p>代码采用递归，判断思路如上。</p>
<h2 id="Major-function-code-of-the-Algorithm"><a href="#Major-function-code-of-the-Algorithm" class="headerlink" title="Major function code of the Algorithm"></a>Major function code of the Algorithm</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">squarify</span>(<span class="params">children, modifiable, w, h, sum, m_area</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//console.log("current in: ",children[0], modifiable);</span></span><br><span class="line">            <span class="keyword">if</span>(children.length === <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"quit"</span>);</span><br><span class="line">                <span class="keyword">var</span> to_right = modifiable[<span class="number">0</span>].verti;</span><br><span class="line">                draw(modifiable, to_right);<span class="comment">// ..............</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> c = children.shift();</span><br><span class="line">            <span class="keyword">var</span> _area = c, _wid, _hei, verti;</span><br><span class="line">            <span class="keyword">if</span>(modifiable.length === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//console.log("case 0");</span></span><br><span class="line">                m_area += c;</span><br><span class="line">                <span class="keyword">if</span>(w &lt;= h) &#123;<span class="comment">// vertical set</span></span><br><span class="line">                    _wid = w;</span><br><span class="line">                    verti = <span class="literal">true</span>;</span><br><span class="line">                    _hei = c / _wid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="comment">// horizontal set</span></span><br><span class="line">                    _hei = h;</span><br><span class="line">                    _wid = c / _hei;</span><br><span class="line">                    verti = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                squarify(children,modifiable,w,h,sum, m_area);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//case 1</span></span><br><span class="line">                <span class="keyword">var</span> leftover = sum - m_area;</span><br><span class="line">                <span class="keyword">var</span> neww, newh;</span><br><span class="line">                <span class="keyword">if</span> (w &gt; h) &#123;</span><br><span class="line">                    neww = leftover / h;</span><br><span class="line">                    newh = h;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    neww = w;</span><br><span class="line">                    newh = leftover / w;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (neww &lt;= newh)&#123;<span class="comment">// vertical set</span></span><br><span class="line">                    _wid = neww;</span><br><span class="line">                    _hei = c / _wid;</span><br><span class="line">                    verti = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">// horizontal set</span></span><br><span class="line">                    _wid = c / newh;</span><br><span class="line">                    _hei = newh;</span><br><span class="line">                    verti= <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//console.log("w,h",_wid,_hei);</span></span><br><span class="line">                <span class="keyword">var</span> temp1 = <span class="built_in">Math</span>.max(_wid,_hei)/<span class="built_in">Math</span>.min(_wid,_hei);<span class="comment">// put in new area</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// case 2</span></span><br><span class="line">                <span class="keyword">var</span> temp_area = m_area + c;<span class="comment">// else include in old area</span></span><br><span class="line">                <span class="keyword">var</span> w1, h1, temp2;</span><br><span class="line">                <span class="keyword">if</span>(w &gt; h) &#123;</span><br><span class="line">                    w1 = temp_area / h;</span><br><span class="line">                    h1 = h;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    w1 = w;</span><br><span class="line">                    h1 = temp_area / w;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(w1 &lt;= h1)&#123;<span class="comment">// stack up, width is the same</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"current 1"</span>, w1, h1);</span><br><span class="line">                    temp2 = <span class="built_in">Math</span>.max(w1,c/w1)/<span class="built_in">Math</span>.min(w1,c/w1);<span class="comment">// put in old area, w1/(c/w1), wid:hei</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)</span><br><span class="line">                        temp2 = <span class="built_in">Math</span>.max(temp2, <span class="built_in">Math</span>.max(w1,modifiable[i]._area/w1)/<span class="built_in">Math</span>.min(w1,modifiable[i]._area/w1));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">//stack right, height is the same</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"current 2"</span>, w1, h1);</span><br><span class="line">                    temp2 = <span class="built_in">Math</span>.max(h1,c/h1)/<span class="built_in">Math</span>.min(h1,c/h1);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)</span><br><span class="line">                        temp2 = <span class="built_in">Math</span>.max(temp2, <span class="built_in">Math</span>.max(modifiable[i]._area/h1,h1)/<span class="built_in">Math</span>.min(modifiable[i]._area/h1,h1));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//console.log("t1,t2",temp1,temp2);</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// case 1</span></span><br><span class="line">                <span class="keyword">if</span> (temp1 &lt;= temp2)&#123;<span class="comment">// clear all modifiable, draw</span></span><br><span class="line">                    <span class="comment">//console.log("case 1");</span></span><br><span class="line">                    <span class="keyword">var</span> to_right = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(w &lt;= h)</span><br><span class="line">                        to_right = <span class="literal">false</span>;</span><br><span class="line">                    draw(modifiable, to_right);<span class="comment">// ..............</span></span><br><span class="line">                    </span><br><span class="line">                    modifiable = [];<span class="comment">//clear it</span></span><br><span class="line">                    modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                    squarify(children,modifiable,neww,newh,sum-m_area,_area);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//case 2</span></span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">// put in modifiable</span></span><br><span class="line">                    <span class="comment">//console.log("case 2");</span></span><br><span class="line">                    <span class="keyword">if</span>(w &gt; h)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)&#123;</span><br><span class="line">                            <span class="keyword">var</span> cur_area = modifiable[i]._area;</span><br><span class="line">                            <span class="keyword">var</span> h_tem = cur_area / w1;</span><br><span class="line">                            modifiable[i]._wid = w1;</span><br><span class="line">                            modifiable[i]._hei = h_tem;</span><br><span class="line">                            modifiable[i].verti = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        _wid = w1;</span><br><span class="line">                        _hei = c / _wid;</span><br><span class="line">                        verti = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)&#123;</span><br><span class="line">                            <span class="keyword">var</span> cur_area = modifiable[i]._area;</span><br><span class="line">                            <span class="keyword">var</span> w_tem = cur_area / h1;</span><br><span class="line">                            modifiable[i]._wid = w_tem;</span><br><span class="line">                            modifiable[i]._hei = h1;</span><br><span class="line">                            modifiable[i].verti = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        _wid = c / h1;</span><br><span class="line">                        _hei = h1;</span><br><span class="line">                        verti = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                    m_area += c;</span><br><span class="line">                    squarify(children,modifiable,w,h,sum,m_area);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>数据采用 <code>javascript</code> 的 <code>Math.random()</code> 随机生成，个数为 10 ，范围 1 到 100 。(可是这个函数生成的随机数不太随机……)</p>
<p>整体 Treemap 的长宽比固定为 3:2 ，其中一个生成效果图如下：</p>
<p><img src="https://i.loli.net/2020/11/22/lBhtcrIbQzq6Nf9.png" alt="image.png"></p>
<p>有点问题就是，如果随机生成的这些数十分接近的话，会变成堆叠的长矩形……</p>
<p><img src="https://i.loli.net/2020/11/22/aFRp5SKOoCrzjyi.png" alt="image.png"></p>
<h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;header&gt;treemap&lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;svg id="svgOne" viewBox="0 0 610 410" xmlns="http:/</span><span class="regexp">/www.w3.org/</span><span class="number">2000</span>/svg<span class="string">"&gt;&lt;/svg&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        var margin = &#123;top: 10, right: 10, bottom: 10, left: 10&#125;,</span></span><br><span class="line"><span class="string">          width = 600 - margin.left - margin.right,</span></span><br><span class="line"><span class="string">          height = 400 - margin.top - margin.bottom;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var last_vert = true, beginx = margin.left, beginy = margin.top;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var colori = 0;</span></span><br><span class="line"><span class="string">        var colorset = ['#ABDE9C','#5EAC39', '#688F30', '#256E4B', '#285D77', '#3A6CAD', '#489CC2',</span></span><br><span class="line"><span class="string">        '#D4A77F', '#E1CBA6', '#EBECC6', '#E3F2D8', '#EDC9DB', '#CFB5E6', '#ADA8E2'];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var randtimes = 10, maxrand = 100;</span></span><br><span class="line"><span class="string">        var data = [];</span></span><br><span class="line"><span class="string">        for(var i = 0; i &lt; randtimes; i++)</span></span><br><span class="line"><span class="string">            data.push(Math.floor((Math.random() * maxrand) + 1));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //var data = [2, 4, 23, 33, 69, 90, 54, 22, 61, 34, 32];</span></span><br><span class="line"><span class="string">        data.sort(function(a, b)&#123;return b - a&#125;);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        var sum = data.reduce(function(a, b)&#123; return a + b; &#125;, 0);</span></span><br><span class="line"><span class="string">        console.log("</span>data, sum<span class="string">", data, sum);</span></span><br><span class="line"><span class="string">        //var tempsum = prime_factor(sum);</span></span><br><span class="line"><span class="string">        //console.log("</span>tempsum<span class="string">", tempsum);</span></span><br><span class="line"><span class="string">        var tmpd = Math.sqrt(sum / 6);</span></span><br><span class="line"><span class="string">        var ori_w = 3 * tmpd, ori_h = 2 * tmpd;</span></span><br><span class="line"><span class="string">        console.log("</span>original wid, <span class="attr">hei</span>: <span class="string">", ori_w, ori_h);</span></span><br><span class="line"><span class="string">        var svgns = "</span>http:<span class="comment">//www.w3.org/2000/svg";</span></span><br><span class="line"></span><br><span class="line">        squarify(data,[],ori_w,ori_h,sum,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">drawRect</span>(<span class="params">x1, y1, w, h, area</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> rect = <span class="built_in">document</span>.createElementNS(svgns, <span class="string">'rect'</span>);</span><br><span class="line">            rect.setAttributeNS(<span class="literal">null</span>, <span class="string">'x'</span>, x1);</span><br><span class="line">            rect.setAttributeNS(<span class="literal">null</span>, <span class="string">'y'</span>, y1);</span><br><span class="line">            rect.setAttributeNS(<span class="literal">null</span>, <span class="string">'height'</span>, h - <span class="number">1</span>);</span><br><span class="line">            rect.setAttributeNS(<span class="literal">null</span>, <span class="string">'width'</span>, w - <span class="number">1</span>);</span><br><span class="line">            rect.setAttributeNS(<span class="literal">null</span>, <span class="string">'fill'</span>, colorset[colori]);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'svgOne'</span>).appendChild(rect);</span><br><span class="line"></span><br><span class="line">            colori++;</span><br><span class="line">            colori%=colorset.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> newText = <span class="built_in">document</span>.createElementNS(svgns,<span class="string">"text"</span>);</span><br><span class="line">            newText.setAttributeNS(<span class="literal">null</span>,<span class="string">"x"</span>,x1+w/<span class="number">2</span><span class="number">-1</span>);     </span><br><span class="line">            newText.setAttributeNS(<span class="literal">null</span>,<span class="string">"y"</span>,y1+h/<span class="number">2</span><span class="number">-1</span>); </span><br><span class="line">            newText.setAttributeNS(<span class="literal">null</span>,<span class="string">"font-size"</span>,<span class="string">"12"</span>);</span><br><span class="line">            <span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(area);</span><br><span class="line">            newText.appendChild(textNode);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'svgOne'</span>).appendChild(newText);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">rectangle, to_right</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(rectangle);</span><br><span class="line">            <span class="keyword">var</span> orix = beginx, oriy = beginy;</span><br><span class="line">            <span class="keyword">var</span> ratio1, ratio2;</span><br><span class="line">            <span class="keyword">var</span> sameDir = rectangle[<span class="number">0</span>].vert;</span><br><span class="line">            <span class="keyword">if</span>(sameDir == last_vert)</span><br><span class="line">                sameDir = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sameDir = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rectangle.length; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> _area = rectangle[i]._area;</span><br><span class="line">                <span class="keyword">var</span> vert = rectangle[i].verti;</span><br><span class="line">                last_vert = vert;</span><br><span class="line">                <span class="keyword">var</span> w = rectangle[i]._wid, h = rectangle[i]._hei;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"area, width, height, vert?"</span>, _area, w, h, vert);</span><br><span class="line">                ratio1 = w/ori_w*width, ratio2 = h/ori_h*height;</span><br><span class="line">                drawRect(beginx, beginy, ratio1, ratio2, _area);</span><br><span class="line">                <span class="keyword">if</span>(vert == <span class="literal">true</span>)&#123;</span><br><span class="line">                    beginy += ratio2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    beginx += ratio1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(to_right == <span class="literal">false</span>)&#123;<span class="comment">// to below</span></span><br><span class="line">                beginx = orix;</span><br><span class="line">                beginy = oriy + ratio2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="comment">//to right</span></span><br><span class="line">                beginx = orix + ratio1;</span><br><span class="line">                beginy = oriy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// assume w &gt; h, put in h first</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">squarify</span>(<span class="params">children, modifiable, w, h, sum, m_area</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//console.log("current in: ",children[0], modifiable);</span></span><br><span class="line">            <span class="keyword">if</span>(children.length === <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"quit"</span>);</span><br><span class="line">                <span class="keyword">var</span> to_right = modifiable[<span class="number">0</span>].verti;</span><br><span class="line">                draw(modifiable, to_right);<span class="comment">// ..............</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> c = children.shift();</span><br><span class="line">            <span class="keyword">var</span> _area = c, _wid, _hei, verti;</span><br><span class="line">            <span class="keyword">if</span>(modifiable.length === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//console.log("case 0");</span></span><br><span class="line">                m_area += c;</span><br><span class="line">                <span class="keyword">if</span>(w &lt;= h) &#123;<span class="comment">// vertical set</span></span><br><span class="line">                    _wid = w;</span><br><span class="line">                    verti = <span class="literal">true</span>;</span><br><span class="line">                    _hei = c / _wid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="comment">// horizontal set</span></span><br><span class="line">                    _hei = h;</span><br><span class="line">                    _wid = c / _hei;</span><br><span class="line">                    verti = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                squarify(children,modifiable,w,h,sum, m_area);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//case 1</span></span><br><span class="line">                <span class="keyword">var</span> leftover = sum - m_area;</span><br><span class="line">                <span class="keyword">var</span> neww, newh;</span><br><span class="line">                <span class="keyword">if</span> (w &gt; h) &#123;</span><br><span class="line">                    neww = leftover / h;</span><br><span class="line">                    newh = h;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    neww = w;</span><br><span class="line">                    newh = leftover / w;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (neww &lt;= newh)&#123;<span class="comment">// vertical set</span></span><br><span class="line">                    _wid = neww;</span><br><span class="line">                    _hei = c / _wid;</span><br><span class="line">                    verti = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">// horizontal set</span></span><br><span class="line">                    _wid = c / newh;</span><br><span class="line">                    _hei = newh;</span><br><span class="line">                    verti= <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//console.log("w,h",_wid,_hei);</span></span><br><span class="line">                <span class="keyword">var</span> temp1 = <span class="built_in">Math</span>.max(_wid,_hei)/<span class="built_in">Math</span>.min(_wid,_hei);<span class="comment">// put in new area</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// case 2</span></span><br><span class="line">                <span class="keyword">var</span> temp_area = m_area + c;<span class="comment">// else include in old area</span></span><br><span class="line">                <span class="keyword">var</span> w1, h1, temp2;</span><br><span class="line">                <span class="keyword">if</span>(w &gt; h) &#123;</span><br><span class="line">                    w1 = temp_area / h;</span><br><span class="line">                    h1 = h;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    w1 = w;</span><br><span class="line">                    h1 = temp_area / w;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(w1 &lt;= h1)&#123;<span class="comment">// stack up, width is the same</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"current 1"</span>, w1, h1);</span><br><span class="line">                    temp2 = <span class="built_in">Math</span>.max(w1,c/w1)/<span class="built_in">Math</span>.min(w1,c/w1);<span class="comment">// put in old area, w1/(c/w1), wid:hei</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)</span><br><span class="line">                        temp2 = <span class="built_in">Math</span>.max(temp2, <span class="built_in">Math</span>.max(w1,modifiable[i]._area/w1)/<span class="built_in">Math</span>.min(w1,modifiable[i]._area/w1));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">//stack right, height is the same</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"current 2"</span>, w1, h1);</span><br><span class="line">                    temp2 = <span class="built_in">Math</span>.max(h1,c/h1)/<span class="built_in">Math</span>.min(h1,c/h1);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)</span><br><span class="line">                        temp2 = <span class="built_in">Math</span>.max(temp2, <span class="built_in">Math</span>.max(modifiable[i]._area/h1,h1)/<span class="built_in">Math</span>.min(modifiable[i]._area/h1,h1));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//console.log("t1,t2",temp1,temp2);</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// case 1</span></span><br><span class="line">                <span class="keyword">if</span> (temp1 &lt;= temp2)&#123;<span class="comment">// clear all modifiable, draw</span></span><br><span class="line">                    <span class="comment">//console.log("case 1");</span></span><br><span class="line">                    <span class="keyword">var</span> to_right = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(w &lt;= h)</span><br><span class="line">                        to_right = <span class="literal">false</span>;</span><br><span class="line">                    draw(modifiable, to_right);<span class="comment">// ..............</span></span><br><span class="line">                    </span><br><span class="line">                    modifiable = [];<span class="comment">//clear it</span></span><br><span class="line">                    modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                    squarify(children,modifiable,neww,newh,sum-m_area,_area);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//case 2</span></span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">// put in modifiable</span></span><br><span class="line">                    <span class="comment">//console.log("case 2");</span></span><br><span class="line">                    <span class="keyword">if</span>(w &gt; h)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)&#123;</span><br><span class="line">                            <span class="keyword">var</span> cur_area = modifiable[i]._area;</span><br><span class="line">                            <span class="keyword">var</span> h_tem = cur_area / w1;</span><br><span class="line">                            modifiable[i]._wid = w1;</span><br><span class="line">                            modifiable[i]._hei = h_tem;</span><br><span class="line">                            modifiable[i].verti = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        _wid = w1;</span><br><span class="line">                        _hei = c / _wid;</span><br><span class="line">                        verti = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)&#123;</span><br><span class="line">                            <span class="keyword">var</span> cur_area = modifiable[i]._area;</span><br><span class="line">                            <span class="keyword">var</span> w_tem = cur_area / h1;</span><br><span class="line">                            modifiable[i]._wid = w_tem;</span><br><span class="line">                            modifiable[i]._hei = h1;</span><br><span class="line">                            modifiable[i].verti = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        _wid = c / h1;</span><br><span class="line">                        _hei = h1;</span><br><span class="line">                        verti = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                    m_area += c;</span><br><span class="line">                    squarify(children,modifiable,w,h,sum,m_area);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Visualization</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>买房</title>
    <url>/2020/05/05/%E4%B9%B0%E6%88%BF/</url>
    <content><![CDATA[<h1 id="买房问题"><a href="#买房问题" class="headerlink" title="买房问题"></a><strong>买房问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">蒜头君从现在开始工作，年薪 N 万。他希望在蒜厂附近买一套 60 平米的房子，现在价格是 200 万。假设房子价格以每年百分之 K 增长，并且蒜头君未来年薪不变，且不吃不喝，不用交税，每年所得 N 万全都积攒起来，问第几年能够买下这套房子？（第一年年薪 N 万，房价 200 万）</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一行，包含两个正整数 N (10 ≤N ≤ 50)，K (1 ≤ K ≤ 20)，中间用单个空格隔开。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果在第 20 年或者之前就能买下这套房子，则输出一个整数 M，表示最早需要在第 M 年能买下；否则输出&quot;Impossible&quot;。</span><br><span class="line">输出时每行末尾的多余空格，不影响答案正确性</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">50 10</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">8</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    32767 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>纯数学题。假设 <em>x</em> 年后可买房，则：</p>
<script type="math/tex; mode=display">
xN ≥ 200(1+0.01k)^{x-1}
，1 ≤ x ≤ 20</script><p>逐年枚举 <em>x</em> 求解就行，注意 <code>float</code> 的细节。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k).eof()) &#123;</span><br><span class="line">		<span class="keyword">float</span> y = (<span class="keyword">float</span>) n / <span class="number">200</span>;</span><br><span class="line">		<span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">float</span> z = (<span class="keyword">float</span>)(powf((<span class="keyword">float</span>)(<span class="number">1</span> + k * <span class="number">0.01</span>), (<span class="keyword">float</span>)(x - <span class="number">1</span>))) / x;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (z &gt;= y) &#123;</span><br><span class="line">			x++;</span><br><span class="line">			<span class="keyword">if</span> (x &gt; <span class="number">20</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			z = (<span class="keyword">float</span>) (powf((<span class="keyword">float</span>)(<span class="number">1</span> + k * <span class="number">0.01</span>), (<span class="keyword">float</span>)(x - <span class="number">1</span>))) / x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x &gt; <span class="number">20</span>)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>三维迷宫</title>
    <url>/2020/05/09/%E4%B8%89%E7%BB%B4%E8%BF%B7%E5%AE%AB/</url>
    <content><![CDATA[<h1 id="三维迷宫"><a href="#三维迷宫" class="headerlink" title="三维迷宫"></a><strong>三维迷宫</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zjm 被困在一个三维的空间中, 现在要寻找最短路径逃生！</span><br><span class="line">空间由立方体单位构成。</span><br><span class="line">zjm 每次向上下前后左右移动一个单位需要一分钟，且 zjm 不能对角线移动。</span><br><span class="line">空间的四周封闭。zjm 的目标是走到空间的出口。</span><br><span class="line">是否存在逃出生天的可能性？如果存在，则需要多少时间？</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入第一行是一个数表示空间的数量。</span><br><span class="line">每个空间的描述的第一行为 L, R 和 C（皆不超过 30）。</span><br><span class="line">L 表示空间的高度，R 和 C 分别表示每层空间的行与列的大小。</span><br><span class="line">随后 L 层，每层 R 行，每行 C 个字符。</span><br><span class="line">每个字符表示空间的一个单元。&#39;#&#39; 表示不可通过单元，&#39;.&#39; 表示空白单元。</span><br><span class="line">zjm 的起始位置在 &#39;S&#39;，出口为 &#39;E&#39;。每层空间后都有一个空行。</span><br><span class="line">L, R 和 C 均为 0 时输入结束。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每个空间对应一行输出。</span><br><span class="line">如果可以逃生，则输出如下</span><br><span class="line">Escaped in x minute(s).</span><br><span class="line">x 为最短脱离时间。</span><br><span class="line"></span><br><span class="line">如果无法逃生，则输出如下</span><br><span class="line">Trapped!</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">3 4 5</span><br><span class="line">S....</span><br><span class="line">.###.</span><br><span class="line">.##..</span><br><span class="line">###.#</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">##.##</span><br><span class="line">##...</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">#.###</span><br><span class="line">####E</span><br><span class="line"></span><br><span class="line">1 3 3</span><br><span class="line">S##</span><br><span class="line">#E#</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">Escaped in 11 minute(s).</span><br><span class="line">Trapped!</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>三维空间的广搜，每次上下左右前后考虑，记录搜索路径，输出步数，没啥坑。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">coordinate</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> x, y, z;</span><br><span class="line">	coordinate() &#123; x = <span class="number">0</span>; y = <span class="number">0</span>; z = <span class="number">0</span>; &#125;</span><br><span class="line">	coordinate(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _z) :x(_x), y(_y), z(_z) &#123;  &#125;</span><br><span class="line">	coordinate(<span class="keyword">const</span> coordinate&amp; c) &#123;</span><br><span class="line">		x = c.x;</span><br><span class="line">		y = c.y;</span><br><span class="line">		z = c.z;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> coordinate&amp; C) &#123;</span><br><span class="line">		<span class="keyword">return</span> (x != C.x || y != C.y || z != C.z);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> coordinate&amp; C) &#123;</span><br><span class="line">		<span class="keyword">return</span> (x == C.x || y == C.y || z == C.z);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">char</span> room[maxN][maxN][maxN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dX[] = &#123; <span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dY[] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dZ[] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maze</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> c, coordinate S, coordinate E)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> reached[maxN][maxN][maxN] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line">	<span class="built_in">queue</span>&lt;coordinate&gt; q;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; steps;</span><br><span class="line">	q.push(S);</span><br><span class="line">	steps.push(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">		coordinate cur = q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">int</span> stp = steps.front();</span><br><span class="line">		steps.pop();</span><br><span class="line">		<span class="keyword">int</span> cx = cur.x, cy = cur.y, cz = cur.z;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> tx = cx + dX[i];</span><br><span class="line">			<span class="keyword">int</span> ty = cy + dY[i];</span><br><span class="line">			<span class="keyword">int</span> tz = cz + dZ[i];</span><br><span class="line">			<span class="keyword">if</span> (tx &gt;= <span class="number">0</span> &amp;&amp; ty &gt;= <span class="number">0</span> &amp;&amp; tz &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">				tx &lt; l &amp;&amp; ty &lt; r &amp;&amp; tz &lt; c &amp;&amp;</span><br><span class="line">				!reached[tx][ty][tz] &amp;&amp;</span><br><span class="line">				room[tx][ty][tz] != <span class="string">'#'</span>) &#123;</span><br><span class="line">				reached[tx][ty][tz] = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">if</span> (room[tx][ty][tz] == <span class="string">'E'</span>) &#123;</span><br><span class="line">					<span class="keyword">return</span> (stp + <span class="number">1</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="function">coordinate <span class="title">tempC</span><span class="params">(tx, ty, tz)</span></span>;</span><br><span class="line">				q.push(tempC);</span><br><span class="line">				steps.push(stp + <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> l, r, c;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; c).eof()) &#123;</span><br><span class="line">		<span class="keyword">if</span> (l == <span class="number">0</span> &amp;&amp; r == <span class="number">0</span> &amp;&amp; c == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		coordinate st, ed;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; r; j++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; c; k++) &#123;</span><br><span class="line">					<span class="built_in">cin</span> &gt;&gt; room[i][j][k];</span><br><span class="line">					<span class="keyword">if</span> (room[i][j][k] == <span class="string">'S'</span>) &#123;</span><br><span class="line">						<span class="function">coordinate <span class="title">tempC</span><span class="params">(i, j, k)</span></span>;</span><br><span class="line">						st = tempC;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (room[i][j][k] == <span class="string">'E'</span>) &#123;</span><br><span class="line">						<span class="function">coordinate <span class="title">tempC</span><span class="params">(i, j, k)</span></span>;</span><br><span class="line">						ed = tempC;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">		<span class="keyword">int</span> res = maze(l, r, c, st, ed);</span><br><span class="line">		<span class="keyword">if</span> (res != <span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"Escaped in "</span> &lt;&lt; res &lt;&lt; <span class="string">" minute(s)."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"Trapped!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>保护罩</title>
    <url>/2020/06/06/%E4%BF%9D%E6%8A%A4%E7%BD%A9/</url>
    <content><![CDATA[<h1 id="保护罩"><a href="#保护罩" class="headerlink" title="保护罩"></a><strong>保护罩</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设宇宙射线的发射点位于一个平面，ZJM已经通过特殊手段获取了所有宇宙射线的发射点，他们的坐标都是整数。而ZJM要构造一个保护罩，这个保护罩是一个圆形，中心位于⼀个宇宙射线的发射点上。为了节省经费，需要做一个最⼩⾯积的保护罩。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输⼊第一行一个正整数 n，表示宇宙射线发射点的个数</span><br><span class="line">接下来 N 行，每行两个整数 x,y，表示宇宙射线发射点的位置</span><br><span class="line">n ≤ 1000，|x| ≤ 100000，|y| ≤ 100000</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出包括两行</span><br><span class="line">第一行输出保护罩的中心坐标 x, y，用空格隔开</span><br><span class="line">第二行输出保护罩半径的平方</span><br><span class="line">（所有输出保留两位小数，如有多解，输出 x 较小的点，如扔有多解，输出 y 较小的点）</span><br><span class="line">无行末空格</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">5</span><br><span class="line">0 0</span><br><span class="line">0 1</span><br><span class="line">1 0</span><br><span class="line">0 -1</span><br><span class="line">-1 0</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">0.00 0.00</span><br><span class="line">1.00</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>一开始是想成最小圆覆盖问题，有注意到圆心在其中的某个点上，最后还是 <code>WA</code> 了……</p>
<p>然后其实这道题暴力就能解决，对于每个点，求出其他点到这个点的距离，取最大值，即得出这个点能到达的最远点；然后取这些最大值的最小值，就是所求半径。</p>
<p>全部用 <code>double</code> 来处理小数点问题。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span> &#123;</span></span><br><span class="line">	<span class="keyword">double</span> x, y;</span><br><span class="line">	dot() &#123; x = <span class="number">0</span>; y = <span class="number">0</span>; &#125;</span><br><span class="line">	dot(<span class="keyword">double</span> a, <span class="keyword">double</span> b) :x(a), y(b) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">disBetPow</span><span class="params">(dot a, dot b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> xx = a.x - b.x;</span><br><span class="line">	<span class="keyword">double</span> yy = a.y - b.y;</span><br><span class="line">	<span class="keyword">return</span> (<span class="keyword">double</span>)(xx * xx + yy * yy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="built_in">vector</span>&lt;dot&gt; v;</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="keyword">double</span> x, y;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		<span class="function">dot <span class="title">D</span><span class="params">(x, y)</span></span>;</span><br><span class="line">		v.push_back(D);</span><br><span class="line">	&#125;</span><br><span class="line">	dot O = v[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">double</span> dis1 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != v.<span class="built_in">size</span>(); i++)</span><br><span class="line">		dis1 = <span class="built_in">max</span>(dis1, disBetPow(O, v[i]));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">double</span> o_x = O.x, o_y = O.y;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">double</span> dis2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != v.<span class="built_in">size</span>(); j++)</span><br><span class="line">			dis2 = <span class="built_in">max</span>(dis2, disBetPow(v[i], v[j]));</span><br><span class="line">		<span class="keyword">if</span> (dis1 &gt;= dis2) &#123;</span><br><span class="line">			<span class="keyword">if</span> ((dis2 == dis1 &amp;&amp; (v[i].x &lt; o_x || (v[i].x == o_x &amp;&amp; v[i].y &lt; o_y)))</span><br><span class="line">				|| dis1 &gt; dis2) &#123;</span><br><span class="line">				o_x = v[i].x;</span><br><span class="line">				o_y = v[i].y;</span><br><span class="line">				dis1 = dis2;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; o_x &lt;&lt; <span class="string">" "</span> &lt;&lt; o_y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; dis1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>传染病</title>
    <url>/2020/03/27/%E4%BC%A0%E6%9F%93%E7%97%85/</url>
    <content><![CDATA[<h1 id="COVID-19传染病"><a href="#COVID-19传染病" class="headerlink" title="COVID-19传染病"></a><strong>COVID-19传染病</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果一个感染者走入一个群体，那么这个群体需要被隔离。</span><br><span class="line">小A同学被确诊为新冠感染，并且没有戴口罩！</span><br><span class="line">需要尽快找到所有和小A同学直接或者间接接触过的同学，将他们隔离，防止更大范围的扩散。</span><br><span class="line">众所周知，学生的交际可能是分小团体的，一位学生可能同时参与多个小团体内。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多组数据，对于每组测试数据：</span><br><span class="line">第一行为两个整数n和m（n &#x3D; m &#x3D; 0表示输入结束，不需要处理），n 是学生的数量，m 是学生群体的数量。0 &lt; n ≤ 30000 ， 0 ≤ m ≤ 500</span><br><span class="line">学生编号为0~ n-1</span><br><span class="line">小A编号为0</span><br><span class="line">随后，m 行，每行有一个整数 num 即小团体人员数量。随后有 num 个整数代表这个小团体的学生。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出要隔离的人数，每组数据的答案输出占一行</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">100 4</span><br><span class="line">2 1 2</span><br><span class="line">5 10 13 11 12 14</span><br><span class="line">2 0 1</span><br><span class="line">2 99 2</span><br><span class="line">200 2</span><br><span class="line">1 5</span><br><span class="line">5 1 2 3 4 5</span><br><span class="line">1 0</span><br><span class="line">0 0</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	20000 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>并查集：并：合并两个集合，将元素A作为元素B的父节点；查：确定两个元素是否属于同一集合，每次查找当前节点的父节点，直到遇到根节点，如果两个元素的根节点相同，则它们属于同一集合。</p>
<p>初始化每个成员都属于一个只包括自己的集合，并以自己为代表元素，然后根据题目条件逐一合并集合。</p>
<p>用一个<code>Rank[]</code>数组来维护集合的秩，避免“大树”挂在“小树”上面，使得树更高。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">30005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> par[maxN];</span><br><span class="line"><span class="keyword">int</span> Rank[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		par[i] = i;</span><br><span class="line">		Rank[i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (par[x] == x)</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> par[x] = <span class="built_in">find</span>(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">unit</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	x = <span class="built_in">find</span>(x);</span><br><span class="line">	y = <span class="built_in">find</span>(y);</span><br><span class="line">	<span class="keyword">if</span> (x == y)<span class="comment">//同一集合</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (Rank[x] &gt; Rank[y])</span><br><span class="line">		swap(x, y);<span class="comment">//避免大的挂在小的名下</span></span><br><span class="line">	par[x] = y;</span><br><span class="line">	Rank[x] += Rank[y];</span><br><span class="line">	Rank[y] = Rank[x];</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="keyword">while</span> (scanf_s(<span class="string">"%d%d"</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		initial(n);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> num;</span><br><span class="line">			scanf_s(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">			<span class="keyword">int</span> ori;</span><br><span class="line">			scanf_s(<span class="string">"%d"</span>, &amp;ori);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; num; j++) &#123;</span><br><span class="line">				<span class="keyword">int</span> a;</span><br><span class="line">				scanf_s(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">				unit(ori, a);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> res = Rank[<span class="built_in">find</span>(<span class="number">0</span>)];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>Stacked Bar</title>
    <url>/2020/09/18/stacked-bar/</url>
    <content><![CDATA[<blockquote>
<p>不同发色、不同眼睛颜色学生数量。</p>
</blockquote>
<a id="more"></a>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>表格给出的是一个 4×4 的矩阵，可以以列为横轴、行为纵轴，画出堆叠柱形图（方案1）。</p>
<p>也可以反过来，以行为横轴、以列为纵轴，画出堆叠柱形图（方案2）。</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>chart 1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>The eye-color statics of different-hair-colored students<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.bar</span> &#123; <span class="attribute">fill</span>: steelblue; &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.axis</span> <span class="selector-tag">path</span> &#123; <span class="attribute">display</span>: none;&#125;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://d3js.org/d3.v4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"350"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> svg=d3.select(<span class="string">"svg"</span>),</span></span><br><span class="line">                margin=&#123;top:20, right:20, bottom: 40, left:40&#125;,</span><br><span class="line"><span class="actionscript">                width=+svg.attr(<span class="string">"width"</span>)-margin.left-margin.right,</span></span><br><span class="line"><span class="actionscript">                height = +svg.attr(<span class="string">"height"</span>) - margin.top - margin.bottom,</span></span><br><span class="line"><span class="actionscript">                g = svg.append(<span class="string">"g"</span>).attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> x=d3.scaleBand()</span></span><br><span class="line">                .rangeRound([0,width])</span><br><span class="line">                .padding(0.1)</span><br><span class="line">                .align(0.1)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> y=d3.scaleLinear()</span></span><br><span class="line">                .rangeRound([height,0]);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> z=d3.scaleOrdinal()</span></span><br><span class="line"><span class="actionscript">                .range([<span class="string">"#b75454"</span>,<span class="string">"#0080ff"</span>,<span class="string">"#a8b461"</span>,<span class="string">"#4ca64c"</span>])</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> stack=d3.stack();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            d3.csv(<span class="string">"https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/00/eye_hair_color_data.csv"</span>,type,<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                x.domain(data.map(<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.Hair_color;&#125;));</span></span><br><span class="line"><span class="actionscript">                y.domain([<span class="number">0</span>,d3.max(data,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.total;&#125;)]).nice();</span></span><br><span class="line">                z.domain(data.columns.slice(1));</span><br><span class="line"></span><br><span class="line">                stack.keys(data.columns.slice(1));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                g.selectAll(<span class="string">".serie"</span>)</span></span><br><span class="line">                    .data(stack(data))</span><br><span class="line"><span class="actionscript">                    .enter().append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>,<span class="string">"serie"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"fill"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> z(d.key);&#125;)</span></span><br><span class="line"><span class="actionscript">                    .selectAll(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                    .data(<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d;&#125;)</span></span><br><span class="line"><span class="actionscript">                    .enter().append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> x(d.data.Hair_color);&#125;)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> y(d[<span class="number">1</span>]);&#125;)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> y(d[<span class="number">0</span>]) - y(d[<span class="number">1</span>]); &#125;)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"width"</span>, x.bandwidth());</span></span><br><span class="line">                </span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>, <span class="string">"axis axis--x"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>)</span></span><br><span class="line">                        .call(d3.axisBottom(x));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>, <span class="string">"axis axis--y"</span>)</span></span><br><span class="line"><span class="actionscript">                        .call(d3.axisLeft(y).ticks(<span class="number">10</span>, <span class="string">"s"</span>))</span></span><br><span class="line"><span class="actionscript">                        .append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>, <span class="number">1</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>, y(y.ticks(<span class="number">10</span>).pop())<span class="number">-10</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"dy"</span>, <span class="string">"0.35em"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"text-anchor"</span>, <span class="string">"start"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"fill"</span>, <span class="string">"#000"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="string">"Number"</span>);</span></span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>,<span class="number">240</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>,<span class="number">370</span>)</span></span><br><span class="line"><span class="actionscript">                        .style(<span class="string">"font-size"</span>,<span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="string">"Hair Color"</span>)</span></span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>,<span class="number">237</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>,<span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">                        .style(<span class="string">"font-size"</span>,<span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="string">"Eye Color"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> legend = g.selectAll(<span class="string">".legend"</span>)</span></span><br><span class="line">                        .data(data.columns.slice(1).reverse())</span><br><span class="line"><span class="actionscript">                        .enter().append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>, <span class="string">"legend"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d, i)</span> </span>&#123; <span class="keyword">return</span> <span class="string">"translate(0,"</span> + i * <span class="number">20</span> + <span class="string">")"</span>; &#125;)</span></span><br><span class="line"><span class="actionscript">                        .style(<span class="string">"font"</span>, <span class="string">"10px sans-serif"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    legend.append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>, width - <span class="number">18</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"width"</span>, <span class="number">16</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"height"</span>, <span class="number">16</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"fill"</span>, z);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    legend.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>, width - <span class="number">24</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>, <span class="number">9</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"dy"</span>, <span class="string">".35em"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"text-anchor"</span>, <span class="string">"end"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> d; &#125;);</span></span><br><span class="line">              </span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">type</span><span class="params">(d, i, columns)</span> </span>&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                for (i = 1, t = 0; i <span class="tag">&lt; <span class="attr">columns.length</span>; ++<span class="attr">i</span>) <span class="attr">t</span> += <span class="string">d[columns[i]]</span> = <span class="string">+d[columns[i]];</span></span></span></span></span><br><span class="line">                    d.total = t;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> d;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> p =d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="actionscript">            p.style(<span class="string">"color"</span>,<span class="string">"#1979a9"</span>).style(<span class="string">"font-size"</span>,<span class="string">"28px"</span>);</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><h4 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>chart 1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>The hair-color statics of different-eye-colored students<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.bar</span> &#123; <span class="attribute">fill</span>: steelblue; &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.axis</span> <span class="selector-tag">path</span> &#123; <span class="attribute">display</span>: none;&#125;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://d3js.org/d3.v4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"350"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> svg=d3.select(<span class="string">"svg"</span>),</span></span><br><span class="line">                margin=&#123;top:20, right:20, bottom: 40, left:40&#125;,</span><br><span class="line"><span class="actionscript">                width=+svg.attr(<span class="string">"width"</span>)-margin.left-margin.right,</span></span><br><span class="line"><span class="actionscript">                height = +svg.attr(<span class="string">"height"</span>) - margin.top - margin.bottom,</span></span><br><span class="line"><span class="actionscript">                g = svg.append(<span class="string">"g"</span>).attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> x=d3.scaleBand()</span></span><br><span class="line">                .rangeRound([0,width])</span><br><span class="line">                .padding(0.1)</span><br><span class="line">                .align(0.1)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> y=d3.scaleLinear()</span></span><br><span class="line">                .rangeRound([height,0]);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> z=d3.scaleOrdinal()</span></span><br><span class="line"><span class="actionscript">                .range([<span class="string">"#141619"</span>,<span class="string">"#A52A2A"</span>,<span class="string">"#E50000"</span>,<span class="string">"#FAF0BE"</span>])</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> stack=d3.stack();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            d3.csv(<span class="string">"https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/00/hair_eye_color_data.csv"</span>,type,<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                x.domain(data.map(<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.Eye_color;&#125;));</span></span><br><span class="line"><span class="actionscript">                y.domain([<span class="number">0</span>,d3.max(data,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.total;&#125;)]).nice();</span></span><br><span class="line">                z.domain(data.columns.slice(1));</span><br><span class="line"></span><br><span class="line">                stack.keys(data.columns.slice(1));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                g.selectAll(<span class="string">".serie"</span>)</span></span><br><span class="line">                    .data(stack(data))</span><br><span class="line"><span class="actionscript">                    .enter().append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>,<span class="string">"serie"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"fill"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> z(d.key);&#125;)</span></span><br><span class="line"><span class="actionscript">                    .selectAll(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                    .data(<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d;&#125;)</span></span><br><span class="line"><span class="actionscript">                    .enter().append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> x(d.data.Eye_color);&#125;)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> y(d[<span class="number">1</span>]);&#125;)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> y(d[<span class="number">0</span>]) - y(d[<span class="number">1</span>]); &#125;)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"width"</span>, x.bandwidth());</span></span><br><span class="line">                </span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>, <span class="string">"axis axis--x"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>)</span></span><br><span class="line">                        .call(d3.axisBottom(x));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>, <span class="string">"axis axis--y"</span>)</span></span><br><span class="line"><span class="actionscript">                        .call(d3.axisLeft(y).ticks(<span class="number">10</span>, <span class="string">"s"</span>))</span></span><br><span class="line"><span class="actionscript">                        .append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>, <span class="number">1</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>, y(y.ticks(<span class="number">10</span>).pop())<span class="number">-10</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"dy"</span>, <span class="string">"0.35em"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"text-anchor"</span>, <span class="string">"start"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"fill"</span>, <span class="string">"#000"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="string">"Number"</span>);</span></span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>,<span class="number">250</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>,<span class="number">370</span>)</span></span><br><span class="line"><span class="actionscript">                        .style(<span class="string">"font-size"</span>,<span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="string">"Eye Color"</span>)</span></span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>,<span class="number">235</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>,<span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">                        .style(<span class="string">"font-size"</span>,<span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="string">"Hair Color"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> legend = g.selectAll(<span class="string">".legend"</span>)</span></span><br><span class="line">                        .data(data.columns.slice(1).reverse())</span><br><span class="line"><span class="actionscript">                        .enter().append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>, <span class="string">"legend"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d, i)</span> </span>&#123; <span class="keyword">return</span> <span class="string">"translate(0,"</span> + i * <span class="number">20</span> + <span class="string">")"</span>; &#125;)</span></span><br><span class="line"><span class="actionscript">                        .style(<span class="string">"font"</span>, <span class="string">"10px sans-serif"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    legend.append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>, width - <span class="number">18</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"width"</span>, <span class="number">16</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"height"</span>, <span class="number">16</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"fill"</span>, z);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    legend.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>, width - <span class="number">24</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>, <span class="number">9</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"dy"</span>, <span class="string">".35em"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"text-anchor"</span>, <span class="string">"end"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> d; &#125;);</span></span><br><span class="line">              </span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">type</span><span class="params">(d, i, columns)</span> </span>&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                for (i = 1, t = 0; i <span class="tag">&lt; <span class="attr">columns.length</span>; ++<span class="attr">i</span>) <span class="attr">t</span> += <span class="string">d[columns[i]]</span> = <span class="string">+d[columns[i]];</span></span></span></span></span><br><span class="line">                    d.total = t;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> d;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> p =d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="actionscript">            p.style(<span class="string">"color"</span>,<span class="string">"#1979a9"</span>).style(<span class="string">"font-size"</span>,<span class="string">"28px"</span>);</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>通过 <code>d3.stack</code> 实现堆叠。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>两张图对比，不管是方案1还是方案2，横向对比都能看出不同眼色(发色)数量多少，纵向可明显看出发色(眼色)数量大小。</p>
<p>除此之外，方案1能看出棕色发色学生最多，棕眼、蓝眼相比绿、绿褐的柱形图明显较高，综合可看出棕眼、蓝眼学生数量较多，绿褐次之，绿最少。</p>
<p>同样，方案2能看出棕、蓝眼学生数量相当且较多，发色依然可以通过色块大小、数量看出棕发学生数量最多，红发学生数量最少。</p>
<p>不管是方案1还是方案2，每个单一矩形都代表着同一发色、同一眼色的学生数量，可以看出数量最多的三大块：棕发棕眼 &gt; 金发蓝眼 &gt; 棕发蓝眼。</p>
<h2 id="参考模板"><a href="#参考模板" class="headerlink" title="参考模板"></a>参考模板</h2><p><a href="https://www.d3-graph-gallery.com/graph/barplot_stacked_basicWide.html" target="_blank" rel="noopener">https://www.d3-graph-gallery.com/graph/barplot_stacked_basicWide.html</a></p>
]]></content>
      <categories>
        <category>Visualization</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>D3</tag>
      </tags>
  </entry>
  <entry>
    <title>公园长凳</title>
    <url>/2020/04/17/%E5%85%AC%E5%9B%AD%E9%95%BF%E5%87%B3/</url>
    <content><![CDATA[<h1 id="公园长凳"><a href="#公园长凳" class="headerlink" title="公园长凳"></a><strong>公园长凳</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">公园有 x 条长凳。第 i 个长凳上坐着 ai 个人。这时候又有 y 个人将来到公园，他们将选择坐在某些公园中的长凳上，那么当这 y 个人坐下后，记 k &#x3D; 所有椅子上的人数的最大值，那么 k 可能的最大值 mx 和最小值 mn 分别是多少。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行包含一个整数 x (1 ≤ x ≤ 100) 表示公园中长椅的数目</span><br><span class="line">第二行包含一个整数 y (1 ≤ y ≤ 1000) 表示有 y 个人来到公园</span><br><span class="line">接下来 x 个整数 ai (1 ≤ ai ≤ 100)，表示初始时公园长椅上坐着的人数</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出 mn 和 mx</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">3</span><br><span class="line">7</span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">6 13</span><br><span class="line"></span><br><span class="line">Explain:</span><br><span class="line">最初三张椅子的人数分别为 1 6 1</span><br><span class="line">接下来来了 7 个人。</span><br><span class="line">可能出现的情况为 &#123;1, 6, 8&#125;, &#123;1, 7, 7&#125;, …, &#123;8, 6, 1&#125;</span><br><span class="line">相对应的 k 分别为 8, 7, …, 8</span><br><span class="line">其中，状态 &#123;1, 13, 1&#125; 的 k &#x3D; 13，为 mx</span><br><span class="line">状态 &#123;4, 6, 5&#125; 和状态 &#123;5, 6, 4&#125; 的 k &#x3D; 6，为 mn</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	262144 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>咋一看，貌似挺简单，直接对 <em>x</em><sub><em>i</em></sub> 排序，则 mx = <em>x</em><sub>max</sub> + <em>y</em>，mn = <em>x</em><sub>min</sub> + <em>y</em>，太简单了……后来写着写着猛地发现想错了，去看了下样例解释：emm，原来没那么简单。</p>
<p>不过mx求法挺简单的，就是 mx = <em>x</em><sub>max</sub> + <em>y</em>，mn 麻烦了点而已。</p>
<p>不难发现，<em>x</em><sub><em>i</em></sub> 排序后可以看作非减的一排柱形图，可以用 <em>y</em> (分割成 <em>n</em> 个部分)对其填充，记 <em>temp</em> = 所有柱子填充成最高柱子所需的量，则有两种情况：<em>y</em> 够分配给 <em>temp</em>；<em>y</em> 不够分配给 <em>temp</em>。如下图所示：</p>
<p><img src="https://i.loli.net/2020/04/20/B893IjctAs54gdQ.png" alt="bench_001.png"></p>
<p>对于 <em>y</em> ≤ <em>temp</em>，则 mn = <em>x</em><sub>max</sub>；对于 <em>y</em> &gt; <em>temp</em>，mn = <em>x</em><sub>max</sub> + ⌈超出部分/<em>x</em>⌉。</p>
<p>所以这题也不难啊。</p>
<p>不过<code>WA</code>了一次，原因是我没对<code>差值结果/x</code>取<code>double</code>再取<code>ceil</code>，而是直接<code>int</code>取<code>ceil</code>，相当于没取<code>ceil</code>，没用。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x, y;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> a;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">		v.push_back(a);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">int</span> theMAX = v[v.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> mn, mx;</span><br><span class="line">	mx = y + theMAX;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != v.<span class="built_in">size</span>(); i++)</span><br><span class="line">		temp += (theMAX - v[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (temp &gt;= y)</span><br><span class="line">		mn = theMAX;</span><br><span class="line">	<span class="keyword">if</span> (temp &lt; y) &#123;</span><br><span class="line">		<span class="keyword">int</span> overFlow = y - temp;</span><br><span class="line">		<span class="keyword">int</span> incrs = <span class="built_in">ceil</span>((<span class="keyword">double</span>) overFlow / x);</span><br><span class="line">		mn = theMAX + incrs;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; mn &lt;&lt; <span class="string">" "</span> &lt;&lt; mx &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>农田引水</title>
    <url>/2020/03/28/%E5%86%9C%E7%94%B0%E5%BC%95%E6%B0%B4/</url>
    <content><![CDATA[<h1 id="农田引水"><a href="#农田引水" class="headerlink" title="农田引水"></a><strong>农田引水</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">农田有 n 块，编号从 1~n。种田要灌水。</span><br><span class="line">众所周知东东是一个魔法师，他可以消耗一定的 MP 在一块田上施展魔法，使得黄河之水天上来。他也可以消耗一定的 MP 在两块田的渠上建立传送门，使得这块田引用那块有水的田的水。(1 ≤ n ≤ 300)</span><br><span class="line">黄河之水天上来的消耗是 Wi，i 是农田编号 (1 ≤ Wi ≤ 1e5)</span><br><span class="line">建立传送门的消耗是 Pij，i、j 是农田编号 (1 ≤ Pij ≤ 1e5, Pij &#x3D; Pji, Pii &#x3D; 0)</span><br><span class="line">求为所有的田灌水的最小消耗。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第 1 行：一个数 n</span><br><span class="line">第 2 行到第 n + 1 行：数 wi</span><br><span class="line">第 n + 2 行到第 2n + 1 行：矩阵即 pij 矩阵</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最小消耗的MP值</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">0 2 2 2</span><br><span class="line">2 0 3 3</span><br><span class="line">2 3 0 4</span><br><span class="line">2 3 4 0</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">9</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	262144 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>可以将“天上来”作为源点，即第0号农田到第 i 号农田灌水需要消耗的MP值，因此样例的数组可变成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">				0 5 4 4 3</span><br><span class="line">0 2 2 2			5 0 2 2 2</span><br><span class="line">2 0 3 3		→	4 2 0 3 3</span><br><span class="line">2 3 0 4		 	4 2 3 0 4</span><br><span class="line">2 3 4 0			3 2 3 4 0</span><br></pre></td></tr></table></figure>
<p>本题就变成了最小生成树问题，可以用Kruskal算法:<br>将所有的边按边权升序排列，每次加入最小权的边到生成树中，保证加入的边在该连通图中，且不会生成环，直到最小生成树中的边数等于总顶点数减1。</p>
<p>这些权重之和就是答案。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">305</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> u, v, w;</span><br><span class="line">	edge(<span class="keyword">int</span> _u, <span class="keyword">int</span> _v, <span class="keyword">int</span> _w) :u(_u), v(_v), w(_w) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> par[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (par[x] == x)</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> par[x] = <span class="built_in">find</span>(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;edge&gt; v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> edgeCount = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">		par[i] = i;</span><br><span class="line">	sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), cmp);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> p1 = <span class="built_in">find</span>(v[i].u);</span><br><span class="line">		<span class="keyword">int</span> p2 = <span class="built_in">find</span>(v[i].v);</span><br><span class="line">		<span class="keyword">if</span> (p1 != p2) &#123;<span class="comment">//并查集保证不会生成环</span></span><br><span class="line">			par[p1] = p2;</span><br><span class="line">			ans += v[i].w;</span><br><span class="line">			edgeCount++;</span><br><span class="line">			<span class="keyword">if</span> (edgeCount == n)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="built_in">vector</span>&lt;edge&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> a;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">		<span class="function">edge <span class="title">e1</span><span class="params">(<span class="number">0</span>, i, a)</span></span>;</span><br><span class="line">		<span class="function">edge <span class="title">e2</span><span class="params">(i, <span class="number">0</span>, a)</span></span>;</span><br><span class="line">		v.push_back(e1);</span><br><span class="line">		v.push_back(e2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">			<span class="keyword">int</span> a;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">			<span class="keyword">if</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="function">edge <span class="title">e</span><span class="params">(i, j, a)</span></span>;</span><br><span class="line">				v.push_back(e);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> res = kruskal(n, v);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
        <tag>Kruskal</tag>
      </tags>
  </entry>
  <entry>
    <title>咕咕东想吃饭</title>
    <url>/2020/03/19/%E5%92%95%E5%92%95%E4%B8%9C%E6%83%B3%E5%90%83%E9%A5%AD/</url>
    <content><![CDATA[<h1 id="咕咕东想吃饭"><a href="#咕咕东想吃饭" class="headerlink" title="咕咕东想吃饭"></a><strong>咕咕东想吃饭</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">咕咕东考试周开始了，考试周⼀共有n天。他不想考试周这么累，于是打算每天都吃顿好的。他决定每天都吃生煎，咕咕东每天需要买ai个生煎。</span><br><span class="line">但是生煎店为了刺激消费，只有两种购买⽅式：</span><br><span class="line">①在某⼀天⼀次性买两个生煎。</span><br><span class="line">②今天买⼀个生煎，同时为明天买⼀个生煎，店家会给⼀个券，第⼆天用券来拿。</span><br><span class="line">没有其余的购买方式，这两种购买方式可以用无数次。但是咕咕东是个节俭的好孩⼦，他考试结束就走了，不允许考试结束时手里有券。咕咕东非常有钱，你不需要担心咕咕东没钱，但是咕咕东太笨了，他想问你他能否在考试周每天都能恰好买ai个生煎。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输⼊两⾏，第⼀行输⼊⼀个正整数 n (1 ≤ n ≤ 100000)，表示考试周的天数。</span><br><span class="line">第⼆行有n个数，第i个数ai表示第i天咕咕东要买的生煎的数量。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果可以满足咕咕东奇怪的要求，输出&quot;YES&quot;，如果不能满足，输出“NO”。（输出不带引号）</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">4 1 2 1 2 </span><br><span class="line">Output: </span><br><span class="line">YES</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">3 1 0 1</span><br><span class="line">Output: </span><br><span class="line">NO</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	262144 kB</span><br></pre></td></tr></table></figure>
<h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h2><div class="table-container">
<table>
<thead>
<tr>
<th>数据点</th>
<th><em>n</em> (上限)</th>
<th><em>a<sub>i</sub></em> (上限)</th>
</tr>
</thead>
<tbody>
<tr>
<td>1, 2</td>
<td>10</td>
<td>≤ 10</td>
</tr>
<tr>
<td>3, 4, 5</td>
<td>1000</td>
<td>10</td>
</tr>
<tr>
<td>6, 7</td>
<td>10</td>
<td>10000</td>
</tr>
<tr>
<td>8, 9, 10</td>
<td>100000</td>
<td>10000</td>
</tr>
</tbody>
</table>
</div>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>比较容易，一个<code>for</code>循环再几个<code>if</code>条件判断就行了，复杂度<em>O</em>(<em>n</em>)。</p>
<p>每天都有两种选择，选择根据今天应该有的生煎数来选，初始时昨天预留的生煎数<code>remain = 0</code>，之后若有预留，则<code>remain = 1</code>。则 今日想买的生煎数 - remain 就是 今日应该要买的生煎数。<br>这两种选择，根据今日应买数量是否为2的倍数来判断，是则预留为0，否则预留为1。然后根据最后一天的剩余量判断就行。<br>这题比较容易出错的是0(题目说好的明明“决定每天都吃生煎”呢🤔🤨😐😑😶🙄)，还好样例2有给个0，不然我还真不会去考虑0的情况……若前一天有剩但今日为0，直接终止循环，输出NO。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">	<span class="keyword">int</span> remain = <span class="number">0</span>;<span class="comment">//当日剩余生煎数</span></span><br><span class="line">	<span class="keyword">bool</span> failed = <span class="literal">false</span>;<span class="comment">//不能满足？</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> a = arr[i] - remain;<span class="comment">//扣去前一天剩下的券(如果有) 今天还有的生煎数</span></span><br><span class="line">		<span class="keyword">if</span> (a &lt; <span class="number">0</span>) &#123;<span class="comment">//昨天有剩券 但今天不想吃</span></span><br><span class="line">			failed = <span class="literal">true</span>;<span class="comment">//不能满足</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span>)<span class="comment">//今天不需要买 券那个方案，选方案一</span></span><br><span class="line">			remain = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">1</span>)<span class="comment">//需要买张券，选方案二</span></span><br><span class="line">			remain = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (remain == <span class="number">0</span> &amp;&amp; failed == <span class="literal">false</span>)<span class="comment">//最后一天 没剩 且 之前都满足</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">if</span> (remain == <span class="number">1</span> || failed == <span class="literal">true</span>)<span class="comment">//最后一天有剩 或 之前某天不满足</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>倒水问题</title>
    <url>/2020/03/05/%E5%80%92%E6%B0%B4%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="倒水问题"><a href="#倒水问题" class="headerlink" title="倒水问题"></a><strong>倒水问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“fill A” 表示倒满A杯，“empty A” 表示倒空A杯，“pour A B” 表示把A的水倒到B杯并且把B杯倒满或A倒空。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="input"><a href="#input" class="headerlink" title="input"></a><strong>input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入包含多组数据。每组数据输入 A, B, C 数据范围 0 &lt; A ≤ B 、C ≤ B ≤ 1000 、A和B互质。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你的程序的输出将由一系列的指令组成。这些输出行将导致任何一个罐子正好包含C单位的水。每组数据的最后一行输出应该是“success”。输出行从第1列开始，不应该有空行或任何尾随空格。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input: </span><br><span class="line">2 7 5</span><br><span class="line">2 7 4</span><br><span class="line"></span><br><span class="line">output: </span><br><span class="line">fill B</span><br><span class="line">pour B A</span><br><span class="line">success </span><br><span class="line">fill A</span><br><span class="line">pour A B</span><br><span class="line">fill A</span><br><span class="line">pour A B</span><br><span class="line">success</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>两水杯(a容量与b容量)中加水/倒水/相互倒水，目标为c容量，由于题目不会给出错误数据，所以直接暴力执行循环即可。</p>
<p>首先装满A，判断是否满足C，满足则success，否则不断地往B中倒水，不停的判断当前A、B的情况是否满足C，若满足则<code>break</code>，否则继续循环。循环过程中若有一方满了，则判断是否满足C，不满足清空满的杯子，继续循环。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b, c;</span><br><span class="line">	<span class="keyword">int</span> x, y;<span class="comment">// a, b当前水量</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c).eof()) &#123;</span><br><span class="line">		x = y = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"fill A"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//先装满a</span></span><br><span class="line">			x = a;<span class="comment">//a当前容量为a 赋值给x</span></span><br><span class="line">			<span class="keyword">if</span> (x == c) &#123;<span class="comment">//若a达到目的</span></span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"success"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;<span class="comment">//a非空时执行循环</span></span><br><span class="line">				<span class="keyword">if</span> ((b - y) &gt;= x) &#123;<span class="comment">// 若b当前可容下当前的a</span></span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"pour A B"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					y = y + x;<span class="comment">//更新当前b</span></span><br><span class="line">					x = <span class="number">0</span>;<span class="comment">//当前a为0</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;<span class="comment">//若容不下</span></span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"pour A B"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//还是a倒给b</span></span><br><span class="line">					x = x - (b - y);<span class="comment">// a中也有剩余</span></span><br><span class="line">					y = b;<span class="comment">// b就满了</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (x == c) &#123;<span class="comment">//判断 若达到目的</span></span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"success"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (y == c)<span class="comment">//当前b达到目的</span></span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">if</span> (y == b) &#123;<span class="comment">//若b满</span></span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"empty B"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					y = <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (x == c)<span class="comment">//重复 不输出</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (y == c) &#123;<span class="comment">//若b打到目的</span></span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"success"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="尝试过的错误代码"><a href="#尝试过的错误代码" class="headerlink" title="尝试过的错误代码"></a><strong>尝试过的错误代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b, c;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c).eof()) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a == c) &#123;<span class="comment">//若目标水量为 a</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"fill A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"success"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (c % a == <span class="number">0</span> &amp;&amp; a != c) &#123;<span class="comment">//若目标水量为a的倍数</span></span><br><span class="line">			<span class="keyword">int</span> countA = c / a;<span class="comment">//这样子a往b中倒c/a次就行了</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; countA; i++) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"fill A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"pour A B"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"success"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (b == c) &#123;<span class="comment">//若目标水量为b</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"fill B"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"success"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//从b满开始算 若目标水量是从b中扣除整数个a的量</span></span><br><span class="line">		<span class="keyword">if</span> ((b - c) % a == <span class="number">0</span> &amp;&amp; b != c) &#123;</span><br><span class="line">			<span class="keyword">int</span> countB = (b - c) / a;<span class="comment">//扣除次数</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"fill B"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">if</span> (countB == <span class="number">1</span>)<span class="comment">//若只需1次</span></span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"pour B A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">else</span> &#123;<span class="comment">//否则 要清空a</span></span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; countB - <span class="number">1</span>; i++) &#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"pour B A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"empty A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"pour B A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"success"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码忽略了用A把B装满，要装满的最后一次A中还剩水量恰好为C的情况，比如<code>A = 3, B = 13, C = 2</code>。后来换了其他思路想，未提交新情况的代码测试，所以未知是否能通过。</p>
<h2 id="Google后其他人的思路"><a href="#Google后其他人的思路" class="headerlink" title="Google后其他人的思路"></a><strong>Google后其他人的思路</strong></h2><p>只有6种状态：<code>fill A</code>、<code>fill B</code>、<code>empty A</code>、<code>empty B</code>、<code>pour A B</code>、<code>pour B A</code>，每次做出一次选择。这是一个隐式迷宫问题，每次在一个状态做出6种选择，判断是否到达“出口”，因此可采用BFS解题。</p>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>倒水问题</tag>
      </tags>
  </entry>
  <entry>
    <title>咕咕东的奇遇</title>
    <url>/2020/03/19/%E5%92%95%E5%92%95%E4%B8%9C%E7%9A%84%E5%A5%87%E9%81%87/</url>
    <content><![CDATA[<h1 id="咕咕东的奇遇"><a href="#咕咕东的奇遇" class="headerlink" title="咕咕东的奇遇"></a><strong>咕咕东的奇遇</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">咕咕东是个贪玩的孩⼦，有⼀天，他从上古遗迹中得到了⼀个神奇的圆环。这个圆环由字⺟表组成首尾相接的环，环上有⼀个指针，最初指向字⺟a。咕咕东每次可以顺时针或者逆时针旋转⼀格。例如，a顺时针旋转到z，逆时针旋转到b。咕咕东⼿⾥有⼀个字符串，但是他太笨了，所以他来请求你的帮助，问最少需要转多少次。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="https://i.loli.net/2020/03/20/EUz2RqGs89xToJu.png" alt="0001.png"></p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输⼊只有⼀行，是⼀个字符串。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出最少要转的次数。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">zeus</span><br><span class="line">Output: </span><br><span class="line">18</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	65536 kB</span><br></pre></td></tr></table></figure>
<h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h2><div class="table-container">
<table>
<thead>
<tr>
<th>数据点</th>
<th>字符串长度</th>
</tr>
</thead>
<tbody>
<tr>
<td>1, 2</td>
<td>≤ 10</td>
</tr>
<tr>
<td>3, 4, 5</td>
<td>≤ 100</td>
</tr>
<tr>
<td>6, 7, 8, 9, 10</td>
<td>≤ 10000</td>
</tr>
</tbody>
</table>
</div>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>简单题，起点为<code>a</code>，每次只有顺时针或者逆时针2种选择，而顺/逆时针判断条件是走的步数是否≤13，由于转盘是有序的，而走的步数可以通过字母表确定。利用<code>a - z</code>的<code>ASCII码</code>有序对应<code>97 - 122</code>，两者<code>ASCII</code>的差值+26再除26求余数即可确定步数，然后把起点标记为走到的那一个，如此循环，直至走完。</p>
<p>但是由于个人疏忽，<code>if</code>判断处有写<code>(差值+26)%26</code>，确定步数时却忘了<code>+26</code>直接进行<code>求余</code>，看着样例没问题，自己出样例又要费时间去算，就直接提交，然后<code>WA</code>了……分全没了……😭(赛后补题补上<code>+26</code>直接<code>AC</code>了……)</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//顺逆13n</span></span><br><span class="line">	<span class="keyword">char</span> start = <span class="string">'a'</span>;<span class="comment">//起始点为a</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> x;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">int</span> n = x.length();</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//总步数</span></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">0</span>;<span class="comment">//单次步数</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (((x[i] - start + <span class="number">26</span>) % <span class="number">26</span>) &lt;= <span class="number">13</span>) &#123;<span class="comment">//逆时针</span></span><br><span class="line">			<span class="built_in">step</span> = (x[i] - start + <span class="number">26</span>) % <span class="number">26</span>;</span><br><span class="line">			count += <span class="built_in">step</span>;</span><br><span class="line">			start = x[i];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (((x[i] - start + <span class="number">26</span>) % <span class="number">26</span>) &gt; <span class="number">13</span>) &#123;<span class="comment">//顺时针</span></span><br><span class="line">			<span class="built_in">step</span> = <span class="number">26</span> - (x[i] - start + <span class="number">26</span>) % <span class="number">26</span>;</span><br><span class="line">			count += <span class="built_in">step</span>;</span><br><span class="line">			start = x[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>转盘问题</tag>
      </tags>
  </entry>
  <entry>
    <title>外部打开链接默认使用Chrome Incognito Mode</title>
    <url>/2021/03/31/%E5%A4%96%E9%83%A8%E6%89%93%E5%BC%80%E9%93%BE%E6%8E%A5%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8Chrome-Incognito-Mode/</url>
    <content><![CDATA[<h2 id="快捷图标"><a href="#快捷图标" class="headerlink" title="快捷图标"></a>快捷图标</h2><p>可以在快捷方式链接使用以下参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files\Google\Chrome\Application\chrome.exe&quot; -incognito</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files\Google\Chrome\Application\chrome.exe&quot; --incognito</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>但是不适用点击链接打开Chrome 。</p>
<h2 id="打开链接"><a href="#打开链接" class="headerlink" title="打开链接"></a>打开链接</h2><p>修改注册表，找到路经：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HKEY_CLASSES_ROOT\ChromeHTML\Shell\open\command</span><br></pre></td></tr></table></figure>
<p>修改 <code>(Default)</code> ，把 <code>--single-argument</code> 改成 <code>--incognito --single-argument</code> 。</p>
]]></content>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>区间选点Plus</title>
    <url>/2020/04/14/%E5%8C%BA%E9%97%B4%E9%80%89%E7%82%B9Plus/</url>
    <content><![CDATA[<h1 id="区间选点Plus"><a href="#区间选点Plus" class="headerlink" title="区间选点Plus"></a><strong>区间选点Plus</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个数轴上的 n 个区间，要求在数轴上选取最少的点使得第 i 个区间 [ai, bi] 里至少有 ci 个点。</span><br><span class="line">使用差分约束系统的解法解决这道题。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入第一行一个整数 n 表示区间的个数，接下来的 n 行，每一行两个用空格隔开的整数 a, b 表示区间的左右端点。1 ≤ n ≤ 50000， 0 ≤ ai ≤ bi ≤ 50000 并且 1 ≤ ci ≤ bi - ai + 1。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出一个整数表示最少选取的点的个数</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">5</span><br><span class="line">3 7 3</span><br><span class="line">8 10 3</span><br><span class="line">6 8 1</span><br><span class="line">1 3 1</span><br><span class="line">10 11 1</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">6</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		2000 ms</span><br><span class="line">Memory limit	65536 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><h3 id="差分约束"><a href="#差分约束" class="headerlink" title="差分约束"></a>差分约束</h3><p>差分约束系统中的每个约束条件$x_i - x_j ≤ c_k$都可变形成$x_i ≤ x_j + c_k$，这与单源最短路中的不等式dis[u] ≤ dis[v] + w非常相似。因此可以把 <em>x</em><sub><em>i</em></sub> 看作图中的节点，$x_i - x_j ≤ c_k$表示从节点 <em>i</em> 到节点 <em>j</em> 的一条权值为<em>c</em><sub><em>k</em></sub>的有向边。</p>
<p>设<code>dis[0] = 0</code>并向每一个点连一条边，跑单源最短路，若图中存在负环，则给定的差分约束系统无解，否则， <em>x</em><sub><em>i</em></sub> = dis[<em>i</em>]为该差分约束系统的一组解。</p>
<p>求存在负边的单源最短路可以用SPFA。</p>
<h3 id="本题解法"><a href="#本题解法" class="headerlink" title="本题解法"></a>本题解法</h3><p>用一个前缀和<code>sum[i]</code>表示区间<code>[begin, i]</code>之内选取的点的个数，则<code>sum[b] - sum[a] ≥ c</code>表示区间<code>[a, b]</code>内至少选取了<code>c</code>个点，<code>sum[i] - sum[i - 1]</code>表示第 <code>i</code> 个点选或不选，因此可以转化成差分约束的形式。</p>
<p><em>n</em> 个区间，可以看成 <em>n</em> 个差分约束，由 <em>a</em><sub><em>i</em></sub> 到 <em>b</em><sub><em>i</em></sub> + 1 的边，权重为 <em>c</em><sub><em>i</em></sub> ，加入到图中，但是并不能保证图的联通，因此每一个相邻的点之间要加入有向边<code>(i, i + 1, 0)</code>和<code>(i + 1, i, -1)</code>，即差分约束<code>0 ≤ sum[i + 1] - sum[i] ≤ 1</code>，即表示第 <code>i + 1</code> 个点选/不选(存在/不存在)。</p>
<p>本题求下界，所以SPFA要跑最长路，从所有区间的最左端点跑到最右端点即可。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> ele;</span><br><span class="line">	<span class="keyword">int</span> w;</span><br><span class="line">	node* next;</span><br><span class="line">	node() &#123; ele = <span class="number">-1</span>; w = <span class="number">-2</span>; next = <span class="literal">NULL</span>; &#125;</span><br><span class="line">	node(<span class="keyword">int</span> e, <span class="keyword">int</span> _w) :ele(e), w(_w) &#123; next = <span class="literal">NULL</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedList</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	node* header;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	linkedList() &#123; header = <span class="literal">NULL</span>; <span class="built_in">size</span> = <span class="number">0</span>; &#125;</span><br><span class="line">	~linkedList() &#123; <span class="built_in">clear</span>(); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size</span>; &#125;</span><br><span class="line">	<span class="function">node* <span class="title">getHeader</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> header; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> ele, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">		node* p = <span class="keyword">new</span> node(ele, w);</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">			header = p;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			node* temp = header;</span><br><span class="line">			node* temp2 = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">				temp2 = temp;</span><br><span class="line">				temp = temp-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			temp2-&gt;next = p;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">size</span>++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		node* temp = header;</span><br><span class="line">		node* ttemp = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			ttemp = temp;</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">			ttemp = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		header = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">delete</span> temp;</span><br><span class="line">		<span class="keyword">delete</span> ttemp;</span><br><span class="line">		<span class="keyword">delete</span> header;</span><br><span class="line">		<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxSize = <span class="number">50050</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">graph</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	linkedList arr[maxSize];</span><br><span class="line">	<span class="keyword">int</span> dis[maxSize];</span><br><span class="line">	<span class="keyword">int</span> vis[maxSize];</span><br><span class="line">	<span class="keyword">int</span> dots;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	graph() &#123; </span><br><span class="line">		dots = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(dis, -maxN, maxSize);</span><br><span class="line">		<span class="built_in">memset</span>(vis, <span class="number">0</span>, maxSize);</span><br><span class="line">	&#125;</span><br><span class="line">	graph(<span class="keyword">int</span> n) &#123; </span><br><span class="line">		dots = n;</span><br><span class="line">		<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(dis, -maxN, maxSize);</span><br><span class="line">		<span class="built_in">memset</span>(vis, <span class="number">0</span>, maxSize);</span><br><span class="line">	&#125;</span><br><span class="line">	~graph() &#123;  &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">		arr[u].add(v, w);</span><br><span class="line">		<span class="built_in">size</span>++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= dots; i++) &#123;</span><br><span class="line">			dis[i] = -maxN;</span><br><span class="line">			vis[i] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		dis[s] = <span class="number">0</span>;</span><br><span class="line">		vis[s] = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">		q.push(s);</span><br><span class="line">		<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> x = q.front();</span><br><span class="line">			q.pop();</span><br><span class="line">			vis[x] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (node* p = arr[x].getHeader(); p != <span class="literal">NULL</span>; p = p-&gt;next) &#123;</span><br><span class="line">				<span class="keyword">int</span> w = p-&gt;w;</span><br><span class="line">				<span class="keyword">int</span> v = p-&gt;ele;</span><br><span class="line">				<span class="keyword">if</span> (dis[v] &lt; dis[x] + w) &#123;</span><br><span class="line">					dis[v] = dis[x] + w;</span><br><span class="line">					<span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">						q.push(v);</span><br><span class="line">						vis[v] = <span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> dis[e];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	scanf_s(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="function">graph <span class="title">G</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> left = maxN, right = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="keyword">int</span> a, b, c;</span><br><span class="line">		scanf_s(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">		G.add(a, b + <span class="number">1</span>, c);</span><br><span class="line">		left = <span class="built_in">min</span>(left, a);</span><br><span class="line">		right = <span class="built_in">max</span>(right, b + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">		G.add(i + <span class="number">1</span>, i, <span class="number">-1</span>);</span><br><span class="line">		G.add(i, i + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> ans = G.spfa(left, right);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>差分约束</tag>
        <tag>SPFA</tag>
      </tags>
  </entry>
  <entry>
    <title>区间赋值</title>
    <url>/2020/03/24/%E5%8C%BA%E9%97%B4%E8%B5%8B%E5%80%BC/</url>
    <content><![CDATA[<h1 id="区间赋值"><a href="#区间赋值" class="headerlink" title="区间赋值"></a><strong>区间赋值</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Select n cities from the world map, and a[i] represents the asset value owned by the i-th city.</span><br><span class="line">Then there will be several operations. Each turn is to choose the city in the interval [l, r] and increase their asset value by c. And finally, it is required to give the asset value of each city after q operations. </span><br><span class="line">------------------------------------------------------</span><br><span class="line">从世界地图从选出 n 个城市，a[i]表示选出的第 i 个城市的值。</span><br><span class="line">接下来会有 q 个操作。每一次从区间[l, r]中选出城市，并把它们的值提高 c。</span><br><span class="line">最终求得各个城市的值。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The first line contains two integers n,q (1 ≤ n,q ≤ 2⋅10^5) — the number of cities and operations.</span><br><span class="line">The second line contains elements of the sequence a: integer numbers a1, a2, ..., an (−10^6 ≤ ai ≤ 10^6).</span><br><span class="line">Then q lines follow, each line represents an operation. The i-th line contains three integers l, r and c (1 ≤ l ≤ r ≤ n, −10^5 ≤ c ≤ 10^5) for the i-th operation.</span><br><span class="line">------------------------------------------------------</span><br><span class="line">第一行两个整数 n, q (1 ≤ n,q ≤ 2⋅10^5)，表示城市数和操作数。</span><br><span class="line">第二行 n 个整数，表示城市 a1, a2, ..., an (−10^6 ≤ ai ≤ 10^6)。</span><br><span class="line">接下来的 q 行，每一行代表一个操作，每一行包括3个整数 l, r 和 c (1 ≤ l ≤ r ≤ n, −10^5 ≤ c ≤ 10^5)。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Print n integers a1,a2,…,an one per line, and ai should be equal to the final asset value of the i-th city.</span><br><span class="line">------------------------------------------------------</span><br><span class="line">输出n个整数，a1, a2, …, an。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input: </span><br><span class="line">4 2</span><br><span class="line">-3 6 8 4</span><br><span class="line">4 4 -2</span><br><span class="line">3 3 1</span><br><span class="line">output: </span><br><span class="line">-3 6 9 2</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">2 1</span><br><span class="line">5 -2</span><br><span class="line">1 2 4</span><br><span class="line">output: </span><br><span class="line">9 2</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">1 2</span><br><span class="line">0</span><br><span class="line">1 1 -8</span><br><span class="line">1 1 -6</span><br><span class="line">output: </span><br><span class="line">-14</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	262144 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>q 次操作区间，每次对区间内每个数进行加/减操作，暴力做法就是每次赋值操作都来一个<code>for</code>循环，时间复杂度为<em>O</em>(<em>qn</em>)，考虑到数据范围，会超时。</p>
<p>这边就要用到差分跟前缀和。</p>
<p>差分：原数组第二个元素起，每个元素与前一元素之差形成一个新数组。如：<br>原数组<code>a[n]</code>, 新数组<code>b[n]</code>, <code>b[1] = a[1], b[i] = a[i] - a[i-1] (i ≥2)</code></p>
<p>前缀和可以在<em>O</em>(1)时间复杂度内求一个区域内所有元素之和，利用差分数组只进行单点修改，可以更新一个区域内的数值。</p>
<p>比如第一个样例，原数组<code>a[4] = {-3, 6, 8, 4}</code>, 差分数组<code>b[4] = {-3, 9, 2, -4}</code>。<br>第一次操作：第4个数降值2，<code>a&#39;[4] = {-3, 6, 8, 2}</code>, <code>b&#39;[4] = {-3, 9, 2, -6}</code>。<br>第二次操作：第3个数增值1，<code>a&#39;&#39;[4] = {-3, 6, 9, 2}</code>, <code>b&#39;&#39; = {-3, 9, 3, -7}</code>, 前缀和生成数组<code>c[4] = {-3, 6, 9, 2}</code>, 与<code>a&#39;&#39;</code>相同。</p>
<p>本题由于数据范围，如果使用<code>int</code>在test 17会<code>WA</code>，所以得用<code>long long</code>。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> n, q;<span class="comment">//n个数 q个操作</span></span><br><span class="line">	scanf_s(<span class="string">"%lld%lld"</span>, &amp;n, &amp;q);</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span>* arr = <span class="keyword">new</span> <span class="keyword">long</span> <span class="keyword">long</span>[n + <span class="number">10</span>];<span class="comment">//原数组</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		scanf_s(<span class="string">"%lld"</span>, &amp;arr[i]);</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span>* arr1 = <span class="keyword">new</span> <span class="keyword">long</span> <span class="keyword">long</span>[n + <span class="number">10</span>];<span class="comment">//差分数组</span></span><br><span class="line">	arr1[<span class="number">0</span>] = arr[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; i++)</span><br><span class="line">		arr1[i] = arr[i] - arr[i - <span class="number">1</span>];<span class="comment">//求得差分</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;<span class="comment">//q次操作</span></span><br><span class="line">		<span class="keyword">int</span> l, r, c;</span><br><span class="line">		scanf_s(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;c);</span><br><span class="line">		arr1[l - <span class="number">1</span>] += c;</span><br><span class="line">		arr1[r] -= c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span>* arr2 = <span class="keyword">new</span> <span class="keyword">long</span> <span class="keyword">long</span>[n + <span class="number">10</span>];<span class="comment">//前缀和成数组</span></span><br><span class="line">	arr2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; i++)</span><br><span class="line">		arr2[i] = arr2[i - <span class="number">1</span>] + arr1[i];<span class="comment">//前缀和</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld "</span>, arr1[<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld "</span>, arr2[i] + arr1[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title>天降猫咪游戏</title>
    <url>/2020/05/19/%E5%A4%A9%E9%99%8D%E7%8C%AB%E5%92%AA%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h1 id="天降猫咪游戏"><a href="#天降猫咪游戏" class="headerlink" title="天降猫咪游戏"></a><strong>天降猫咪游戏</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">捡猫咪游戏是这样的，猫咪从天上往下掉，且只会掉在 [0, 10] 范围内，具体的坐标范围如下图所示。</span><br><span class="line">初始站在位置五上，且每秒只能在移动不超过一米的范围内接住掉落的猫咪，如果没有接住，猫咪就会跑掉。</span><br><span class="line">例如，在刚开始的一秒内，只能接到四、五、六这三个位置其中一个位置的猫咪。</span><br><span class="line">要求接住尽可能多的猫咪。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="https://i.loli.net/2020/06/09/SDvdnleaX1Bbq46.jpg" alt="maomao.jpg"></p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多组样例。每组样例输入一个 m (0 &lt; m &lt; 100000)，表示有 m 只猫咪。</span><br><span class="line">在接下来的 m 行中，每行有两个整数 a, b (0 &lt; b &lt; 100000)，表示在第 b 秒的时候有一只猫咪掉落在 a 点上。</span><br><span class="line">注意，同一个点上同一秒可能掉落多只猫咪。m &#x3D; 0 时输入结束。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出一个整数 x，表示可能接住的最多的猫咪数。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">6</span><br><span class="line">5 1</span><br><span class="line">4 1</span><br><span class="line">6 1</span><br><span class="line">7 2</span><br><span class="line">7 2</span><br><span class="line">8 3</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>用 <code>f[i][j]</code> 表示第 <em>i</em> 秒在 <em>j</em> 位置能接住的猫咪数量，状态转移方程为：</p>
<script type="math/tex; mode=display">
f_{i,j}=max(f_{i-1,j-1},f_{i-1,j},f_{i-1,j+1})+a_{i,j}</script><p>即每秒只能往左、往右或不动，取最大值。</p>
<p>从后往前，可以确定最终位置一定是在 位置 5 上。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">100020</span>;</span><br><span class="line"><span class="keyword">int</span> arr[maxN][<span class="number">13</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; m) &#123;</span><br><span class="line">		<span class="keyword">if</span> (m == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m + <span class="number">10</span>; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">13</span>; j++)</span><br><span class="line">				arr[i][j] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> bPoint = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">			<span class="keyword">int</span> a, b;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">			arr[b][a + <span class="number">1</span>]++;</span><br><span class="line">			bPoint = <span class="built_in">max</span>(b, bPoint);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = bPoint - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">11</span>; j++) &#123;</span><br><span class="line">				arr[i][j] += <span class="built_in">max</span>(arr[i + <span class="number">1</span>][j + <span class="number">1</span>], <span class="built_in">max</span>(arr[i + <span class="number">1</span>][j], arr[i + <span class="number">1</span>][j - <span class="number">1</span>]));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; arr[<span class="number">0</span>][<span class="number">6</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>奇偶选数和</title>
    <url>/2020/05/19/%E5%A5%87%E5%81%B6%E9%80%89%E6%95%B0%E5%92%8C/</url>
    <content><![CDATA[<h1 id="奇偶选数和"><a href="#奇偶选数和" class="headerlink" title="奇偶选数和"></a><strong>奇偶选数和</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">神秘人给了两个数字，分别表示 n 和 k，并要求 TT 给出 k 个奇偶性相同的正整数，使得其和等于 n。</span><br><span class="line">例如 n &#x3D; 10，k &#x3D; 3，答案可以为 [4 2 4]。</span><br><span class="line">本题是SPJ</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行一个整数 T，表示数据组数，不超过 1000。</span><br><span class="line">之后 T 行，每一行给出两个正整数，分别表示 n (1 ≤ n ≤ 1e9)、k (1 ≤ k ≤ 100)。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果存在这样 k 个数字，则第一行输出 “YES”，第二行输出 k 个数字。</span><br><span class="line">如果不存在，则输出 “NO”。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">8</span><br><span class="line">10 3</span><br><span class="line">100 4</span><br><span class="line">8 7</span><br><span class="line">97 2</span><br><span class="line">8 8</span><br><span class="line">3 10</span><br><span class="line">5 3</span><br><span class="line">1000000000 9</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">YES</span><br><span class="line">4 2 4</span><br><span class="line">YES</span><br><span class="line">55 5 5 35</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">1 1 1 1 1 1 1 1</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">3 1 1</span><br><span class="line">YES</span><br><span class="line">111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>由于是正整数，数最小只能取1，若 <em>k</em> &gt; <em>n</em>，则一定不行。</p>
<p>以下考虑 <em>n</em> ≥ <em>k</em>：<br>若 <em>n</em> 为偶数，且 <em>n</em> ≥ 2<em>k</em>，则一定可以，因为可以用 (<em>k</em> - 1) 个 2 表示，最后一个数一定是偶数；若 <em>k</em> ≤ <em>n</em> &lt; 2<em>k</em>，则可以先用 (<em>k</em> - 1) 个 1 表示，剩下最后一个数若为奇数，则可以，若为偶数则不行。<br>若 <em>n</em> 为奇数：若 <em>k</em> 为偶数，则一定不行；若 <em>k</em> 为奇数，用 (<em>k</em> - 1) 个 1 表示，剩下最后一个数一定也是奇数。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n, k;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">		<span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; n &gt;= <span class="number">2</span> * k) &#123;</span><br><span class="line">			<span class="keyword">int</span> x1 = <span class="number">2</span> * (k - <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">int</span> x2 = n - x1;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; x2;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">" 2"</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; n &gt;= k &amp;&amp; n &lt; <span class="number">2</span> * k) &#123;</span><br><span class="line">			<span class="keyword">int</span> x1 = n - (k - <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (x1 % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; x1;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++)</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">" 1"</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; n &gt;= k) &#123;</span><br><span class="line">			<span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">int</span> x1 = n - (k - <span class="number">1</span>);</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; x1;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++)</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">" 1"</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> </span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>奇妙的序列</title>
    <url>/2020/04/17/%E5%A5%87%E5%A6%99%E7%9A%84%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<h1 id="奇妙的序列"><a href="#奇妙的序列" class="headerlink" title="奇妙的序列"></a><strong>奇妙的序列</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有一个奇怪的无限序列: 112123123412345...... </span><br><span class="line">这个序列由连续正整数组成的若干部分构成，其中第一部分包含 1 至 1 之间的所有数字，第二部分包含 1 至 2 之间的所有数字，第三部分包含 1 至 3 之间的所有数字，第 i 部分总是包含 1 至 i 之间的所有数字。</span><br><span class="line">所以，这个序列的前 56 项会是11212312341234512345612345671234567812345678912345678910，其中第 1 项是 1，第 3 项是 2，第 20 项是 5，第 38 项是 2，第56项是 0。</span><br><span class="line">求第 k 项数字是多少。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入由多行组成。</span><br><span class="line">第一行一个整数 q 表示有 q 组询问 (1 ≤ q ≤ 500)</span><br><span class="line">接下来第 i+1 行表示第 i 个输入 ki，表示询问第 ki 项数字 (1 ≤ ki ≤ 1e18)</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出包含 q 行</span><br><span class="line">第 i 行输出对询问 ki 的输出结果。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">5</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">20</span><br><span class="line">38</span><br><span class="line">56</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h2><div class="table-container">
<table>
<thead>
<tr>
<th>数据点</th>
<th><em>q</em> (上限)</th>
<th><em>k</em> (上限)</th>
</tr>
</thead>
<tbody>
<tr>
<td>1, 2, 3</td>
<td>500</td>
<td>55</td>
</tr>
<tr>
<td>4, 5, 6</td>
<td>10<sup>4</sup></td>
<td>10<sup>6</sup></td>
</tr>
<tr>
<td>7, 8, 9, 10</td>
<td>500</td>
<td>10<sup>18</sup></td>
</tr>
</tbody>
</table>
</div>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	65536 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><p>暴力代码，只有60%的分。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">string</span> a;</span><br><span class="line">	<span class="built_in">stringstream</span> b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">		b &lt;&lt; i;</span><br><span class="line">	&#125;</span><br><span class="line">	b &gt;&gt; a;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a[n - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>字符串处理 - 栈</title>
    <url>/2020/04/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86-%E6%A0%88/</url>
    <content><![CDATA[<h1 id="字符串处理-栈"><a href="#字符串处理-栈" class="headerlink" title="字符串处理 - 栈"></a><strong>字符串处理 - 栈</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有一个字符串 X，该串包含偶数个字符，一半是 S 字符，一半是 T 字符</span><br><span class="line">可以对该字符串执行10^10000次操作：如果存在 ST 是该串的子串，则删除掉最左边的 ST。</span><br><span class="line">即 TSTTSS⇒TTSS、SSSTTT⇒SSTT⇒ST⇒空</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(2 ≦ |X| ≦ 200,000)</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出最终串的长度</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">TSTTSS</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	262144 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>从头开始扫字符串：<br>若栈空，则该位置字符入栈；<br>若栈顶为 ‘S’ 且 该字符为 ‘T’，则弹栈，否则该字符入栈。</p>
<p>最后返回栈大小即可。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != s.length(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (st.empty()) &#123;</span><br><span class="line">			st.push(s[i]);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">char</span> temp = st.top();</span><br><span class="line">		<span class="keyword">if</span> (temp == <span class="string">'S'</span> &amp;&amp; s[i] == <span class="string">'T'</span>)</span><br><span class="line">			st.pop();</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			st.push(s[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> st.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; s).eof()) &#123;</span><br><span class="line">		<span class="keyword">int</span> ans = solve(s);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>平衡字符串</title>
    <url>/2020/03/24/%E5%B9%B3%E8%A1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="平衡字符串"><a href="#平衡字符串" class="headerlink" title="平衡字符串"></a><strong>平衡字符串</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个长度为 n 的字符串 s，其中仅包含 &#39;Q&#39;, &#39;W&#39;, &#39;E&#39;, &#39;R&#39; 四种字符。</span><br><span class="line">如果四种字符在字符串中出现次数均为 n&#x2F;4，则其为一个平衡字符串。</span><br><span class="line">现可以将 s 中连续的一段子串替换成相同长度的只包含那四个字符的任意字符串，使其变为一个平衡字符串，问替换子串的最小长度?</span><br><span class="line">如果 s 已经平衡则输出0。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一行字符表示给定的字符串s。</span><br><span class="line">(字符串长度 n 是4的倍数，1 ≤ n ≤ 10^5，字符串中仅包含字符 &#39;Q&#39;, &#39;W&#39;, &#39;E&#39; 和 &#39;R&#39;。)</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个整数表示答案。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input: </span><br><span class="line">QWER</span><br><span class="line">output: </span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">QQWE</span><br><span class="line">output: </span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">QQQW</span><br><span class="line">output: </span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">QQQQ</span><br><span class="line">output: </span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	262144 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>这是一个滑动窗口问题，可以用双指针的方法，首先记录4个字符的出现频率，然后维护一个区间内的字符出现频率，二者之差可以得到区间外的每种字符频率。如果区间外每种字符的出现次数都小于等于 <em>n</em>/4，则这个区间是合法的，否则需要通过减少其他字符串的频率来达到平衡。滑动过之后，每个区间外的字符串都满足小于等于 <em>n</em>/4。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getN</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;<span class="comment">//对字符标记</span></span><br><span class="line">	<span class="keyword">if</span> (c == <span class="string">'Q'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (c == <span class="string">'W'</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (c == <span class="string">'E'</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (c == <span class="string">'R'</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRes</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> count[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> ans = s.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">int</span> avg = s.<span class="built_in">size</span>() / <span class="number">4</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != s.<span class="built_in">size</span>(); i++)</span><br><span class="line">		count[getN(s[i])]++;<span class="comment">//记录4个字符的个数</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != s.<span class="built_in">size</span>(); j++) &#123;<span class="comment">//活动窗口i, j左右指针</span></span><br><span class="line">		count[getN(s[j])]--;</span><br><span class="line">		<span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; count[<span class="number">0</span>] &lt;= avg &amp;&amp;</span><br><span class="line">			count[<span class="number">1</span>] &lt;= avg &amp;&amp; count[<span class="number">2</span>] &lt;= avg</span><br><span class="line">			&amp;&amp; count[<span class="number">3</span>] &lt;= avg) &#123;<span class="comment">//找到了可以替换的字符串</span></span><br><span class="line">			ans = <span class="built_in">min</span>(ans, j - i + <span class="number">1</span>);<span class="comment">//计算字符串长度</span></span><br><span class="line">			count[getN(s[i++])]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; getRes(s) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>城市穿梭</title>
    <url>/2020/04/09/%E5%9F%8E%E5%B8%82%E7%A9%BF%E6%A2%AD/</url>
    <content><![CDATA[<h1 id="序列操作"><a href="#序列操作" class="headerlink" title="序列操作"></a><strong>序列操作</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有 N 个商业城市，编号 1 ～ N，其中 1 号城市是首都。</span><br><span class="line">共有 M 条有向道路供商业城市相互往来。</span><br><span class="line">对每一个商业城市标记一个正整数，表示其繁荣程度，当有人沿道路从一个商业城市走到另一个商业城市时，会被收取 (目的地繁荣程度 – 出发地繁荣程度)^3 的税。</span><br><span class="line">求从首都出发，走到其他城市至少要交多少的税，如果总金额小于 3 或者无法到达请打出 &#39;?&#39;。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行输入 T，表明共有 T 组数据。（1 ≤ T ≤ 50）</span><br><span class="line">对于每一组数据，第一行输入 N，表示点的个数。（1 ≤ N ≤ 200）</span><br><span class="line">第二行输入 N 个整数，表示 1 ～ N 点的权值 a[i]。（0 ≤ a[i] ≤ 20）</span><br><span class="line">第三行输入 M，表示有向道路的条数。（0 ≤ M ≤ 100000）</span><br><span class="line">接下来 M 行，每行有两个整数 A B，表示存在一条 A 到 B 的有向道路。</span><br><span class="line">接下来给出一个整数 Q，表示询问个数。（0 ≤ Q ≤ 100000）</span><br><span class="line">每一次询问给出一个 P，表示求 1 号点到 P 号点的最少税费。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每个询问输出一行，如果不可达或税费小于 3 则输出 &#39;?&#39;。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">6 7 8 9 10</span><br><span class="line">6</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">1 5</span><br><span class="line">5 4</span><br><span class="line">4 5</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">10</span><br><span class="line">1 2 4 4 5 6 7 8 9 10</span><br><span class="line">10</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 1</span><br><span class="line">1 4</span><br><span class="line">4 5</span><br><span class="line">5 6</span><br><span class="line">6 7</span><br><span class="line">7 8</span><br><span class="line">8 9</span><br><span class="line">9 10</span><br><span class="line">2</span><br><span class="line">3 10</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">Case 1:</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">Case 2:</span><br><span class="line">?</span><br><span class="line">?</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		2000 ms</span><br><span class="line">Memory limit	32768 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>含有负边的单源最短路问题，可以用Bellman-Ford算法解决。</p>
<h3 id="Bellman-Ford-Algorithm"><a href="#Bellman-Ford-Algorithm" class="headerlink" title="Bellman-Ford Algorithm"></a>Bellman-Ford Algorithm</h3><p>从源点<code>s</code>开始，用<code>dis[]</code>数组初始化距离。<code>dis[s] = 0</code>，<code>dis[v] = +∞ (v ≠ s)</code>。<br>反复对边集<code>E</code>中的每条边进行松弛操作，使得点集<code>V</code>中的每个顶点v的最短距离估计值逼近其最短距离，共运行<code>|V|-1</code>次。<br>判断<code>E</code>中的每一条边的两个端点是否收敛，若有端点未收敛则无解，否则就将从源点可到达的<code>v</code>加入到<code>dis[v]</code>中。</p>
<h4 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">procedure <span class="title">BellmanFord</span><span class="params">(<span class="built_in">list</span> vertices, <span class="built_in">list</span> edges, vertex source)</span></span></span><br><span class="line"><span class="function">   <span class="comment">// 读入边和节点的列表并对distance和predecessor写入最短路径</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="comment">// 初始化图</span></span></span><br><span class="line"><span class="function">   <span class="keyword">for</span> each vertex v in vertices:</span></span><br><span class="line">       if v is source then distance[v] := 0</span><br><span class="line">       <span class="keyword">else</span> distance[v] := infinity</span><br><span class="line">       predecessor[v] := null</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 对每一条边重复操作</span></span><br><span class="line">   <span class="keyword">for</span> i from <span class="number">1</span> to <span class="built_in">size</span>(vertices)<span class="number">-1</span>:</span><br><span class="line">       <span class="keyword">for</span> each edge (u, v) with weight w in edges:</span><br><span class="line">           <span class="keyword">if</span> distance[u] + w &lt; distance[v]:</span><br><span class="line">               distance[v] := distance[u] + w</span><br><span class="line">               predecessor[v] := u</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 检查是否有负权回路</span></span><br><span class="line">   <span class="keyword">for</span> each edge (u, v) with weight w in edges:</span><br><span class="line">       <span class="keyword">if</span> distance[u] + w &lt; distance[v]:</span><br><span class="line">           error <span class="string">"图包含具负权重的回路"</span></span><br></pre></td></tr></table></figure>
<h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><p><img src="https://i.loli.net/2020/04/19/wGkDTRb7ephASn6.png" alt="bford.png"></p>
<p>然而，Bellman-Ford算法的时间复杂度是<em>O</em>(|<em>V</em>|×|<em>E</em>|)，相比于Dijkstra太慢了，因此引入了队列优化的SPFA。</p>
<h3 id="Shortest-Path-Fast-Algorithm-SPFA"><a href="#Shortest-Path-Fast-Algorithm-SPFA" class="headerlink" title="Shortest Path Fast Algorithm (SPFA)"></a>Shortest Path Fast Algorithm (SPFA)</h3><p>SPFA总的期望时间复杂度为<em>O</em>(<em>n</em> log <em>n</em> log (<em>m</em>/<em>n</em>) + <em>m</em>)，基于实验获得的平均时间复杂度为<em>O</em>(2|<em>E</em>|)。(From <a href="[https://zh.wikipedia.org/wiki/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E5%BF%AB%E9%80%9F%E7%AE%97%E6%B3%95](https://zh.wikipedia.org/wiki/最短路径快速算法">Wikipedia</a>))</p>
<p>给定一个加权有向图<code>G</code>，从源点<code>s</code>开始，求到每个顶点<code>v</code>的最短路径<code>dis[v]</code>。<br>基本思路与Bellman-Ford相同，只不过SPFA使用了队列维护备选节点，仅有节点被松弛后才会放入队列中。即如果这轮<code>dis[i]</code>没有被更新，那么下一轮就没有必要更新所有从<code>i</code>出发的边。如果某一点入队 <em>n</em> 次则说明有负环。</p>
<h4 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码"></a>伪代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">procedure Shortest-Path-Faster-Algorithm(G, s)</span><br><span class="line"> <span class="number">1</span>    <span class="keyword">for</span> each vertex v ≠ <span class="function">s in <span class="title">V</span><span class="params">(G)</span></span></span><br><span class="line"><span class="function"> 2        <span class="title">d</span><span class="params">(v)</span> :</span>= ∞</span><br><span class="line"> <span class="number">3</span>    d(s) := <span class="number">0</span></span><br><span class="line"> <span class="number">4</span>    offer s into Q</span><br><span class="line"> <span class="number">5</span>    <span class="keyword">while</span> Q is not empty</span><br><span class="line"> <span class="number">6</span>        u := poll Q</span><br><span class="line"> <span class="number">7</span>        <span class="function"><span class="keyword">for</span> each <span class="title">edge</span> <span class="params">(u, v)</span> in <span class="title">E</span><span class="params">(G)</span></span></span><br><span class="line"><span class="function"> 8            <span class="keyword">if</span> <span class="title">d</span><span class="params">(u)</span> + <span class="title">w</span><span class="params">(u, v)</span> &lt; <span class="title">d</span><span class="params">(v)</span> then</span></span><br><span class="line"><span class="function"> 9                <span class="title">d</span><span class="params">(v)</span> :</span>= d(u) + w(u, v)</span><br><span class="line"><span class="number">10</span>                <span class="keyword">if</span> v is not in Q then</span><br><span class="line"><span class="number">11</span>                    offer v into Q</span><br></pre></td></tr></table></figure>
<h3 id="回到本题"><a href="#回到本题" class="headerlink" title="回到本题"></a>回到本题</h3><p>根据繁荣程度，求出各个边的权值。题目要求从1到 i 的最短路径。若不可到达、可到达但税收小于3且不存在负环、可到达但存在负环则输出’<code>?</code>‘。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, w;</span><br><span class="line">	edge* next;</span><br><span class="line">	edge() &#123; to = <span class="number">-1</span>; w = <span class="number">-1</span>; next = <span class="literal">NULL</span>; &#125;</span><br><span class="line">	edge(<span class="keyword">int</span> <span class="keyword">_t</span>, <span class="keyword">int</span> _w) :to(<span class="keyword">_t</span>), w(_w) &#123; next = <span class="literal">NULL</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedList</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	edge* head;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	linkedList() &#123; head = <span class="literal">NULL</span>; <span class="built_in">size</span> = <span class="number">0</span>; &#125;</span><br><span class="line">	~linkedList() &#123;</span><br><span class="line">		edge* temp = head;</span><br><span class="line">		<span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			edge* p = temp;</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">			p = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="keyword">delete</span> p;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">delete</span> temp;</span><br><span class="line">		head = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">edge* <span class="title">getFirst</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> head; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> to, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">		edge* node = <span class="keyword">new</span> edge(to, w);</span><br><span class="line">		<span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			head = node;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		edge* p = head;</span><br><span class="line">		edge* pp = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			pp = p;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		pp-&gt;next = node;</span><br><span class="line">		<span class="built_in">size</span>++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">210</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">2e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">graph</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	linkedList arr[maxN];</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">	<span class="keyword">int</span> dis[maxN];</span><br><span class="line">	<span class="keyword">bool</span> visit[maxN];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	graph() &#123; <span class="built_in">size</span> = <span class="number">0</span>; &#125;</span><br><span class="line">	graph(<span class="keyword">int</span> n) :<span class="built_in">size</span>(n) &#123;  &#125;</span><br><span class="line">	~graph() &#123;  &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">		arr[a].add(b, w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (edge* temp = arr[x].getFirst(); temp != <span class="literal">NULL</span>; temp = temp-&gt;next) &#123;</span><br><span class="line">			<span class="keyword">int</span> y = temp-&gt;to;</span><br><span class="line">			<span class="keyword">if</span> (!visit[y]) &#123;</span><br><span class="line">				visit[y] = <span class="literal">true</span>;</span><br><span class="line">				dfs(y);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">		<span class="keyword">int</span> inq[maxN] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		<span class="keyword">int</span> cnt[maxN] = &#123; <span class="number">0</span> &#125;;<span class="comment">//记录访问每个点经过边的次数</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">			dis[i] = inf;</span><br><span class="line">			visit[i] = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">		q.push(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> p = q.front();</span><br><span class="line">			q.pop();</span><br><span class="line">			inq[p] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (edge* temp = arr[p].getFirst(); temp != <span class="literal">NULL</span>; temp = temp-&gt;next) &#123;</span><br><span class="line">				<span class="keyword">int</span> dest = temp-&gt;to;</span><br><span class="line">				<span class="keyword">int</span> weight = temp-&gt;w;</span><br><span class="line">				<span class="keyword">if</span> (visit[dest])</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span> (dis[dest] &gt; dis[p] + weight) &#123;</span><br><span class="line">					dis[dest] = dis[p] + weight;</span><br><span class="line">					cnt[dest] = cnt[p] + <span class="number">1</span>;</span><br><span class="line">					<span class="keyword">if</span> (cnt[dest] &gt;= <span class="built_in">size</span>) &#123;<span class="comment">//说明存在负环</span></span><br><span class="line">						visit[dest] = <span class="literal">true</span>;</span><br><span class="line">						dfs(dest);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (!inq[dest]) &#123;</span><br><span class="line">						q.push(dest);</span><br><span class="line">						inq[dest] = <span class="number">1</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (visit[x] || dis[x] == inf || dis[x] &lt; <span class="number">3</span>)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; dis[x] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">1</span>; ii &lt;= t; ii++) &#123;</span><br><span class="line">		<span class="keyword">int</span> n, m, q;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="function">graph <span class="title">G</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">int</span>* W = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; W[i];</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> a, b;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">			<span class="keyword">int</span> w0 = W[b] - W[a];</span><br><span class="line">			<span class="keyword">int</span> weight = w0 * w0 * w0;</span><br><span class="line">			G.add(a, b, weight);</span><br><span class="line">		&#125;</span><br><span class="line">		G.spfa();</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; ii &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> p;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">			G.output(p);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>SPFA</tag>
        <tag>Bellman-Ford</tag>
        <tag>最短路径</tag>
      </tags>
  </entry>
  <entry>
    <title>实时排名</title>
    <url>/2020/03/05/%E5%AE%9E%E6%97%B6%E6%8E%92%E5%90%8D/</url>
    <content><![CDATA[<h1 id="实时排名"><a href="#实时排名" class="headerlink" title="实时排名"></a><strong>实时排名</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">程序设计思维作业和实验使用的实时评测系统，具有及时获得成绩排名的特点，那它的功能是怎么实现的呢？</span><br><span class="line">我们千辛万苦怼完了不忍直视的程序并提交以后，评测系统要么返回AC，要么是返回各种其他的错误，不论是怎样的错法，它总会给你记上一笔，表明你曾经在这儿被坑过，而当你历经千辛终将它AC之后，它便会和你算笔总账,表明这题共错误提交了几次。</span><br><span class="line">在岁月的长河中，你通过的题数虽然越来越多，但通过每题时你所共花去的时间(从最开始算起，直至通过题目时的这段时间)都会被记录下来，作为你曾经奋斗的痕迹。特别的，对于你通过的题目，你曾经的关于这题的每次错误提交都会被算上一定的单位时间罚时，这样一来，你在做出的题数上，可能领先别人很多，但是在做出同样题数的人中，你可能会因为罚时过高而处于排名上的劣势。</span><br><span class="line">例如某次考试一共八道题(A, B, C, D, E, F, G, H)，每个人做的题都在对应的题号下有个数量标记，负数表示该学生在该题上有过的错误提交次数但到现在还没有AC，正数表示AC所耗的时间，如果正数a跟上了一对括号，里面有个正数b,则表示该学生AC了这道题，耗去了时间a，同时曾经错误提交了b次。例子可见下方的样例输入与输出部分。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入数据包含多行，第一行是共有的题数 n (1 ≤ n ≤ 12)以及单位罚时 m (10 ≤ m ≤ 20)，之后的每行数据描述一个学生的信息，首先是学生的用户名(不多于10个字符的字串)其次是所有 n 道题的得分现状，其描述采用问题描述中的数量标记的格式。</span><br><span class="line">负数表示尝试但没通过的次数，正数表示得分，正数+括号表示得分+尝试没通过的次数。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">根据这些学生的得分现状，输出一个实时排名。实时排名显然先按AC题数的多少排，多的在前，再按时间分的多少排，少的在前，如果凑巧前两者都相等，则按名字的字典序排，小的在前。每个学生占一行，输出名字(10个字符宽)，做出的题数(2个字符宽，右对齐)和时间分(4个字符宽，右对齐)。名字、题数和时间分相互之间有一个空格。数据保证可按要求的输出格式进行输出。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input:</span><br><span class="line">8 20</span><br><span class="line">GuGuDong  96     -3    40(3) 0    0    1      -8    0</span><br><span class="line">hrz       107    67    -3    0    0    82     0     0</span><br><span class="line">TT        120(3) 30    10(1) -3   0    47     21(2) -2</span><br><span class="line">OMRailgun 0      -99   -8    0    -666 -10086 0     -9999996</span><br><span class="line">yjq       -2     37(2) 13    -1   0    113(2) 79(1) -1</span><br><span class="line">Zjm       0      0     57(5) 0    0    99(3)  -7    0</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">TT          5  348</span><br><span class="line">yjq         4  342</span><br><span class="line">GuGuDong    3  197</span><br><span class="line">hrz         3  256</span><br><span class="line">Zjm         2  316</span><br><span class="line">OMRailgun   0    0</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>要实现不难，但是，格式很烦，没注意就会<code>WA</code>。</p>
<p>由于不知道要录入几个人，所以要<code>while()</code>一直录入，判断<code>eof()</code>。<br>对于第二行起的每一行输入，首先读入名字，然后对<code>n</code>道题依次读入，判断读入第<code>0</code>位：<code>&#39;-&#39;</code>或<code>&#39;0&#39;</code>不操作，否则丢入<code>realScore()</code>函数获取真实分数，并且通过题数<code>pass+1</code>，再将这些分数累加得到最终的得分<code>point</code>(详见代码)。</p>
<p>输出按照输出格式输出：<br>10个字符宽: <code>setw(10)</code><br>左对齐: <code>left</code><br>右对齐: <code>right</code><br><code>名字、题数和时间分相互之间有一个空格</code>，由于已经进行了对其操作，我写的时候还真漏了，看着不管改了好几次都是<code>WA</code>或者<code>CE</code>真的好烦……<br>排序：冒泡排序</p>
<h2 id="有些坑……"><a href="#有些坑……" class="headerlink" title="有些坑……"></a><strong>有些坑……</strong></h2><ol>
<li><p><code>cin</code>之后如果使用<code>getline(cin, string)</code>会把<code>cin</code>之后的换行符读入，所以<code>getline</code>第一次读入的是换行符。<br>解决：<code>cin.ignore(0x7fffffff, &#39;\n&#39;);</code>把换行符消除。</p>
</li>
<li><p>VJ上面<code>G++</code>编译一直<code>WA</code>，<code>C++</code>编译一直<code>Complication Error</code>，而且提示居然是<code>&quot;What do you want to do?&quot;</code>？？？(本地测试没问题啊)<br>Google的时候发现：<br><strong>在C++中读取一行的getline函数是不读入换行符的，而gcc / g++ 中getline函数是读入换行符的</strong><br>但是我本地没法弄个<code>g++</code>来测试，索性就不用<code>getline()</code>了(本来是每次读入一行，然后通过<code>sstream</code>对读入的这一行以空格分解为多个<code>string</code>进行操作)。</p>
</li>
<li><p>按名字字典排序<br>虽然说名字字长10以内，但是再对名字逐字符对比<code>ASCII</code>码排序，有点麻烦啊……就想想能不能简单的通过<code>&lt;</code>和<code>&gt;</code>对整个<code>string</code>进行对比，Google了一下，发现了<code>compare()</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">string::compare</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">Returns:</span></span><br><span class="line">0 : if both strings are equal.</span><br><span class="line">A value &lt; <span class="number">0</span> : <span class="keyword">if</span> *<span class="keyword">this</span> is shorter than str <span class="keyword">or</span>,</span><br><span class="line">first character that does <span class="keyword">not</span> match is smaller than str.</span><br><span class="line">A value &gt; <span class="number">0</span> : <span class="keyword">if</span> *<span class="keyword">this</span> is longer than str <span class="keyword">or</span>,</span><br><span class="line">first character that does <span class="keyword">not</span> match is greater</span><br></pre></td></tr></table></figure>
<p>也就是说<code>string s1</code>如果字典序在<code>string s2</code>的前面，则<code>s1.compare(s2) &lt; 0</code>。</p>
</li>
<li><p>每位学生分数信息用一个结构体<code>struct score</code>储存，每个<code>score</code>我丢到<code>vector</code>里面储存，因为使用比较方便，不需要注意数组的大小，每次只需要<code>push_back()</code>就行。但是……VJ上一直过不了啊!!!(编译器是多老啊😓)<br>所以后来改成用数组储存，容量开大一点，因为也不知道会录入多少。</p>
</li>
</ol>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxnum = <span class="number">10001</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 学生成绩结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">score</span> &#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;<span class="comment">//名字</span></span><br><span class="line">	<span class="keyword">int</span> n;<span class="comment">//本次成绩个数，不过用不到</span></span><br><span class="line">	<span class="keyword">int</span> p;<span class="comment">//pass//多少个通过</span></span><br><span class="line">	<span class="keyword">int</span> sc;<span class="comment">//scores//总得分</span></span><br><span class="line">	score() &#123; n = <span class="number">0</span>; p = <span class="number">0</span>; sc = <span class="number">0</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 求单项真实分数(原正得分+罚时分)，结果返回int分数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">realScore</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> tried = <span class="literal">false</span>;<span class="comment">//bool 尝试过 = false，即都对，没被罚时</span></span><br><span class="line">    <span class="comment">//扫描左右括号</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (s.at(i) == <span class="string">'('</span>) &#123;</span><br><span class="line">			s.at(i) = <span class="string">' '</span>;<span class="comment">//左括号变成空格，方便下一步处理</span></span><br><span class="line">			tried = <span class="literal">true</span>;<span class="comment">//扫到的话，有被罚时</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (s.at(i) == <span class="string">')'</span>) &#123;</span><br><span class="line">			s.at(i) = <span class="string">' '</span>;<span class="comment">//右括号变成空格，方便下一步处理</span></span><br><span class="line">			tried = <span class="literal">true</span>;<span class="comment">//再写一次 以防万一</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != s.<span class="built_in">size</span>(); i++) &#123;<span class="comment">//以防万一string里面不是0~9</span></span><br><span class="line">		<span class="keyword">if</span> (!(s.at(i) &gt;= <span class="number">48</span> &amp;&amp; s.at(i) &lt;= <span class="number">57</span>))</span><br><span class="line">			s.at(i) = <span class="string">' '</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (tried) &#123;<span class="comment">//如果有罚时</span></span><br><span class="line">		<span class="function"><span class="built_in">istringstream</span> <span class="title">iss</span><span class="params">(s)</span></span>;<span class="comment">//处理string  使得可以转成int</span></span><br><span class="line">		<span class="keyword">int</span> a, b;</span><br><span class="line">		iss &gt;&gt; a &gt;&gt; b;<span class="comment">//用于处理string 空格分隔 存进两个int里面</span></span><br><span class="line">		<span class="keyword">return</span> (a + b * m);<span class="comment">//a = 原得分  b = 尝试次数   m = 单位罚时</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;<span class="comment">//没有罚时</span></span><br><span class="line">		<span class="built_in">istringstream</span> iss(s);</span><br><span class="line">		<span class="keyword">int</span> a;</span><br><span class="line">		iss &gt;&gt; a;<span class="comment">//string转成int</span></span><br><span class="line">		<span class="keyword">return</span> a;<span class="comment">//直接返回得分</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用于对比名字 Alphabetically */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">com</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.compare(b) &gt; <span class="number">0</span>;<span class="comment">//如果名字a字母表顺序在名字b后 则返回true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">	score arrayList[maxnum];<span class="comment">// list of names &amp; scores</span></span><br><span class="line">	<span class="built_in">cin</span>.ignore(<span class="number">0x7fffffff</span>, <span class="string">'\n'</span>);<span class="comment">//忽略cin后的换行符 防止下次读入时出错</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> countNum = <span class="number">0</span>;<span class="comment">//计数  录入多少个学生的信息</span></span><br><span class="line">	<span class="built_in">string</span> name;<span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; name).eof()) &#123;<span class="comment">//没读到EOF就一直执行</span></span><br><span class="line">		countNum++;<span class="comment">//已录入  计数+1</span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">string</span> temp;<span class="comment">//临时string  储存得分</span></span><br><span class="line">		<span class="keyword">int</span> pass = <span class="number">0</span>;<span class="comment">//多少题通过 初始为0</span></span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">point</span> = <span class="number">0</span>;<span class="comment">//得分从0开始算</span></span><br><span class="line">		<span class="comment">//int tried = 0;//pass but failed how many times</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;<span class="comment">//题意 n道题</span></span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">			<span class="keyword">if</span> (temp.at(<span class="number">0</span>) != <span class="string">'-'</span> &amp;&amp; temp.at(<span class="number">0</span>) != <span class="string">'0'</span>) &#123;<span class="comment">//判断</span></span><br><span class="line">                <span class="comment">//若非负分或0分  就可以记分</span></span><br><span class="line">				pass++;<span class="comment">//通过题数+1</span></span><br><span class="line">				<span class="built_in">point</span> += realScore(temp, m);<span class="comment">//丢到函数里计算真实得分 并累加到point</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		score s;</span><br><span class="line">		s.name = name;</span><br><span class="line">		s.n = n;</span><br><span class="line">		s.p = pass;</span><br><span class="line">		s.sc = <span class="built_in">point</span>;</span><br><span class="line"></span><br><span class="line">		arrayList[countNum - <span class="number">1</span>] = s;<span class="comment">//每个学生的信息存到数组arrayList里</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//after input, order list</span></span><br><span class="line">    <span class="comment">//bubble sort</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; countNum - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; countNum - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arrayList[j].p &lt; arrayList[j + <span class="number">1</span>].p)<span class="comment">//若通过题数较小</span></span><br><span class="line">				swap(arrayList[j], arrayList[j + <span class="number">1</span>]);<span class="comment">//换位</span></span><br><span class="line">			<span class="keyword">if</span> (arrayList[j].p == arrayList[j + <span class="number">1</span>].p) &#123;<span class="comment">//若通过题数相等 继续判断</span></span><br><span class="line">				<span class="keyword">if</span> (arrayList[j].sc &gt; arrayList[j + <span class="number">1</span>].sc)<span class="comment">//若总分较大</span></span><br><span class="line">					swap(arrayList[j], arrayList[j + <span class="number">1</span>]);<span class="comment">//换位</span></span><br><span class="line">				<span class="keyword">if</span> (arrayList[j].sc == arrayList[j + <span class="number">1</span>].sc)<span class="comment">//若总分相等</span></span><br><span class="line">					<span class="keyword">if</span> (com(arrayList[j].name, arrayList[j + <span class="number">1</span>].name))<span class="comment">//若名字靠后</span></span><br><span class="line">						swap(arrayList[j], arrayList[j + <span class="number">1</span>]);<span class="comment">//换位</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != countNum; i++) &#123;<span class="comment">//按格式输出</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; left &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; arrayList[i].name &lt;&lt; <span class="string">" "</span> &lt;&lt;</span><br><span class="line">			right &lt;&lt; setw(<span class="number">2</span>) &lt;&lt; arrayList[i].p &lt;&lt; <span class="string">" "</span> &lt;&lt;</span><br><span class="line">			right &lt;&lt; setw(<span class="number">4</span>) &lt;&lt; arrayList[i].sc &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>排序问题</tag>
      </tags>
  </entry>
  <entry>
    <title>序列操作</title>
    <url>/2020/04/11/%E5%BA%8F%E5%88%97%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="序列操作"><a href="#序列操作" class="headerlink" title="序列操作"></a><strong>序列操作</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">存在一个序列 a, 是否存在一个数 K, 使得一些数加上 K，一些数减去 K，一些数不变，使得整个序列中所有的数相等。</span><br><span class="line">其中对于序列中的每个位置上的数字，至多只能执行一次加运算或减运算或是对该位置不进行任何操作。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输⼊第一行是一个正整数 t 表示数据组数。</span><br><span class="line">接下来对于每组数据，输入的第一个正整数 n 表示序列 a 的长度，随后一行有 n 个整数，标号序列 a 。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出共包含 t 行，每组数据输出一行。对于每组数据，如果存在这样的 K，输出&quot;YES&quot;，否则输出&quot;NO&quot;。（输出不包含引号）</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure>
<h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h2><div class="table-container">
<table>
<thead>
<tr>
<th>数据点(上限)</th>
<th><em>t</em></th>
<th><em>n</em></th>
<th><em>a</em><sub><em>i</em></sub></th>
</tr>
</thead>
<tbody>
<tr>
<td>1, 2</td>
<td>10</td>
<td>10</td>
<td>10</td>
</tr>
<tr>
<td>3, 4, 5</td>
<td>10</td>
<td>10<sup>3</sup></td>
<td>10<sup>9</sup></td>
</tr>
<tr>
<td>6, 7, 8, 9, 10</td>
<td>10</td>
<td>10<sup>4</sup></td>
<td>10<sup>15</sup></td>
</tr>
</tbody>
</table>
</div>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	65536 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>操作只有，一些数加上<em>k</em>，一些数减去<em>k</em>，一些数不变，对于每一个数列，<em>k</em>恒定为一个数<em>k</em>或者其相反数。</p>
<p>可以把原数组排序，前面的数(小的数)加上<em>k</em>，中间的数不变，后面的数(大的数)减去<em>k</em>，所以一个数列中最多存在3个数：<em>x</em> - <em>k</em>, <em>x</em>, <em>x</em> + <em>k</em>，因此可以记录数列中有多少种不同的数。</p>
<p>如果不同的数种类 &gt; 3，则不存在<em>k</em>；<br>若种类 = 1 或 2，则一定存在<em>k</em>；<br>若种类 = 3，则可以记录不同数出现的位置，记下这3个不同数：若<code>(小的数+大的数)=2×中间的数</code>，则一定存在<em>k</em>，否则<em>k</em>不存在。</p>
<p>模拟的时候，没有注意数据范围，用的<code>int</code>，后面几组数据<code>WA</code>了，后来改成<code>long long</code> 就过了……所以一定要留意数据范围啊！</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span>* a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	sort(a, a + n);</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> dif[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] != a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">			dif[count] = i;</span><br><span class="line">			count++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (count &gt; <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (count == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> x = a[dif[<span class="number">0</span>] - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> y = a[dif[<span class="number">0</span>]];</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> z = a[dif[<span class="number">1</span>]];</span><br><span class="line">		<span class="keyword">if</span> (x + z != <span class="number">2</span> * y)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (count == <span class="number">1</span> || count == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">0</span>; ii != t; ii++) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span>* a = <span class="keyword">new</span> <span class="keyword">long</span> <span class="keyword">long</span>[n + <span class="number">10</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		<span class="keyword">bool</span> ans = solve(a, n);</span><br><span class="line">		<span class="keyword">if</span> (ans)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>小测试</title>
    <url>/2021/03/14/%E5%B0%8F%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>发现了游戏里一个有意思的机制：</p>
<blockquote>
<p>血量低于80%时，减伤（80%-当前血量%）</p>
</blockquote>
<p>无聊就打算建模一下，看看残血减伤有多可怕。</p>
<a id="more"></a>
<h2 id="数学分析"><a href="#数学分析" class="headerlink" title="数学分析"></a>数学分析</h2><p>假设对方每次伤害都打你 $x\%$ 的血量，且 $x\ge20$ （因为如果打没有20%，绝对是刮痧，不用分析了）</p>
<p>那么：</p>
<h3 id="第一回合"><a href="#第一回合" class="headerlink" title="第一回合"></a>第一回合</h3><p>当前血量 $(1-x\%)$</p>
<h3 id="第二回合"><a href="#第二回合" class="headerlink" title="第二回合"></a>第二回合</h3><p>当前血量 $(1-x\%-(80\%-(1-x\%))\times x\%) = 1-0.8x\%-(x\%)^2$</p>
<p>​     即    上回合剩的血  -     减伤比例            × 伤害  </p>
<hr>
<p>看起来有点难看，设 $y = x\%$ ，则 第二回合当前血量 = $1-0.8y-y^2, (0.2\le y &lt;1 )$<br>要想活下来，上式结果大于零，解得：</p>
<script type="math/tex; mode=display">
0.2 \le y < 0.677 = \frac{2}{3}</script><p>也就是说，第二下不死，且对面伤害不太刮痧，第一下打的血在以上区间内。</p>
<h3 id="第-n-回合"><a href="#第-n-回合" class="headerlink" title="第 $n$ 回合"></a>第 $n$ 回合</h3><p>归纳可得每回合的血量百分比：</p>
<script type="math/tex; mode=display">
f(1)=1-y \\ f(2) = f(1)-(0.8-f(1)) \times y \\ ... \\
f(n) = f(n-1) - (0.8-f(n-1)) \times y = (1+y) \times f(n-1) - 0.8y</script><hr>
<p>好像……不是很好算，那就，跑个代码算吧。</p>
<h2 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">current_hp</span>(<span class="params">n, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cur_hp = [<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur_hp[i<span class="number">-1</span>] &gt;= <span class="number">0.8</span>) &#123;</span><br><span class="line">        	cur_hp.push(cur_hp[i<span class="number">-1</span>] - y);</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">else</span> &#123;</span><br><span class="line">        	cur_hp.push((<span class="number">1</span>+y) * cur_hp[i<span class="number">-1</span>] - <span class="number">0.8</span> * y);</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur_hp[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 二分法暴力解方程区间 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solve_y</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> l, r, y;</span><br><span class="line">    l = <span class="number">0.2</span>, r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> pre = <span class="number">0.01</span>;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; pre) &#123;</span><br><span class="line">        y = (l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (current_hp(n, y) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            l = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            r = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 算5个回合的好了 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"[round "</span>+i+<span class="string">"] :"</span> + <span class="string">"0.2&lt;=y&lt;"</span>+solve_y(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[round 1] :0.2&lt;=y&lt;0.99375</span><br><span class="line">[round 2] :0.2&lt;=y&lt;0.6812499999999999</span><br><span class="line">[round 3] :0.2&lt;=y&lt;0.5437500000000001</span><br><span class="line">[round 4] :0.2&lt;=y&lt;0.45625000000000004</span><br><span class="line">[round 5] :0.2&lt;=y&lt;0.40625</span><br></pre></td></tr></table></figure>
<p>所以，如果，对面第一下打你 40%，你可以撑到第五回合且不回血（不考虑伤害浮动和暴击）</p>
<p>更极端一点，比如第 8 回合？</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[round 1] :0.2&lt;=y&lt;0.99375</span><br><span class="line">[round 2] :0.2&lt;=y&lt;0.6812499999999999</span><br><span class="line">[round 3] :0.2&lt;=y&lt;0.5437500000000001</span><br><span class="line">[round 4] :0.2&lt;=y&lt;0.45625000000000004</span><br><span class="line">[round 5] :0.2&lt;=y&lt;0.40625</span><br><span class="line">[round 6] :0.2&lt;=y&lt;0.36875</span><br><span class="line">[round 7] :0.2&lt;=y&lt;0.34375</span><br><span class="line">[round 8] :0.2&lt;=y&lt;0.3187500000000001</span><br></pre></td></tr></table></figure>
<p>31% ！ 生命力非常顽强啊，第一下被打1/3，不回血可以撑 7、8 个回合</p>
<p>假设第一下打 50%，也就是不回血能撑 3 回合，设总血量 22000 ，看看每回合的血量？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> res = current_hp(i,<span class="number">0.5</span>);</span><br><span class="line">    <span class="keyword">if</span> (res &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"[round"</span>+i+<span class="string">"]: "</span>+<span class="built_in">Math</span>.floor(current_hp(i,<span class="number">0.5</span>)*<span class="number">22000</span>)+<span class="string">"/22000"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"[round"</span>+i+<span class="string">"]: "</span>+<span class="string">"0"</span>+<span class="string">"/22000"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[round1]: 11000&#x2F;22000</span><br><span class="line">[round2]: 7699&#x2F;22000</span><br><span class="line">[round3]: 2749&#x2F;22000</span><br><span class="line">[round4]: 0&#x2F;22000</span><br></pre></td></tr></table></figure>
<p>好像不够明显，看看 40%？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[round1]: 13200&#x2F;22000</span><br><span class="line">[round2]: 11439&#x2F;22000</span><br><span class="line">[round3]: 8975&#x2F;22000</span><br><span class="line">[round4]: 5526&#x2F;22000</span><br><span class="line">[round5]: 696&#x2F;22000</span><br><span class="line">[round6]: 0&#x2F;22000</span><br></pre></td></tr></table></figure>
<h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://d3js.org/d3.v4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"input_group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"maxhp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>血量上限：<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span> = <span class="string">"maxhp_text"</span>&gt;</span>22000<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span> = <span class="string">"maxhp_slider"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"12000"</span> <span class="attr">max</span>=<span class="string">"25000"</span> <span class="attr">value</span>=<span class="string">"22000"</span> <span class="attr">onchange</span>=<span class="string">"onChange()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"bhp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>初始血量：<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span> = <span class="string">"bhp_text"</span>&gt;</span>22000<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span> = <span class="string">"bhp_slider"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"25000"</span> <span class="attr">value</span>=<span class="string">"22000"</span> <span class="attr">onchange</span>=<span class="string">"onChange()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"damage"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>对手伤害：<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span> = <span class="string">"damage_text"</span>&gt;</span>11000<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span> = <span class="string">"damage_slider"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"1000"</span> <span class="attr">max</span>=<span class="string">"25000"</span> <span class="attr">value</span>=<span class="string">"11000"</span> <span class="attr">onchange</span>=<span class="string">"onChange()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"ro"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>预览回合：<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span> = <span class="string">"ro_text"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span> = <span class="string">"ro_slider"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"15"</span> <span class="attr">value</span>=<span class="string">"5"</span> <span class="attr">onchange</span>=<span class="string">"onChange()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bar_hp"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> t_r = <span class="built_in">document</span>.getElementById(<span class="string">"ro_text"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> t_m = <span class="built_in">document</span>.getElementById(<span class="string">"maxhp_text"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> t_b = <span class="built_in">document</span>.getElementById(<span class="string">"bhp_text"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> t_d = <span class="built_in">document</span>.getElementById(<span class="string">"damage_text"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> round = +<span class="built_in">document</span>.getElementById(<span class="string">"ro_slider"</span>).value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> max_hp = +<span class="built_in">document</span>.getElementById(<span class="string">"maxhp_slider"</span>).value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> damage0 = +<span class="built_in">document</span>.getElementById(<span class="string">"damage_slider"</span>).value;</span></span><br><span class="line">if (damage0 &gt; max_hp) &#123;</span><br><span class="line">    damage0 = max_hp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> damage = damage0/max_hp;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> begin_hp = +<span class="built_in">document</span>.getElementById(<span class="string">"bhp_slider"</span>).value;</span></span><br><span class="line">t_r.innerText = round;</span><br><span class="line">t_m.innerText = max_hp;</span><br><span class="line">t_b.innerText = begin_hp;</span><br><span class="line">t_d.innerText = damage0;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">onChange</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    round = +<span class="built_in">document</span>.getElementById(<span class="string">"ro_slider"</span>).value;</span></span><br><span class="line"><span class="javascript">    max_hp = +<span class="built_in">document</span>.getElementById(<span class="string">"maxhp_slider"</span>).value;</span></span><br><span class="line"><span class="javascript">    damage0 = +<span class="built_in">document</span>.getElementById(<span class="string">"damage_slider"</span>).value;</span></span><br><span class="line">    if (damage0 &gt; max_hp) &#123;</span><br><span class="line">        damage0 = max_hp;</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"damage_slider"</span>).value = max_hp;</span></span><br><span class="line">    &#125;</span><br><span class="line">    damage = damage0/max_hp;</span><br><span class="line"><span class="javascript">    begin_hp = +<span class="built_in">document</span>.getElementById(<span class="string">"bhp_slider"</span>).value;</span></span><br><span class="line">    t_r.innerText = round;</span><br><span class="line">    t_m.innerText = max_hp;</span><br><span class="line">    t_b.innerText = begin_hp;</span><br><span class="line">    t_d.innerText = damage0;</span><br><span class="line"><span class="actionscript">    d3.select(<span class="string">"svg"</span>).remove();</span></span><br><span class="line">    applyAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> margin = &#123;top: <span class="number">20</span>, right: <span class="number">30</span>, bottom: <span class="number">40</span>, left: <span class="number">90</span>&#125;,</span></span><br><span class="line">    width = 460 - margin.left - margin.right,</span><br><span class="line">    height = 400 - margin.top - margin.bottom;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">applyAll</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">current_hp</span><span class="params">(n, y)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> cur_hp = [begin_hp/max_hp];</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;=n;i++) &#123;</span></span><br><span class="line">        if (cur_hp[i-1] &gt;= 0.8) &#123;</span><br><span class="line">        	cur_hp.push(cur_hp[i-1] - y);</span><br><span class="line">    	&#125;</span><br><span class="line"><span class="actionscript">    	<span class="keyword">else</span> &#123;</span></span><br><span class="line">        	cur_hp.push((1+y) * cur_hp[i-1] - 0.8 * y);</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> cur_hp;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">/* if you want to survive to round n, y max is */</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">survive_y</span><span class="params">(n)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> l, r, y;</span></span><br><span class="line">    l = 0.2, r = 1;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> pre = <span class="number">0.01</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">while</span> (r - l &gt; pre) &#123;</span></span><br><span class="line">        y = (l+r)/2;</span><br><span class="line">        if (current_hp(n, y)[n] &gt; 0) &#123;</span><br><span class="line">            l = y;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">else</span> &#123;</span></span><br><span class="line">            r = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> y;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">/* the survive of maximum hp data */</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> data1 = [];</span></span><br><span class="line"><span class="actionscript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= round; i++)&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> temp = &#123;<span class="string">"round"</span>: i, <span class="string">"hp"</span>: survive_y(i)&#125;;</span></span><br><span class="line">    data1.push(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">/* for damage, survive to when? */</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> data2 = [];</span></span><br><span class="line"><span class="actionscript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> res = current_hp(i, damage)[i];</span></span><br><span class="line">    if (res &gt;= 0) &#123;</span><br><span class="line"><span class="actionscript">        data2.push(&#123;<span class="string">"round"</span>: i, <span class="string">"hp"</span>: res&#125;);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">        data2.push(&#123;<span class="string">"round"</span>: i, <span class="string">"hp"</span>: <span class="number">0</span>&#125;);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">break</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> svg = d3.select(<span class="string">"#bar_hp"</span>)</span></span><br><span class="line"><span class="actionscript">  .append(<span class="string">"svg"</span>)</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"width"</span>, width + margin.left + margin.right)</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"height"</span>, height + margin.top + margin.bottom)</span></span><br><span class="line"><span class="actionscript">  .append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// Add X axis</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> x = d3.scaleLinear()</span></span><br><span class="line">    .domain([0, max_hp])</span><br><span class="line">    .range([ 0, width]);</span><br><span class="line"><span class="actionscript">  svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>)</span></span><br><span class="line">    .call(d3.axisBottom(x))</span><br><span class="line"><span class="actionscript">    .selectAll(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">      .attr(<span class="string">"transform"</span>, <span class="string">"translate(-10,0)rotate(-45)"</span>)</span></span><br><span class="line"><span class="actionscript">      .style(<span class="string">"text-anchor"</span>, <span class="string">"end"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// Y axis</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> y = d3.scaleBand()</span></span><br><span class="line">    .range([ 0, height])</span><br><span class="line"><span class="actionscript">    .domain(data1.map(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> d.round; &#125;))</span></span><br><span class="line">    .padding(.1);</span><br><span class="line"><span class="actionscript">  svg.append(<span class="string">"g"</span>)</span></span><br><span class="line">    .call(d3.axisLeft(y))</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">//Bars</span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> u = svg.selectAll(<span class="string">"myRect"</span>)</span></span><br><span class="line">    .data(data1);</span><br><span class="line">    u.enter()</span><br><span class="line"><span class="actionscript">    .append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"x"</span>, x(<span class="number">0</span>) )</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> y(d.round); &#125;)</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"width"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> x(d.hp)*max_hp; &#125;)</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"height"</span>, y.bandwidth() )</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"fill"</span>, <span class="string">"#69b3a2"</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line">  update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applyAll();</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>平衡字符串Plus</title>
    <url>/2020/04/17/%E5%B9%B3%E8%A1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2Plus/</url>
    <content><![CDATA[<h1 id="平衡字符串Plus"><a href="#平衡字符串Plus" class="headerlink" title="平衡字符串Plus"></a><strong>平衡字符串Plus</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个字符串，字符串中包括26个大写字母和特殊字符&#39;?&#39;，特殊字符&#39;?&#39;可以代表任何一个大写字母。</span><br><span class="line">是否存在一个位置连续的且由26个大写字母组成的子串，在这个子串中每个字母出现且仅出现一次，如果存在，请输出从左侧算起的第一个出现的符合要求的子串，并且要求，如果有多组解同时符合位置最靠左，则输出字典序最小的那个解；如果不存在，输出-1。</span><br><span class="line"></span><br><span class="line">说明：字典序先按照第一个字母，以 A、B、C ...... Z 的顺序排列；如果第一个字母一样，那么比较第二个、第三个乃至后面的字母。如果比到最后两个单词不一样长（比如，SIGH 和 SIGHT），那么把短者排在前。例如</span><br><span class="line">AB??EFGHIJKLMNOPQRSTUVWXYZ </span><br><span class="line"> </span><br><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br><span class="line">ABDCEFGHIJKLMNOPQRSTUVWXYZ</span><br><span class="line">上面两种填法，都可以构成26个字母，但是我们要求字典序最小，只能取前者。</span><br><span class="line">注意，题目要求的是第一个出现的，字典序最小的！</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入只有一行，一个符合题目描述的字符串。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出只有一行，如果存在这样的子串，请输出，否则输出-1</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">ABC??FGHIJK???OPQR?TUVWXY?</span><br><span class="line">Output: </span><br><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">AABCDEFGHIJKLMNOPQRSTUVW??M</span><br><span class="line">Output: </span><br><span class="line">-1</span><br></pre></td></tr></table></figure>
<h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h2><div class="table-container">
<table>
<thead>
<tr>
<th>数据点</th>
<th>字符串长度</th>
</tr>
</thead>
<tbody>
<tr>
<td>1, 2, 3</td>
<td>10</td>
</tr>
<tr>
<td>4, 5, 6</td>
<td>10<sup>4</sup></td>
</tr>
<tr>
<td>7, 8, 9, 10</td>
<td>10<sup>6</sup></td>
</tr>
</tbody>
</table>
</div>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	65536 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>滑动窗口问题，窗口内26个字符，不断向右滑动；<br>每次对窗口内字符串判断，先记录26个字母的频率，若有其中一个字母频率&gt;1，则这个窗口一定不行，及时终止；若有字母的频率为0，则一定出现了’?’，记下这个字母；26个字符全扫一遍后，将’?’按字母表顺序全部替换为字母，返回字符串。<br>不断滑动窗口，直至出现第一个符合情况的字符串，按要求输出。</p>
<p>这样暴力求解，本来是想骗分的，没想到真的<code>AC</code>了……</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getN</span><span class="params">(<span class="keyword">char</span> a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a &gt;= <span class="number">65</span> &amp;&amp; a &lt;= <span class="number">90</span>)</span><br><span class="line">		<span class="keyword">return</span> a - <span class="number">64</span>;<span class="comment">//标记A~Z：1~26</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//标记?：0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">solve1</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> count[<span class="number">27</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">		count[getN(s[i])]++;</span><br><span class="line">	<span class="keyword">int</span> c0 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> temp[<span class="number">27</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">27</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (count[i] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">string</span> t = <span class="string">"-1"</span>;</span><br><span class="line">			<span class="keyword">return</span> t;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (count[i] == <span class="number">0</span>) &#123;</span><br><span class="line">			temp[c0] = i;</span><br><span class="line">			c0++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> c2 = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">string</span> res = s;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (res[i] == <span class="string">'?'</span>) &#123;</span><br><span class="line">			<span class="keyword">char</span> cha = temp[c2] + <span class="number">64</span>;</span><br><span class="line">			c2++;</span><br><span class="line">			res[i] = cha;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">solve2</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span> = s.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">25</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">string</span> c = s.substr(i - <span class="number">25</span>, <span class="number">26</span>);</span><br><span class="line">		<span class="built_in">string</span> res = solve1(c);</span><br><span class="line">		<span class="keyword">if</span> (res == <span class="string">"-1"</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (res.<span class="built_in">size</span>() == <span class="number">26</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> res;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"-1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; solve2(s) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>序列的段数</title>
    <url>/2020/05/06/%E5%BA%8F%E5%88%97%E7%9A%84%E6%AE%B5%E6%95%B0/</url>
    <content><![CDATA[<h1 id="序列的段数"><a href="#序列的段数" class="headerlink" title="序列的段数"></a><strong>序列的段数</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有一个序列，这个序列长度为 n (n ≤ 1000)，也就是一共有 n 个数(ai ≤ 1000)，求这个序列有几段？</span><br><span class="line">段的定义是位置连续的数值相同的最长整数序列</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入第一行一个整数 n，表示数的个数</span><br><span class="line">接下来一行 n 个空格隔开的整数，表示不同的数字</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出一行，这个序列有多少段</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">12</span><br><span class="line">2 3 3 6 6 6 1 1 4 5 1 4</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">8</span><br><span class="line"></span><br><span class="line">Explain: </span><br><span class="line">    序列可分为[2][3 3][6 6 6][1 1][4][5][1][4]  共八段</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>从头到尾扫一遍，若 <code>A[i] != A[i-1]</code>，则段数+1。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">int</span> arr[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (arr[i - <span class="number">1</span>] != arr[i])</span><br><span class="line">			count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n).eof()) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">		<span class="keyword">int</span> res = solve(n);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>快线换乘-最短路径</title>
    <url>/2020/04/07/%E5%BF%AB%E7%BA%BF%E6%8D%A2%E4%B9%98-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h1 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a><strong>最短路径</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">猫猫快线是市民从市内去喵星机场的首选交通工具。猫猫快线分为经济线和商业线两种，线路、速度和价钱都不同。TT 有一张商业线车票，可以坐一站商业线，而其他时候只能乘坐经济线。假设换乘时间忽略不计，你的任务是找一条去喵星机场最快的线路。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入包含多组数据。每组数据第一行为 3 个整数 N, S 和 E (2 ≤ N ≤ 500, 1 ≤ S, E ≤ 100)，即猫猫快线中的车站总数，起点和终点（即喵星机场所在站）编号。</span><br><span class="line"></span><br><span class="line">下一行包含一个整数 M (1 ≤ M ≤ 1000)，即经济线的路段条数。</span><br><span class="line"></span><br><span class="line">接下来有 M 行，每行 3 个整数 X, Y, Z (1 ≤ X, Y ≤ N, 1 ≤ Z ≤ 100)，表示 TT 可以乘坐经济线在车站 X 和车站 Y 之间往返，其中单程需要 Z 分钟。</span><br><span class="line"></span><br><span class="line">下一行为商业线的路段条数 K (1 ≤ K ≤ 1000)。</span><br><span class="line"></span><br><span class="line">接下来 K 行是商业线路段的描述，格式同经济线。</span><br><span class="line"></span><br><span class="line">所有路段都是双向的，但有可能必须使用商业车票才能到达机场。保证最优解唯一。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每组数据，输出3行。第一行按访问顺序给出 TT 经过的各个车站（包括起点和终点），第二行是 TT 换乘商业线的车站编号（如果没有使用商业线车票，输出&quot;Ticket Not Used&quot;，不含引号），第三行是 TT 前往喵星机场花费的总时间。</span><br><span class="line"></span><br><span class="line">本题不忽略多余的空格和制表符，且每一组答案间要输出一个换行</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">4 1 4</span><br><span class="line">4</span><br><span class="line">1 2 2</span><br><span class="line">1 3 3</span><br><span class="line">2 4 4</span><br><span class="line">3 4 5</span><br><span class="line">1</span><br><span class="line">2 4 3</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">1 2 4</span><br><span class="line">2</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>不考虑商业线，这是一个没有负边的单源最短路问题，用Dijksta算法求解即可。</p>
<h3 id="Dijkstra-Algorithm"><a href="#Dijkstra-Algorithm" class="headerlink" title="Dijkstra Algorithm"></a>Dijkstra Algorithm</h3><p>引进两个集合<code>S</code>和<code>U</code>，<code>S</code>记录已求出的最短路径的顶点，<code>U</code>记录还未求出最短路径的顶点。</p>
<p>从一个起点<code>s</code>出发，初始时，<code>S</code>中只有<code>s</code>，<code>U</code>中有除<code>s</code>外的其它顶点且其距离为<code>s</code>到之的距离，不断的从<code>U</code>中选出距离最短的顶点<code>k</code>，并将<code>k</code>加入到<code>S</code>中，且从<code>U</code>中移除<code>k</code>。</p>
<p>然后更新<code>U</code>，<code>(s, v)</code>表示<code>s</code>到<code>v</code>的距离，若<code>(s, v) &gt; (s, k) + (k, v)</code>，则更新<code>(s, v)</code>。</p>
<p>不断重复以上操作，直至遍历完所有顶点。</p>
<h3 id="再看这道题"><a href="#再看这道题" class="headerlink" title="再看这道题"></a>再看这道题</h3><p>先不考虑商业线，从起点开始遍历，可以求出起点到每个点的最短距离<code>dis1[]</code>，再从终点开始遍历得到最短距离<code>dis2[]</code>。</p>
<p>考虑商业线，对于每一次输入的商业线<code>(u, v, w)</code>，对比一下<code>dis1[u]+dis2[v]+w</code>(由起点到<code>u</code>、由终点到<code>v</code>，且算上这条商业线的<code>w</code>)与<code>dis1[v]+dis2[u]+w</code>(起点→<code>v</code>、终点→<code>u</code>、商业线权重<code>w</code>)，取最小值，并用一个<code>ans</code>记录每一个的最小值，次次取最小，枚举完后记录的那个就是所取的商业线。<code>ans</code>再与不走商业线对比，最小值就是最终答案，根据题目格式输出。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, w;</span><br><span class="line">	edge* next;</span><br><span class="line">	edge() &#123; to = <span class="number">-1</span>; w = <span class="number">-1</span>; next = <span class="literal">NULL</span>; &#125;</span><br><span class="line">	edge(<span class="keyword">int</span> <span class="keyword">_t</span>, <span class="keyword">int</span> _w) :to(<span class="keyword">_t</span>), w(_w) &#123; next = <span class="literal">NULL</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedList</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	edge* head;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	linkedList() &#123; head = <span class="literal">NULL</span>; <span class="built_in">size</span> = <span class="number">0</span>; &#125;</span><br><span class="line">	~linkedList() &#123;</span><br><span class="line">		edge* temp = head;</span><br><span class="line">		<span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			edge* p = temp;</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">			p = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="keyword">delete</span> p;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">delete</span> temp;</span><br><span class="line">		head = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">edge* <span class="title">getFirst</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> head; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> to, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">		edge* node = <span class="keyword">new</span> edge(to, w);</span><br><span class="line">		<span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			head = node;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		edge* p = head;</span><br><span class="line">		edge* pp = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			pp = p;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		pp-&gt;next = node;</span><br><span class="line">		<span class="built_in">size</span>++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis1[maxN], dis2[maxN];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*邻接链表表示的图*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">graph</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	linkedList arr[maxN];</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">	<span class="keyword">int</span> pre1[maxN];</span><br><span class="line">	<span class="keyword">int</span> pre2[maxN];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	graph() &#123; <span class="built_in">size</span> = <span class="number">0</span>; &#125;</span><br><span class="line">	graph(<span class="keyword">int</span> n) :<span class="built_in">size</span>(n) &#123;  &#125;</span><br><span class="line">	~graph() &#123;  &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">		arr[x].add(y, z);</span><br><span class="line">		arr[y].add(x, z);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">bool</span> sta)</span> </span>&#123;</span><br><span class="line">		priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">bool</span> reach[maxN] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (sta) <span class="comment">//判断是否是初始车站</span></span><br><span class="line">				dis1[i] = inf;</span><br><span class="line">			<span class="keyword">if</span> (!sta)</span><br><span class="line">				dis2[i] = inf;</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">if</span> (sta)</span><br><span class="line">			dis1[s] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (!sta)</span><br><span class="line">			dis2[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		q.push(make_pair(<span class="number">0</span>, s));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> x = q.top().second;</span><br><span class="line">			q.pop();</span><br><span class="line">			<span class="keyword">if</span> (reach[x])</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			reach[x] = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">for</span> (edge* temp = arr[x].getFirst(); temp != <span class="literal">NULL</span>; temp = temp-&gt;next) &#123;<span class="comment">//遍历以当前点所有可能到达的最近车站，更新距离并记录前一车站以便输出</span></span><br><span class="line">				<span class="keyword">int</span> dest = temp-&gt;to;</span><br><span class="line">				<span class="keyword">int</span> weight = temp-&gt;w;</span><br><span class="line">				<span class="keyword">if</span> (sta) &#123;</span><br><span class="line">					<span class="keyword">if</span> (dis1[dest] &gt; dis1[x] + weight) &#123;</span><br><span class="line">						dis1[dest] = dis1[x] + weight;</span><br><span class="line">						pre1[dest] = x;</span><br><span class="line">						q.push(make_pair(-dis1[dest], dest));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (!sta) &#123;</span><br><span class="line">					<span class="keyword">if</span> (dis2[dest] &gt; dis2[x] + weight) &#123;</span><br><span class="line">						dis2[dest] = dis2[x] + weight;</span><br><span class="line">						pre2[dest] = x;</span><br><span class="line">						q.push(make_pair(-dis2[dest], dest));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">output1</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (s != cur)</span><br><span class="line">			output1(s, pre1[cur]);</span><br><span class="line">		<span class="keyword">if</span> (s == cur)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d"</span>, cur);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" %d"</span>, cur);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">output2</span><span class="params">(<span class="keyword">int</span> e, <span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (cur != e) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" %d"</span>, cur);</span><br><span class="line">			cur = pre2[cur];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">" %d"</span>, cur);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, s, e;<span class="comment">//车站总数 起点 终点</span></span><br><span class="line">	<span class="keyword">bool</span> firstOutput = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;s, &amp;e) != EOF) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!firstOutput)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> m;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">		<span class="function">graph <span class="title">G</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> x, y, z;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">			G.add(x, y, z);</span><br><span class="line">		&#125;</span><br><span class="line">		G.dijkstra(s, <span class="literal">true</span>);</span><br><span class="line">		G.dijkstra(e, <span class="literal">false</span>);</span><br><span class="line">		<span class="keyword">int</span> k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">		<span class="keyword">int</span> ans = inf;</span><br><span class="line">		<span class="keyword">int</span> d1, d2;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;<span class="comment">//枚举每一条商业线</span></span><br><span class="line">			<span class="keyword">int</span> x, y, z;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">			<span class="keyword">if</span> (ans &gt; <span class="built_in">min</span>(dis1[x] + dis2[y] + z, dis2[x] + dis1[y] + z)) &#123;</span><br><span class="line">				ans = <span class="built_in">min</span>(dis1[x] + dis2[y] + z, dis2[x] + dis1[y] + z);</span><br><span class="line">				<span class="keyword">if</span> (dis1[x] + dis2[y] &gt; dis1[y] + dis2[x])</span><br><span class="line">					swap(x, y);<span class="comment">//最终变成由s到x，y到e，便于输出</span></span><br><span class="line">				d2 = x;</span><br><span class="line">				d1 = y;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (firstOutput)</span><br><span class="line">			firstOutput = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ans &lt; dis1[e]) &#123;<span class="comment">//使用了车票</span></span><br><span class="line">			G.output1(s, d2);</span><br><span class="line">			G.output2(e, d1);<span class="comment">//逆序输出</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\n%d\n"</span>, d2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="comment">//没使用车票 直接输出</span></span><br><span class="line">			ans = dis1[e];</span><br><span class="line">			G.output1(s, e);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\nTicket Not Used\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>Dijkstra</tag>
      </tags>
  </entry>
  <entry>
    <title>恐怖的宇宙射线</title>
    <url>/2020/03/19/%E6%81%90%E6%80%96%E7%9A%84%E5%AE%87%E5%AE%99%E5%B0%84%E7%BA%BF/</url>
    <content><![CDATA[<h1 id="可怕又恐怖的宇宙射线"><a href="#可怕又恐怖的宇宙射线" class="headerlink" title="可怕又恐怖的宇宙射线"></a><strong>可怕又恐怖的宇宙射线</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">宇宙射线会在无限的二维平⾯上传播(可以看做⼀个二维网格图)，初始方向默认向上。宇宙射线会在发射出⼀段距离后分裂，向该⽅向的左右45°⽅向分裂出两条宇宙射线，同时威力不变！宇宙射线会分裂 n 次，每次分裂后会在分裂方向前进 ai 个单位长度。</span><br><span class="line">求宇宙射线共经过多少个位置。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输⼊第⼀行包含⼀个正整数n(n ≤ 30)，表示宇宙射线会分裂n次</span><br><span class="line">第⼆行包含n个正整数a1, a2, ..., an，第i个数 表示第i次分裂的宇宙射线会在它原方向上继续走多少个单位长度。</span><br></pre></td></tr></table></figure>
<h2 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出⼀个数ans，表示有多少个位置有射线经过。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input: </span><br><span class="line">4</span><br><span class="line">4 2 2 3</span><br><span class="line">output: </span><br><span class="line">39</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">15</span><br><span class="line">1 2 3 4 5 5 4 3 2 1 1 2 3 4 5</span><br><span class="line">output: </span><br><span class="line">6179</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">20</span><br><span class="line">1 2 3 4 5 5 4 3 2 1 1 2 3 4 5 5 4 3 2 1</span><br><span class="line">output: </span><br><span class="line">11404</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">30</span><br><span class="line">5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5</span><br><span class="line">output: </span><br><span class="line">43348</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/03/20/caVDzir3ulJgp51.png" alt="0002.png"></p>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	262144 kB</span><br></pre></td></tr></table></figure>
<h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h2><div class="table-container">
<table>
<thead>
<tr>
<th>数据点</th>
<th><em>n</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>10%</td>
<td>≤10</td>
</tr>
<tr>
<td>40%</td>
<td>≤20</td>
</tr>
<tr>
<td>100%</td>
<td>≤30</td>
</tr>
</tbody>
</table>
</div>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>信息量挺大的，短时间内要理解题意，还要想出解题方法，还要写好代码，还要考虑<code>MLE</code>或者<code>TLE</code>去优化时间、空间复杂度，还要测试是否<code>CE</code>，还要自己出数据验证思路对不对……反正赛时那时间我没写出来，最后几分钟草草提交，结果<code>CE</code>了……赛后也是写了好久，一直卡在<code>MLE on test 5</code>……后来才对DFS优化剪枝，用优化前后的测试数据对比判断优化是否<code>WA</code>了……最后才<code>AC</code>……🤧</p>
<p>思路就是DFS，8种选择写的麻烦了一点，主要就是解题有许多坑啊……😖</p>
<h3 id="分裂后的方向问题"><a href="#分裂后的方向问题" class="headerlink" title="分裂后的方向问题"></a>分裂后的方向问题</h3><p>每次分裂都会往左右45°产生2个方向，二维平面总共有8个方向，因此我对这些方向标号(见代码)，原方向与分裂后产生的方向(方向1、方向2，原方向的左侧优先)就有规律可循了，用2个函数就能求出方向1、方向2。</p>
<h3 id="第几次分裂、前进长度问题"><a href="#第几次分裂、前进长度问题" class="headerlink" title="第几次分裂、前进长度问题"></a>第几次分裂、前进长度问题</h3><p>刚开始我的处理是对输出进行多次录入处理，比如原输入<code>1 2 3 4</code>，对应数组第<code>0 1 2 3</code>位，则对应产生的射线就是2<sup><em>i</em></sup>条(<em>i</em> 为数组下标)，则我在输入时对数组进行处理，数组元素就变成<code>{ 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4 }</code>。<br>可是后来剪枝优化的时候，发现比较难判断这是第几次分裂，况且<em>n</em>越大这个数组指数级变长……所以就要对当前是第几次大分裂进行标记，简单方法就是把这个第几次存入点<code>dot</code>的结构体中，每次要用的时候取出，每次分裂并前进结束后再对这个数+1就能清楚当前是第几次大分裂了。</p>
<h3 id="标记到达的问题"><a href="#标记到达的问题" class="headerlink" title="标记到达的问题"></a>标记到达的问题</h3><p>我一开始的思路是，对于每个经过点，都<code>pushback()</code>到<code>vector</code>里面，然后对这个<code>vector</code>排序，<code>for</code>循环后算出有多少个重复点，再用<code>size()</code>减去重复数量就能求出有多少点……但是后面数据太大太多，明显会<code>MLE</code>且<code>TLE</code>，所以我考虑用<code>reach</code>数组标记到达的方法。<br>但是问题又来了，我一开始的起始点思维定式成<code>(0, 0)</code>，射线可以会经过<em>x</em>轴跟<em>y</em>轴的负数区间的，数组标记不了负的下标啊……后来想想，可以用一个四维数组<code>reach[x][y][2][2]</code>，第三维的2代表x的正负，第四维的2代表y的正负。但是……好麻烦，<code>if</code>又要写一大堆还容易出错😥。<br>后来观察图形，发现是关于<em>y</em>轴对称的，所以可以只记录<em>x</em>轴正半轴处的分裂，只记录<em>y</em>的正负，降维成三维数组，最终得到的点数目×2 - 处于y轴上的点就是结果了。但是，老是要考虑正负还是麻烦啊😒……<br>后来，后来，再后来……我观察了数据范围，发现它最长能达到的横坐标是 5 × 30 × 2 = 300 (每一大次分裂都走5步, 最多30次, 正负各一次)，纵坐标奕然，所以，把起点换成<code>(150, 150)</code>就不用考虑<em>x</em>, <em>y</em>的坐标正负问题了😀……<br>思维定式真的坑🕳啊……</p>
<h3 id="如何剪枝的问题"><a href="#如何剪枝的问题" class="headerlink" title="如何剪枝的问题"></a>如何剪枝的问题</h3><p>每次分裂只考虑一个方向的话，8次后，方向就会绕回来了。所以那么多次分裂，很多步骤都是重复的。所以要用另一个数组标记，<code>con[x][y][8][31]</code>表示分裂起始点坐标，方向，第几次分裂(确定了第几次分裂就一定可以知道前进步数，所以不用再对步数进行标记到达)，这样就可以免去许多重复的步骤，优化复杂度。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><p><code>AC</code>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXREACH = <span class="number">310</span>;<span class="comment">//最大300，大一点点以防万一</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//x, y, direction, time</span></span><br><span class="line"><span class="keyword">bool</span> con[MAXREACH][MAXREACH][<span class="number">8</span>][<span class="number">31</span>] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> reach[MAXREACH][MAXREACH] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line">		<span class="comment">/*我根据产生方向的先后顺序标记的8个方向*/</span></span><br><span class="line"><span class="comment">/*↑: 1   ↖: 2   ↗: 3   ←: 4   →:5   ↙: 6   ↘: 7   ↓: 8*/</span></span><br><span class="line">	<span class="comment">/*north: 1;  northwest: 2;   northeast: 3;   west: 4;</span></span><br><span class="line"><span class="comment">	east: 5;   southwest: 6;   southeast: 7;   south: 8*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> x, y;</span><br><span class="line">	<span class="keyword">int</span> dir;</span><br><span class="line">	<span class="keyword">int</span> times;</span><br><span class="line">	dot() &#123;  &#125;</span><br><span class="line">	dot(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y) : x(_x), y(_y) &#123; dir = <span class="number">0</span>; times = <span class="number">0</span>; &#125;</span><br><span class="line">	dot(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> d, <span class="keyword">int</span> t) : x(_x), y(_y), dir(d), times(t) &#123;  &#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> dot d)<span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (x == d.x)	<span class="keyword">return</span> y &lt; d.y;</span><br><span class="line">		<span class="keyword">return</span> x &lt; d.x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> dot d)<span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (x == d.x &amp;&amp; y == d.y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nextDir1</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;<span class="comment">//往左45°产生的方向</span></span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">1</span>)	<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">2</span>)	<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">3</span>)	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">4</span>)	<span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">5</span>)	<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">6</span>)	<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">7</span>)	<span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">8</span>)	<span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nextDir2</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;<span class="comment">//往右45°产生的方向</span></span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">1</span>)	<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">2</span>)	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">3</span>)	<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">4</span>)	<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">5</span>)	<span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">6</span>)	<span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">7</span>)	<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">8</span>)	<span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">dot <span class="title">genDot</span><span class="params">(dot s, <span class="keyword">int</span> dir)</span> </span>&#123;<span class="comment">//每次走一步 产生下一个点</span></span><br><span class="line">	<span class="function">dot <span class="title">e</span><span class="params">(s.x, s.y)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">1</span>)	e.y += <span class="number">1</span>;<span class="comment">//↑</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">4</span>)	e.x -= <span class="number">1</span>;<span class="comment">//←</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">5</span>)	e.x += <span class="number">1</span>;<span class="comment">//→</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">8</span>)	e.y -= <span class="number">1</span>;<span class="comment">//↓</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">2</span>) &#123; e.x -= <span class="number">1</span>; e.y += <span class="number">1</span>; &#125;<span class="comment">//↖</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">3</span>) &#123; e.x += <span class="number">1</span>; e.y += <span class="number">1</span>; &#125;<span class="comment">//↗</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">6</span>) &#123; e.x -= <span class="number">1</span>; e.y -= <span class="number">1</span>; &#125;<span class="comment">//↙</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">7</span>) &#123; e.x += <span class="number">1</span>; e.y -= <span class="number">1</span>; &#125;<span class="comment">//↘</span></span><br><span class="line">	<span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">int</span>* <span class="built_in">step</span> = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; <span class="built_in">step</span>[i];</span><br><span class="line">	<span class="function">dot <span class="title">s</span><span class="params">(<span class="number">152</span>, <span class="number">152</span>, <span class="number">1</span>, <span class="number">0</span>)</span></span>;<span class="comment">//以防万一 起点变成(152, 152) 方向1 第0次分裂</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">queue</span>&lt;dot&gt; q;</span><br><span class="line">	q.push(s);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> reachCount = <span class="number">0</span>;<span class="comment">//记录到达过多少个位置</span></span><br><span class="line">	<span class="keyword">int</span> times = <span class="number">0</span>;<span class="comment">//记录第几次大分裂</span></span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">		dot cur = q.front();<span class="comment">//当前点</span></span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">int</span> dir = cur.dir;<span class="comment">//当前方向</span></span><br><span class="line">		times = cur.times;<span class="comment">//当前是第几次大分裂</span></span><br><span class="line">		<span class="keyword">if</span> (con[cur.x][cur.y][dir - <span class="number">1</span>][times] == <span class="literal">true</span>)<span class="comment">//如果这次分裂重复来过了</span></span><br><span class="line">			<span class="keyword">continue</span>;<span class="comment">//不用管这一次了 继续下一个循环</span></span><br><span class="line">		con[cur.x][cur.y][dir<span class="number">-1</span>][times] = <span class="literal">true</span>;<span class="comment">//没来过 标记true</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="built_in">step</span>[times]; i++) &#123;<span class="comment">//走几步</span></span><br><span class="line">			dot temp = genDot(cur, dir);<span class="comment">//产生下一个点</span></span><br><span class="line">			cur = temp;</span><br><span class="line">			<span class="keyword">int</span> ca = cur.x, cb = cur.y;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (reach[ca][cb] == <span class="literal">false</span>) &#123;<span class="comment">//标记到达</span></span><br><span class="line">				reach[ca][cb] = <span class="literal">true</span>;</span><br><span class="line">				reachCount++;<span class="comment">//计数</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (times &lt; n - <span class="number">1</span>) &#123;<span class="comment">//还没到最后一次的大分裂 可入队</span></span><br><span class="line">			<span class="keyword">int</span> a = cur.x, b = cur.y;</span><br><span class="line">			<span class="function">dot <span class="title">cur1</span><span class="params">(a, b, nextDir1(dir), times + <span class="number">1</span>)</span></span>;</span><br><span class="line">			<span class="function">dot <span class="title">cur2</span><span class="params">(a, b, nextDir2(dir), times + <span class="number">1</span>)</span></span>;</span><br><span class="line">            <span class="comment">//2个方向 入队</span></span><br><span class="line">			q.push(cur1);</span><br><span class="line">			q.push(cur2);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; reachCount &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MLE</code>暴力代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> x, y;</span><br><span class="line">	<span class="keyword">int</span> dir;</span><br><span class="line">	dot() &#123;  &#125;</span><br><span class="line">	dot(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y) : x(_x), y(_y) &#123; dir = <span class="number">0</span>; &#125;</span><br><span class="line">	dot(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> d) : x(_x), y(_y), dir(d)&#123;  &#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> dot d)<span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (x == d.x)	<span class="keyword">return</span> y &lt; d.y;</span><br><span class="line">		<span class="keyword">return</span> x &lt; d.x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> dot d)<span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (x == d.x &amp;&amp; y == d.y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nextDir1</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">1</span>)	<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">2</span>)	<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">3</span>)	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">4</span>)	<span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">5</span>)	<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">6</span>)	<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">7</span>)	<span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">8</span>)	<span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nextDir2</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">1</span>)	<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">2</span>)	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">3</span>)	<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">4</span>)	<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">5</span>)	<span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">6</span>)	<span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">7</span>)	<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">	<span class="keyword">if</span> (d == <span class="number">8</span>)	<span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">dot <span class="title">genDot</span><span class="params">(dot s, <span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line">	<span class="function">dot <span class="title">e</span><span class="params">(s.x, s.y)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">1</span>)	e.y += <span class="number">1</span>;<span class="comment">//↑</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">4</span>)	e.x -= <span class="number">1</span>;<span class="comment">//←</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">5</span>)	e.x += <span class="number">1</span>;<span class="comment">//→</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">8</span>)	e.y -= <span class="number">1</span>;<span class="comment">//↓</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">2</span>) &#123; e.x -= <span class="number">1</span>; e.y += <span class="number">1</span>; &#125;<span class="comment">//↖</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">3</span>) &#123; e.x += <span class="number">1</span>; e.y += <span class="number">1</span>; &#125;<span class="comment">//↗</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">6</span>) &#123; e.x -= <span class="number">1</span>; e.y -= <span class="number">1</span>; &#125;<span class="comment">//↙</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">7</span>) &#123; e.x += <span class="number">1</span>; e.y -= <span class="number">1</span>; &#125;<span class="comment">//↘</span></span><br><span class="line">	<span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">step</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> sx;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; sx;</span><br><span class="line">		<span class="keyword">double</span> stimes = <span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">double</span> j = <span class="number">0</span>; j != stimes; j++)</span><br><span class="line">			<span class="built_in">step</span>.push_back(sx);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">dot <span class="title">s</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;dot&gt; path;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">queue</span>&lt;dot&gt; q;</span><br><span class="line">	q.push(s);</span><br><span class="line">	<span class="keyword">int</span> times = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">		dot cur = q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">int</span> dir = cur.dir;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="built_in">step</span>[times]; i++) &#123;</span><br><span class="line">			dot temp = genDot(cur, dir);</span><br><span class="line">			path.push_back(temp);</span><br><span class="line">			cur = temp;</span><br><span class="line">		&#125;</span><br><span class="line">		times++;</span><br><span class="line">		<span class="keyword">int</span> a = cur.x, b = cur.y;</span><br><span class="line">		<span class="function">dot <span class="title">cur1</span><span class="params">(a, b, nextDir1(dir))</span></span>;</span><br><span class="line">		<span class="function">dot <span class="title">cur2</span><span class="params">(a, b, nextDir2(dir))</span></span>;</span><br><span class="line">		q.push(cur1);</span><br><span class="line">		q.push(cur2);</span><br><span class="line">		<span class="keyword">if</span> (times == <span class="built_in">step</span>.<span class="built_in">size</span>())</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(path.<span class="built_in">begin</span>(), path.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">int</span> psize = path.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">int</span> sameCount = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=psize<span class="number">-1</span>;i++)</span><br><span class="line">		<span class="keyword">if</span> (path[i] == path[i + <span class="number">1</span>])</span><br><span class="line">			sameCount++;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; psize - sameCount &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>扑克牌again</title>
    <url>/2020/04/17/%E6%89%91%E5%85%8B%E7%89%8Cagain/</url>
    <content><![CDATA[<h1 id="又打牌"><a href="#又打牌" class="headerlink" title="又打牌"></a><strong>又打牌</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打牌新规则：</span><br><span class="line">👉所有扑克牌只按数字来算大小，忽略花色。</span><br><span class="line">👉每张扑克牌的大小由一个值表示。A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K 分别指代 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13。</span><br><span class="line">👉每个玩家抽得 5 张扑克牌，组成一手牌。(每种扑克牌的张数是无限的)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>一手牌有不同类型，并且有大小之分。<br>比如一手牌 α, β，要么 α &gt; β，要么 α &lt; β，要么 α = β。</p>
<p>对于不同类型的一手牌，其值的大小即下面的标号；对于同类型的一手牌，根据组成这手牌的 5 张牌不同，其值不同。下面依次列举了这手牌的形成规则：</p>
<ol>
<li>大牌：这手牌不符合下面任一个形成规则。如果 <em>α</em> 和 <em>β</em> 都是大牌，那么定义它们的大小为组成这手牌的 5 张牌的大小总和。</li>
<li>对子：5 张牌中有 2 张牌的值相等。如果 <em>α</em> 和 <em>β</em> 都是对子，比较这个 “对子” 的大小，如果 <em>α</em> 和 <em>β</em> 的 “对子” 大小相等，那么比较剩下 3 张牌的总和。</li>
<li>两对：5 张牌中有两个不同的对子。如果 <em>α</em> 和 <em>β</em> 都是两对，先比较双方较大的那个对子，如果相等，再比较双方较小的那个对子，如果还相等，只能比较 5 张牌中的最后那张牌组不成对子的牌。</li>
<li>三个：5 张牌中有 3 张牌的值相等。如果 <em>α</em> 和 <em>β</em> 都是 “三个”，比较这个 “三个” 的大小，如果 <em>α</em> 和 <em>β</em> 的 “三个” 大小相等，那么比较剩下 2 张牌的总和。</li>
<li>三带二：5 张牌中有 3 张牌的值相等，另外 2 张牌值也相等。如果 α 和 β 都是 “三带二”，先比较它们的 “三个” 的大小，如果相等，再比较 “对子” 的大小。</li>
<li>炸弹：5 张牌中有 4 张牌的值相等。如果 <em>α</em> 和 <em>β</em> 都是 “炸弹”，比较 “炸弹” 的大小，如果相等，比较剩下那张牌的大小。</li>
<li>顺子：5 张牌中形成 <em>x</em>, <em>x</em>+1, <em>x</em>+2, <em>x</em>+3, <em>x</em>+4。如果 <em>α</em> 和 <em>β</em> 都是 “顺子”，直接比较两个顺子的最大值。</li>
<li>龙顺：5 张牌分别为 10、J、Q、K、A。</li>
</ol>
<p>要求输出一个排行榜。排行榜按照选手们的 “一手牌” 大小进行排序，如果两个选手的牌相等，那么人名字典序小的排在前面。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入包含多组数据。每组输入开头一个整数 n (1 ≤ n ≤ 100000)，表明全场共多少人。</span><br><span class="line">随后是 n 行，每行一个字符串 s1 和 s2 (1 ≤ |s1|,|s2| ≤ 10)， s1 是对应人的名字，s2 是他手里的牌情况。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每组测试数据，输出 n 行，即这次全场人的排名。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">3</span><br><span class="line">DongDong AAA109</span><br><span class="line">ZJM 678910</span><br><span class="line">Hrz 678910</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">Hrz</span><br><span class="line">ZJM</span><br><span class="line">DongDong</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	262144 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>又是打牌，又是又臭又长的题干，又是中间麻烦的字符串处理过程……这种题目不算难，就是要反复读题，中间处理过程多检查几遍，不然容易<code>WA</code>。</p>
<h3 id="分步处理"><a href="#分步处理" class="headerlink" title="分步处理"></a>分步处理</h3><p>长题可以分成多步骤解决，这题的主要步骤就是：</p>
<ol>
<li>手牌字符串转整型数组，并排序</li>
<li>根据题意判断手牌牌型，并记录第 <em>n</em> 关键字(第一关键字是牌型的编号)，存到结构体内<br>2.1 大牌：啥也不是，第二关键字是5张牌的和<br>2.2 对子：2等3不等，第二关键字是这个”2”，第三关键字是这个3张牌的和<br>2.3 两对：2等+2等+1，第二关键字是大的”2”，第三关键字是较小的”2”，第四关键字是这个”1”<br>2.4 三个：3等2不等，第二关键字是这个”3”，第三关键字是这个2张牌的和<br>2.5 三带二：3等+2等，第二关键字是这个”3”，第三关键字是这个”2”<br>2.6 炸弹：4等+1，第二关键字是这个”4”，第三关键字是这个”1”<br>2.7 顺子：形如”1 2 3 4 5””A B C D E”，第二关键字是这个”5”(“E”)<br>2.8 龙顺：手牌为10、J、Q、K、A，即数组<code>[1, 10, 11, 12, 13]</code></li>
<li>将所有人的手牌排序，输出人名</li>
</ol>
<h3 id="逐个攻破"><a href="#逐个攻破" class="headerlink" title="逐个攻破"></a>逐个攻破</h3><p>整体思路清晰后，就一一实现：</p>
<p><code>String</code>转<code>int Array[]</code>：对于10特殊处理，扫到 ‘10’ 的 ‘1’ 就存入10，对于 ‘10’ 的 ‘0’ 不做处理，因为扫不到其它的 1 (A、J、Q、K)。</p>
<p>判断牌型：用一个<code>int sameCnt</code>记录相同牌有几张(用 <em>a</em><sub><em>i</em></sub> 跟 <em>a</em><sub><em>i</em>+1</sub> 对比，所以<code>sameCnt = 各组相同张数和 - 1</code>)，并用一个<code>vector&lt;int&gt;</code>存放相同牌，然后可依此大致分为3大组：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Type</th>
<th style="text-align:center">Sample</th>
<th style="text-align:center">sameCnt</th>
<th style="text-align:center">vector</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">对子</td>
<td style="text-align:center"><code>[[A A] B C D]</code><br><code>[B [A A] C D]</code><br><code>[B C [A A] D]</code><br><code>[B C D [A A]]</code></td>
<td style="text-align:center">1</td>
<td style="text-align:center"><code>[A]</code></td>
</tr>
<tr>
<td style="text-align:center">两对</td>
<td style="text-align:center"><code>[[A A] [B B] C]</code><br><code>[[A A] C [B B]]</code><br><code>[C [A A] [B B]]</code></td>
<td style="text-align:center">2</td>
<td style="text-align:center"><code>[A, B]</code></td>
</tr>
<tr>
<td style="text-align:center">三个</td>
<td style="text-align:center"><code>[[A A A] B C]</code><br><code>[B [A A A] C]</code><br><code>[B C [A A A]]</code></td>
<td style="text-align:center">2</td>
<td style="text-align:center"><code>[A, A]</code></td>
</tr>
<tr>
<td style="text-align:center">三带二</td>
<td style="text-align:center"><code>[[A A A] [B B]]</code><br><code>[[B B] [A A A]]</code></td>
<td style="text-align:center">3</td>
<td style="text-align:center"><code>[A, A, B]</code><br><code>[B, A, A]</code></td>
</tr>
<tr>
<td style="text-align:center">炸弹</td>
<td style="text-align:center"><code>[[A A A A] B]</code><br><code>[B [A A A A]]</code></td>
<td style="text-align:center">3</td>
<td style="text-align:center"><code>[A, A, A]</code></td>
</tr>
<tr>
<td style="text-align:center">顺子</td>
<td style="text-align:center"><code>[x, x+1, x+2, x+3, x+4]</code></td>
<td style="text-align:center">0</td>
<td style="text-align:center">EMPTY</td>
</tr>
<tr>
<td style="text-align:center">龙顺</td>
<td style="text-align:center"><code>[1, 10, 11, 12, 13]</code></td>
<td style="text-align:center">0</td>
<td style="text-align:center">EMPTY</td>
</tr>
<tr>
<td style="text-align:center">大牌</td>
<td style="text-align:center"><code>[A B C D E]</code></td>
<td style="text-align:center">0</td>
<td style="text-align:center">EMPTY</td>
</tr>
</tbody>
</table>
</div>
<p>每个大组里根据<code>vector</code>就可以把牌型再细分出来了，同时记录第 <em>n</em> 关键字。(详见代码)</p>
<h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><p>自己随便出几组数据测试没啥问题，不过提交还是<code>WA</code>了，所以仔细再读了题目，发觉也没漏了啥条件，再反复看看了代码，利用中间输出，测试是哪一大步出错了？测了测也没啥错误啊……</p>
<p>找了好久才发现判断大牌的<code>for</code>循坏条件把<code>i &lt; 5</code>写成<code>i &lt; 4</code>……因为前面算<code>sameCnt</code>的时候条件是<code>i &lt; 4</code>，我貌似直接 copy-paste 了……</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poker</span> &#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> theLevel;</span><br><span class="line">	<span class="keyword">int</span> firstKey, secondKey, thirdKey;</span><br><span class="line">	poker(<span class="built_in">string</span> na, <span class="keyword">int</span> lvl, <span class="keyword">int</span> fK, <span class="keyword">int</span> sK, <span class="keyword">int</span> tK): name(na),</span><br><span class="line">		theLevel(lvl), firstKey(fK), secondKey(sK), thirdKey(tK) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">poker <span class="title">level</span><span class="params">(<span class="built_in">string</span> name, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sameCnt = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p[i] == p[i + <span class="number">1</span>]) &#123;</span><br><span class="line">			sameCnt++;</span><br><span class="line">			v.push_back(p[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// (2) 2 of 5 is equal</span></span><br><span class="line">	<span class="keyword">if</span> (sameCnt == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> firstKey = v.at(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">int</span> secondKey = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">			<span class="keyword">if</span> (p[i] != firstKey)</span><br><span class="line">				secondKey += p[i];</span><br><span class="line">		<span class="function">poker <span class="title">po</span><span class="params">(name, <span class="number">2</span>, firstKey, secondKey, <span class="number">0</span>)</span></span>;</span><br><span class="line">		<span class="keyword">return</span> po;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (sameCnt == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="comment">// (3) 2 and 2 of 5 each is equal</span></span><br><span class="line">		<span class="keyword">if</span> (v.at(<span class="number">0</span>) != v.at(<span class="number">1</span>)) &#123;</span><br><span class="line">			<span class="keyword">int</span> firstKey = v.at(<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">int</span> secondKey = v.at(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">int</span> thirdKey = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">				<span class="keyword">if</span> (p[i] != firstKey &amp;&amp; p[i] != secondKey)</span><br><span class="line">					thirdKey = p[i];</span><br><span class="line">			<span class="function">poker <span class="title">po</span><span class="params">(name, <span class="number">3</span>, firstKey, secondKey, thirdKey)</span></span>;</span><br><span class="line">			<span class="keyword">return</span> po;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// (4) 3 of 5 is equal</span></span><br><span class="line">		<span class="keyword">if</span> (v.at(<span class="number">0</span>) == v.at(<span class="number">1</span>)) &#123;</span><br><span class="line">			<span class="keyword">int</span> firstKey = v.at(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">int</span> secondKey = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">				<span class="keyword">if</span> (p[i] != firstKey)</span><br><span class="line">					secondKey += p[i];</span><br><span class="line">			<span class="function">poker <span class="title">po</span><span class="params">(name, <span class="number">4</span>, firstKey, secondKey, <span class="number">0</span>)</span></span>;</span><br><span class="line">			<span class="keyword">return</span> po;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (sameCnt == <span class="number">3</span>) &#123;</span><br><span class="line">		<span class="comment">// (5) 3 of 5 &amp; 2 of 5</span></span><br><span class="line">		<span class="keyword">if</span> (v.at(<span class="number">0</span>) != v.at(<span class="number">2</span>)) &#123;</span><br><span class="line">			<span class="keyword">int</span> firstKey = v.at(<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">int</span> secondKey = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span> (v.at(<span class="number">0</span>) != v.at(<span class="number">1</span>))</span><br><span class="line">				secondKey = v.at(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span> (v.at(<span class="number">0</span>) == v.at(<span class="number">1</span>))</span><br><span class="line">				secondKey = v.at(<span class="number">2</span>);</span><br><span class="line">			<span class="function">poker <span class="title">po</span><span class="params">(name, <span class="number">5</span>, firstKey, secondKey, <span class="number">0</span>)</span></span>;</span><br><span class="line">			<span class="keyword">return</span> po;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// (6) 4 of 5 is equal</span></span><br><span class="line">		<span class="keyword">if</span> (v.at(<span class="number">0</span>) == v.at(<span class="number">2</span>)) &#123;</span><br><span class="line">			<span class="keyword">int</span> firstKey = v.at(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">int</span> secondKey = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span> (p[<span class="number">0</span>] == firstKey)</span><br><span class="line">				secondKey = p[<span class="number">4</span>];</span><br><span class="line">			<span class="keyword">if</span> (p[<span class="number">0</span>] != firstKey)</span><br><span class="line">				secondKey = p[<span class="number">0</span>];</span><br><span class="line">			<span class="function">poker <span class="title">po</span><span class="params">(name, <span class="number">6</span>, firstKey, secondKey, <span class="number">0</span>)</span></span>;</span><br><span class="line">			<span class="keyword">return</span> po;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (sameCnt == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="comment">// (7) shunza</span></span><br><span class="line">		<span class="keyword">if</span> ((p[<span class="number">0</span>] + <span class="number">1</span> == p[<span class="number">1</span>]) &amp;&amp; (p[<span class="number">1</span>] + <span class="number">1</span> == p[<span class="number">2</span>]) &amp;&amp;</span><br><span class="line">			(p[<span class="number">2</span>] + <span class="number">1</span> == p[<span class="number">3</span>]) &amp;&amp; (p[<span class="number">3</span>] + <span class="number">1</span> == p[<span class="number">4</span>])) &#123;</span><br><span class="line">			<span class="keyword">int</span> firstKey = p[<span class="number">4</span>];</span><br><span class="line">			<span class="function">poker <span class="title">po</span><span class="params">(name, <span class="number">7</span>, firstKey, <span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">			<span class="keyword">return</span> po;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// (8) 10, J, Q, K, A</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (p[<span class="number">0</span>] == <span class="number">1</span> &amp;&amp; p[<span class="number">1</span>] == <span class="number">10</span> &amp;&amp; p[<span class="number">2</span>] == <span class="number">11</span></span><br><span class="line">			&amp;&amp; p[<span class="number">3</span>] == <span class="number">12</span> &amp;&amp; p[<span class="number">4</span>] == <span class="number">13</span>) &#123;</span><br><span class="line">			poker po(name, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">			<span class="keyword">return</span> po;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// (1) none of above</span></span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> firstKey = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">				firstKey += p[i];</span><br><span class="line">			<span class="function">poker <span class="title">po</span><span class="params">(name, <span class="number">1</span>, firstKey, <span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">			<span class="keyword">return</span> po;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span> = s.<span class="built_in">size</span>();</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; poke;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; pMap;</span><br><span class="line">	pMap[<span class="string">'A'</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">50</span>; i &lt;= <span class="number">57</span>; i++)</span><br><span class="line">		pMap[i] = i - <span class="number">48</span>;</span><br><span class="line">	pMap[<span class="string">'1'</span>] = <span class="number">10</span>;</span><br><span class="line">	pMap[<span class="string">'J'</span>] = <span class="number">11</span>;</span><br><span class="line">	pMap[<span class="string">'Q'</span>] = <span class="number">12</span>;</span><br><span class="line">	pMap[<span class="string">'K'</span>] = <span class="number">13</span>;</span><br><span class="line">	pMap[<span class="string">'0'</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> res = pMap[s[i]];</span><br><span class="line">		<span class="keyword">if</span> (res != <span class="number">0</span>)</span><br><span class="line">			poke.push_back(res);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	sort(poke.<span class="built_in">begin</span>(), poke.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> poke;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> poker&amp; p1, <span class="keyword">const</span> poker&amp; p2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p1.theLevel == p2.theLevel) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p1.firstKey == p2.firstKey) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p1.secondKey == p2.secondKey) &#123;</span><br><span class="line">				<span class="keyword">if</span> (p1.thirdKey == p2.thirdKey) &#123;</span><br><span class="line">					<span class="keyword">return</span> p1.name.compare(p2.name) &lt; <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> p1.thirdKey &gt; p2.thirdKey;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> p1.secondKey &gt; p2.secondKey;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> p1.firstKey &gt; p2.firstKey;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p1.theLevel &gt; p2.theLevel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n).eof()) &#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;poker&gt; v;</span><br><span class="line">		<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">			<span class="built_in">string</span> s1, s2;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">			<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p = convert(s2);</span><br><span class="line">			poker po = level(s1, p);</span><br><span class="line">			v.push_back(po);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), cmp);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != v.<span class="built_in">size</span>(); i++)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; v[i].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>拿数问题</title>
    <url>/2020/04/24/%E6%8B%BF%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="拿数问题"><a href="#拿数问题" class="headerlink" title="拿数问题"></a><strong>拿数问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给一个序列，里边有 n 个数，每一步能拿走一个数，比如拿第 i 个数， Ai &#x3D; x，得到相应的分数 x，但拿掉这个 Ai 后，x+1 和 x-1 (如果有 Aj &#x3D; x+1 或 Aj &#x3D; x-1 存在) 就会变得不可拿（但是有 Aj &#x3D; x 的话可以继续拿这个 x）。求最大分数。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行包含一个整数 n (1 ≤ n ≤ 10^5)，表示数字里的元素的个数</span><br><span class="line">第二行包含 n 个整数 a1, a2, ..., an (1 ≤ ai ≤ 10^5)</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出一个整数：n 你能得到最大分值。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">2</span><br><span class="line">1 2</span><br><span class="line">Output: </span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">Output: </span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">9</span><br><span class="line">1 2 1 3 2 2 2 2 3</span><br><span class="line">Output: </span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>若分 x 拿了，则 x-1 跟 x+1 不可拿，但若有多个 x，则这些 x 都可拿。因此输入的时候可以对 x 分进行计数，若 x 拿了则全拿可以使分最大，同时记输入的最大数 max_x。</p>
<p>从 0 开始到 max_x，<code>score[i] = max(score[i - 1], score[i - 2] + i * count[i])</code>，即对于数 <code>i</code>，拿或不拿取决于 <code>i - 2</code> 与 <code>i</code> 拿了是否可以比 <code>i - 1</code> 大。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxSize = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Count[maxSize] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Score[maxSize] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">int</span> maxN = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> a;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">		Count[a]++;</span><br><span class="line">		maxN = <span class="built_in">max</span>(maxN, a);</span><br><span class="line">	&#125;</span><br><span class="line">	Score[<span class="number">1</span>] = Count[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= maxN; i++)</span><br><span class="line">		Score[i] = <span class="built_in">max</span>(Score[i - <span class="number">1</span>], Score[i - <span class="number">2</span>] + i * Count[i]);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; Score[maxN] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>找数</title>
    <url>/2020/05/08/%E6%89%BE%E6%95%B0/</url>
    <content><![CDATA[<h1 id="找数问题"><a href="#找数问题" class="headerlink" title="找数问题"></a><strong>找数问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给出 n 个数，欲找出出现至少 (n + 1) &#x2F; 2 次的数， 求这个数是多少？</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本题包含多组数据：每组数据包含两行。</span><br><span class="line">第一行一个数字 N (1 ≤ N ≤ 999999) ，保证 N 为奇数。</span><br><span class="line">第二行为 N 个用空格隔开的整数。</span><br><span class="line">数据以 EOF 结束。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每一组数据，输出找到的唯一的数。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">5</span><br><span class="line">1 3 2 3 3</span><br><span class="line">11</span><br><span class="line">1 1 1 1 1 5 5 5 5 5 5</span><br><span class="line">7</span><br><span class="line">1 1 1 1 1 1 1</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    32767 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>排序，从头到尾扫一遍，计数，若次数不小于(<em>n</em> + 1) / 2，则找出了这个数。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> arr[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> cnt = (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = arr[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">int</span> cnt1 = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (arr[i] == a)</span><br><span class="line">			cnt1++;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (cnt1 &gt;= cnt)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			a = arr[i];</span><br><span class="line">			cnt1 = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n).eof()) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">		sort(arr, arr + n);</span><br><span class="line">		<span class="keyword">int</span> res = solve(n);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>扑克牌牌型</title>
    <url>/2020/03/31/%E6%89%91%E5%85%8B%E7%89%8C%E7%89%8C%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="扑克牌牌型"><a href="#扑克牌牌型" class="headerlink" title="扑克牌牌型"></a><strong>扑克牌牌型</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有 A × B 张扑克牌。每张扑克牌有一个大小(整数，记为a，范围区间是 0 到 A - 1）和一个花色（整数，记为b，范围区间是 0 到 B - 1。</span><br><span class="line">扑克牌是互异的，也就是独一无二的，也就是说没有两张牌大小和花色都相同。</span><br><span class="line">“一手牌”的意思是你手里有5张不同的牌，这 5 张牌没有谁在前谁在后的顺序之分，它们可以形成一个牌型。 我们定义了 9 种牌型，如下是 9 种牌型的规则，我们用“低序号优先”来匹配牌型，即这“一手牌”从上到下满足的第一个牌型规则就是它的“牌型编号”（一个整数，属于1到9）:</span><br><span class="line">1. 同花顺: 同时满足规则 5 和规则 4.</span><br><span class="line">2. 炸弹 : 5张牌其中有4张牌的大小相等.</span><br><span class="line">3. 三带二 : 5张牌其中有3张牌的大小相等，且另外2张牌的大小也相等.</span><br><span class="line">4. 同花 : 5张牌都是相同花色的.</span><br><span class="line">5. 顺子 : 5张牌的大小形如 x, x + 1, x + 2, x + 3, x + 4</span><br><span class="line">6. 三条: 5张牌其中有3张牌的大小相等.</span><br><span class="line">7. 两对: 5张牌其中有2张牌的大小相等，且另外3张牌中2张牌的大小相等.</span><br><span class="line">8. 一对: 5张牌其中有2张牌的大小相等.</span><br><span class="line">9. 要不起: 这手牌不满足上述的牌型中任意一个.</span><br><span class="line">现在从A × B 张扑克牌中拿走 2 张牌，分别是 (a1, b1) 和 (a2, b2). （其中a表示大小，b表示花色），现在要从剩下的扑克牌中再随机拿出 3 张，组成一手牌。</span><br><span class="line">求在所有可能的方案中，这 9 种牌型每种牌型的方案数。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第 1 行包含了整数 A 和 B (5 ≤ A ≤ 25, 1 ≤ B ≤ 4).</span><br><span class="line">第 2 行包含了整数 a1, b1, a2, b2 (0 ≤ a1, a2 ≤ A - 1, 0 ≤ b1, b2 ≤ B - 1, (a1, b1) ≠ (a2, b2)).</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出一行，这行有 9 个整数，每个整数代表了 9 种牌型的方案数（按牌型编号从小到大的顺序）</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">5 2</span><br><span class="line">1 0 3 1</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">0 0 0 0 8 0 12 36 0</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">25 4</span><br><span class="line">0 0 24 3</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">0 2 18 0 0 644 1656 36432 113344</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		2000 ms</span><br><span class="line">Memory limit	524288 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>这是一道搜索问题，暴力<code>for</code>循环搜索就能解决，不需要用到排列组合……</p>
<p>本题主要有两步：求出所有组合，判断属于哪种牌型。</p>
<h3 id="求组合"><a href="#求组合" class="headerlink" title="求组合"></a>求组合</h3><p>本来是采用递归求出所有组合的，但是扑克牌有点数和花色，二维数组的组合枚举不会写……由于每一张牌都不同，所以把二维数组变成一维数组进行枚举，然后……不知怎么样反正就是<code>WA</code>了，判断牌型没出问题，但是找不出组合哪里出问题，纠结半天，也还是找不出来……后来看见某人发了说说才恍然大悟——这是一个搜索问题！😕</p>
<p>看数据比较小，25×4，多重<code>for</code>循环应该不会超时，所以后来直接暴力<code>for</code>循环求组合，但是又出现了新问题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != a; i++)</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != b; j++)</span><br><span class="line">		<span class="keyword">if</span> (!(i == a1 &amp;&amp; j == b1) &amp;&amp; !(i == a2 &amp;&amp; j == b2))</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> ii = i; ii != a; ii++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> jj = <span class="number">0</span>; jj != b; jj++)</span><br><span class="line">					<span class="keyword">if</span> (!(ii == a1 &amp;&amp; jj == b1) &amp;&amp; !(ii == a2 &amp;&amp; jj == b2) &amp;&amp;</span><br><span class="line">						!(ii == i &amp;&amp; jj == j))</span><br><span class="line">						<span class="keyword">for</span> (<span class="keyword">int</span> iii = ii; iii != a; iii++)</span><br><span class="line">							<span class="keyword">for</span> (<span class="keyword">int</span> jjj = jj; jjj != b; jjj++)</span><br><span class="line">								<span class="keyword">if</span> (!(iii == a1 &amp;&amp; jjj == b1) &amp;&amp;</span><br><span class="line">									!(iii == a2 &amp;&amp; jjj == b2) &amp;&amp;</span><br><span class="line">									!(iii == i &amp;&amp; jjj == j) &amp;&amp;</span><br><span class="line">									!(iii == ii &amp;&amp; jjj == jj)) &#123;</span><br><span class="line">									<span class="function">poke <span class="title">p1</span><span class="params">(i, j)</span></span>;</span><br><span class="line">									pv.push_back(p1);</span><br><span class="line">									<span class="function">poke <span class="title">p2</span><span class="params">(ii, jj)</span></span>;</span><br><span class="line">									pv.push_back(p2);</span><br><span class="line">									<span class="function">poke <span class="title">p3</span><span class="params">(iii, jjj)</span></span>;</span><br><span class="line">									pv.push_back(p3);</span><br><span class="line">									sort(pv.<span class="built_in">begin</span>(), pv.<span class="built_in">end</span>(), cmp);</span><br><span class="line">									pokeKind(pv);</span><br><span class="line">								&#125;</span><br></pre></td></tr></table></figure>
<p>第二&amp;第三大次的<code>for</code>循环无法保证选的牌这一次和下一次选的不是相反的，比如第n次选牌，第二大次<code>for</code>循环选了红桃4，第三大次<code>for</code>循环选了黑桃4；然而第n+1次选牌，第二大次<code>for</code>循环选了黑桃4，第三大次<code>for</code>循环选了红桃4……</p>
<p>我的改进就是每2个小次的for循环合并，<code>手牌标号%总点数 = 当前点数</code>，<code>手牌标号/总点数= 当前花色</code>，比如<code>手牌(点数, 花色): (0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), ..., (4, 0), (4, 1)</code>标号就是<code>0, 1, 2, 3, 4, 5, ..., 8, 9</code>。</p>
<h3 id="排序后判断牌型"><a href="#排序后判断牌型" class="headerlink" title="排序后判断牌型"></a>排序后判断牌型</h3><p>我用了5个变量：<code>int sameC, diffC</code>：几组两两连续的点数相同/不同；<code>bool colorS, Shunza</code>：是否同花/顺子；<code>int diffPos</code>：最后一次出现连续两两不等的位置。</p>
<p>具体见<code>pokeKind()</code>函数区分。</p>
<h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><p>有时暴力一下可能出奇迹……</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poke</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">point</span>;</span><br><span class="line">	<span class="keyword">int</span> color;</span><br><span class="line">	poke(<span class="keyword">int</span> p, <span class="keyword">int</span> c) :<span class="built_in">point</span>(p), color(c) &#123;  &#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> poke p)<span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (p.<span class="built_in">point</span> == <span class="built_in">point</span>)</span><br><span class="line">			<span class="keyword">return</span> color &lt; p.color;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">point</span> &lt; p.<span class="built_in">point</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pK[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(poke a, poke b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pokeKind</span><span class="params">(<span class="built_in">vector</span>&lt;poke&gt; v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sameC = <span class="number">0</span>, diffC = <span class="number">0</span>; <span class="comment">//4=; 3=&amp;2=; 3=; 2=&amp;2=; 2=</span></span><br><span class="line">	<span class="keyword">int</span> diffPos = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">bool</span> colorS = <span class="literal">true</span>;<span class="comment">//同花</span></span><br><span class="line">	<span class="keyword">bool</span> Shunza = <span class="literal">true</span>;<span class="comment">//顺子</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != v.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (v[i].<span class="built_in">point</span> == v[i + <span class="number">1</span>].<span class="built_in">point</span>)</span><br><span class="line">			sameC++;</span><br><span class="line">		<span class="keyword">if</span> (v[i].<span class="built_in">point</span> != v[i + <span class="number">1</span>].<span class="built_in">point</span>) &#123;</span><br><span class="line">			diffC++;</span><br><span class="line">			diffPos = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (colorS == <span class="literal">true</span> &amp;&amp; v[i].color != v[i + <span class="number">1</span>].color)</span><br><span class="line">			colorS = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (Shunza == <span class="literal">true</span> &amp;&amp; v[i].<span class="built_in">point</span> + <span class="number">1</span> != v[i + <span class="number">1</span>].<span class="built_in">point</span>)</span><br><span class="line">			Shunza = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (colorS == <span class="literal">true</span> &amp;&amp; Shunza == <span class="literal">true</span>) &#123;</span><br><span class="line">		pK[<span class="number">0</span>]++;<span class="comment">//1 同花顺</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (sameC == <span class="number">3</span> &amp;&amp; diffC == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (diffPos == <span class="number">0</span> || diffPos == <span class="number">3</span>)</span><br><span class="line">			pK[<span class="number">1</span>]++;<span class="comment">//2 炸弹</span></span><br><span class="line">		<span class="keyword">if</span> (diffPos == <span class="number">1</span> || diffPos == <span class="number">2</span>)</span><br><span class="line">			pK[<span class="number">2</span>]++;<span class="comment">//3 三带二</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (colorS == <span class="literal">true</span> &amp;&amp; Shunza == <span class="literal">false</span>) &#123;</span><br><span class="line">		pK[<span class="number">3</span>]++;<span class="comment">//4 同花</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (colorS == <span class="literal">false</span> &amp;&amp; Shunza == <span class="literal">true</span>) &#123;</span><br><span class="line">		pK[<span class="number">4</span>]++;<span class="comment">//5 顺子</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (sameC == <span class="number">2</span> &amp;&amp; diffC == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">bool</span> same3 = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=v.<span class="built_in">size</span>()<span class="number">-2</span>;i++)</span><br><span class="line">			<span class="keyword">if</span> (v[i].<span class="built_in">point</span> == v[i + <span class="number">2</span>].<span class="built_in">point</span>)</span><br><span class="line">				same3 = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (same3 == <span class="literal">true</span>)</span><br><span class="line">			pK[<span class="number">5</span>]++;<span class="comment">//6 三条</span></span><br><span class="line">		<span class="keyword">if</span> (same3 == <span class="literal">false</span>)</span><br><span class="line">			pK[<span class="number">6</span>]++;<span class="comment">//7 两对</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (sameC == <span class="number">1</span> &amp;&amp; diffC == <span class="number">3</span>) &#123;</span><br><span class="line">		pK[<span class="number">7</span>]++;<span class="comment">//8 一对</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		pK[<span class="number">8</span>]++;<span class="comment">//9 要不起</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> a1, b1, a2, b2;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a1 &gt;&gt; b1 &gt;&gt; a2 &gt;&gt; b2;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">		pK[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != a * b - <span class="number">2</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> ai = i % a, bi = i / a;</span><br><span class="line">		<span class="keyword">if</span> (!(ai == a1 &amp;&amp; bi == b1) &amp;&amp; !(ai == a2 &amp;&amp; bi == b2)) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j != a * b - <span class="number">1</span>; j++) &#123;</span><br><span class="line">				<span class="keyword">int</span> aj = j % a, bj = j / a;</span><br><span class="line">				<span class="keyword">if</span> (!(aj == a1 &amp;&amp; bj == b1) &amp;&amp; !(aj == a2 &amp;&amp; bj == b2)) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k != a * b; k++) &#123;</span><br><span class="line">						<span class="keyword">int</span> ak = k % a, bk = k / a;</span><br><span class="line">						<span class="keyword">if</span> (!(ak == a1 &amp;&amp; bk == b1) &amp;&amp; !(ak == a2 &amp;&amp; bk == b2)) &#123;</span><br><span class="line">							<span class="function">poke <span class="title">o1</span><span class="params">(a1, b1)</span></span>;</span><br><span class="line">							<span class="function">poke <span class="title">o2</span><span class="params">(a2, b2)</span></span>;</span><br><span class="line">							<span class="built_in">vector</span>&lt;poke&gt; pv;</span><br><span class="line">							pv.push_back(o1);</span><br><span class="line">							pv.push_back(o2);</span><br><span class="line">							</span><br><span class="line">							<span class="function">poke <span class="title">p1</span><span class="params">(ai, bi)</span></span>;</span><br><span class="line">							pv.push_back(p1);</span><br><span class="line">							<span class="function">poke <span class="title">p2</span><span class="params">(aj, bj)</span></span>;</span><br><span class="line">							pv.push_back(p2);</span><br><span class="line">							<span class="function">poke <span class="title">p3</span><span class="params">(ak, bk)</span></span>;</span><br><span class="line">							pv.push_back(p3);</span><br><span class="line">							sort(pv.<span class="built_in">begin</span>(), pv.<span class="built_in">end</span>(), cmp);</span><br><span class="line">							pokeKind(pv);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; pK[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>扑克牌手牌排序</title>
    <url>/2020/03/05/%E6%89%91%E5%85%8B%E7%89%8C%E6%89%8B%E7%89%8C%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="扑克牌手牌排序"><a href="#扑克牌手牌排序" class="headerlink" title="扑克牌手牌排序"></a><strong>扑克牌手牌排序</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">瑞神HRZ因为疫情在家闲得无聊，同时他又非常厉害，所有的课对他来说都是水一水就能拿A+，所以他无聊，找来了另外三个人：咕咕东，腾神以及zjm来打牌(天下苦瑞神久矣)。</span><br><span class="line">显然，牌局由四个人构成，围成一圈。我们称四个方向为北 东 南 西。对应的英文是North，East，South，West。游戏一共由一副扑克，也就是52张构成。开始，我们指定一位发牌员(东南西北中的一个，用英文首字母标识)开始发牌，发牌顺序为顺时针，发牌员第一个不发自己，而是发他的下一个人(顺时针的下一个人)。这样，每个人都会拿到13张牌。</span><br><span class="line">现在我们定义牌的顺序，首先，花色是 梅花 &lt; 方片 &lt; 黑桃 &lt; 红桃，(输入时，我们用C, D, S, H分别表示梅花，方片，黑桃，红桃，即其单词首字母)。对于牌面的值，我们规定 2 &lt; 3 &lt; 4 &lt; 5 &lt; 6 &lt; 7 &lt; 8 &lt; 9 &lt; T &lt; J &lt; Q &lt; K &lt; A。</span><br><span class="line">现在你作为上帝，你要从小到大排序每个人手中的牌，并按照给定格式输出。(具体格式见输出描述和样例输出)。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入包含多组数据</span><br><span class="line">每组数据的第一行包含一个大写字符，表示发牌员是谁。如果该字符为‘#’则表示输入结束。</span><br><span class="line">接下来有两行，每行有52个字符，表示了26张牌，两行加起来一共52张牌。每张牌都由两个字符组成，第一个字符表示花色，第二个字符表示数值。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出多组数据发牌的结果，每组数据之后需要额外多输出一个空行！！！！！</span><br><span class="line">每组数据应该由24行的组成，输出按照顺时针方向，始终先输出South Player的结果，每位玩家先输出一行即玩家名称(东南西北)，接下来五行，第一行和第五行输出固定格式(见样例)，第二行和第四行按顺序和格式输出数值(见样例)，第三行按顺序和格式输出花色(见样例)。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">N</span><br><span class="line">CTCAH8CJD4C6D9SQC7S5HAD2HJH9CKD3H6D6D7H3HQH4C5DKHKS9</span><br><span class="line">SJDTS3S7S4C4CQHTSAH2D8DJSTSKS2H5D5DQDAH7C9S8C8S6C2C3</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">South player:</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">|6 6|A A|6 6|J J|5 5|6 6|7 7|9 9|4 4|5 5|7 7|9 9|T T|</span><br><span class="line">| C | C | D | D | S | S | S | S | H | H | H | H | H |</span><br><span class="line">|6 6|A A|6 6|J J|5 5|6 6|7 7|9 9|4 4|5 5|7 7|9 9|T T|</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">West player:</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">|2 2|5 5|9 9|K K|5 5|7 7|9 9|4 4|T T|J J|A A|8 8|A A|</span><br><span class="line">| C | C | C | C | D | D | D | S | S | S | S | H | H |</span><br><span class="line">|2 2|5 5|9 9|K K|5 5|7 7|9 9|4 4|T T|J J|A A|8 8|A A|</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">North player:</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">|3 3|4 4|J J|2 2|3 3|T T|Q Q|K K|8 8|Q Q|K K|2 2|3 3|</span><br><span class="line">| C | C | C | D | D | D | D | D | S | S | S | H | H |</span><br><span class="line">|3 3|4 4|J J|2 2|3 3|T T|Q Q|K K|8 8|Q Q|K K|2 2|3 3|</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">East player:</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">|7 7|8 8|T T|Q Q|4 4|8 8|A A|2 2|3 3|6 6|J J|Q Q|K K|</span><br><span class="line">| C | C | C | C | D | D | D | S | S | H | H | H | H |</span><br><span class="line">|7 7|8 8|T T|Q Q|4 4|8 8|A A|2 2|3 3|6 6|J J|Q Q|K K|</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>注意一下格式就行。虽然说题目<del>又臭又长</del>(其实不长)，输入输出一大串，本题不算难。考察的还是排序。<br>输出顺时针按<code>SWNE</code>，输入首个算然不是固定但也是顺时针，所以录入4维数组时可以根据输入的首个处理录入位。详见如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input order			N-E-S-W		E-S-W-N		S-W-N-E		W-N-E-S</span><br><span class="line">position adjustment	 (+2)%4		 (+3)%4		    0		 (+1)%4</span><br></pre></td></tr></table></figure>
<p>然后根据上述位差按序录入数组。录入之后就是排序问题。先按花色排序，可以通过<code>map</code>将<code>梅花到红桃</code>分别对应为<code>0到3</code>，点数<code>2到A</code>分别对应<code>0到12</code>，再比较大小即可。<br>解题过程详见代码。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*扑克牌结构体 花色+点数*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poker</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> colour;<span class="comment">//花色</span></span><br><span class="line">	<span class="keyword">char</span> points;<span class="comment">//点数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*根据发牌员判断发牌顺序，用于矫正录入顺序*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">playerNum</span><span class="params">(<span class="keyword">char</span> dealer)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (dealer == <span class="string">'N'</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">if</span> (dealer == <span class="string">'E'</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (dealer == <span class="string">'S'</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (dealer == <span class="string">'W'</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*顺序用于输出 固定为 S - W - N - E */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">playerWho</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"South player:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"West player:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"North player:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">3</span>)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"East player:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> dealer;<span class="comment">// ... -&gt; N -&gt; E -&gt; S -&gt; W -&gt; N -&gt; ...//发牌员</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; colour;<span class="comment">//编号花色 用于排序</span></span><br><span class="line">	colour[<span class="string">'C'</span>] = <span class="number">0</span>;</span><br><span class="line">	colour[<span class="string">'D'</span>] = <span class="number">1</span>;</span><br><span class="line">	colour[<span class="string">'S'</span>] = <span class="number">2</span>;</span><br><span class="line">	colour[<span class="string">'H'</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; points;<span class="comment">//编号点数 用于排序</span></span><br><span class="line">	points[<span class="string">'2'</span>] = <span class="number">0</span>;</span><br><span class="line">	points[<span class="string">'3'</span>] = <span class="number">1</span>;</span><br><span class="line">	points[<span class="string">'4'</span>] = <span class="number">2</span>;</span><br><span class="line">	points[<span class="string">'5'</span>] = <span class="number">3</span>;</span><br><span class="line">	points[<span class="string">'6'</span>] = <span class="number">4</span>;</span><br><span class="line">	points[<span class="string">'7'</span>] = <span class="number">5</span>;</span><br><span class="line">	points[<span class="string">'8'</span>] = <span class="number">6</span>;</span><br><span class="line">	points[<span class="string">'9'</span>] = <span class="number">7</span>;</span><br><span class="line">	points[<span class="string">'T'</span>] = <span class="number">8</span>;</span><br><span class="line">	points[<span class="string">'J'</span>] = <span class="number">9</span>;</span><br><span class="line">	points[<span class="string">'Q'</span>] = <span class="number">10</span>;</span><br><span class="line">	points[<span class="string">'K'</span>] = <span class="number">11</span>;</span><br><span class="line">	points[<span class="string">'A'</span>] = <span class="number">12</span>;</span><br><span class="line">	<span class="comment">/*这样写的太长了</span></span><br><span class="line"><span class="comment">	其实可以用一个数组跟一个for循环进行赋值</span></span><br><span class="line"><span class="comment">	但是已经写了 所以就懒得改了*/</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; dealer) &#123;</span><br><span class="line">		<span class="keyword">if</span> (dealer == <span class="string">'#'</span>)<span class="comment">//判断终止读入</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		poker player[<span class="number">4</span>][<span class="number">13</span>];<span class="comment">//玩家的手牌 存到一个二维数组内</span></span><br><span class="line">        <span class="comment">//数组的行数编号与 S - W - N - E 一一对应 所以要处理录入的赋值顺序</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> posAdj = playerNum(dealer);<span class="comment">//adjust input order</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//input</span></span><br><span class="line">        <span class="comment">//按照顺时针方向录入  每圈给4人发4张  扣去大小王 这样的圈共13个</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;<span class="comment">//每次4个玩家</span></span><br><span class="line">				poker x;<span class="comment">//1张牌</span></span><br><span class="line">				<span class="built_in">cin</span> &gt;&gt; x.colour &gt;&gt; x.points;<span class="comment">//花色、点数</span></span><br><span class="line">				player[(j + posAdj) % <span class="number">4</span>][i] = x;<span class="comment">//位置矫正后录入数组</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//order</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;<span class="comment">//对每个玩家</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">13</span>; j++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">12</span> - j; k++) &#123;<span class="comment">//对牌冒泡排序</span></span><br><span class="line">					<span class="keyword">if</span> (colour[player[i][k].colour] &gt; colour[player[i][k + <span class="number">1</span>].colour])<span class="comment">//先按照花色</span></span><br><span class="line">						swap(player[i][k], player[i][k + <span class="number">1</span>]);</span><br><span class="line">					<span class="keyword">if</span> (colour[player[i][k].colour] == colour[player[i][k + <span class="number">1</span>].colour]) &#123;<span class="comment">//花色相同时</span></span><br><span class="line">						<span class="keyword">if</span> (points[player[i][k].points] &gt; points[player[i][k + <span class="number">1</span>].points])<span class="comment">//按照点数</span></span><br><span class="line">							swap(player[i][k], player[i][k + <span class="number">1</span>]);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//output</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;<span class="comment">//一个一个玩家依次输出</span></span><br><span class="line">			playerWho(i);<span class="comment">//输出东西南北哪个玩家</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"+---+---+---+---+---+---+---+---+---+---+---+---+---+"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">13</span>; j++)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"|"</span> &lt;&lt; player[i][j].points &lt;&lt; <span class="string">" "</span> &lt;&lt; player[i][j].points;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"|"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">13</span>; j++)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"| "</span> &lt;&lt; player[i][j].colour &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"|"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">13</span>; j++)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"|"</span> &lt;&lt; player[i][j].points &lt;&lt; <span class="string">" "</span> &lt;&lt; player[i][j].points;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"|"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"+---+---+---+---+---+---+---+---+---+---+---+---+---+"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>排序问题</tag>
      </tags>
  </entry>
  <entry>
    <title>数鸭子</title>
    <url>/2020/06/04/%E6%95%B0%E9%B8%AD%E5%AD%90/</url>
    <content><![CDATA[<h1 id="数鸭子"><a href="#数鸭子" class="headerlink" title="数鸭子"></a><strong>数鸭子</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">湖边有一群鸭子，每一只鸭子都不⼀样，或羽毛不同，或性格不同。TT在脑子里开了一个 map&lt;鸭子，整数&gt;tong，把鸭⼦变成了一些数字。现在他好奇，有多少只鸭子映射成的数的数位中不同的数字个数小于 k 。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输⼊第一行包含两个数 n, k，表示鸭子的个数和题目要求的 k。</span><br><span class="line">接下来一行有 n 个数 ai，每个数表示鸭子被TT映射之后的值。</span><br><span class="line">n ≤ 1e6，k ≤ 1e6，ai ≤ 1e15。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出一行，一个数，表示满足题目描述的鸭子的个数。</span><br><span class="line">无行末空格</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">6 5</span><br><span class="line">123456789 9876543210 233 666 1 114514</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>就是求一堆数串中有多少个数串的不同数字个数小于 k，比如12345，其值为5；11111，其值为 1。</p>
<p>然而题目数据 k 可以大于 10，一共就 0..9 九个数字，出个 k &gt; 10 的意义在哪，k &gt; 10 的话不是都不用求直接输出 n 吗……搞得我开始想多了，还好最后几分钟没改，真的是想多了。</p>
<p>把输入的数当成字符串处理，数据范围用 <code>long long</code>。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="built_in">string</span> a, <span class="keyword">long</span> <span class="keyword">long</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> reach[<span class="number">10</span>] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>; i != a.length(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!reach[a[i] - <span class="string">'0'</span>]) &#123;</span><br><span class="line">			reach[a[i] - <span class="string">'0'</span>] = <span class="literal">true</span>;</span><br><span class="line">			count++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (count &gt;= k)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> n, k;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">string</span> a;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">		<span class="keyword">if</span> (solve(a, k))</span><br><span class="line">			count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>数据中心</title>
    <url>/2020/03/30/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h1 id="数据中心"><a href="#数据中心" class="headerlink" title="数据中心"></a><strong>数据中心</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在一个集中式网络中，存在一个根节点，需要长时间接收其余结点传输给它的反馈数据。</span><br><span class="line">存在一个 n 结点的网络图，编号从 1 到 n。该网络的传输时全双工的，所以是无向图。如果两结点 vi, ui 相连，表明 vi, ui 之间可以互相收发数据，边权是传输数据所需时间 ti。现在每个结点需要选择一条路径将数据发送到 root 号节点。希望求出一个最优的树结构传输图，使得完成这个任务所需要的时间最少。root 结点只能接收数据，其余任何一个节点可以将数据传输给另外的一个节点，但是不能将数据传输给多个节点。所有节点可以接收多个不同节点的数据。</span><br><span class="line">一个树结构传输图的传输时间为Tmax，其中Tmax &#x3D; max(Th), h为接收点在树中的深度，Th &#x3D; max(th,j), th,j表示 j 条不同的边，这 j 条边接收点的深度都为 h。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从标准输入读入数据。</span><br><span class="line">输入的第 1 行包含一个正整数 n，保证 n ≤ 5 × 10^4</span><br><span class="line">输入的第 2 行包含一个正整数 m，保证 m ≤ 10^5。</span><br><span class="line">输入的第 3 行包含一个正整数 root，保证 root ≤ 5 × 10^4</span><br><span class="line">输入的第 4 行至第 3+m 行包含 3 个正整数 vi, ui, ti，保证 vi ≤ 5 × 10^4, ui ≤ 5 × 10^4, ti ≤ 10^6, vi ≠ ui。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出到标准输出。</span><br><span class="line">输出仅有一行，包含一个正整数 ans，表示最优的树结构流水线所耗时 Tmax。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">1</span><br><span class="line">1 2 3</span><br><span class="line">1 3 4</span><br><span class="line">1 4 5</span><br><span class="line">2 3 8</span><br><span class="line">3 4 2</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">1</span><br><span class="line">1 2 3</span><br><span class="line">1 3 4</span><br><span class="line">1 4 5</span><br><span class="line">2 3 8</span><br><span class="line">3 4 2</span><br></pre></td></tr></table></figure>
<h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a><strong>Note</strong></h2><p><img src="https://i.loli.net/2020/04/03/juJwNGV2FL7dXm5.png" alt="image-20200403020036204.png"></p>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	524288 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p><del>本题又臭又长，题设变量花里胡哨，样例解释东拉西扯，</del>题意大致就是n个节点的带权无向图，连接每个点求总权重最小，其实就是一个最小生成树问题，可以用Kruskal算法，算法具体思路同上一篇。</p>
<p>就是吐槽一下test好像跑了120组，测试用了7分钟……也太多了吧，在那等着出结果等的心好慌，测那么多万一<code>WA</code>了还是啥的会崩溃的……🙃</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">305</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> u, v, w;</span><br><span class="line">	edge(<span class="keyword">int</span> _u, <span class="keyword">int</span> _v, <span class="keyword">int</span> _w) :u(_u), v(_v), w(_w) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> par[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (par[x] == x)</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> par[x] = <span class="built_in">find</span>(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;edge&gt; v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> edgeCount = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">		par[i] = i;</span><br><span class="line">	sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), cmp);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> p1 = <span class="built_in">find</span>(v[i].u);</span><br><span class="line">		<span class="keyword">int</span> p2 = <span class="built_in">find</span>(v[i].v);</span><br><span class="line">		<span class="keyword">if</span> (p1 != p2) &#123;</span><br><span class="line">			par[p1] = p2;</span><br><span class="line">			ans += v[i].w;</span><br><span class="line">			edgeCount++;</span><br><span class="line">			<span class="keyword">if</span> (edgeCount == n)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="built_in">vector</span>&lt;edge&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> a;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">		<span class="function">edge <span class="title">e1</span><span class="params">(<span class="number">0</span>, i, a)</span></span>;</span><br><span class="line">		<span class="function">edge <span class="title">e2</span><span class="params">(i, <span class="number">0</span>, a)</span></span>;</span><br><span class="line">		v.push_back(e1);</span><br><span class="line">		v.push_back(e2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">			<span class="keyword">int</span> a;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">			<span class="keyword">if</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="function">edge <span class="title">e</span><span class="params">(i, j, a)</span></span>;</span><br><span class="line">				v.push_back(e);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> res = kruskal(n, v);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
        <tag>Kruskal</tag>
      </tags>
  </entry>
  <entry>
    <title>播放CD</title>
    <url>/2020/05/05/%E6%92%AD%E6%94%BECD/</url>
    <content><![CDATA[<h1 id="播放CD"><a href="#播放CD" class="headerlink" title="播放CD"></a><strong>播放CD</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">东东开车出去泡妞(在梦中)，车内提供了 m 张CD唱片，已知东东开车的时间是 n 分钟，他该如何去选择唱片去消磨这无聊的时间呢</span><br><span class="line">假设:</span><br><span class="line">CD数量不超过20张</span><br><span class="line">没有一张CD唱片超过 N 分钟</span><br><span class="line">每张唱片只能听一次</span><br><span class="line">唱片的播放长度为整数</span><br><span class="line"> N 也是整数</span><br><span class="line">我们需要找到最能消磨时间的唱片数量，并按使用顺序输出答案（必须是听完唱片，不能有唱片没听完却到了下车时间的情况发生）</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多组输入</span><br><span class="line">每行输入第一个数字N, 代表总时间，第二个数字 M 代表有 M 张唱片，后面紧跟 M 个数字，代表每张唱片的时长。</span><br><span class="line">例如样例一: N&#x3D;5, M&#x3D;3, 第一张唱片为 1 分钟, 第二张唱片 3 分钟, 第三张 4 分钟。</span><br><span class="line">所有数据均满足以下条件:</span><br><span class="line">N ≤ 10000</span><br><span class="line">M ≤ 20</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出所有唱片的时长和总时长，具体输出格式见样例</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">5 3 1 3 4</span><br><span class="line">10 4 9 8 4 2</span><br><span class="line">20 4 10 5 7 4</span><br><span class="line">90 8 10 23 1 2 3 4 5 7</span><br><span class="line">45 8 4 10 44 43 12 9 8 2</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">1 4 sum:5</span><br><span class="line">8 2 sum:10</span><br><span class="line">10 5 4 sum:19</span><br><span class="line">10 23 1 2 3 4 5 7 sum:55</span><br><span class="line">4 10 12 9 8 2 sum:45</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      3000 ms</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>题意就是从 <em>m</em> 个数中选出 <em>k</em> 个( <em>k</em> 不定)，使得这 <em>k</em> 个数的和为 <em>n</em>。这是个0-1背包问题。</p>
<p>用 <em>f</em><sub><em>i</em>, <em>j</em></sub> 表示考虑前 <em>i</em> 件物品，放入一个容量为 <em>j</em> 的背包可获得的最大价值。</p>
<script type="math/tex; mode=display">
f_{i, j} = max(f_{i-1, j}, f_{i-1, j-w_i} + v_i)</script><p>对于第 <em>i</em> 件物品放或不放，若不放，则变成前 <em>i</em> - 1 件物品放入容量为 <em>j</em> 的背包中；若放，则前 <em>i</em> - 1 件物品放入容量为 <em>j</em> - <em>w</em><sub><em>i</em></sub> 的背包中。</p>
<p>本题用 <code>cnt[i][j]</code> 数组标记容量为 <em>j</em> 时，物品 <em>i</em> 取不取，用于输出。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">20000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxM = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[maxN];</span><br><span class="line"><span class="keyword">int</span> cnt[maxM][maxN];</span><br><span class="line"><span class="keyword">int</span> v[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> value, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxN; i++)</span><br><span class="line">		arr[i] = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxM; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; maxN; j++)</span><br><span class="line">			cnt[i][j] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = value; j &gt;= v[i]; j--) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j - v[i]] + v[i] &gt; arr[j]) &#123;</span><br><span class="line">				cnt[i][j] = <span class="number">1</span>;</span><br><span class="line">				arr[j] = arr[j - v[i]] + v[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">	<span class="keyword">int</span> j = value;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">if</span> (cnt[i][j]) &#123;</span><br><span class="line">			res.push_back(v[i]);</span><br><span class="line">			j -= v[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = res.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"sum:"</span> &lt;&lt; arr[value] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m).eof()) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">		solve(n, m);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
      </tags>
  </entry>
  <entry>
    <title>最长网线</title>
    <url>/2020/03/26/%E6%9C%80%E9%95%BF%E7%BD%91%E7%BA%BF/</url>
    <content><![CDATA[<h1 id="最长网线"><a href="#最长网线" class="headerlink" title="最长网线"></a><strong>最长网线</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实验室里原先有一台电脑(编号为 1 )，最近又购置了 N - 1 台电脑，编号为 2 到 N 。每台电脑都用网线连接到一台先前安装的电脑上。求第 i 台电脑到其他电脑的最大网线长度。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入文件包含多组测试数据。对于每组测试数据，第一行一个整数 N (N ≤ 10000)，接下来有 N - 1 行，每一行两个数，对于第 j 行的两个数，它们表示与 i 号电脑连接的电脑编号以及它们之间网线的长度。网线的总长度不会超过 10^9，每个数之间用一个空格隔开。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每组测试数据输出 N 行，第 i 行表示 i 号电脑的答案 (1 ≤ i ≤ N).</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">5</span><br><span class="line">1 1</span><br><span class="line">2 1</span><br><span class="line">3 1</span><br><span class="line">1 1</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	32768 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>每台电脑最多有2条网线相连，因此可以看成一棵树，采用邻接矩阵来储存节点。</p>
<p>利用DFS逐个求出每个节点的最长路径会超时，但是本题连接的网线可以看成一棵没有分支的树，是一条链，树的直径就是链长，因此可以求出链的两端点到每个节点的距离，更新最大距离即可。</p>
<p>树的直径：从某个点开始遍历，它能到达的终点就是直径的一个端点；再从这个得到的端点开始遍历，它能到达的终点就是直径的另一个端点。</p>
<p>本题进行3次DFS就能得出结果。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">10005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> v;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> w;</span><br><span class="line">	edge() &#123; v = <span class="number">0</span>; w = <span class="number">0</span>; &#125;</span><br><span class="line">	edge(<span class="keyword">int</span> _v, <span class="keyword">long</span> <span class="keyword">long</span> _w) :v(_v), w(_w) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; edges[maxN];</span><br><span class="line"><span class="keyword">bool</span> visit[maxN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> path[maxN];</span><br><span class="line"><span class="keyword">int</span> source;<span class="comment">//直径的端点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">long</span> <span class="keyword">long</span> length)</span> </span>&#123;</span><br><span class="line">	visit[s] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edges[s].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> temp = edges[s].at(i).v;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> tempW = edges[s].at(i).w;</span><br><span class="line">		<span class="keyword">if</span> (!visit[temp]) &#123;</span><br><span class="line">			path[temp] = <span class="built_in">max</span>(path[temp], length + tempW);</span><br><span class="line">			<span class="keyword">if</span> (path[source] &lt; path[temp])</span><br><span class="line">				source = temp;</span><br><span class="line">			dfs(temp, length + tempW);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thePath</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	source = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">	<span class="built_in">memset</span>(path, <span class="number">0</span>, <span class="keyword">sizeof</span>(path));</span><br><span class="line"></span><br><span class="line">	dfs(<span class="number">1</span>, <span class="number">0</span>);<span class="comment">//第一次 从第一个点开始 求得直径的一个端点</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">	dfs(source, <span class="number">0</span>);<span class="comment">//第二次 从求得的端点开始 求得另一端点 同时更新最长路径</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">	dfs(source, <span class="number">0</span>);<span class="comment">//第三次 从上一次求得的端点开始 更新最长路径</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, path[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (scanf_s(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> a;</span><br><span class="line">			<span class="keyword">long</span> <span class="keyword">long</span> b;</span><br><span class="line">			scanf_s(<span class="string">"%d %lld"</span>, &amp;a, &amp;b);</span><br><span class="line">			<span class="function">edge <span class="title">e1</span><span class="params">(a, b)</span></span>;</span><br><span class="line">			<span class="function">edge <span class="title">e2</span><span class="params">(i, b)</span></span>;</span><br><span class="line">			edges[i].push_back(e1);</span><br><span class="line">			edges[a].push_back(e2);</span><br><span class="line">		&#125;</span><br><span class="line">		thePath(n);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">			edges[i].<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>树的直径</tag>
      </tags>
  </entry>
  <entry>
    <title>数的变换</title>
    <url>/2020/04/24/%E6%95%B0%E7%9A%84%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="数的变换"><a href="#数的变换" class="headerlink" title="数的变换"></a><strong>数的变换</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有一个数字 n，目标是把它转换成 m，在每一步操作中，可将 n 乘以 2 或乘以 3，可进行任意次操作。输出将 n 转换成 m 的操作次数，如果转换不了输出-1。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入的唯一一行包括两个整数 n 和m（1 ≤ n ≤ m ≤ 5 × 10^8).</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出从 n 转换到 m 的操作次数，否则输出-1。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">120 51840</span><br><span class="line">Output: </span><br><span class="line">7</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">42 42</span><br><span class="line">Output: </span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">48 72</span><br><span class="line">Output: </span><br><span class="line">-1</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>若 <em>n</em> 比 <em>m</em> 大或 <em>m</em> 不是 <em>n</em> 的整数倍，显然是不可操作的。</p>
<p>若 <em>n</em> = <em>m</em>，无需操作。</p>
<p>然后 <em>m</em> ÷ <em>n</em>，得商。</p>
<p>接下来对商操作，多次除以3，直至无法整除；然后多次除以2，直至无法整除。若此结果商不为1，则无法操作，否则可以把 <em>n</em> 变成 <em>m</em>。</p>
<p>计算以上整除次数即可。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">long</span> <span class="keyword">long</span> m)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == m)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (n &gt; m || m % n != <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> quotient = m / n;</span><br><span class="line">	<span class="comment">// 2^x   3^y</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> cnt2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (quotient % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">		cnt2++;</span><br><span class="line">		quotient /= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> cnt3 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (quotient % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">		cnt3++;</span><br><span class="line">		quotient /= <span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (quotient != <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> cnt2 + cnt3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> n, m;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m).eof()) &#123;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> res = solve(n, m);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>方阵</title>
    <url>/2020/05/05/%E6%96%B9%E9%98%B5/</url>
    <content><![CDATA[<h1 id="方阵旋转"><a href="#方阵旋转" class="headerlink" title="方阵旋转"></a><strong>方阵旋转</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">蒜头君的班级里有 n^2 (1 ≤ n ≤ 20) 个同学，现在全班同学已经排列成一个 n × n 的方阵，但是老师却临时给出了一组新的列队方案</span><br><span class="line">为了方便列队，所以老师只关注这个方阵中同学的性别，不看具体的人是谁</span><br><span class="line">这里我们用 0 表示男生，用 1 表示女生</span><br><span class="line">现在蒜头君告诉你同学们已经排好的方阵是什么样的，再告诉你老师希望的方阵是什么样的</span><br><span class="line">他想知道同学们已经列好的方阵能否通过顺时针旋转变成老师希望的方阵</span><br><span class="line">不需要旋转则输出 0</span><br><span class="line">顺时针旋转 90° 则输出 1</span><br><span class="line">顺时针旋转 180° 则输出 2</span><br><span class="line">顺时针旋转 270° 则输出 3</span><br><span class="line">若不满足以上四种情况则输出 -1</span><br><span class="line">若满足多种情况，则输出较小的数字</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行为一个整数 n</span><br><span class="line">接下来的 n 行同学们已经列好的 01 方阵；</span><br><span class="line">再接下来的 n 行表示老师希望的的 01 方阵。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出仅有一行，该行只有一个整数，如题所示。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">4</span><br><span class="line">0 0 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 1 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 1 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    524288 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>n 阶方阵 <code>M</code>，对于点 <code>i, j</code>(1 ≤ <em>i</em> ≤ <em>n</em>, 1 ≤ <em>j</em> ≤ <em>n</em>)，<code>M[i][j]</code> 顺时针 90°: <code>M[j][n - i + 1]</code>，180°: <code>M[n - i + 1][n - j + 1]</code>，270°: <code>M[n - j + 1][i]</code>。数组从 0 记到 n - 1 的话得把 <code>n - i + 1</code> 改成 <code>n - 1 - i + 1 - 1 = n - i - 1</code>.</p>
<p>遍历的时候判断是否旋转，根据题意输出即可。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">410</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr1[maxN][maxN];</span><br><span class="line"><span class="keyword">int</span> arr2[maxN][maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxN; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; maxN; j++) &#123;</span><br><span class="line">			arr1[i][j] = <span class="number">0</span>;</span><br><span class="line">			arr2[i][j] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rotateM</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> r0 = <span class="literal">true</span>, r1 = <span class="literal">true</span>, r2 = <span class="literal">true</span>, r3 = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr1[i][j] != arr2[i][j])</span><br><span class="line">				r0 = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (arr1[i][j] != arr2[j][n - i - <span class="number">1</span>])</span><br><span class="line">				r1 = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (arr1[i][j] != arr2[n - i - <span class="number">1</span>][n - j - <span class="number">1</span>])</span><br><span class="line">				r2 = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (arr1[i][j] != arr2[n - j - <span class="number">1</span>][i])</span><br><span class="line">				r3 = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (r0)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (r1)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (r2)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (r3)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n).eof()) &#123;</span><br><span class="line">		reset();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">				<span class="built_in">cin</span> &gt;&gt; arr1[i][j];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">				<span class="built_in">cin</span> &gt;&gt; arr2[i][j];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> res = rotateM(n);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>新数组中位数问题</title>
    <url>/2020/03/19/%E6%96%B0%E6%95%B0%E7%BB%84%E4%B8%AD%E4%BD%8D%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="新数组中位数问题"><a href="#新数组中位数问题" class="headerlink" title="新数组中位数问题"></a><strong>新数组中位数问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个 N 个数的数组 cat[i]，并用这个数组生成一个新数组 ans[i]。新数组定义为对于任意的 i, j 且 i !&#x3D; j，均有 ans[] &#x3D; abs(cat[i] - cat[j])，1 ≤ i &lt; j ≤ N。试求出这个新数组的中位数，中位数即为排序之后 (len+1)&#x2F;2 位置对应的数字，&#39;&#x2F;&#39; 为下取整。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多组输入，每次输入一个 N，表示有 N 个数，之后输入一个长度为 N 的序列 cat, cat[i] ≤ 1e9, 3 ≤ n ≤ 1e5</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出新数组 ans 的中位数</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">4</span><br><span class="line">1 3 2 4</span><br><span class="line">3</span><br><span class="line">1 10 2</span><br><span class="line">Output: </span><br><span class="line">1</span><br><span class="line">8</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	65536 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>C题嘛，自然对时间复杂度要求严格，暴力求解会<code>TLE</code>，而且<code>cin</code>读入慢所以要采用<code>scanf()</code>。</p>
<p>产生的新数列全都不小于0，且原数列排序后<code>cat[n - 1] - cat[0]</code>一定是新数列中的最大数，也就是第<code>n × (n - 1) / 2 - 1</code>个，新数列排序后是单调递增的，而中位数就位于中间，因此可以对产生的新数进行二分：若新数的排名低于<code>n × (n - 1) / 2</code>，则它一定在中位数前面，若高于，则在后面，若等于，则就是所求的中位数。</p>
<p>问题来了，没有求出新数列，如何计算名次？<br>首先原数列是有序排列的，所以可以利用两个指针 <em>i</em>, <em>j</em>，<em>j</em>从第二位开始一直往后扫，同时i从第一位开始，一直扫到 <em>j</em> 的前面，计算<code>cat[j] - cat[i]</code>的值，如果大于目标数，则说明目标排名的后面有这个数，则可增加 <em>i</em>，求出最逼近目标排名的坐标，<em>j</em> - <em>i</em> 表示对于这个 <em>j</em>，目标之前一定有这么多个数在他前面；把所有可行的 <em>j</em> 遍历完后就可求出相对应的 <em>j</em> - <em>i</em>，这些 <em>j</em> - <em>i</em> 求和就是目标的名次。</p>
<p>港真，课上如果没说，真的很难想到这个层面……</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>* arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>, rank = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n; j++) &#123;</span><br><span class="line">		<span class="keyword">while</span> (arr[j] - arr[i] &gt; a)<span class="comment">//对于每一个j, 求得距离</span></span><br><span class="line">			i++;</span><br><span class="line">		rank += (j - i);<span class="comment">//这些距离之和就是名次</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> rank;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (scanf_s(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">		<span class="keyword">int</span>* cat = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			scanf_s(<span class="string">"%d"</span>, &amp;cat[i]);<span class="comment">//后面一直出问题 就索性从1开始记位</span></span><br><span class="line">		sort(cat + <span class="number">1</span>, cat + n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> N = n * (n - <span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//新数组的元素个数</span></span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">begin</span> = <span class="number">1</span>, <span class="built_in">end</span> = cat[n];</span><br><span class="line">		<span class="keyword">int</span> aim = (N + <span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//目标中位数的位置，根据题意取的+1</span></span><br><span class="line">		<span class="keyword">int</span> middle = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (<span class="built_in">begin</span> &lt;= <span class="built_in">end</span>) &#123;<span class="comment">//二分求中位数</span></span><br><span class="line">			middle = (<span class="built_in">begin</span> + <span class="built_in">end</span>) / <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">begin</span> == <span class="built_in">end</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">int</span> theRank = Rank(middle, cat, n);<span class="comment">//当前名次</span></span><br><span class="line">			<span class="keyword">if</span> (theRank &gt;= aim)<span class="comment">//in the left</span></span><br><span class="line">				<span class="built_in">end</span> = middle;</span><br><span class="line">			<span class="keyword">if</span> (theRank &lt; aim)<span class="comment">//in the right</span></span><br><span class="line">				<span class="built_in">begin</span> = middle + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, middle);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>最大矩形</title>
    <url>/2020/03/21/%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2/</url>
    <content><![CDATA[<h1 id="最大矩形"><a href="#最大矩形" class="headerlink" title="最大矩形"></a><strong>最大矩形</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给一个直方图，求直方图中的最大矩形的面积。</span><br><span class="line">例如，下面这个图片中直方图的高度从左到右分别是2, 1, 4, 5, 1, 3, 3, 他们的宽都是1，其中最大的矩形是阴影部分。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="https://i.loli.net/2020/03/21/yL5phGK9S2vljgs.gif" alt="Max_rec.png"></p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入包含多组数据。每组数据用一个整数n来表示直方图中小矩形的个数，你可以假定1 ≤ n ≤ 100000. 然后接下来n个整数h1, ..., hn, 满足 0 ≤ hi ≤ 1000000000. 这些数字表示直方图中从左到右每个小矩形的高度，每个小矩形的宽度为1。 测试数据以0结尾。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每组测试数据输出一行一个整数表示答案。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">7 2 1 4 5 1 3 3</span><br><span class="line">4 1000 1000 1000 1000</span><br><span class="line">0</span><br><span class="line">Output: </span><br><span class="line">8</span><br><span class="line">4000</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	32768 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p><code>直方图的矩形面积 = (右端点 - 左端点) × 限制高度</code>，每次维护一个左端点和右端点，用最小高度计算矩形面积，暴力做法就是对于每一个柱形图往左&amp;往右找第一个小于他的高度的左/右端点，得到宽度，再乘上高度就能更新最大面积，时间复杂度为<em>O</em>(<em>n</em><sup>2</sup>)，显然后面会超时。</p>
<p>这里就要用到单调栈。</p>
<p>每次维护矩形的左右端点的高度，利用单调非增栈，开始遇到矮的就弹栈，否则入栈并一直更新右端点，这样就能在线性时间内找到第一个比当前元素小的右端点高度，每一次弹栈的过程中更新矩形的最大面积。</p>
<p>这题比较要注意的就是后面 h 会很大，面积可能会超出<code>int</code>的范围，所以高度和面积的数据类型要用<code>long long</code>。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rec</span> &#123;</span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> <span class="built_in">height</span>;</span><br><span class="line">	<span class="keyword">int</span> left;</span><br><span class="line">	rec() &#123; <span class="built_in">height</span> = <span class="number">0</span>; left = <span class="number">0</span>; &#125;</span><br><span class="line">	rec(<span class="keyword">long</span> <span class="keyword">long</span> h, <span class="keyword">int</span> l) :<span class="built_in">height</span>(h), left(l) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n).eof()) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		rec arr[<span class="number">100005</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="keyword">long</span> <span class="keyword">long</span> h;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; h;</span><br><span class="line">			<span class="function">rec <span class="title">r</span><span class="params">(h, i)</span></span>;</span><br><span class="line">			arr[i] = r;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;<span class="comment">//答案</span></span><br><span class="line">		<span class="built_in">stack</span>&lt;rec&gt; st;<span class="comment">//栈</span></span><br><span class="line">		rec temp;</span><br><span class="line">		st.push(arr[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> l = arr[i].left;<span class="comment">//矩形的右端点</span></span><br><span class="line">			<span class="keyword">while</span> (!st.empty() &amp;&amp; st.top().<span class="built_in">height</span> &gt; arr[i].<span class="built_in">height</span>) &#123;</span><br><span class="line">                <span class="comment">//遇到了矮的 开始弹栈</span></span><br><span class="line">				temp = st.top();</span><br><span class="line">				st.pop();</span><br><span class="line">				arr[i].left = temp.left;<span class="comment">//更新左端点</span></span><br><span class="line">				<span class="keyword">long</span> <span class="keyword">long</span> sq = (l - temp.left) * temp.<span class="built_in">height</span>;<span class="comment">//计算面积</span></span><br><span class="line">				ans = <span class="built_in">max</span>(sq, ans);</span><br><span class="line">			&#125;</span><br><span class="line">			st.push(arr[i]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">            <span class="comment">//最后清栈</span></span><br><span class="line">			temp = st.top();</span><br><span class="line">			st.pop();</span><br><span class="line">			<span class="keyword">long</span> <span class="keyword">long</span> sq = (n - temp.left) * temp.<span class="built_in">height</span>;</span><br><span class="line">			ans = <span class="built_in">max</span>(sq, ans);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>消消乐</title>
    <url>/2020/05/06/%E6%B6%88%E6%B6%88%E4%B9%90/</url>
    <content><![CDATA[<h1 id="消消乐"><a href="#消消乐" class="headerlink" title="消消乐"></a><strong>消消乐</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">消消乐游戏在一个包含有 n (n ≤ 30)行 m (m ≤ 30)列的棋盘上进行，棋盘的每个格子都有一种颜色的棋子。当一行或一列上有连续三个或更多的相同颜色的棋子时，这些棋子都被消除。当有多处可以被消除时，这些地方的棋子将同时被消除。</span><br><span class="line">一个棋子可能在某一行和某一列同时被消除。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入第一行包含两个整数 n,m，表示行数和列数</span><br><span class="line">接下来 n 行 m 列，每行中数字用空格隔开，每个数字代表这个位置的棋子的颜色。数字都大于 0。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出 n 行 m 列，每行中数字用空格隔开，输出消除之后的棋盘。（如果一个方格中的棋子被消除，则对应的方格输出 0，否则输出棋子的颜色编号。）</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">4 5</span><br><span class="line">2 2 3 1 2</span><br><span class="line">3 4 5 1 4</span><br><span class="line">2 3 2 1 3</span><br><span class="line">2 2 2 4 4</span><br><span class="line">Output: </span><br><span class="line">2 2 3 0 2</span><br><span class="line">3 4 5 0 4</span><br><span class="line">2 3 2 0 3</span><br><span class="line">0 0 0 4 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">4 5</span><br><span class="line">2 2 3 1 2</span><br><span class="line">3 1 1 1 1</span><br><span class="line">2 3 2 1 3</span><br><span class="line">2 2 3 3 3</span><br><span class="line">Output: </span><br><span class="line">2 2 3 0 2</span><br><span class="line">3 0 0 0 0</span><br><span class="line">2 3 2 0 3</span><br><span class="line">2 2 0 0 0</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>咋一看好像是广搜，但其实暴力搜2次就行，而且广搜不好确定起点。</p>
<p>暴力做法是每行，搜出连着的数，置负。然后每列，搜出连着的数，置负。</p>
<p>输出的时候若是负数，则输出0，否则原样输出。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> arr[maxN][maxN];</span><br><span class="line"><span class="keyword">int</span> arr2[maxN][maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ve;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!ve.empty()) &#123;</span><br><span class="line">				<span class="keyword">int</span> x = ve.back();</span><br><span class="line">				<span class="keyword">if</span> (arr[i][x] != arr[i][j]) &#123;</span><br><span class="line">					<span class="keyword">if</span> (ve.<span class="built_in">size</span>() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">						<span class="keyword">for</span> (<span class="keyword">int</span> k = ve.front(); k &lt;= ve.back(); k++)</span><br><span class="line">							arr2[i][k] = (<span class="number">-1</span>) * <span class="built_in">abs</span>(arr2[i][k]);</span><br><span class="line">					&#125;</span><br><span class="line">					ve.<span class="built_in">clear</span>();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			ve.push_back(j);</span><br><span class="line">			<span class="keyword">if</span> (j == m - <span class="number">1</span> &amp;&amp; ve.<span class="built_in">size</span>() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = ve.front(); k &lt;= ve.back(); k++)</span><br><span class="line">					arr2[i][k] = (<span class="number">-1</span>) * <span class="built_in">abs</span>(arr2[i][k]);</span><br><span class="line">				ve.<span class="built_in">clear</span>();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ve;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!ve.empty()) &#123;</span><br><span class="line">				<span class="keyword">int</span> x = ve.back();</span><br><span class="line">				<span class="keyword">if</span> (arr[x][j] != arr[i][j]) &#123;</span><br><span class="line">					<span class="keyword">if</span> (ve.<span class="built_in">size</span>() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">						<span class="keyword">for</span> (<span class="keyword">int</span> k = ve.front(); k &lt;= ve.back(); k++)</span><br><span class="line">							arr2[k][j] = (<span class="number">-1</span>) * <span class="built_in">abs</span>(arr2[k][j]);</span><br><span class="line">					&#125;</span><br><span class="line">					ve.<span class="built_in">clear</span>();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			ve.push_back(i);</span><br><span class="line">			<span class="keyword">if</span> (i == n - <span class="number">1</span> &amp;&amp; ve.<span class="built_in">size</span>() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = ve.front(); k &lt;= ve.back(); k++)</span><br><span class="line">					arr2[k][j] = (<span class="number">-1</span>) * <span class="built_in">abs</span>(arr2[k][j]);</span><br><span class="line">				ve.<span class="built_in">clear</span>();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr2[i][j] &lt; <span class="number">0</span>)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; arr2[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m).eof()) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">				<span class="built_in">cin</span> &gt;&gt; arr[i][j];</span><br><span class="line">				arr2[i][j] = arr[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		solve(n, m);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>清点人数</title>
    <url>/2020/05/13/%E6%B8%85%E7%82%B9%E4%BA%BA%E6%95%B0/</url>
    <content><![CDATA[<h1 id="清点人数"><a href="#清点人数" class="headerlink" title="清点人数"></a><strong>清点人数</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">东东每个学期都会去寝室接受扫楼的任务，并清点每个寝室的人数。</span><br><span class="line">每个寝室里面有 ai 个人(1 ≤ i ≤ n)。从第 i 到第 j 个宿舍一共有 sum(i, j) &#x3D; a[i] + ... + a[j] 个人</span><br><span class="line">这让宿管阿姨非常开心，并且让东东扫楼 m 次，每一次数第 i 到第 j 个宿舍 sum(i, j)</span><br><span class="line">问题是要找到 sum(i1, j1) + ... + sum(im, jm) 的最大值。且 ix ≤ iy ≤ jx 和 ix ≤ jy ≤ jx 的情况是不被允许的。也就是说 m 段都不能相交。</span><br><span class="line">注：1 ≤ i ≤ n ≤ 1e6, -32768 ≤ ai ≤ 32767 人数可以为负数。(1 ≤ n ≤ 1000000)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入 m，输入 n。后面跟着输入 n 个 ai。</span><br><span class="line">处理到 EOF。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出最大和</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">1 3 1 2 3</span><br><span class="line">2 6 -1 4 -2 3 -2 3</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">6</span><br><span class="line">8</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    32768 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p><del>吐个槽，这道题题面改的不怎么样，人数可以是负数？！</del></p>
<p>题意就是，一个数列，数有正有负，求最大和区间。</p>
<p>设数组 <code>f[i][j]</code> 表示前 <em>j</em> 个数分割成 <em>i</em> 段的最大值，初始化 <code>f[i][i] = 0</code> 。状态转移方程为：</p>
<script type="math/tex; mode=display">
f_{i, j}=max(f_{i, j-1},f_{i-1,k})+a_j，i≤k≤j</script><p>由于 <em>i</em> = <em>j</em> 存在，所以可能会出现 <code>f[i][i - 1]</code> (<em>i</em> - 1 个数分割成 <em>i</em> 个区间)，显然不行，所以需要把 <code>f[i][i - 1]</code>置为最小值。</p>
<p>本题数据量非常大，需要用滚动数组优化空间。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> inF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> maxN = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> arr[maxN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">2</span>][maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reSet</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">		dp[<span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">long</span> <span class="keyword">long</span> m)</span> </span>&#123;</span><br><span class="line">	reSet(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>, k = <span class="number">1</span>; i &lt;= m; i++, k ^= <span class="number">1</span>) &#123;</span><br><span class="line">		dp[k][i - <span class="number">1</span>] = -inF;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> maxPre = -inF;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> j = i; j &lt;= n - m + i; j++) &#123;</span><br><span class="line">			maxPre = <span class="built_in">max</span>(maxPre, dp[k ^ <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line">			dp[k][j] = <span class="built_in">max</span>(dp[k][j - <span class="number">1</span>], maxPre) + arr[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans = -inF;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = m; i &lt;= n; i++)</span><br><span class="line">		ans = <span class="built_in">max</span>(ans, dp[m &amp; <span class="number">1</span>][i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> m, n;</span><br><span class="line">	<span class="keyword">while</span> (scanf_s(<span class="string">"%lld %lld"</span>, &amp;m, &amp;n) != EOF) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			scanf_s(<span class="string">"%lld"</span>, &amp;arr[i]);</span><br><span class="line">		solve(n, m);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>炉石传说</title>
    <url>/2020/04/18/%E7%82%89%E7%9F%B3%E4%BC%A0%E8%AF%B4/</url>
    <content><![CDATA[<h1 id="炉石传说-CSP201609-3"><a href="#炉石传说-CSP201609-3" class="headerlink" title="炉石传说 - CSP201609-3"></a><strong>炉石传说 - CSP201609-3</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">《炉石传说：魔兽英雄传》（Hearthstone: Heroes of Warcraft，简称炉石传说）是暴雪娱乐开发的一款集换式卡牌游戏（如下图所示）。游戏在一个战斗棋盘上进行，由两名玩家轮流进行操作，本题所使用的炉石传说游戏的简化规则如下：</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="https://i.loli.net/2020/04/18/bUldetRrg5aPp3f.jpg" alt="hearthstone.jpg"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　* 玩家会控制一些角色，每个角色有自己的生命值和攻击力。当生命值小于等于 0 时，该角色死亡。角色分为英雄和随从。</span><br><span class="line">　　* 玩家各控制一个英雄，游戏开始时，英雄的生命值为 30，攻击力为 0。当英雄死亡时，游戏结束，英雄未死亡的一方获胜。</span><br><span class="line">　　* 玩家可在游戏过程中召唤随从。棋盘上每方都有 7 个可用于放置随从的空位，从左到右一字排开，被称为战场。当随从死亡时，它将被从战场上移除。</span><br><span class="line">　　* 游戏开始后，两位玩家轮流进行操作，每个玩家的连续一组操作称为一个回合。</span><br><span class="line">　　* 每个回合中，当前玩家可进行零个或者多个以下操作：</span><br><span class="line">　　1) 召唤随从：玩家召唤一个随从进入战场，随从具有指定的生命值和攻击力。</span><br><span class="line">　　2) 随从攻击：玩家控制自己的某个随从攻击对手的英雄或者某个随从。</span><br><span class="line">　　3) 结束回合：玩家声明自己的当前回合结束，游戏将进入对手的回合。该操作一定是一个回合的最后一个操作。</span><br><span class="line">　　* 当随从攻击时，攻击方和被攻击方会同时对彼此造成等同于自己攻击力的伤害。受到伤害的角色的生命值将会减少，数值等同于受到的伤害。例如，随从 X 的生命值为 HX、攻击力为 AX，随从 Y 的生命值为 HY、攻击力为 AY，如果随从 X 攻击随从 Y，则攻击发生后随从 X 的生命值变为 HX - AY，随从 Y 的生命值变为 HY - AX。攻击发生后，角色的生命值可以为负数。</span><br><span class="line">　　本题将给出一个游戏的过程，要求编写程序模拟该游戏过程并输出最后的局面。</span><br></pre></td></tr></table></figure>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　输入第一行是一个整数 n (0 ≤ n ≤ 1000)，表示操作的个数。接下来 n 行，每行描述一个操作，格式如下：</span><br><span class="line">　　&lt;action&gt; &lt;arg1&gt; &lt;arg2&gt; ...</span><br><span class="line">　　其中&lt;action&gt;表示操作类型，是一个字符串，共有 3 种：summon表示召唤随从，attack表示随从攻击，end表示结束回合。这 3 种操作的具体格式如下：</span><br><span class="line">　　* summon &lt;position&gt; &lt;attack&gt; &lt;health&gt;：当前玩家在位置&lt;position&gt;召唤一个生命值为&lt;health&gt;、攻击力为&lt;attack&gt;的随从。其中&lt;position&gt;是一个 1 到 7 的整数，表示召唤的随从出现在战场上的位置，原来该位置及右边的随从都将顺次向右移动一位; 随从的初始生命值为 1 到 100 的整数，攻击力为 0 到 100 的整数。</span><br><span class="line">　　* attack &lt;attacker&gt; &lt;defender&gt;：当前玩家的角色&lt;attacker&gt;攻击对方的角色 &lt;defender&gt;。&lt;attacker&gt;是 1 到 7 的整数，表示发起攻击的本方随从编号，&lt;defender&gt;是 0 到 7 的整数，表示被攻击的对方角色，0 表示攻击对方英雄，1 到 7 表示攻击对方随从的编号。</span><br><span class="line">　　* end：当前玩家结束本回合。</span><br><span class="line">　　注意：随从的编号会随着游戏的进程发生变化，当召唤一个随从时，玩家指定召唤该随从放入战场的位置，此时，原来该位置及右边的所有随从编号都会增加 1。而当一个随从死亡时，它右边的所有随从编号都会减少 1。任意时刻，战场上的随从总是从1开始连续编号。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　输出共 5 行。</span><br><span class="line">　　第 1 行包含一个整数，表示这 n 次操作后（以下称为 T 时刻）游戏的胜负结果，1 表示先手玩家获胜，-1 表示后手玩家获胜，0 表示游戏尚未结束，还没有人获胜。</span><br><span class="line">　　第 2 行包含一个整数，表示 T 时刻先手玩家的英雄的生命值。</span><br><span class="line">　　第 3 行包含若干个整数，第一个整数 p 表示 T 时刻先手玩家在战场上存活的随从个数，之后 p 个整数，分别表示这些随从在 T 时刻的生命值（按照从左往右的顺序）。</span><br><span class="line">　　第 4 行和第 5 行与第 2 行和第 3 行类似，只是将玩家从先手玩家换为后手玩家。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">8</span><br><span class="line">summon 1 3 6</span><br><span class="line">summon 2 4 2</span><br><span class="line">end</span><br><span class="line">summon 1 4 5</span><br><span class="line">summon 1 2 1</span><br><span class="line">attack 1 2</span><br><span class="line">end</span><br><span class="line">attack 1 1</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">0</span><br><span class="line">30</span><br><span class="line">1 2</span><br><span class="line">30</span><br><span class="line">1 2</span><br><span class="line"></span><br><span class="line">Explain: </span><br><span class="line">　　按照样例输入从第 2 行开始逐行的解释如下：</span><br><span class="line">　　1. 先手玩家在位置 1 召唤一个生命值为 6、攻击力为 3 的随从 A，是本方战场上唯一的随从。</span><br><span class="line">　　2. 先手玩家在位置 2 召唤一个生命值为 2、攻击力为 4 的随从 B，出现在随从 A 的右边。</span><br><span class="line">　　3. 先手玩家回合结束。</span><br><span class="line">　　4. 后手玩家在位置 1 召唤一个生命值为 5、攻击力为 4 的随从 C，是本方战场上唯一的随从。</span><br><span class="line">　　5. 后手玩家在位置 1 召唤一个生命值为 1、攻击力为 2 的随从 D，出现在随从 C 的左边。</span><br><span class="line">　　6. 随从 D 攻击随从 B，双方均死亡。</span><br><span class="line">　　7. 后手玩家回合结束。</span><br><span class="line">　　8. 随从 A 攻击随从 C，双方的生命值都降低至 2。</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	262144 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>又是一道长题，长题必坑我。</p>
<h3 id="Step-1-处理Arguments"><a href="#Step-1-处理Arguments" class="headerlink" title="Step 1  处理Arguments"></a>Step 1  处理Arguments</h3><p>3种指令：<code>summon</code>, <code>attack</code>, <code>end</code>。根据首字母都不同，直接<code>switch(cmder[0])</code>就行，3个<code>case</code>，主函数差不多写完了。(这边的<code>end</code>容易乍一看以为是结束战斗然后输出的意思，然而<code>end</code>并没有调用输出，所以要看中间输出测试自己写的对不对的话，自己再写个<code>case</code>去调用输出就行)</p>
<h3 id="Step-2-结构构造"><a href="#Step-2-结构构造" class="headerlink" title="Step 2  结构构造"></a>Step 2  结构构造</h3><p>根据题意，关键字<code>HP</code>跟<code>AT</code>，英雄的<code>HP</code>为30，<code>AT</code>为0；随从HP跟AT随机，不用初始化。用结构体储存，同时用二位数组储存英雄+随从，第一维表示开始时的先手玩家，第二维表示开始时的后手玩家。每一维的数组第0位存放英雄，第1至7位存放随从。</p>
<p>用一个<code>cur</code>变量(取值0或1)表示这一轮轮到谁了，换人时异或1就行。</p>
<h3 id="Step-3-类的实现"><a href="#Step-3-类的实现" class="headerlink" title="Step 3  类的实现"></a>Step 3  类的实现</h3><p>我本来是用数组写的，可是后面一直<code>WA</code>，我就搞不明白哪里出了问题，后来用了<code>vector</code>重新写了一遍(后来证明并不是数组出现了问题)。这边只说数组实现(因为<code>vector</code>没啥好说的，<code>insert()</code>和<code>erase()</code>直接用就行了)。</p>
<p><code>summon</code>：位置只可能是1至7，若召唤的位置有随从，则其与后面的全部后移，我用了不断的<code>swap</code>(见代码)，同时标记<code>swap</code>过后最后一个位置为<code>true</code>表示这边有随从。</p>
<p><code>attack</code>：先攻击，计算血量，双方都会扣血(可以扣0滴血，比如攻击了英雄)，就是说攻击必定反噬。然后判断死亡：若英雄死了，则结束战斗；若随从死了，则这个位置标记false，同时判断后面有没有随从，若有，则不断的<code>swap</code>(见代码)，直至<code>swap</code>的最后没人。</p>
<p><code>end</code>：换人，就是<code>cur^1</code>，我本来没用的异或，所以写的<code>if()</code>条件句。</p>
<p><code>Output</code>：根据题意输出。</p>
<p>随从数目我用<code>sz[2]</code>数组记录(先手玩家，后手玩家)，不记录英雄，每次<code>summon</code>则<code>+1</code>，<code>attack</code>若有随从死了则<code>-1</code>。</p>
<h3 id="有些坑"><a href="#有些坑" class="headerlink" title="有些坑"></a>有些坑</h3><p>我定义的数组第一维是储存先手/后手玩家，第二位是英雄/随从，结果由于<code>i</code>和<code>1</code>太像了，我在输出的时候把后手玩家的2个维度搞反了，也是不好发现……</p>
<p>题意问题挺大的。</p>
<p>“当英雄死亡时，游戏结束”。我就想着写一个判断，若有一方的英雄死了，则直接<code>break</code>，不进行接下来的输入……结果题目设置的意思就是，若有英雄死亡，则最后一次输入一定是英雄死亡的那一回合，设置的刚刚好……</p>
<p>“攻击发生后，角色的生命值可以为负数”。我手贱的就把英雄的生命值置零了。因为这个，我卡在80分卡了好久，一直没想通哪里<code>WA</code>了……(哪有游戏的最终显示结果是生命为负啊，血条最后都归零了……)<br>多读题多读题多读题。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><h3 id="vector实现"><a href="#vector实现" class="headerlink" title="vector实现"></a><code>vector</code>实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">role</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> HP;</span><br><span class="line">	<span class="keyword">int</span> AT;</span><br><span class="line">	role() &#123; HP = <span class="number">0</span>; AT = <span class="number">0</span>; &#125;</span><br><span class="line">	role(<span class="keyword">int</span> hp, <span class="keyword">int</span> att) :HP(hp), AT(att) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hearthstone</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">vector</span>&lt;role&gt; hs[<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">int</span> cur;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	hearthstone() &#123;</span><br><span class="line">		cur = <span class="number">0</span>;</span><br><span class="line">		<span class="function">role <span class="title">hero</span><span class="params">(<span class="number">30</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">		hs[<span class="number">0</span>].push_back(hero);</span><br><span class="line">		hs[<span class="number">1</span>].push_back(hero);</span><br><span class="line">	&#125;</span><br><span class="line">	~hearthstone() &#123;  &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">summon</span><span class="params">(<span class="keyword">int</span> pos, role r)</span> </span>&#123;</span><br><span class="line">		hs[cur].insert(hs[cur].<span class="built_in">begin</span>() + pos, r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">		hs[cur][a].HP -= hs[cur ^ <span class="number">1</span>][d].AT;</span><br><span class="line">		hs[cur ^ <span class="number">1</span>][d].HP -= hs[cur][a].AT;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (hs[cur][a].HP &lt;= <span class="number">0</span>)</span><br><span class="line">			hs[cur].erase(hs[cur].<span class="built_in">begin</span>() + a);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//if (hs[cur ^ 1][d].HP &lt;= 0 &amp;&amp; d == 0)</span></span><br><span class="line">			<span class="comment">//hs[cur ^ 1][d].HP = 0;//手贱的置零</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (hs[cur ^ <span class="number">1</span>][d].HP &lt;= <span class="number">0</span> &amp;&amp; d != <span class="number">0</span>)</span><br><span class="line">			hs[cur ^ <span class="number">1</span>].erase(hs[cur ^ <span class="number">1</span>].<span class="built_in">begin</span>() + d);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">curEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cur ^= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (hs[<span class="number">0</span>][<span class="number">0</span>].HP &lt;= <span class="number">0</span>)</span><br><span class="line">			res = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">if</span> (hs[<span class="number">1</span>][<span class="number">0</span>].HP &lt;= <span class="number">0</span>)</span><br><span class="line">			res = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != hs[<span class="number">0</span>].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; hs[<span class="number">0</span>][<span class="number">0</span>].HP &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; hs[<span class="number">0</span>].<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; hs[<span class="number">0</span>][i].HP;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != hs[<span class="number">1</span>].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; hs[<span class="number">1</span>][<span class="number">0</span>].HP &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; hs[<span class="number">1</span>].<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; hs[<span class="number">1</span>][i].HP;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	hearthstone HS;</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="built_in">string</span> cmder;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; cmder;</span><br><span class="line">		<span class="keyword">switch</span> (cmder[<span class="number">0</span>]) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'s'</span>: &#123;</span><br><span class="line">			<span class="keyword">int</span> <span class="built_in">position</span>, attack, health;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">position</span> &gt;&gt; attack &gt;&gt; health;</span><br><span class="line">			<span class="function">role <span class="title">sv</span><span class="params">(health, attack)</span></span>;</span><br><span class="line">			HS.summon(<span class="built_in">position</span>, sv);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'a'</span>: &#123;</span><br><span class="line">			<span class="keyword">int</span> attacker, defender;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; attacker &gt;&gt; defender;</span><br><span class="line">			HS.attack(attacker, defender);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'e'</span>: &#123;</span><br><span class="line">			HS.curEnd();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	HS.output();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">role</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> HP;</span><br><span class="line">	<span class="keyword">int</span> AT;</span><br><span class="line">	role() &#123; HP = <span class="number">0</span>; AT = <span class="number">0</span>; &#125;</span><br><span class="line">	role(<span class="keyword">int</span> hp, <span class="keyword">int</span> att) :HP(hp), AT(att) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hearthstone</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> curPlayer;</span><br><span class="line">	<span class="keyword">int</span> wPlayer;</span><br><span class="line">	role servant[<span class="number">2</span>][<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">bool</span> exist[<span class="number">2</span>][<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">int</span> sz[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	hearthstone() &#123;</span><br><span class="line">		<span class="function">role <span class="title">h</span><span class="params">(<span class="number">30</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">		servant[<span class="number">0</span>][<span class="number">0</span>] = h;</span><br><span class="line">		servant[<span class="number">1</span>][<span class="number">0</span>] = h;</span><br><span class="line">		sz[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">		sz[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">		curPlayer = <span class="number">0</span>;</span><br><span class="line">		wPlayer = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">				exist[i][j] = <span class="literal">false</span>;</span><br><span class="line">		exist[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">		exist[<span class="number">1</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~hearthstone() &#123;  &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">summon</span><span class="params">(<span class="keyword">int</span> pos, role sv)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> ipos = pos;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (exist[curPlayer][i]) &#123;</span><br><span class="line">				swap(sv, servant[curPlayer][i]);</span><br><span class="line">				ipos++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		servant[curPlayer][ipos] = sv;</span><br><span class="line">		exist[curPlayer][ipos] = <span class="literal">true</span>;</span><br><span class="line">		sz[curPlayer]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">shift</span><span class="params">(<span class="keyword">int</span> playerWho, <span class="keyword">int</span> curPos)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = curPos; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">			<span class="keyword">if</span> (exist[playerWho][i + <span class="number">1</span>]) &#123;</span><br><span class="line">				swap(exist[playerWho][i], exist[playerWho][i + <span class="number">1</span>]);</span><br><span class="line">				swap(servant[playerWho][i], servant[playerWho][i + <span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// Attack</span></span><br><span class="line">		servant[wPlayer][d].HP -= servant[curPlayer][a].AT;</span><br><span class="line">		servant[curPlayer][a].HP -= servant[wPlayer][d].AT;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (d == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">// calculate hero HP, if dead, break</span></span><br><span class="line">			<span class="keyword">if</span> (servant[wPlayer][<span class="number">0</span>].HP &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="comment">//servant[wPlayer][0].HP = 0;//这个必须删了</span></span><br><span class="line">				exist[wPlayer][<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">// calculate HP, if dead, shift</span></span><br><span class="line">			<span class="keyword">if</span> (servant[wPlayer][d].HP &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">				exist[wPlayer][d] = <span class="literal">false</span>;</span><br><span class="line">				sz[wPlayer]--;</span><br><span class="line">				<span class="keyword">if</span> (exist[wPlayer][d + <span class="number">1</span>])</span><br><span class="line">					shift(wPlayer, d);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (servant[curPlayer][a].HP &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">			exist[curPlayer][a] = <span class="literal">false</span>;</span><br><span class="line">			sz[curPlayer]--;</span><br><span class="line">			<span class="keyword">if</span> (exist[curPlayer][a + <span class="number">1</span>])</span><br><span class="line">				shift(curPlayer, a);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">curEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		swap(curPlayer, wPlayer);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">theEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (exist[<span class="number">0</span>][<span class="number">0</span>] == <span class="literal">false</span> || exist[<span class="number">1</span>][<span class="number">0</span>] == <span class="literal">false</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!exist[<span class="number">0</span>][<span class="number">0</span>] &amp;&amp; exist[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (!exist[<span class="number">1</span>][<span class="number">0</span>] &amp;&amp; exist[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (exist[<span class="number">0</span>][<span class="number">0</span>] &amp;&amp; exist[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (!exist[<span class="number">0</span>][<span class="number">0</span>] &amp;&amp; !exist[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; servant[<span class="number">0</span>][<span class="number">0</span>].HP &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; sz[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">			<span class="keyword">if</span> (exist[<span class="number">0</span>][i])</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; servant[<span class="number">0</span>][i].HP;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; servant[<span class="number">1</span>][<span class="number">0</span>].HP &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; sz[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">			<span class="keyword">if</span> (exist[<span class="number">1</span>][i])</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; servant[<span class="number">1</span>][i].HP;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*void testOutput() &#123;</span></span><br><span class="line"><span class="comment">		if (exist[0][0] == false)</span></span><br><span class="line"><span class="comment">			cout &lt;&lt; "-1" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">		if (exist[1][0] == false)</span></span><br><span class="line"><span class="comment">			cout &lt;&lt; "1" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">		if (exist[0][0] &amp;&amp; exist[1][0])</span></span><br><span class="line"><span class="comment">			cout &lt;&lt; "0" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		cout &lt;&lt; "hero1: " &lt;&lt; servant[0][0].HP &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; sz[0] &lt;&lt; ":";</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		for (int i = 1; i &lt; 8; i++)</span></span><br><span class="line"><span class="comment">			if (exist[0][i])</span></span><br><span class="line"><span class="comment">				cout &lt;&lt; " (" &lt;&lt; servant[0][i].HP &lt;&lt;", "&lt;&lt; servant[0][i].AT &lt;&lt; ")";</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		cout &lt;&lt; "hero2: " &lt;&lt; servant[1][0].HP &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; sz[1] &lt;&lt; ":";</span></span><br><span class="line"><span class="comment">		for (int i = 1; i &lt; 8; i++)</span></span><br><span class="line"><span class="comment">			if (exist[1][i])</span></span><br><span class="line"><span class="comment">				cout &lt;&lt; " (" &lt;&lt; servant[1][i].HP &lt;&lt; ", " &lt;&lt; servant[1][i].AT &lt;&lt; ")";</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; endl &lt;&lt; "----------" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; action;</span><br><span class="line">	action[<span class="string">"summon"</span>] = <span class="number">0</span>;</span><br><span class="line">	action[<span class="string">"attack"</span>] = <span class="number">1</span>;</span><br><span class="line">	action[<span class="string">"end"</span>] = <span class="number">2</span>;</span><br><span class="line">	<span class="comment">//action["res"] = 3;</span></span><br><span class="line">	hearthstone hs;</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="comment">//if (hs.theEnd())</span></span><br><span class="line">			<span class="comment">//break;</span></span><br><span class="line">		<span class="built_in">string</span> cmder;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; cmder;</span><br><span class="line">		<span class="keyword">switch</span> (action[cmder]) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">			<span class="keyword">int</span> <span class="built_in">position</span>, attack, health;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">position</span> &gt;&gt; attack &gt;&gt; health;</span><br><span class="line">			<span class="function">role <span class="title">sv</span><span class="params">(health, attack)</span></span>;</span><br><span class="line">			hs.summon(<span class="built_in">position</span>, sv);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">			<span class="keyword">int</span> attacker, defender;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; attacker &gt;&gt; defender;</span><br><span class="line">			hs.attack(attacker, defender);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">			hs.curEnd();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/*case 3: &#123;</span></span><br><span class="line"><span class="comment">			hs.testOutput();</span></span><br><span class="line"><span class="comment">			break;</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line">		<span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	hs.output();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>猫咪睡觉</title>
    <url>/2020/06/01/%E7%8C%AB%E5%92%AA%E7%9D%A1%E8%A7%89/</url>
    <content><![CDATA[<h1 id="猫咪睡觉"><a href="#猫咪睡觉" class="headerlink" title="猫咪睡觉"></a><strong>猫咪睡觉</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">喵睡觉的时段是连续的，即一旦喵喵开始睡觉了，就不能被打扰。</span><br><span class="line">可以假设喵喵必须要睡眠连续不少于 A 个小时，即一旦喵喵开始睡觉了，至少连续 A 个小时内（即 A×60 分钟内）不能被打扰！</span><br><span class="line">喵不能连续活动超过 B 个小时。</span><br><span class="line">喵要看新番，播放时间它已经贴在床头啦（每天都用同一张时间表），这段时间它必须醒着！！</span><br><span class="line">求安排睡眠时间。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多组数据，每组数据的格式如下：</span><br><span class="line">第 1 行输入三个整数，A 和 B 和 N (1 ≤ A ≤ 24, 1 ≤ B ≤ 24, 1 ≤ n ≤ 20)</span><br><span class="line">第 2 到 N + 1 行为每日的新番时间表，每行一个时间段，格式形如 hh:mm-hh:mm (闭区间)，这是一种时间格式，hh:mm 的范围为 00:00 到 23:59。注意一下，时间段是保证不重叠的，但是可能出现跨夜的新番，即新番的开始时间点大于结束时间点。</span><br><span class="line">保证每个时间段的开始时间点和结束时间点不一样，即不可能出现类似 08:00-08:00 这种的时间段。时长的计算由于是闭区间所以也是有点坑的，比如 12:00-13:59 的时长就是 120 分钟。</span><br><span class="line">不保证输入的新番时间表有序。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出的第一行是 Yes 或者 No，代表是否存在满足猫猫要求的时间管理办法。</span><br><span class="line">第2行输出一个整数 k，代表当天有多少个时间段要睡觉</span><br><span class="line">接下来 k 行是喵喵的睡觉时间段，每行一个时间段，格式形如 hh:mm-hh:mm (闭区间)，这个在前面也有定义。注意一下，如果喵喵的睡眠时段跨越当天到达了明天，比如从23点50分睡到0点40分，那就输出23:50-00:40，如果从今晚23:50睡到明天早上7:30，那就输出23:50-07:30。</span><br><span class="line">本题是 Special Judge。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">12 12 1</span><br><span class="line">23:00-01:00</span><br><span class="line">3 4 3</span><br><span class="line">07:00-08:00</span><br><span class="line">11:00-11:09</span><br><span class="line">19:00-19:59</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">Yes</span><br><span class="line">1</span><br><span class="line">01:07-22:13</span><br><span class="line">No</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    32768 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p><del>太坑了太坑了太坑了！！！</del></p>
<p>时间是闭区间，比如 7:00-8:00 是 61 分钟。</p>
<p>每天的 timetable 都是一样的，也就是说今天这个点在干嘛明天还是在干嘛，一开始我没想到这个问题，所以每天都从 0:00 开始规划……时间是一个闭环。</p>
<p>所有时间统一用分钟处理，若录入的开始时间 &gt; 结束时间，则跨天，结束时间 + 24 小时。</p>
<p>录入时间都排序后，需要判断进行合并区间。若间歇时间 &lt; a 小时，则这两个时间区间需要合并。</p>
<p>处理完后，判断这些醒着的时间是否 &gt; b小时。</p>
<p>安排睡眠时间，从 1 天的时间环中挖去这些醒着的时间，剩下的全部安排为睡眠时间。</p>
<p>判断安排的这些睡眠时间是否低于 a 小时。</p>
<p>输出统一将分钟改为 hh:mm，若超出 24 小时，则扣去。</p>
<p>注意 Yes/No 还是 YES/NO。</p>
<p>然后……WA WA WA WA WA…，我放弃了/(ㄒoㄒ)/。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">theTime</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">begin</span>, <span class="built_in">end</span>;</span><br><span class="line">	theTime() &#123; <span class="built_in">begin</span> = <span class="number">0</span>; <span class="built_in">end</span> = <span class="number">0</span>; &#125;</span><br><span class="line">	theTime(<span class="keyword">int</span> b, <span class="keyword">int</span> e) :<span class="built_in">begin</span>(b), <span class="built_in">end</span>(e) &#123;  &#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> theTime&amp; t) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">begin</span> &lt; t.<span class="built_in">begin</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;theTime&gt; <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="built_in">vector</span>&lt;theTime&gt; &amp;v)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">deque</span>&lt;theTime&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != v.<span class="built_in">size</span>(); i++)</span><br><span class="line">		q.push_back(v[i]);</span><br><span class="line">	<span class="built_in">vector</span>&lt;theTime&gt; ve;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">		theTime t1 = q.front();</span><br><span class="line">		q.pop_front();</span><br><span class="line">		<span class="keyword">if</span> (q.empty()) &#123;</span><br><span class="line">			ve.push_back(t1);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		theTime t2 = q.front();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> ((t2.<span class="built_in">begin</span> - t1.<span class="built_in">end</span> + <span class="number">1</span>) &lt; a * <span class="number">60</span>) &#123;</span><br><span class="line">			t1.<span class="built_in">end</span> = t2.<span class="built_in">end</span>;</span><br><span class="line">			q.pop_front();</span><br><span class="line">			q.push_front(t1);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			ve.push_back(t1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (ve.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; (ve[<span class="number">0</span>].<span class="built_in">begin</span> + <span class="number">24</span> * <span class="number">60</span> - ve.back().<span class="built_in">end</span> + <span class="number">1</span>) &lt; a * <span class="number">60</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> newBegin = ve.back().<span class="built_in">begin</span>;</span><br><span class="line">		ve.pop_back();</span><br><span class="line">		ve[<span class="number">0</span>].<span class="built_in">begin</span> = newBegin;</span><br><span class="line">		ve[<span class="number">0</span>].<span class="built_in">end</span> += (<span class="number">24</span> * <span class="number">60</span>);</span><br><span class="line">		sort(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> overWake = <span class="literal">false</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sT;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != ve.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		theTime curTime = ve[i];</span><br><span class="line">		<span class="keyword">if</span> ((curTime.<span class="built_in">end</span> - curTime.<span class="built_in">begin</span> + <span class="number">1</span>) &gt; b * <span class="number">60</span>) &#123;</span><br><span class="line">			overWake = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		sT.push_back(curTime.<span class="built_in">begin</span> - <span class="number">1</span>);</span><br><span class="line">		sT.push_back(curTime.<span class="built_in">end</span> + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">vector</span>&lt;theTime&gt; ans;</span><br><span class="line">	<span class="keyword">if</span> (overWake || sT.empty()) &#123;</span><br><span class="line">		ans.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ta = sT.back();</span><br><span class="line">	<span class="keyword">int</span> tb = sT[<span class="number">0</span>] + <span class="number">24</span> * <span class="number">60</span>;</span><br><span class="line">	<span class="keyword">if</span> (tb - ta + <span class="number">1</span> &lt; a * <span class="number">60</span>) &#123;</span><br><span class="line">		ans.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		theTime ax(ta, tb);</span><br><span class="line">		ans.push_back(ax);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != sT.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> ta = sT[i];</span><br><span class="line">		i++;</span><br><span class="line">		<span class="keyword">int</span> tb = sT[i];</span><br><span class="line">		<span class="keyword">if</span> ((tb - ta) &lt; a * <span class="number">60</span>) &#123;</span><br><span class="line">			ans.<span class="built_in">clear</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			theTime ax(ta, tb);</span><br><span class="line">			ans.push_back(ax);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outTime</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m = t % <span class="number">60</span>;</span><br><span class="line">	<span class="keyword">int</span> h = t / <span class="number">60</span>;</span><br><span class="line">	<span class="keyword">if</span> (h &gt;= <span class="number">24</span>)</span><br><span class="line">		h -= <span class="number">24</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; setw(<span class="number">2</span>) &lt;&lt; setfill(<span class="string">'0'</span>) &lt;&lt; h &lt;&lt; <span class="string">":"</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; setw(<span class="number">2</span>) &lt;&lt; setfill(<span class="string">'0'</span>) &lt;&lt; m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b, n;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; n).eof()) &#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;theTime&gt; v;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> h1, m1, h2, m2;</span><br><span class="line">			<span class="keyword">char</span> temp;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; h1 &gt;&gt; temp &gt;&gt; m1 &gt;&gt; temp &gt;&gt; h2 &gt;&gt; temp &gt;&gt; m2;</span><br><span class="line">			<span class="keyword">int</span> t1 = h1 * <span class="number">60</span> + m1;</span><br><span class="line">			<span class="keyword">int</span> t2 = h2 * <span class="number">60</span> + m2;</span><br><span class="line">			<span class="keyword">if</span> (t2 &lt; t1)</span><br><span class="line">				t2 += (<span class="number">24</span> * <span class="number">60</span>);</span><br><span class="line">			<span class="function">theTime <span class="title">tt</span><span class="params">(t1, t2)</span></span>;</span><br><span class="line">			v.push_back(tt);</span><br><span class="line">		&#125;</span><br><span class="line">		sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">		<span class="built_in">vector</span>&lt;theTime&gt; v1 = solve(a, b, v);</span><br><span class="line">		<span class="keyword">if</span> (v1.empty())</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != v1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">				outTime(v1[i].<span class="built_in">begin</span>);</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"-"</span>;</span><br><span class="line">				outTime(v1[i].<span class="built_in">end</span>);</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>滑动窗口</title>
    <url>/2020/03/24/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a><strong>滑动窗口</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有一个长度为 n 的数列和一个大小为 k 的窗口, 窗口可以在数列上来回移动。问在窗口从左往右滑的时候，每次窗口内数的最大值和最小值分别是多少？</span><br><span class="line">例如：数列是 [1 3 -1 -3 5 3 6 7], 其中 k 等于 3。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>Window position</strong></th>
<th style="text-align:right"><strong>Minimum value</strong></th>
<th style="text-align:right"><strong>Maximum value</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[1 3 -1] -3 5 3 6 7</code></td>
<td style="text-align:right">-1</td>
<td style="text-align:right">3</td>
</tr>
<tr>
<td><code>1 [3 -1 -3] 5 3 6 7</code></td>
<td style="text-align:right">-3</td>
<td style="text-align:right">3</td>
</tr>
<tr>
<td><code>1 3 [-1 -3 5] 3 6 7</code></td>
<td style="text-align:right">-3</td>
<td style="text-align:right">5</td>
</tr>
<tr>
<td><code>1 3 -1 [-3 5 3] 6 7</code></td>
<td style="text-align:right">-3</td>
<td style="text-align:right">5</td>
</tr>
<tr>
<td><code>1 3 -1 -3 [5 3 6] 7</code></td>
<td style="text-align:right">3</td>
<td style="text-align:right">6</td>
</tr>
<tr>
<td><code>1 3 -1 -3 5 [3 6 7]</code></td>
<td style="text-align:right">3</td>
<td style="text-align:right">7</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入有两行。第一行两个整数 n 和k分别表示数列的长度和滑动窗口的大小，1 ≤ k ≤ n ≤ 1000000。</span><br><span class="line">第二行有n个整数表示数列。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出有两行。第一行输出滑动窗口在从左到右的每个位置时，滑动窗口中的最小值。第二行是最大值。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input: </span><br><span class="line">8 3</span><br><span class="line">1 3 -1 -3 5 3 6 7</span><br><span class="line">output: </span><br><span class="line">-1 -3 -3 -3 3 3</span><br><span class="line">3 3 5 5 6 7</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		12000 ms</span><br><span class="line">Memory limit	65536 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>维护局部单调性，可以用单调队列。</p>
<p>求最小值可以用单调非减队列，从左往右依次入队，若入队的元素比队尾小则不断弹出队尾元素直到符合条件。当<code>队尾索引 - 队首索引 + 1 = 滑动窗口大小</code>时，队首元素弹出，此时队首元素就是最小值。</p>
<p>同理，求最大值用单调非增队列。</p>
<p>两次遍历就能求出最大最小值。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span> &#123;</span><span class="comment">//记录元素值与位置</span></span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	num(<span class="keyword">int</span> x, <span class="keyword">int</span> y) :a(x), b(y) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getMin</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">deque</span>&lt;num&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; i++) &#123;</span><br><span class="line">		<span class="keyword">while</span> (!q.empty() &amp;&amp; q.back().a &gt;= arr[i])</span><br><span class="line">			q.pop_back();<span class="comment">//队尾大于要入队的元素</span></span><br><span class="line">		<span class="function">num <span class="title">x</span><span class="params">(arr[i], i)</span></span>;</span><br><span class="line">		q.push_back(x);<span class="comment">//符合条件 可以入队</span></span><br><span class="line">		<span class="keyword">if</span> (i + <span class="number">1</span> &gt;= k) &#123;<span class="comment">//到达了窗口的宽度  队首弹出</span></span><br><span class="line">			<span class="keyword">while</span> (i - q.front().b &gt; k - <span class="number">1</span>)</span><br><span class="line">				q.pop_front();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d "</span>, q.front().a);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">deque</span>&lt;num&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; i++) &#123;</span><br><span class="line">		<span class="keyword">while</span> (!q.empty() &amp;&amp; q.back().a &lt;= arr[i])</span><br><span class="line">			q.pop_back();<span class="comment">//队尾小于要入队的元素</span></span><br><span class="line">		<span class="function">num <span class="title">x</span><span class="params">(arr[i], i)</span></span>;</span><br><span class="line">		q.push_back(x);<span class="comment">//符合条件 可以入队</span></span><br><span class="line">		<span class="keyword">if</span> (i + <span class="number">1</span> &gt;= k) &#123;<span class="comment">//到达了窗口的宽度  队首弹出</span></span><br><span class="line">			<span class="keyword">while</span> (i - q.front().b &gt; k - <span class="number">1</span>)</span><br><span class="line">				q.pop_front();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d "</span>, q.front().a);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	scanf_s(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">	<span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; i++)</span><br><span class="line">		scanf_s(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">	getMin(arr, n, k);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	getMax(arr, n, k);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title>班长竞选</title>
    <url>/2020/04/17/%E7%8F%AD%E9%95%BF%E7%AB%9E%E9%80%89/</url>
    <content><![CDATA[<h1 id="班长竞选"><a href="#班长竞选" class="headerlink" title="班长竞选"></a><strong>班长竞选</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大学班级选班长，N 个同学均可以发表意见，若意见为 A B，则表示 A 认为 B 合适。意见具有传递性，即 A 认为 B 合适，B 认为 C 合适，则 A 也认为 C 合适。共有 M 条意见，求最高票数，并给出一份候选人名单，即所有得票最多的同学。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本题有多组数据。第一行 T 表示数据组数。每组数据开始有两个整数 N 和 M (2 ≤ n ≤ 5000, 0 &lt; m ≤ 30000)，接下来有 M 行包含两个整数 A 和 B (A ≠ B) 表示 A 认为 B 合适。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每组数据，第一行输出&quot;Case x: &quot;，x 表示数据的编号，从1开始，紧跟着是最高的票数。 接下来一行输出得票最多的同学的编号，用空格隔开，不忽略行末空格！</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">2</span><br><span class="line">4 3</span><br><span class="line">3 2</span><br><span class="line">2 0</span><br><span class="line">2 1</span><br><span class="line">3 3</span><br><span class="line">1 0</span><br><span class="line">2 1</span><br><span class="line">0 2</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">Case 1: 2</span><br><span class="line">0 1</span><br><span class="line">Case 2: 2</span><br><span class="line">0 1 2</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		2000 ms</span><br><span class="line">Memory limit	32768 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>这题题目短，题意清晰，输入输出简单明了，但实现起来挺复杂的。</p>
<h3 id="强连通分量-Strongly-Connected-Component-SCC"><a href="#强连通分量-Strongly-Connected-Component-SCC" class="headerlink" title="强连通分量 (Strongly Connected Component, SCC)"></a>强连通分量 (Strongly Connected Component, SCC)</h3><p>有向图中，尽可能多的若干顶点组成的子图中，这些顶点都是相互可到达的，则这些顶点成为一个强连通分量。</p>
<p><img src="https://i.loli.net/2020/04/20/bG9QVDgWOsL5aSd.png" alt="SCC.png"></p>
<p>如上图所示，有3个强连通分量，分别是<code>{A, B, C}</code>, <code>{D, E, H}</code>, <code>{F, G}</code>。</p>
<h3 id="DFS序"><a href="#DFS序" class="headerlink" title="DFS序"></a>DFS序</h3><p>前序：第一次到达点 <em>x</em> 的次序，用<code>d[x]</code>表示<br>后序：<em>x</em> 点遍历完成的次序，即回溯时间，用 <code>f[x]</code> 表示<br>逆后序：后序序列的逆序</p>
<p>以上图为例，用DFS遍历：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Edge</th>
<th style="text-align:center">Current Node</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center"><code>A</code></td>
<td style="text-align:center"><code>d[A] = 1</code></td>
</tr>
<tr>
<td style="text-align:center"><code>A → B</code></td>
<td style="text-align:center"><code>B</code></td>
<td style="text-align:center"><code>d[B] = 2</code></td>
</tr>
<tr>
<td style="text-align:center"><code>B → C</code></td>
<td style="text-align:center"><code>C</code></td>
<td style="text-align:center"><code>d[C] = 3</code></td>
</tr>
<tr>
<td style="text-align:center"><code>C → A</code></td>
<td style="text-align:center"><code>C</code></td>
<td style="text-align:center">Reached</td>
</tr>
<tr>
<td style="text-align:center"><code>C → H</code></td>
<td style="text-align:center"><code>H</code></td>
<td style="text-align:center"><code>d[H] = 4</code></td>
</tr>
<tr>
<td style="text-align:center"><code>H → E</code></td>
<td style="text-align:center"><code>E</code></td>
<td style="text-align:center"><code>d[E] = 5</code></td>
</tr>
<tr>
<td style="text-align:center"><code>E → D</code></td>
<td style="text-align:center"><code>D</code></td>
<td style="text-align:center"><code>d[D] = 6</code></td>
</tr>
<tr>
<td style="text-align:center"><code>D → E</code></td>
<td style="text-align:center"><code>D</code></td>
<td style="text-align:center">Reached</td>
</tr>
<tr>
<td style="text-align:center"><code>D → F</code></td>
<td style="text-align:center"><code>F</code></td>
<td style="text-align:center"><code>d[F] = 7</code></td>
</tr>
<tr>
<td style="text-align:center"><code>F → G</code></td>
<td style="text-align:center"><code>G</code></td>
<td style="text-align:center"><code>d[G] = 8</code></td>
</tr>
<tr>
<td style="text-align:center"><code>G → F</code></td>
<td style="text-align:center"><code>G</code></td>
<td style="text-align:center">Reached</td>
</tr>
<tr>
<td style="text-align:center"><code>G</code>遍历结束</td>
<td style="text-align:center"><code>G</code></td>
<td style="text-align:center"><code>f[G] = 1</code></td>
</tr>
<tr>
<td style="text-align:center"><code>F</code>遍历结束</td>
<td style="text-align:center"><code>F</code></td>
<td style="text-align:center"><code>f[F] = 2</code></td>
</tr>
<tr>
<td style="text-align:center"><code>D</code>遍历结束</td>
<td style="text-align:center"><code>D</code></td>
<td style="text-align:center"><code>f[D] = 3</code></td>
</tr>
<tr>
<td style="text-align:center"><code>E → G</code></td>
<td style="text-align:center"><code>E</code></td>
<td style="text-align:center">Reached</td>
</tr>
<tr>
<td style="text-align:center"><code>E → H</code></td>
<td style="text-align:center"><code>E</code></td>
<td style="text-align:center">Reached</td>
</tr>
<tr>
<td style="text-align:center"><code>E</code>遍历结束</td>
<td style="text-align:center"><code>E</code></td>
<td style="text-align:center"><code>f[E] = 4</code></td>
</tr>
<tr>
<td style="text-align:center"><code>H</code>遍历结束</td>
<td style="text-align:center"><code>H</code></td>
<td style="text-align:center"><code>f[H] = 5</code></td>
</tr>
<tr>
<td style="text-align:center"><code>C</code>遍历结束</td>
<td style="text-align:center"><code>C</code></td>
<td style="text-align:center"><code>f[C] = 6</code></td>
</tr>
<tr>
<td style="text-align:center"><code>B → H</code></td>
<td style="text-align:center"><code>B</code></td>
<td style="text-align:center">Reached</td>
</tr>
<tr>
<td style="text-align:center"><code>B</code>遍历结束</td>
<td style="text-align:center"><code>B</code></td>
<td style="text-align:center"><code>f[B] = 7</code></td>
</tr>
<tr>
<td style="text-align:center"><code>A</code>遍历结束</td>
<td style="text-align:center"><code>A</code></td>
<td style="text-align:center"><code>f[A] = 8</code></td>
</tr>
</tbody>
</table>
</div>
<p>得到前序序列：<code>{A, B, C, H, E, D, F, G}</code><br>后序序列：<code>{G, F, D, E, H, C, B, A}</code><br>逆后序序列：<code>{A, B, C, H, E, D, F, G}</code></p>
<h3 id="Kosaraju-Algorithm"><a href="#Kosaraju-Algorithm" class="headerlink" title="Kosaraju Algorithm"></a>Kosaraju Algorithm</h3><p>Kosaraju算法用于找出图中所有的SCC。</p>
<p>以上图为例，DFS先求出原图的逆后序序列<code>{A, B, C, H, E, D, F, G}</code>，然后根据逆后序序列遍历反图(如下图)：</p>
<p><img src="https://i.loli.net/2020/04/20/6ONKC39YtgrvMhq.png" alt="SCC_temp_04.20.png"></p>
<p>Step 1: 从A开始遍历，得到第一个SCC<code>{A, C, B}</code></p>
<p><img src="https://i.loli.net/2020/04/20/uVgFhpRynEq8xjS.png" alt="SCC_temp_001.png"></p>
<p>Step 2: 从H开始遍历，得到第二个SCC<code>{H, E, D}</code></p>
<p><img src="https://i.loli.net/2020/04/20/mIy6ucDhkPvV7Td.png" alt="SCC_temp_002.png"></p>
<p>Step 3: 从F开始遍历，得到第三个SCC<code>{F, G}</code></p>
<p><img src="https://i.loli.net/2020/04/20/WFCYswl1pjGb8fe.png" alt="SCC_temp_003.png"></p>
<h3 id="回到本题"><a href="#回到本题" class="headerlink" title="回到本题"></a>回到本题</h3><p>投票选举，A认为B合适(<code>A→B</code>的有向边)，B认为C合适(<code>B→C</code>的有向边)，则A也认为C合适(传递性)。因此投票可能形成多个环路。</p>
<p>先求出共有多少个SCC，每一个SCC内，每个节点的票数 = 该SCC的节点数 - 1(除去自己)；<br>对于每个SCC，都可进行缩点，记作<code>SCC[i]</code>，其值为内节点的票数。<br>若SCC<sub><em>i</em></sub>对SCC<sub><em>j</em></sub>可达，且由 <em>i</em> 指向 <em>j</em>，则<code>SCC[j] += SCC[i]</code>(传递性)。</p>
<p>票数最多的人，一定出现在出度为0的SCC中。</p>
<p>总共需要2次DFS求出强连通分量，1次DFS找出票数最高的即出度为0的强连通分量，然后再从这个SCC中找出票数最高的点，即答案。</p>
<p>本题综合性很强，很容易<code>TLE</code>或<code>MLE</code>。本来用的<code>cin</code>，后来用<code>scanf</code>才过……</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> ele;</span><br><span class="line">	node* next;</span><br><span class="line">	node() &#123; ele = <span class="number">-1</span>; next = <span class="literal">NULL</span>; &#125;</span><br><span class="line">	node(<span class="keyword">int</span> e) :ele(e) &#123; next = <span class="literal">NULL</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedList</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	node* header;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	linkedList() &#123; header = <span class="literal">NULL</span>; <span class="built_in">size</span> = <span class="number">0</span>; &#125;</span><br><span class="line">	~linkedList() &#123; <span class="built_in">clear</span>(); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size</span>; &#125;</span><br><span class="line">	<span class="function">node* <span class="title">getHeader</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> header; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> ele)</span> </span>&#123;</span><br><span class="line">		node* p = <span class="keyword">new</span> node(ele);</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">			header = p;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			node* temp = header;</span><br><span class="line">			node* temp2 = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">				temp2 = temp;</span><br><span class="line">				temp = temp-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			temp2-&gt;next = p;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">size</span>++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		node* temp = header;</span><br><span class="line">		node* ttemp = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			ttemp = temp;</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">			ttemp = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		header = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">delete</span> temp;</span><br><span class="line">		<span class="keyword">delete</span> ttemp;</span><br><span class="line">		<span class="keyword">delete</span> header;</span><br><span class="line">		<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">5010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">graph</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	linkedList arr1[maxN];</span><br><span class="line">	linkedList arr2[maxN];</span><br><span class="line">	linkedList arr[maxN];</span><br><span class="line">	<span class="keyword">int</span> inDeg[maxN];</span><br><span class="line">	<span class="keyword">bool</span> reach1[maxN];</span><br><span class="line">	<span class="keyword">int</span> inv[maxN];</span><br><span class="line">	<span class="keyword">int</span> invCnt;</span><br><span class="line">	<span class="keyword">int</span> color[maxN];</span><br><span class="line">	<span class="keyword">int</span> scc[maxN];</span><br><span class="line">	<span class="keyword">int</span> sccCnt;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">	<span class="keyword">int</span> ans[maxN];</span><br><span class="line">	<span class="keyword">bool</span> reach2[maxN];</span><br><span class="line">	<span class="keyword">int</span> s;</span><br><span class="line">	<span class="keyword">int</span> res[maxN];</span><br><span class="line">	<span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	graph() &#123; <span class="built_in">size</span> = <span class="number">0</span>; &#125;</span><br><span class="line">	graph(<span class="keyword">int</span> n) &#123; <span class="built_in">size</span> = n; initialize(); &#125;</span><br><span class="line">	~graph() &#123;  &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		sccCnt = <span class="number">0</span>;</span><br><span class="line">		s = <span class="number">0</span>;</span><br><span class="line">		count = <span class="number">0</span>;</span><br><span class="line">		invCnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">			inDeg[i] = <span class="number">0</span>;</span><br><span class="line">			reach1[i] = <span class="literal">false</span>;</span><br><span class="line">			color[i] = <span class="number">0</span>;</span><br><span class="line">			scc[i] = <span class="number">0</span>;</span><br><span class="line">			ans[i] = <span class="number">0</span>;</span><br><span class="line">			res[i] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p1, <span class="keyword">int</span> p2)</span> </span>&#123;</span><br><span class="line">		arr1[p1].add(p2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">invertedAdd</span><span class="params">(<span class="keyword">int</span> p1, <span class="keyword">int</span> p2)</span> </span>&#123;</span><br><span class="line">		arr2[p1].add(p2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ADD</span><span class="params">(<span class="keyword">int</span> p1, <span class="keyword">int</span> p2)</span> </span>&#123;</span><br><span class="line">		arr[p1].add(p2);</span><br><span class="line">		inDeg[p2]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">		reach1[s] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (node* p = arr1[s].getHeader(); p != <span class="literal">NULL</span>; p = p-&gt;next) &#123;</span><br><span class="line">			<span class="keyword">int</span> ele = p-&gt;ele;</span><br><span class="line">			<span class="keyword">if</span> (!reach1[ele])</span><br><span class="line">				dfs1(ele);</span><br><span class="line">		&#125;</span><br><span class="line">		inv[++invCnt] = s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> sccCnt)</span> </span>&#123;</span><br><span class="line">		color[s] = sccCnt;</span><br><span class="line">		scc[sccCnt]++;</span><br><span class="line">		<span class="keyword">for</span> (node* p = arr2[s].getHeader(); p != <span class="literal">NULL</span>; p = p-&gt;next) &#123;</span><br><span class="line">			<span class="keyword">int</span> ele = p-&gt;ele;</span><br><span class="line">			<span class="keyword">if</span> (!color[ele])</span><br><span class="line">				dfs2(ele, sccCnt);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">kosaraju</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">size</span>; i++)</span><br><span class="line">			<span class="keyword">if</span> (!reach1[i])</span><br><span class="line">				dfs1(i);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">int</span> x = inv[i];</span><br><span class="line">			<span class="keyword">if</span> (!color[x]) &#123;</span><br><span class="line">				sccCnt++;</span><br><span class="line">				dfs2(x, sccCnt);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs3</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		reach2[x] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (node* p = arr[x].getHeader(); p != <span class="literal">NULL</span>; p = p-&gt;next) &#123;</span><br><span class="line">			<span class="keyword">int</span> ele = p-&gt;ele;</span><br><span class="line">			<span class="keyword">if</span> (!reach2[ele]) &#123;</span><br><span class="line">				ans[s] += scc[ele];</span><br><span class="line">				dfs3(ele);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		kosaraju();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (node* p = arr2[i].getHeader(); p != <span class="literal">NULL</span>; p = p-&gt;next) &#123;</span><br><span class="line">				<span class="keyword">int</span> ele = p-&gt;ele;</span><br><span class="line">				<span class="keyword">if</span> (color[i] == color[ele])</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				ADD(color[i], color[ele]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sccCnt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (inDeg[i] == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="built_in">memset</span>(reach2, <span class="literal">false</span>, maxN);</span><br><span class="line">				ans[i] += (scc[i] - <span class="number">1</span>);</span><br><span class="line">				s = i;</span><br><span class="line">				dfs3(i);</span><br><span class="line">				count = <span class="built_in">max</span>(count, ans[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">solve2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sccCnt; i++)</span><br><span class="line">			<span class="keyword">if</span> (ans[i] == count)</span><br><span class="line">				res[i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (res[color[i]])</span><br><span class="line">				<span class="keyword">if</span> (pos == <span class="number">0</span>) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"%d"</span>, i - <span class="number">1</span>);</span><br><span class="line">					pos++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">" %d"</span>, i - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	scanf_s(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">1</span>; ii &lt;= t; ii++) &#123;</span><br><span class="line">		<span class="keyword">int</span> n, m;</span><br><span class="line">		scanf_s(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">		<span class="function">graph <span class="title">G</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> p1, p2;</span><br><span class="line">			scanf_s(<span class="string">"%d%d"</span>, &amp;p1, &amp;p2);</span><br><span class="line">			G.add(p1 + <span class="number">1</span>, p2 + <span class="number">1</span>);</span><br><span class="line">			G.invertedAdd(p2 + <span class="number">1</span>, p1 + <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> r = G.solve();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, ii, r);</span><br><span class="line">		G.solve2();</span><br><span class="line">		G.~graph();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>强连通分量</tag>
        <tag>Kosaraju</tag>
      </tags>
  </entry>
  <entry>
    <title>烷烃基的类别</title>
    <url>/2020/03/05/%E7%83%B7%E7%83%83%E5%9F%BA%E7%9A%84%E7%B1%BB%E5%88%AB/</url>
    <content><![CDATA[<h1 id="烷烃基的类别"><a href="#烷烃基的类别" class="headerlink" title="烷烃基的类别"></a><strong>烷烃基的类别</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><p>化学很神奇，以下是烷烃基。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th>HDMG</th>
<th>Name</th>
<th>HDMG</th>
</tr>
</thead>
<tbody>
<tr>
<td>n-hexane</td>
<td><img src="https://i.loli.net/2020/03/06/PDuvRZLO5YrmIB8.png" alt="01.png"></td>
<td>2-methylpentane</td>
<td><img src="https://i.loli.net/2020/03/06/lVBZqugfItOzmFU.png" alt="02.png"></td>
</tr>
<tr>
<td>3-methylpentane</td>
<td><img src="https://i.loli.net/2020/03/06/i1RbSPtM5yoCecp.png" alt="03.png"></td>
<td>2,3-dimethylbutane</td>
<td><img src="https://i.loli.net/2020/03/06/ADbymgKM5S1YFJt.png" alt="04.png"></td>
</tr>
<tr>
<td>2,2-dimethylbutane</td>
<td><img src="https://i.loli.net/2020/03/06/delSR7chwiEG4oV.png" alt="05.png"></td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
</div>
<a id="more"></a>
<p>假设如上图，这个烷烃基有6个原子和5个化学键，6个原子分别标号1~6，然后用一对数字 a,b 表示原子a和原子b间有一个化学键。这样通过5行a,b可以描述一个烷烃基<br>你的任务是甄别烷烃基的类别。<br>原子没有编号方法，比如<br>1 2<br>2 3<br>3 4<br>4 5<br>5 6<br>和<br>1 3<br>2 3<br>2 4<br>4 5<br>5 6<br>是同一种，本质上就是一条链，编号其实是没有关系的，可以在纸上画画就懂了</p>
<h2 id="input"><a href="#input" class="headerlink" title="input"></a><strong>input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入第一行为数据的组数 T (1 ≤ T ≤ 200000)。</span><br><span class="line">每组数据有5行，每行是两个整数 a, b (1 ≤ a,b ≤ 6, a ≤ b)</span><br><span class="line">数据保证，输入的烷烃基是以上5种之一</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每组数据，输出一行，代表烷烃基的英文名</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a><strong>Example</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">2</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">4 5</span><br><span class="line">5 6</span><br><span class="line">1 4</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">4 5</span><br><span class="line">5 6</span><br><span class="line">Output: </span><br><span class="line">n-hexane</span><br><span class="line">3-methylpentane</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><ol>
<li><p>对烷烃基标号</p>
<p>对于每一个标号可以用<code>数组标号+1</code>表示，其连接的其他碳原子<code>标号-1</code>用链表储存。<br>对于上述5种烷烃基，可以得到如下邻接链表结构：</p>
<p>| Name               | HDMG                   | Structure                                                    |<br>| ————————— | ——————————— | —————————————————————————————— |<br>| n-hexane           | <img src="https://i.loli.net/2020/03/06/7WRikFoTcJSUZgm.png" alt="06.png"> | <code>[1]→2</code><br><code>[2]→1→3</code><br><code>[3]→2→4</code><br><code>[4]→3→5</code><br><code>[5]→4→6</code><br><code>[6]→5</code> |<br>| 2-methylpentane    | <img src="https://i.loli.net/2020/03/06/WTZyfRF7UheqptI.png" alt="07.png"> | <code>[1]→2</code><br><code>[2]→1→3→4</code><br><code>[3]→2</code><br><code>[4]→2→5</code><br><code>[5]→4→6</code><br><code>[6]→5</code> |<br>| 3-methylpentane    | <img src="https://i.loli.net/2020/03/06/9Pg1Wzmsy3bMG7C.png" alt="08.png"> | <code>[1]→2</code><br><code>[2]→1→3</code><br><code>[3]→2→4→5</code><br><code>[4]→3</code><br><code>[5]→3→6</code><br><code>[6]→5</code> |<br>| 2,3-dimethylbutane | <img src="https://i.loli.net/2020/03/06/hns7fKtdUEr6vi2.png" alt="09.png"> | <code>[1]→2</code><br><code>[2]→1→3→4</code><br><code>[3]→2</code><br><code>[4]→2→5→6</code><br><code>[5]→4</code><br><code>[6]→4</code> |<br>| 2,2-dimethylbutane | <img src="https://i.loli.net/2020/03/06/RlrhLUBGVP3ifD8.png" alt="10.png"> | <code>[1]→2</code><br><code>[2]→1→3→4→5</code><br><code>[3]→2</code><br><code>[4]→2</code><br><code>[5]→2→6</code><br><code>[6]→5</code> |</p>
</li>
<li><p>初次鉴别<br>标号不管怎么变都无法影响烷烃基的种类，但是观察邻接链表，不难发现链长可以进行初次区分。</p>
<p>| 正己烷 | 2-甲基苯丙烷 | 3-甲基苯丙烷 | 2,3-二甲基丁烷 | 2,2-二甲基丁烷 |<br>| :——: | :—————: | :—————: | :——————: | :——————: |<br>|   1    |      1       |      1       |       1        |       1        |<br>|   2    |      3       |      2       |       3        |       4        |<br>|   2    |      1       |      3       |       1        |       1        |<br>|   2    |      2       |      1       |       3        |       1        |<br>|   2    |      2       |      2       |       1        |       2        |<br>|   1    |      1       |      1       |       1        |       1        |</p>
</li>
</ol>
<p>可以设3个<code>int</code>变量<code>count2, count3, count4</code>用来记录<code>链长 = x</code>的出现次数。<br>   只有<em>2,2-dimethylbutane</em>的<code>count4 = 1</code>;<br>   只有<em>n-hexane</em>的<code>count2 = 4</code>;<br>   只有<em>2,3-dimethylbutane</em>的<code>count3 = 2</code>;<br>   对于<em>2-methylpentane</em>和<em>3-methylpentane</em>，<code>count2 = 2, count3 = 1, count4 = 0</code>，无法通过链长来区分。</p>
<ol>
<li>鉴别<em>2-methylpentane</em>和<em>3-methylpentane</em><br>不难发现，不管怎么编号(正/反)，当<code>链长 = 3</code>时，与这个碳原子相连的甲基个数不同。因此可记录<code>链长 = 3</code>时数组编号<code>no</code>，然后找到此数组所在的链<code>arr[no]</code>，记录该条链储存的元素，即记录与之相连的碳原子的编号。<br>比如图中<em>2-methylpentane</em>与<code>2</code>相连的是<code>1, 3, 4</code>，属于甲基(即<code>链长 = 1</code>)的是<code>1, 3</code>;<br><em>3-methylpentane</em>与<code>3</code>相连的是<code>2, 4, 5</code>，属于甲基的是<code>4</code>。<br><em>2-methylpentane</em>的甲基个数为2，<em>3-methylpentane</em>的甲基个数为1，以此鉴别。</li>
</ol>
<h2 id="数据结构及实现方法"><a href="#数据结构及实现方法" class="headerlink" title="数据结构及实现方法"></a><strong>数据结构及实现方法</strong></h2><p>采用邻接链表表示的有向图，本题只需提供插入、查找、遍历操作。详见源代码注释。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*链表的节点*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> a;</span><br><span class="line">	node* next;</span><br><span class="line">	node() &#123; a = <span class="number">0</span>; next = <span class="literal">NULL</span>; &#125;</span><br><span class="line">	node(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a) &#123; <span class="keyword">this</span>-&gt;a = a; next = <span class="literal">NULL</span>; &#125;</span><br><span class="line">	node(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, node* next) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;a = a;	<span class="keyword">this</span>-&gt;next = next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*链表*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">chain</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	node* firstNode;<span class="comment">//指向链表头节点的指针</span></span><br><span class="line">	<span class="keyword">int</span> listSize;<span class="comment">//链表长度</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	chain(<span class="keyword">int</span> initialCapacity = <span class="number">10</span>) &#123;<span class="comment">//初始化构造函数</span></span><br><span class="line">		firstNode = <span class="literal">NULL</span>;</span><br><span class="line">		listSize = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	chain(<span class="keyword">const</span> chain&amp;);</span><br><span class="line">	~chain() &#123;<span class="comment">//析构函数</span></span><br><span class="line">		<span class="keyword">while</span> (firstNode != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			node* nextNode = firstNode-&gt;next;</span><br><span class="line">			<span class="keyword">delete</span> firstNode;</span><br><span class="line">			firstNode = nextNode;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> listSize; &#125;<span class="comment">//返回链表长度</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; theElement)</span> </span>&#123;<span class="comment">//链表的有序插入操作</span></span><br><span class="line">		<span class="keyword">if</span> (firstNode == <span class="literal">NULL</span>)<span class="comment">//当链表为空时，直接插入</span></span><br><span class="line">			firstNode = <span class="keyword">new</span> node(theElement, firstNode);</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="comment">//链表非空时</span></span><br><span class="line">			node* p = firstNode;<span class="comment">//指向头节点的指针</span></span><br><span class="line">			node* pp = <span class="literal">NULL</span>;<span class="comment">//指针pp紧跟p的后面</span></span><br><span class="line">			<span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p-&gt;a &lt; theElement) &#123;<span class="comment">//要插入的元素小于当前指向的节点</span></span><br><span class="line">				pp = p;<span class="comment">//pp跟上p</span></span><br><span class="line">				p = p-&gt;next;<span class="comment">//p指向下一节点</span></span><br><span class="line">			&#125;</span><br><span class="line">            <span class="comment">//到了合适的插入位</span></span><br><span class="line">			node* newNode = <span class="keyword">new</span> node(theElement, p);<span class="comment">//新建节点，插入的元素指向p</span></span><br><span class="line">			<span class="keyword">if</span> (pp == <span class="literal">NULL</span>)<span class="comment">//当插入为头节点时</span></span><br><span class="line">				firstNode = newNode;</span><br><span class="line">			<span class="keyword">else</span><span class="comment">//否则，插入点之前的指针指向新节点</span></span><br><span class="line">				pp-&gt;next = newNode;</span><br><span class="line">		&#125;</span><br><span class="line">		listSize++;<span class="comment">//每次成功插入，链表大小+1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; theElement)</span> <span class="keyword">const</span> </span>&#123;<span class="comment">//获取该元素所在位置</span></span><br><span class="line">		node* currentNode = firstNode;</span><br><span class="line">		<span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (currentNode != <span class="literal">NULL</span> &amp;&amp; currentNode-&gt;a != theElement) &#123;<span class="comment">//遍历即可</span></span><br><span class="line">			currentNode = currentNode-&gt;next;</span><br><span class="line">			index++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (currentNode == <span class="literal">NULL</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//未找到时返回-1</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> index;<span class="comment">//找到时返回index</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">getElement</span><span class="params">()</span> </span>&#123;<span class="comment">//遍历，获取链表所有元素，用vector储存</span></span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nei;</span><br><span class="line">		node *p = firstNode;</span><br><span class="line">		<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			nei.push_back(p-&gt;a);</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> nei;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ane</span> &#123;</span><span class="comment">//烷烃基无向图的类</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	chain arr[<span class="number">6</span>];<span class="comment">//邻接链表，每个碳原子标号，0~5一一对应</span></span><br><span class="line">	<span class="keyword">int</span> chainSize[<span class="number">6</span>];<span class="comment">//记录每条链的大小</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	ane()&#123; &#125;</span><br><span class="line">	~ane()&#123; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="comment">//向无向图中插入点</span></span><br><span class="line">		<span class="keyword">if</span> (arr[a].indexOf(b) == <span class="number">-1</span>) &#123;<span class="comment">//未找到，即标号还未存在时插入</span></span><br><span class="line">			arr[a].insert(b);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;<span class="comment">//6个点插入完成后，记录每条链大小</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">			chainSize[i] = arr[i].getSize();</span><br><span class="line">			<span class="comment">//cout &lt;&lt; chainSize[i] &lt;&lt; endl;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">string</span> <span class="title">type</span><span class="params">()</span> </span>&#123;<span class="comment">//判断属于哪种烷</span></span><br><span class="line">		<span class="keyword">int</span> count2 = <span class="number">0</span>, count3 = <span class="number">0</span>, count4 = <span class="number">0</span>;<span class="comment">/*分别记录</span></span><br><span class="line"><span class="comment">		链长 = 2，链长 = 3，链长 = 4出现次数*/</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (chainSize[i] == <span class="number">2</span>)</span><br><span class="line">				count2++;</span><br><span class="line">			<span class="keyword">if</span> (chainSize[i] == <span class="number">3</span>)</span><br><span class="line">				count3++;</span><br><span class="line">			<span class="keyword">if</span> (chainSize[i] == <span class="number">4</span>)</span><br><span class="line">				count4++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (count2 == <span class="number">4</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"n-hexane"</span>;<span class="comment">//链长 = 2 出现4次</span></span><br><span class="line">		<span class="keyword">if</span> (count4 == <span class="number">1</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"2,2-dimethylbutane"</span>;<span class="comment">//链长 = 4 出现1次</span></span><br><span class="line">		<span class="keyword">if</span> (count3 == <span class="number">2</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"2,3-dimethylbutane"</span>;<span class="comment">//链长 = 3 出现2次</span></span><br><span class="line">        <span class="comment">//以上区分出3种，剩下2种另外区分</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (count2 == <span class="number">2</span> &amp;&amp; count3 == <span class="number">1</span> &amp;&amp; count4 == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> no = <span class="number">0</span>;<span class="comment">// no用于记录 链长 = 3 所在数组位置</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">				<span class="keyword">if</span> (chainSize[i] == <span class="number">3</span>)</span><br><span class="line">					no = i;<span class="comment">//找到位置i</span></span><br><span class="line">			<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nei = arr[no].getElement();<span class="comment">//获得该链元素</span></span><br><span class="line">			<span class="keyword">int</span> count1 = <span class="number">0</span>;<span class="comment">//记录甲基个数</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != nei.<span class="built_in">size</span>(); i++)</span><br><span class="line">				<span class="keyword">if</span> (chainSize[nei.at(i)] == <span class="number">1</span>)</span><br><span class="line">					count1++;</span><br><span class="line">			<span class="keyword">if</span> (count1 == <span class="number">2</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="string">"2-methylpentane"</span>;<span class="comment">//甲基个数 = 2 得出</span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">return</span> <span class="string">"3-methylpentane"</span>;<span class="comment">//否则，甲基个数 = 1</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		ane tane;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">int</span> a, b;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">			tane.insert(a - <span class="number">1</span>, b - <span class="number">1</span>);</span><br><span class="line">			tane.insert(b - <span class="number">1</span>, a - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		tane.getSize();</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; tane.type() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>无向图</tag>
      </tags>
  </entry>
  <entry>
    <title>解码</title>
    <url>/2020/05/05/%E8%A7%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="ASCII解码"><a href="#ASCII解码" class="headerlink" title="ASCII解码"></a><strong>ASCII解码</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Julius Caesar 曾经使用过一种很简单的密码。对于明文中的每个字符，将它用它字母表中后 55 位对应的字符来代替，这样就得到了密文。比如字符&#39;A&#39;用&#39;F&#39;来代替。如下是密文和明文中字符的对应关系。</span><br><span class="line"></span><br><span class="line">密文: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</span><br><span class="line">明文: V W X Y Z A B C D E F G H I J K L M N O P Q R S T U</span><br><span class="line"></span><br><span class="line">你的任务是对给定的密文进行解密得到明文。</span><br><span class="line">你需要注意的是，密文中出现的字母都是大写字母。密文中也包括非字母的字符，对这些字符不用进行解码。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一行，给出密文，密文不为空，而且其中的字符数不超过 200。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出一行，即密文对应的明文。</span><br><span class="line">输出时每行末尾的多余空格，不影响答案正确性</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    65536 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>根据加密原则，易得：<code>大写英文字母密文 = (大写英文字母明文 + 5) % 26</code>，解密就是：<code>大写英文字母明文 = (大写英文字母密文 + 21) % 26</code>。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">string</span> a;</span><br><span class="line">	<span class="keyword">while</span> (!(getline(<span class="built_in">cin</span>, a).eof())) &#123;</span><br><span class="line">		<span class="keyword">int</span> sz = a.<span class="built_in">size</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] &gt;= <span class="number">65</span> &amp;&amp; a[i] &lt;= <span class="number">90</span>)</span><br><span class="line">				a[i] = (a[i] - <span class="number">65</span> - <span class="number">5</span> + <span class="number">26</span>) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>贪婪算法-区间覆盖问题</title>
    <url>/2020/03/19/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95-%E5%8C%BA%E9%97%B4%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="区间覆盖问题"><a href="#区间覆盖问题" class="headerlink" title="区间覆盖问题"></a><strong>区间覆盖问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数轴上有 n (1 ≤ n ≤ 25000) 个闭区间 [ai, bi]，选择尽量少的区间覆盖一条指定线段 [1, t] ( 1 ≤ t ≤ 1,000,000)。</span><br><span class="line">覆盖整点，即[1,2]+[3,4]可以覆盖[1,4]。</span><br><span class="line">不可能办到输出-1</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行：N 和 T</span><br><span class="line">第二行至 N+1 行: 每一行一个闭区间。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择的区间的数目，不可能办到输出-1</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">3 10</span><br><span class="line">1 7</span><br><span class="line">3 6</span><br><span class="line">6 10</span><br><span class="line">Output: </span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	65536 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>这道题<code>WA</code>了好多次，主要是整点覆盖比较坑，是要在录入时就进行<code>始端-1</code>或者<code>末端+1</code>，还是在<code>if</code>条件判断的时候考虑整点，容易出错，可能会多考虑了区间比如<code>[1, 2]</code>和<code>[4, 5]</code> (2往后延长到3, 4往前延长到3)。还有录入的时候我进行了裁剪，我怕<code>[-2, 1]</code>裁剪成<code>[1, 1]</code>会影响对<code>[2, 3]</code>的判断，就选择了在<code>if</code>处判断整点，而没有选择延长区间。</p>
<p>首先对区间a升序，a相同时按b降序，保证每次能选到的区间最长。每次标记一个区间的起点<code>begin</code>和终点<code>end</code>，再从接下来的区间中选取起点落在<code>[begin, end+1]</code>范围内的，可行就选取最长的，然后更新起点<code>begin</code>和终点<code>end</code>，计数 + 1，如此循环，直到遇到目标终点<code>t</code>。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*区间 [a, b] */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">range</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	range(<span class="keyword">int</span> _a, <span class="keyword">int</span> _b) :a(_a), b(_b) &#123;&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> range r)<span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (a == r.a)</span><br><span class="line">			<span class="keyword">return</span> b &gt; r.b;</span><br><span class="line">		<span class="keyword">return</span> a &lt; r.a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rangeCover</span><span class="params">(<span class="built_in">vector</span>&lt;range&gt; v, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//按a升序 按b降序</span></span><br><span class="line">	sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (v.at(<span class="number">0</span>).a &gt; <span class="number">1</span>)<span class="comment">//起始不是 1，一定不能办到</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="comment">//标记当前选取区间的起点，终点</span></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">begin</span> = <span class="number">1</span>, <span class="built_in">end</span> = v.at(<span class="number">0</span>).b, pos = <span class="number">0</span>, count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">end</span> != t) &#123;</span><br><span class="line">		<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">begin</span> = <span class="built_in">end</span> + <span class="number">1</span>;<span class="comment">//下一个标记的起始点为本次标记终点+1</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (v.at(i).a &gt; <span class="built_in">begin</span>) &#123;<span class="comment">//遇到了第一个起始点 &gt; 标记起始点的</span></span><br><span class="line">				pos = i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (v.at(i).a &lt;= <span class="built_in">begin</span> &amp;&amp; v.at(i).b &gt;= <span class="built_in">end</span>) &#123;<span class="comment">//可选区间</span></span><br><span class="line">				temp = i;<span class="comment">//记录当前标号</span></span><br><span class="line">				<span class="built_in">end</span> = v.at(i).b;<span class="comment">//更新标记末端</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">begin</span> &gt; <span class="built_in">end</span>) &#123;<span class="comment">//标记了下一个区间的起始点 但没有找到此区间</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="comment">//这个标记的区间可行</span></span><br><span class="line">			pos = temp + <span class="number">1</span>;<span class="comment">//从那个标记的标号开始 进行下一次循环</span></span><br><span class="line">			count++;<span class="comment">//计数+1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, t;</span><br><span class="line">	scanf_s(<span class="string">"%d%d"</span>, &amp;n, &amp;t);</span><br><span class="line">	<span class="built_in">vector</span>&lt;range&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> a, b;</span><br><span class="line">		scanf_s(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">		<span class="keyword">if</span> ((a &gt;= <span class="number">1</span> &amp;&amp; a &lt;= t) || (b &gt;= <span class="number">1</span> &amp;&amp; b &lt;= t)) &#123;<span class="comment">//先对输入进行裁剪</span></span><br><span class="line">			<span class="keyword">if</span> (a &lt; <span class="number">1</span>)<span class="comment">//合法区间 但 a &lt; 1，可令 a = 1</span></span><br><span class="line">				a = <span class="number">1</span>;</span><br><span class="line">			<span class="function">range <span class="title">r</span><span class="params">(a, b)</span></span>;</span><br><span class="line">			v.push_back(r);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> res = rangeCover(v, t);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>贪婪算法</tag>
      </tags>
  </entry>
  <entry>
    <title>贪婪算法-区间选点问题</title>
    <url>/2020/03/19/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95-%E5%8C%BA%E9%97%B4%E9%80%89%E7%82%B9%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="区间选点问题"><a href="#区间选点问题" class="headerlink" title="区间选点问题"></a><strong>区间选点问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数轴上有 n 个闭区间 [ai, bi]。取尽量少的点，使得每个区间内都至少有一个点（不同区间内含的点可以是同一个）</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行1个整数 N（N ≤ 100）</span><br><span class="line">第 2~N+1 行，每行两个整数 a,b（a, b ≤ 100）</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个整数，代表选点的数目</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">2</span><br><span class="line">1 5</span><br><span class="line">4 6</span><br><span class="line">Output: </span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">3</span><br><span class="line">1 3</span><br><span class="line">2 5</span><br><span class="line">4 6</span><br><span class="line">Output: </span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	262144 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>按<code>b</code>的大小，将这些区间升序排序；当<code>b</code>相同时，按<code>a</code>降序。<br>排序完之后，将这些区间遍历，每次计数<code>count</code>增加时，证明这个区间与前面的区间没有重叠部分，因此可以把这个区间的<code>b</code>端作为接下来要判断的区间的判断点。<br>如果某区间与前一区间有重叠，那么一定有<code>该区间的a端 ≤ 上一区间的b端</code>且<code>该区间的b端 ≥ 上一区间的b端</code>。</p>
<p>如果第一字典不是<code>b</code>，而是<code>a</code>，按升序排列呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;第一字典为b</span><br><span class="line">    (X)___________</span><br><span class="line">(Y)________________________</span><br><span class="line">                      (Z)_________</span><br><span class="line">X和Y可共计1点, Z再算1点，总数共2点</span><br><span class="line">-----------------------------------------</span><br><span class="line">&gt;&gt;&gt;第一字典为a</span><br><span class="line">(Y)________________________</span><br><span class="line">    (X)___________</span><br><span class="line">                      (Z)_________</span><br><span class="line">X的a在Y的b前面，但X的b也在Y前面。</span><br><span class="line">情况一：</span><br><span class="line">if条件不考虑X的b，则Y与X归类，标记点仍为Y的b</span><br><span class="line">Z也会与Y归类。总数共计1点(Wrong Answer)</span><br><span class="line">情况二：</span><br><span class="line">if条件考虑X的b，Y不与X归类，计数+1，标记点变成X的b</span><br><span class="line">X明显不能与Z归类，计数+1，标记Z的b，到尾了，计数+1</span><br><span class="line">总数共计3点(Wrong Answer)</span><br><span class="line"></span><br><span class="line">标记点若改成a端呢？</span><br><span class="line">由于按a升序，按a端一定无法判断2个区间是否重叠！</span><br></pre></td></tr></table></figure>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*两点 表示区间*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">range</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	range(<span class="keyword">int</span> _a, <span class="keyword">int</span> _b) :a(_a), b(_b)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dotRange</span><span class="params">(<span class="built_in">vector</span>&lt;range&gt; v)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//按b升序 按a降序</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != v.<span class="built_in">size</span>() - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (v.at(j).b &gt; v.at(j + <span class="number">1</span>).b)</span><br><span class="line">				swap(v.at(j), v.at(j + <span class="number">1</span>));</span><br><span class="line">			<span class="keyword">if</span> (v.at(j).b == v.at(j + <span class="number">1</span>).b)</span><br><span class="line">				<span class="keyword">if</span> (v.at(j).a &lt; v.at(j + <span class="number">1</span>).a)</span><br><span class="line">					swap(v.at(j), v.at(j + <span class="number">1</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> dot = v.at(<span class="number">0</span>).b;<span class="comment">//排序后从头开始遍历 把第一个区间的末端作为判断点</span></span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">1</span>;<span class="comment">//计数</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (v.at(i).a &lt;= dot &amp;&amp; v.at(i).b &gt;= dot) &#123;<span class="comment">//与本次标记区间有重叠 无需计数</span></span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="comment">//到了没有重叠的区间 可计数</span></span><br><span class="line">			count++;</span><br><span class="line">			dot = v.at(i).b;<span class="comment">//并以该区间的末端作为接下来的区间判断点</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="built_in">vector</span>&lt;range&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> a, b;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		<span class="function">range <span class="title">r</span><span class="params">(a, b)</span></span>;</span><br><span class="line">		v.push_back(r);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; dotRange(v) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>贪婪算法</tag>
      </tags>
  </entry>
  <entry>
    <title>第k大正整数</title>
    <url>/2020/05/19/%E7%AC%ACk%E5%A4%A7%E6%AD%A3%E6%95%B4%E6%95%B0/</url>
    <content><![CDATA[<h1 id="第-k-大正整数"><a href="#第-k-大正整数" class="headerlink" title="第 k 大正整数"></a><strong>第 k 大正整数</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定两个数字，分别表示 n 和 k，要求给出无法被 n 整除的第 k 大的正整数。</span><br><span class="line">例如 n &#x3D; 3, k &#x3D; 7，则前 7 个无法被 n 整除的正整数为 [1 2 4 5 7 8 10]，答案为 10。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行一个整数 T，表示数据组数，不超过 1000。</span><br><span class="line">之后 T 行，每一行给出两个正整数，分别表示 n（2 ≤ n ≤ 1e9）、k（1 ≤ k ≤ 1e9）。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每一组数据，输出无法被 n 整除的第 k 大的正整数。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">6</span><br><span class="line">3 7</span><br><span class="line">4 12</span><br><span class="line">2 1000000000</span><br><span class="line">7 97</span><br><span class="line">1000000000 1000000000</span><br><span class="line">2 1</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">10</span><br><span class="line">15</span><br><span class="line">1999999999</span><br><span class="line">113</span><br><span class="line">1000000001</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>以 <em>n</em> = 3 为例：</p>
<p><code>[1 2 (3)][4 5 (6)][7 8 (9)][10 11 (12)][13 14 (15)]...</code></p>
<p>每一个分组，都是 <em>n</em> - 1 个数 和 一个 <em>n</em> 的倍数组成，由此可以确定 <em>k</em> 的位置：</p>
<p>若 <em>k</em> 是 (<em>n</em> - 1) 的倍数，组数 = <em>k</em> ÷ (<em>n</em> - 1)，否则，组数 = <em>k</em> ÷ (<em>n</em> - 1) + 1；<br>然后用余数确定 <em>k</em> 的位置：若整除，则 答案 = <em>n</em> × <em>k</em>  ÷ (<em>n</em> - 1) - 1，否则，答案 = <em>n</em> × <em>k</em>  ÷ (<em>n</em> - 1) + 余数。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> n, k;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> sub = n - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> cnt1 = k / sub;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> cnt2 = k % sub;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> ans = cnt1 * n + cnt2;</span><br><span class="line">		<span class="keyword">if</span> (cnt2 == <span class="number">0</span>)</span><br><span class="line">			ans -= <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>目录管理器</title>
    <url>/2020/04/17/%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<h1 id="目录管理器"><a href="#目录管理器" class="headerlink" title="目录管理器"></a><strong>目录管理器</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">写一个目录管理器。</span><br><span class="line">初始时，硬盘是空的，命令行的当前目录为根目录 root。</span><br><span class="line">目录管理器可以理解为要维护一棵有根树结构，每个目录的儿子必须保持字典序。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th style="text-align:center">类型</th>
<th>实现</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>MKDIR s</code></td>
<td style="text-align:center">操作</td>
<td>在当前目录下创建一个子目录 <em>s</em>，<em>s</em> 是一个字符串</td>
<td>创建成功输出 “<code>OK</code>“；若当前目录下已有该子目录则输出 “<code>ERR</code>“</td>
</tr>
<tr>
<td><code>RM s</code></td>
<td style="text-align:center">操作</td>
<td>在当前目录下删除子目录 <em>s</em>，<em>s</em> 是一个字符串</td>
<td>删除成功输出 “<code>OK</code>“；若当前目录下该子目录不存在则输出 “<code>ERR</code>“</td>
</tr>
<tr>
<td><code>CD s</code></td>
<td style="text-align:center">操作</td>
<td>进入一个子目录 <em>s</em>，<em>s</em> 是一个字符串(执行后，当前目录可能会改变)</td>
<td>进入成功输出 “<code>OK</code>“；若当前目录下该子目录不存在则输出 “<code>ERR</code>“<br>特殊地，若 <em>s</em> 等于 “<code>..</code>“ 则表示返回上级目录，同理，返回成功输出 “<code>OK</code>“，返回失败（当前目录已是根目录没有上级目录）则输出 “<code>ERR</code>“</td>
</tr>
<tr>
<td><code>SZ</code></td>
<td style="text-align:center">询问</td>
<td>输出当前目录的大小</td>
<td>也即输出 <code>1+当前目录的子目录数</code></td>
</tr>
<tr>
<td><code>LS</code></td>
<td style="text-align:center">询问</td>
<td>输出多行表示当前目录的 “直接子目录” 名</td>
<td>若没有子目录，则输出 “<code>EMPTY</code>“；若<code>子目录数</code>∈ [1,10] 则全部输出；若<code>子目录数</code>大于 10，则输出前 5 个，再输出一行 “<code>...</code>“，输出后 5 个。</td>
</tr>
<tr>
<td><code>TREE</code></td>
<td style="text-align:center">询问</td>
<td>输出多行表示以当前目录为根的子树的前序遍历结果</td>
<td>若没有后代目录，则输出 “<code>EMPTY</code>“；若 <code>后代目录数+1 (当前目录)</code> ∈ [1,10] 则全部输出；若<code>后代目录数+1 (当前目录)</code> 大于 10，则输出前 5 个，再输出一行 “<code>...</code>“，输出后 5 个。若目录结构如<code>图1</code>，当前目录为 “<code>root</code>“ 执行结果如<code>图2</code></td>
</tr>
<tr>
<td><code>UNDO</code></td>
<td style="text-align:center">特殊</td>
<td>撤销操作</td>
<td>撤销最近一个 “成功执行” 的操作（即成功的<code>MKDIR</code>或<code>RM</code>或<code>CD</code>）的影响，撤销成功输出 “<code>OK</code>“ , 没有操作用于撤销则输出 “<code>ERR</code>“</td>
</tr>
</tbody>
</table>
</div>
<p><img src="https://i.loli.net/2020/04/17/vehRy68qGgoIu9a.png" alt="directory_manager_01.png"></p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入文件包含多组测试数据，第一行输入一个整数表示测试数据的组数 T (T ≤ 20)；</span><br><span class="line">每组测试数据的第一行输入一个整数表示该组测试数据的命令总数 Q (Q ≤ 1e5)；</span><br><span class="line">每组测试数据的 2 ~ Q+1 行为具体的操作(MKDIR、RM 操作总数不超过 5000)；</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每组测试数据的输出结果间需要输出一行空行。注意大小写。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">1</span><br><span class="line">22</span><br><span class="line">MKDIR dira</span><br><span class="line">CD dirb</span><br><span class="line">CD dira</span><br><span class="line">MKDIR a</span><br><span class="line">MKDIR b</span><br><span class="line">MKDIR c</span><br><span class="line">CD ..</span><br><span class="line">MKDIR dirb</span><br><span class="line">CD dirb</span><br><span class="line">MKDIR x</span><br><span class="line">CD ..</span><br><span class="line">MKDIR dirc</span><br><span class="line">CD dirc</span><br><span class="line">MKDIR y</span><br><span class="line">CD ..</span><br><span class="line">SZ</span><br><span class="line">LS</span><br><span class="line">TREE</span><br><span class="line">RM dira</span><br><span class="line">TREE</span><br><span class="line">UNDO</span><br><span class="line">TREE</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">OK</span><br><span class="line">ERR</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">9</span><br><span class="line">dira</span><br><span class="line">dirb</span><br><span class="line">dirc</span><br><span class="line">root</span><br><span class="line">dira</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">dirb</span><br><span class="line">x</span><br><span class="line">dirc</span><br><span class="line">y</span><br><span class="line">OK</span><br><span class="line">root</span><br><span class="line">dirb</span><br><span class="line">x</span><br><span class="line">dirc</span><br><span class="line">y</span><br><span class="line">OK</span><br><span class="line">root</span><br><span class="line">dira</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">dirb</span><br><span class="line">x</span><br><span class="line">dirc</span><br><span class="line">y</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		6000 ms</span><br><span class="line">Memory limit	1048576 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>挺复杂的，分步骤操作。</p>
<h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>先考虑输入，输入主要是操作跟操作的路径，所以用<code>map</code>标记输入的是什么操作，共 7 个<code>case</code>。</p>
<h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>接下来就是7个功能的实现了，可以先把大体框图<code>class</code>写出来，具体怎么实现先丢在一边。</p>
<h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>然后是考虑怎么实现这棵目录树的问题。仔细读题，它得有返回上一级的功能，所以结构体内得存有指针指向其父节点；还得输出当前目录大小，所以结构体内得有一个<code>size</code>记录当前目录大小。<br>但是问题又来了，一个目录下有多个文件夹，每个文件夹下又有多个文件夹，所以<code>size</code>不应该只记录当前文件夹下文件夹的个数，还得算入所有子文件夹的个数，所以可以用一个函数维持这个<code>size</code>，从变更的孩子节点开始，每次往上一级变更<code>size</code>，直到<code>root</code>。<br>文件目录是英文单词，得用<code>map</code>对其标记(同时也Alphabetically sorted)，将这些指向孩子的指针储存起来。</p>
<h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><p>最后就是实现这7大功能了。</p>
<p>类里面放个指针指向根目录，再放个指针指向当前所在文件夹的目录。</p>
<p><code>MKDIR s</code>：新建节点直接插入，同时维护<code>size</code>(+1)，返回<code>true</code>/<code>false</code>。</p>
<p><code>RM s</code>：找到当前路径是否存在该文件夹，存在则删除指针，同时维护<code>size</code>(- 1 × 删除的大小)，返回<code>true</code>/<code>false</code>。</p>
<p><code>CD s</code>：找到当前路径是否存在该文件夹，存在则改变当前目录的指针，指向这，返回<code>true</code>/<code>false</code>。</p>
<p><code>SZ</code>：因为有储存了，直接输出就好了。</p>
<p><code>LS</code>：遍历当前目录的直接子目录，直接根据题意输出就好了。</p>
<p><code>TREE</code>：前序遍历，结果用<code>vector</code>储存，根据题意输出。</p>
<p><code>UNDO</code>：中文题意可能有歧义，直接看英文题意：只有成功的<code>MKDIR</code>、<code>RM</code>、<code>CD</code>才可以撤销；可多次撤销；没得再撤销了就<code>ERR</code>了。<br>可以用一个栈(<code>stack&lt;pair&lt;操作, 操作用于的指针&gt;&gt;</code>)储存每次成功的<code>MKDIR</code>、<code>RM</code>和<code>CD</code>，每次撤销取栈顶，撤销<code>MKDIR</code>就<code>RM</code>之，撤销<code>RM</code>就<code>MKDIR</code>之(必须用指针, 不可直接新建目录，否则子文件夹全部丢失)，撤销<code>CD</code>就进入储存的<code>CD</code>地址。</p>
<h3 id="Step-5-细节处理"><a href="#Step-5-细节处理" class="headerlink" title="Step 5  细节处理"></a>Step 5  细节处理</h3><p>跑一下，<code>TLE</code>了……原因是一直<code>TREE</code>操作太耗时，太多次就超时了。</p>
<p>可以采用懒更新的方式，因为它每次<code>TREE</code>的结果可能是相同的，可以用一个<code>bool updated</code>记录当前是否更新了树，即若操作是成功的<code>MKDIR</code>/<code>RM</code>/<code>CD</code>/<code>UNDO</code>，则需要重新遍历，每次遍历完之后，将<code>updated</code>置于<code>false</code>。减少了遍历的次数，耗时也就降下来了。</p>
<h3 id="再再再后来……"><a href="#再再再后来……" class="headerlink" title="再再再后来……"></a>再再再后来……</h3><p>之后就面临的<code>WA</code>的疯狂调试……(好难纠错啊)</p>
<p>先是解决了上面提到的撤回<code>RM</code>操作不能直接<code>MKDIR</code>新目录的问题，然后是若第一个指令是<code>TREE</code>但前序序列是空的(没加入<code>root</code>), 因此输出<code>&#39;EMPTY&#39;</code>时判断条件(前序序列的<code>size</code> = 1)会出错。</p>
<p>还有就是若当前目录与其子目录中某个文件夹同名，<code>RM</code>会有很大的问题，因为我本来是写了个<code>find()</code>函数，从当前目录开始，不断向子目录找同名文件夹，<code>RM</code>直接调用的<code>find()</code>，因为刚开始读题的时候我脑子里是认为把所有子目录都算进去了……</p>
<p>还有个<code>WA</code>找了好久……反复读题后，发现<code>CD</code>是进入当前子目录，我又调用<code>find()</code>函数了……(自己随手写了个<code>find()</code>函数把自己坑了好几次😵，最终<code>AC</code>的结果就是<code>find()</code>完全用不上🤧)</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>认真读题，反复读题！若有英文原题，建议先看英文题面！</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>, node*&gt; children;</span><br><span class="line">	node* parent;</span><br><span class="line">	<span class="keyword">int</span> sz;</span><br><span class="line">	node() &#123; name = <span class="string">""</span>; parent = <span class="literal">NULL</span>; sz = <span class="number">0</span>; &#125;</span><br><span class="line">	node(<span class="built_in">string</span> nm, node* par) :name(nm), parent(par) &#123; sz = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">directory</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	node* root;</span><br><span class="line">	node* cur;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; posOrder;</span><br><span class="line">	<span class="built_in">stack</span>&lt;pair&lt;<span class="keyword">int</span>, node*&gt;&gt; opeS;</span><br><span class="line">	<span class="keyword">bool</span> updated;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	directory() &#123; root = <span class="keyword">new</span> node(<span class="string">"root"</span>, <span class="literal">NULL</span>); cur = root; updated = <span class="literal">false</span>; &#125;</span><br><span class="line">	~directory() &#123; <span class="comment">/*clear();*/</span> &#125;</span><br><span class="line">	<span class="function">node* <span class="title">find</span><span class="params">(node* curr, <span class="built_in">string</span> idx)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">queue</span>&lt;node*&gt; q;</span><br><span class="line">		q.push(curr);</span><br><span class="line">		<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">			node* p = q.front();</span><br><span class="line">			q.pop();</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;name == idx)</span><br><span class="line">				<span class="keyword">return</span> p;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="built_in">string</span>, node*&gt;::iterator it = p-&gt;children.<span class="built_in">begin</span>();</span><br><span class="line">				it != p-&gt;children.<span class="built_in">end</span>(); ++it)</span><br><span class="line">				q.push(it-&gt;second);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(node* curr, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">		curr-&gt;sz += delta;</span><br><span class="line">		<span class="keyword">if</span> (curr != root)</span><br><span class="line">			<span class="built_in">maintain</span>(curr-&gt;parent, delta);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> sub)</span> </span>&#123;</span><br><span class="line">		node* par = cur;</span><br><span class="line">		<span class="keyword">if</span> (par-&gt;children.<span class="built_in">find</span>(sub) != par-&gt;children.<span class="built_in">end</span>())</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		node* child = <span class="keyword">new</span> node(sub, par);</span><br><span class="line">		par-&gt;children.insert(make_pair(sub, child));</span><br><span class="line"></span><br><span class="line">		<span class="built_in">maintain</span>(cur, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		opeS.push(make_pair(<span class="number">0</span>, child));</span><br><span class="line">		updated = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">remove</span><span class="params">(<span class="built_in">string</span> sub)</span> </span>&#123;</span><br><span class="line">		node* par = cur;</span><br><span class="line">		<span class="built_in">map</span>&lt;<span class="built_in">string</span>, node*&gt;::iterator it = par-&gt;children.<span class="built_in">find</span>(sub);</span><br><span class="line">		<span class="keyword">if</span> (it == par-&gt;children.<span class="built_in">end</span>())</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		node* child = par-&gt;children[sub];</span><br><span class="line"></span><br><span class="line">		par-&gt;children.erase(it);</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">maintain</span>(cur, <span class="number">-1</span> * child-&gt;sz);</span><br><span class="line"></span><br><span class="line">		opeS.push(make_pair(<span class="number">1</span>, child));</span><br><span class="line">		updated = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">enter</span><span class="params">(<span class="built_in">string</span> sub)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (sub == <span class="string">".."</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (cur == root)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			opeS.push(make_pair(<span class="number">2</span>, cur));</span><br><span class="line">			cur = cur-&gt;parent;</span><br><span class="line">			updated = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">map</span>&lt;<span class="built_in">string</span>, node*&gt;::iterator it = cur-&gt;children.<span class="built_in">find</span>(sub);</span><br><span class="line">			<span class="keyword">if</span> (it == cur-&gt;children.<span class="built_in">end</span>())</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">			opeS.push(make_pair(<span class="number">2</span>, cur));</span><br><span class="line">			cur = it-&gt;second;</span><br><span class="line">			updated = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">curSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cur-&gt;sz;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">currOutput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> theSize = cur-&gt;children.<span class="built_in">size</span>();</span><br><span class="line">		<span class="keyword">if</span> (theSize == <span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"EMPTY"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (theSize &gt;= <span class="number">1</span> &amp;&amp; theSize &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="built_in">string</span>, node*&gt;::iterator it = cur-&gt;children.<span class="built_in">begin</span>();</span><br><span class="line">				it != cur-&gt;children.<span class="built_in">end</span>(); ++it)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (theSize &gt; <span class="number">10</span>) &#123;</span><br><span class="line">			<span class="built_in">map</span>&lt;<span class="built_in">string</span>, node*&gt;::iterator it = cur-&gt;children.<span class="built_in">begin</span>();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				it++;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">map</span>&lt;<span class="built_in">string</span>, node*&gt;::iterator itt = cur-&gt;children.<span class="built_in">end</span>();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">				itt--;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; itt-&gt;first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				itt++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">posTra</span><span class="params">(node* curr)</span> </span>&#123;</span><br><span class="line">		posOrder.push_back(curr-&gt;name);</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="built_in">string</span>, node*&gt;::iterator it = curr-&gt;children.<span class="built_in">begin</span>();</span><br><span class="line">			it != curr-&gt;children.<span class="built_in">end</span>(); ++it)</span><br><span class="line">			posTra(it-&gt;second);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (updated || posOrder.empty()) &#123;</span><br><span class="line">			posOrder.<span class="built_in">clear</span>();</span><br><span class="line">			posTra(cur);</span><br><span class="line">		&#125;</span><br><span class="line">		updated = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">int</span> theSize = posOrder.<span class="built_in">size</span>();</span><br><span class="line">		<span class="keyword">if</span> (theSize == <span class="number">1</span>)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"EMPTY"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (theSize &gt; <span class="number">1</span> &amp;&amp; theSize &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != theSize; i++)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; posOrder[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (theSize &gt; <span class="number">10</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; posOrder[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = theSize - <span class="number">5</span>; i != theSize; i++)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; posOrder[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (opeS.empty())</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		updated = <span class="literal">true</span>;</span><br><span class="line">		pair&lt;<span class="keyword">int</span>, node*&gt; pS = opeS.top();</span><br><span class="line">		opeS.pop();</span><br><span class="line">		<span class="keyword">if</span> (pS.first == <span class="number">0</span>) &#123;</span><br><span class="line">			node* dest = pS.second;</span><br><span class="line">			<span class="built_in">map</span>&lt;<span class="built_in">string</span>, node*&gt;::iterator it = cur-&gt;children.<span class="built_in">find</span>(dest-&gt;name);</span><br><span class="line">			<span class="keyword">if</span> (it == cur-&gt;children.<span class="built_in">end</span>())</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">			cur-&gt;children.erase(it);</span><br><span class="line"></span><br><span class="line">			<span class="built_in">maintain</span>(cur, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (pS.first == <span class="number">1</span>) &#123;</span><br><span class="line">			node* dest = pS.second;</span><br><span class="line">			<span class="keyword">if</span> (cur-&gt;children.<span class="built_in">find</span>(dest-&gt;name) != cur-&gt;children.<span class="built_in">end</span>())</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">			cur-&gt;children.insert(make_pair(dest-&gt;name, dest));</span><br><span class="line"></span><br><span class="line">			<span class="built_in">maintain</span>(cur, dest-&gt;sz);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (pS.first == <span class="number">2</span>) &#123;</span><br><span class="line">			cur = pS.second;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		node* p0 = cur;</span><br><span class="line">		<span class="keyword">delete</span> p0;</span><br><span class="line">		node* p1 = root;</span><br><span class="line">		<span class="keyword">delete</span> p1;</span><br><span class="line">		root = <span class="literal">NULL</span>;</span><br><span class="line">		cur = <span class="literal">NULL</span>;</span><br><span class="line">		posOrder.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">while</span> (!opeS.empty())</span><br><span class="line">			opeS.pop();</span><br><span class="line">		p0 = <span class="literal">NULL</span>;</span><br><span class="line">		p1 = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; Cmap;</span><br><span class="line">	Cmap[<span class="string">"MKDIR"</span>] = <span class="number">0</span>;</span><br><span class="line">	Cmap[<span class="string">"RM"</span>] = <span class="number">1</span>;</span><br><span class="line">	Cmap[<span class="string">"CD"</span>] = <span class="number">2</span>;</span><br><span class="line">	Cmap[<span class="string">"SZ"</span>] = <span class="number">3</span>;</span><br><span class="line">	Cmap[<span class="string">"LS"</span>] = <span class="number">4</span>;</span><br><span class="line">	Cmap[<span class="string">"TREE"</span>] = <span class="number">5</span>;</span><br><span class="line">	Cmap[<span class="string">"UNDO"</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">	<span class="keyword">int</span> forEmptyOutput = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (T--) &#123;</span><br><span class="line">		<span class="keyword">if</span> (forEmptyOutput &gt; <span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">int</span> Q;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; Q;</span><br><span class="line">		directory D;</span><br><span class="line">		<span class="keyword">while</span> (Q--) &#123;</span><br><span class="line">			<span class="built_in">string</span> cmder;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; cmder;</span><br><span class="line">			<span class="keyword">switch</span> (Cmap[cmder]) &#123;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">0</span>: &#123; <span class="comment">// make sub directory</span></span><br><span class="line">					<span class="built_in">string</span> s;</span><br><span class="line">					<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">					<span class="keyword">bool</span> result = D.insert(s);</span><br><span class="line">					<span class="keyword">if</span> (result)</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"OK"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="keyword">if</span> (!result)</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">1</span>: &#123; <span class="comment">// delete sub directory</span></span><br><span class="line">					<span class="built_in">string</span> s;</span><br><span class="line">					<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">					<span class="keyword">bool</span> result = D.<span class="built_in">remove</span>(s);</span><br><span class="line">					<span class="keyword">if</span> (result)</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"OK"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="keyword">if</span> (!result)</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">2</span>: &#123; <span class="comment">// enter sub directory s</span></span><br><span class="line">					<span class="built_in">string</span> s;</span><br><span class="line">					<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">					<span class="keyword">bool</span> result = D.enter(s);</span><br><span class="line">					<span class="keyword">if</span> (result)</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"OK"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="keyword">if</span> (!result)</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">3</span>: &#123; <span class="comment">// output temporary size</span></span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; D.curSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">4</span>: &#123; <span class="comment">// output direct sub directory names</span></span><br><span class="line">					D.currOutput();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">5</span>: &#123; <span class="comment">// posTraversal</span></span><br><span class="line">					D.output();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">6</span>: &#123; <span class="comment">// undo MKDIR/RM/CD</span></span><br><span class="line">					<span class="keyword">bool</span> result = D.undo();</span><br><span class="line">					<span class="keyword">if</span> (result)</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"OK"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="keyword">if</span> (!result)</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		forEmptyOutput++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="原题链接🔗"><a href="#原题链接🔗" class="headerlink" title="原题链接🔗"></a><strong>原题链接🔗</strong></h2><p><a href="https://icpcarchive.ecs.baylor.edu/external/78/7843.pdf" target="_blank" rel="noopener">https://icpcarchive.ecs.baylor.edu/external/78/7843.pdf</a></p>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>贪婪算法 选数问题</title>
    <url>/2020/03/06/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95-%E9%80%89%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="选数问题"><a href="#选数问题" class="headerlink" title="选数问题"></a><strong>选数问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given n positive numbers, ZJM can select exactly K of them that sums to S. Now ZJM wonders how many ways to get it!</span><br><span class="line">_______________________________________________________</span><br><span class="line">给出n个正数，选出其中K个，使其总和为S —— 问共有多少种方法？</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The first line, an integer T ≤ 100, indicates the number of test cases. For each case, there are two lines. The first line, three integers indicate n, K and S. The second line, n integers indicate the positive numbers.</span><br><span class="line">Remember that k ≤ n ≤ 16 and all numbers can be stored in 32-bit integer. </span><br><span class="line">_______________________________________________________</span><br><span class="line">第一行，一个整数 T (T ≤ 100), 表示数据组数。</span><br><span class="line">对于每组数据，接下来两行，第一行：3个整数 n, K, S。第二行：n 个正整数。</span><br><span class="line">k ≤ n ≤ 16。所有数都能存在32位寄存器中。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">For each case, an integer indicate the answer in a independent line.</span><br><span class="line">____________________________</span><br><span class="line">对于每组数据，独立一行输出答案。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input: </span><br><span class="line">1</span><br><span class="line">10 3 10</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		3000 ms</span><br><span class="line">Memory limit	262144 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>组合问题。<br>n个选出K个，共有${n \choose K}$种组合，然后从这些组合中选出符合数之和为S的情况即可。<br><del>由于这是A题，暴力求解，不要太在意时间复杂度🙄。</del><br>利用递归，每次枚举一个数加入到<code>res</code>数组中，递归之后由于每次加入的数不同，会产生多个分支。在这些分支上最终生成的数组就是这n个数的所有含有K个元素的子集，对这些子集元素求和判断是否为S即可。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*贪婪算法 每次都把可行的数加入到res数组中，加入的数达到n个后，求和*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">greedy</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> n, <span class="keyword">int</span> K, <span class="keyword">int</span> S, <span class="keyword">int</span> i, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; res)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i == n) &#123;<span class="comment">//总的n个数，已经全部考虑了</span></span><br><span class="line">		<span class="keyword">if</span> (res.<span class="built_in">size</span>() == K) &#123;<span class="comment">//新数组已经达到要求的K个数时</span></span><br><span class="line">			<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != K; j++)</span><br><span class="line">				sum += res.at(j);<span class="comment">//求这些数的和</span></span><br><span class="line">			<span class="keyword">if</span> (sum == S)<span class="comment">//该情况可行 达成目标</span></span><br><span class="line">				total++;<span class="comment">//计数 + 1</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//递归枚举每个数，生成子集</span></span><br><span class="line">	greedy(arr, n, K, S, i + <span class="number">1</span>, res);</span><br><span class="line">	res.push_back(arr[i]);</span><br><span class="line">	greedy(arr, n, K, S, i + <span class="number">1</span>, res);</span><br><span class="line">	res.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; i++) &#123;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span> n, K, S;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; K &gt;&gt; S;<span class="comment">//n个数 选出K个 其和为S</span></span><br><span class="line">		<span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">5</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; arr[j];</span><br><span class="line">		total = <span class="number">0</span>;<span class="comment">//共有total种方案</span></span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">		greedy(arr, n, K, S, <span class="number">0</span>, v);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; total &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>贪婪算法</tag>
      </tags>
  </entry>
  <entry>
    <title>连续寿司</title>
    <url>/2020/05/05/%E8%BF%9E%E7%BB%AD%E5%AF%BF%E5%8F%B8/</url>
    <content><![CDATA[<h1 id="连续寿司"><a href="#连续寿司" class="headerlink" title="连续寿司"></a><strong>连续寿司</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">东东和他的女朋友(幻想的)去寿司店吃晚餐(在梦中)，他发现了一个有趣的事情，这家餐厅提供的 n 个的寿司被连续的放置在桌子上 (有序)，东东可以选择一段连续的寿司来吃</span><br><span class="line"></span><br><span class="line">东东想吃鳗鱼，但是东妹想吃金枪鱼。核 平 起 见，他们想选择一段连续的寿司（这段寿司必须满足金枪鱼的数量等于鳗鱼的数量，且前一半全是一种，后一半全是另外一种）我们用1代表鳗鱼，2代表金枪鱼。</span><br><span class="line"></span><br><span class="line">比如，[2,2,2,1,1,1]这段序列是合法的，[1,2,1,2,1,2]是非法的。因为它不满足第二个要求。</span><br><span class="line"></span><br><span class="line">东东希望你能帮助他找到最长的一段合法寿司，以便自己能吃饱。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行：一个整数n（2 ≤ n ≤ 100000），寿司序列的长度。</span><br><span class="line">第二行：n 个整数（每个整数不是 1 就是 2，意义如上所述）</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个整数（代表东东可以选择的最长的一段连续的且合法的寿司）</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">7</span><br><span class="line">2 2 2 1 1 2 2</span><br><span class="line">Output: </span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">6</span><br><span class="line">1 2 1 2 1 2</span><br><span class="line">Output: </span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">9</span><br><span class="line">2 2 1 1 1 2 2 2 2</span><br><span class="line">Output: </span><br><span class="line">6</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>用一个双向队列来维护。</p>
<p>若队空或元素与队尾相同，或者元素与队首不同，则入队。</p>
<p>否则，遇到了元素与队尾不同的情况，即类似于<code>AABBB</code>此时加入<code>A</code>，则需要把队首的所有<code>A</code>弹出，保证序列只能为<code>多个A-多个B</code>或<code>多个B-多个A</code>。此时，需要计算原队列<code>A-B</code>长度，取min，再把这个min与答案取max。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>* arr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (q.empty() || (!q.empty() &amp;&amp; arr[i] == q.back())</span><br><span class="line">			|| (!q.empty() &amp;&amp; q.front() != arr[i])) &#123;</span><br><span class="line">			q.push_back(arr[i]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!q.empty() &amp;&amp; q.back() != arr[i]) &#123;</span><br><span class="line">			<span class="keyword">int</span> x = q.front();</span><br><span class="line">			<span class="keyword">int</span> c0 = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (q.front() == x) &#123;</span><br><span class="line">				q.pop_front();</span><br><span class="line">				c0++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">int</span> c1 = q.<span class="built_in">size</span>();</span><br><span class="line">			res = <span class="built_in">max</span>(res, <span class="number">2</span> * <span class="built_in">min</span>(c0, c1));</span><br><span class="line">			q.push_back(arr[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!q.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> x = q.front();</span><br><span class="line">		<span class="keyword">int</span> c0 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (q.front() == x) &#123;</span><br><span class="line">			q.pop_front();</span><br><span class="line">			c0++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> c1 = q.<span class="built_in">size</span>();</span><br><span class="line">		res = <span class="built_in">max</span>(res, <span class="number">2</span> * <span class="built_in">min</span>(c0, c1));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n).eof()) &#123;</span><br><span class="line">		<span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">		<span class="keyword">int</span> ans = solve(n, arr);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
  </entry>
  <entry>
    <title>还原魔方-二阶</title>
    <url>/2020/04/22/%E8%BF%98%E5%8E%9F%E9%AD%94%E6%96%B9-%E4%BA%8C%E9%98%B6/</url>
    <content><![CDATA[<h1 id="还原魔方-二阶"><a href="#还原魔方-二阶" class="headerlink" title="还原魔方 - 二阶"></a><strong>还原魔方 - 二阶</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有一个二阶魔方，即 2×2×2 的一个立方体组。立方体由八个角组成。</span><br><span class="line">魔方的每一块都用三维坐标(h, k, l)标记，其中 h, k, l∈&#123;0,1&#125;。六个面的每一个都有四个小面，每个小面都有一个正整数。</span><br><span class="line">对于每一步，可以选择一个特定的面，并把此面顺时针或逆时针转90度。</span><br><span class="line">请你判断，是否可以在一个步骤还原这个魔方。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入的第一行包含一个整数N（N ≤ 30），这是测试用例的数量。</span><br><span class="line">对于每个测试用例， 第 1~4 个数描述魔方的顶面，这是常见的2×2面，由（0，0，1），（0，1，1），（1，0，1），（1，1，1）标记。四个整数对应于上述部分。</span><br><span class="line"></span><br><span class="line">第 5~8 个数描述前面，即（1，0，1），（1，1，1），（1，0，0），（1，1，0）的公共面。四个整数 与上述各部分相对应。</span><br><span class="line"></span><br><span class="line">第 9~12 个数描述底面，即（1，0，0），（1，1，0），（0，0，0），（0，1，0）的公共面。四个整数与上述各部分相对应。</span><br><span class="line"></span><br><span class="line">第 13~16 个数描述背面，即（0，0，0），（0，1，0），（0，0，1），（0，1），（0，1，1）的公共面。四个整数与上述各部分相对应。</span><br><span class="line"></span><br><span class="line">第 17~20 个数描述左面，即（0，0，0），（0，0，1），（1，0，0），（1，0，1）的公共面。给出四个整数与上述各部分相对应。</span><br><span class="line"></span><br><span class="line">第 21~24 个数描述了右面，即（0，1，1），（0，1，0），（1，1，1），（1，1，0）的公共面。给出四个整数与上述各部分相对应。</span><br><span class="line"></span><br><span class="line">换句话说，每个测试用例包含24个整数a、b、c到x。你可以展开表面以获得平面图, 如下所示。</span><br><span class="line">+ - + - + - + - + - + - +</span><br><span class="line">| q | r | a | b | u | v |</span><br><span class="line">+ - + - + - + - + - + - +</span><br><span class="line">| s | t | c | d | w | x |</span><br><span class="line">+ - + - + - + - + - + - +</span><br><span class="line">        | e | f |</span><br><span class="line">        + - + - +</span><br><span class="line">        | g | h |</span><br><span class="line">        + - + - +</span><br><span class="line">        | i | j |</span><br><span class="line">        + - + - +</span><br><span class="line">        | k | l |</span><br><span class="line">        + - + - +</span><br><span class="line">        | m | n |</span><br><span class="line">        + - + - +</span><br><span class="line">        | o | p |</span><br><span class="line">        + - + - +</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每个测试用例，魔方如果可以 &quot;只转一步&quot; 恢复，输出YES，则输出NO。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">4</span><br><span class="line">1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5 6 6 6 6</span><br><span class="line">6 6 6 6 1 1 1 1 2 2 2 2 3 3 3 3 5 5 5 5 4 4 4 4</span><br><span class="line">1 4 1 4 2 1 2 1 3 2 3 2 4 3 4 3 5 5 5 5 6 6 6 6</span><br><span class="line">1 3 1 3 2 4 2 4 3 1 3 1 4 2 4 2 5 5 5 5 6 6 6 6</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    65536 kb</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>二阶的，而且只需要转一次或不转，相比三阶还算是比较好做。折出一个魔方，观察每一转的字母，可以分割成6转：</p>
<p><img src="https://i.loli.net/2020/06/11/9hGluczn15HAOU7.png" alt="cube1.png"></p>
<p>即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a c e g i k m o</span><br><span class="line">b d f h j l n p</span><br><span class="line">l k q r a b u v</span><br><span class="line">j i s t c d w x</span><br><span class="line">r t e f w u p o</span><br><span class="line">q s g h x v n m</span><br></pre></td></tr></table></figure>
<p>录入的时候把这6个数组都录入，由于最多旋转一次，所以无需担心旋转的时候由于一个数组的改变而影响其他数组。</p>
<p>旋转只需判断顺时针(+2)%8，逆时针(+6)%8，或者不转，判断各面颜色即可。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">sameC</span><span class="params">(<span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">8</span>])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> sam[<span class="number">3</span>][<span class="number">8</span>] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (arr[<span class="number">0</span>][i] == arr[<span class="number">1</span>][i])</span><br><span class="line">			sam[<span class="number">0</span>][i] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (arr[<span class="number">0</span>][i] == arr[<span class="number">1</span>][(i + <span class="number">2</span>) % <span class="number">8</span>])</span><br><span class="line">			sam[<span class="number">1</span>][i] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (arr[<span class="number">0</span>][i] == arr[<span class="number">1</span>][(i + <span class="number">6</span>) % <span class="number">8</span>])</span><br><span class="line">			sam[<span class="number">2</span>][i] = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> sam2[<span class="number">3</span>] = &#123; <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">			<span class="keyword">if</span> (!sam[i][j])</span><br><span class="line">				sam2[i] = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (sam2[<span class="number">0</span>] || sam2[<span class="number">1</span>] || sam2[<span class="number">2</span>])</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>* data)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1: a c e g i k m o;   b d f h j l n p</span></span><br><span class="line">	<span class="comment">//2: l k q r a b u v;   j i s t c d w x</span></span><br><span class="line">	<span class="comment">//3: r t e f w u p o;   q s g h x v n m</span></span><br><span class="line">	<span class="keyword">int</span> c1[<span class="number">2</span>][<span class="number">8</span>] = &#123; &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>&#125;, &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>&#125; &#125;;</span><br><span class="line">	<span class="keyword">int</span> c2[<span class="number">2</span>][<span class="number">8</span>] = &#123; &#123;<span class="number">11</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">21</span>&#125;, &#123;<span class="number">9</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">23</span>&#125; &#125;;</span><br><span class="line">	<span class="keyword">int</span> c3[<span class="number">2</span>][<span class="number">8</span>] = &#123; &#123;<span class="number">17</span>, <span class="number">19</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">22</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">14</span>&#125;, &#123;<span class="number">16</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">12</span>&#125; &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">			c1[i][j] = data[c1[i][j]];</span><br><span class="line">			c2[i][j] = data[c2[i][j]];</span><br><span class="line">			c3[i][j] = data[c3[i][j]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> sameColor = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (sameC(c1) &amp;&amp; sameC(c2) &amp;&amp; sameC(c3))</span><br><span class="line">		sameColor = <span class="literal">true</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> sameColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> N;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">	<span class="keyword">while</span> (N--) &#123;</span><br><span class="line">		<span class="keyword">int</span> data[<span class="number">26</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; data[i];</span><br><span class="line">		<span class="keyword">bool</span> res = solve(data);</span><br><span class="line">		<span class="keyword">if</span> (res)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="原题链接🔗"><a href="#原题链接🔗" class="headerlink" title="原题链接🔗"></a>原题链接🔗</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5983" target="_blank" rel="noopener">Pocket Cube</a></p>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>魔方</tag>
      </tags>
  </entry>
  <entry>
    <title>路径解析</title>
    <url>/2020/04/03/%E8%B7%AF%E5%BE%84%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="路径解析"><a href="#路径解析" class="headerlink" title="路径解析"></a><strong>路径解析</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在操作系统中，数据通常以文件的形式存储在文件系统中。文件系统一般采用层次化的组织形式，由目录（或者文件夹）和文件构成，形成一棵树的形状。文件有内容，用于存储数据。目录是容器，可包含文件或其他目录。同一个目录下的所有文件和目录的名字各不相同，不同目录下可以有名字相同的文件或目录。</span><br><span class="line">　　为了指定文件系统中的某个文件，需要用路径来定位。在类 Unix 系统（Linux、Max OS X、FreeBSD等）中，路径由若干部分构成，每个部分是一个目录或者文件的名字，相邻两个部分之间用 &#x2F; 符号分隔。</span><br><span class="line">　　有一个特殊的目录被称为根目录，是整个文件系统形成的这棵树的根节点，用一个单独的 &#x2F; 符号表示。在操作系统中，有当前目录的概念，表示用户目前正在工作的目录。根据出发点可以把路径分为两类：</span><br><span class="line">　　 绝对路径：以 &#x2F; 符号开头，表示从根目录开始构建的路径。</span><br><span class="line">　　 相对路径：不以 &#x2F; 符号开头，表示从当前目录开始构建的路径。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    例如，有一个文件系统的结构如下图所示。在这个文件系统中，有根目录 &#x2F; 和其他普通目录 d1、d2、d3、d4，以及文件 f1、f2、f3、f1、f4。其中，两个 f1 是同名文件，但在不同的目录下。</span><br><span class="line">&#x2F; -+- d1 -+- f1</span><br><span class="line">   |      \- f2</span><br><span class="line">   |</span><br><span class="line">   \- d2 -+- d3 --- f3</span><br><span class="line">          |</span><br><span class="line">          +- d4 --- f1</span><br><span class="line">          |</span><br><span class="line">          \- f4</span><br><span class="line">　　对于 d4 目录下的 f1 文件，可以用绝对路径 &#x2F;d2&#x2F;d4&#x2F;f1 来指定。如果当前目录是 &#x2F;d2&#x2F;d3，这个文件也可以用相对路径 ..&#x2F;d4&#x2F;f1 来指定，这里 .. 表示上一级目录（注意，根目录的上一级目录是它本身）。还有 . 表示本目录，例如 &#x2F;d1&#x2F;.&#x2F;f1 指定的就是 &#x2F;d1&#x2F;f1。注意，如果有多个连续的 &#x2F; 出现，其效果等同于一个 &#x2F;，例如 &#x2F;d1&#x2F;&#x2F;&#x2F;f1 指定的也是 &#x2F;d1&#x2F;f1。</span><br><span class="line">　　本题会给出一些路径，要求对于每个路径，给出正规化以后的形式。一个路径经过正规化操作后，其指定的文件不变，但是会变成一个不包含 . 和 .. 的绝对路径，且不包含连续多个 &#x2F; 符号。如果一个路径以 &#x2F; 结尾，那么它代表的一定是一个目录，正规化操作要去掉结尾的 &#x2F;。若这个路径代表根目录，则正规化操作的结果是 &#x2F;。若路径为空字符串，则正规化操作的结果是当前目录。</span><br></pre></td></tr></table></figure>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行包含一个整数 P，表示需要进行正规化操作的路径个数。</span><br><span class="line">第二行包含一个字符串，表示当前目录。</span><br><span class="line">以下 P 行，每行包含一个字符串，表示需要进行正规化操作的路径。</span><br><span class="line"></span><br><span class="line">1 ≤ P ≤ 10。</span><br><span class="line">文件和目录的名字只包含大小写字母、数字和小数点 .、减号 - 以及下划线 _。</span><br><span class="line">不会有文件或目录的名字是 . 或 .. ，它们具有题目描述中给出的特殊含义。</span><br><span class="line">输入的所有路径每个长度不超过 1000 个字符。</span><br><span class="line">输入的当前目录保证是一个经过正规化操作后的路径。</span><br><span class="line">对于前 30% 的测试用例，需要正规化的路径的组成部分不包含 . 和 .. 。</span><br><span class="line">对于前 60% 的测试用例，需要正规化的路径都是绝对路径。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">共 P 行，每行一个字符串，表示经过正规化操作后的路径，顺序与输入对应。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input: </span><br><span class="line">7</span><br><span class="line">&#x2F;d2&#x2F;d3</span><br><span class="line">&#x2F;d2&#x2F;d4&#x2F;f1</span><br><span class="line">..&#x2F;d4&#x2F;f1</span><br><span class="line">&#x2F;d1&#x2F;.&#x2F;f1</span><br><span class="line">&#x2F;d1&#x2F;&#x2F;&#x2F;f1</span><br><span class="line">&#x2F;d1&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#x2F;</span><br><span class="line">&#x2F;d1&#x2F;..&#x2F;..&#x2F;d2</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">&#x2F;d2&#x2F;d4&#x2F;f1</span><br><span class="line">&#x2F;d2&#x2F;d4&#x2F;f1</span><br><span class="line">&#x2F;d1&#x2F;f1</span><br><span class="line">&#x2F;d1&#x2F;f1</span><br><span class="line">&#x2F;d1</span><br><span class="line">&#x2F;</span><br><span class="line">&#x2F;d2</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	262144 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>题目很长，但是只要提取出以下关键点即可: </p>
<ol>
<li><code>/</code> 表示根目录</li>
<li><strong>绝对路径</strong>以 <code>/</code> 符号开头，表示从<strong>根目录</strong>开始构建的路径。</li>
<li><strong>相对路径</strong>不以 <code>/</code> 符号开头，表示从<strong>当前目录</strong>开始构建的路径。</li>
<li><code>..</code> 表示上一级目录，根目录的上一级目录是它<strong>本身</strong></li>
<li><code>/d1/./f1</code> = <code>/d1/f1</code>，即<code>/./</code> = <code>/</code></li>
<li><code>/d1///f1</code> = <code>/d1/f1</code>，即<code>/// = /</code></li>
<li>路径以 <code>/</code> 结尾，那么它代表的一定是一个目录，正规化操作要去掉结尾的 <code>/</code></li>
<li>若这个路径代表根目录，则正规化操作的结果是 <code>/</code></li>
<li>若路径为空字符串，则正规化操作的结果是当前目录</li>
<li>文件和目录的名字只包含大小写字母、数字和小数点 <code>.</code>、减号 <code>-</code> 以及下划线 <code>_</code>。</li>
<li>不会有文件或目录的名字是 <code>.</code> 或 <code>..</code> ，它们具有题目描述中给出的特殊含义。</li>
</ol>
<p>先是处理绝对路径与相对路径的问题：相对路径不以<code>/</code>开头，所以可以把相对路径变成绝对路径，即把当前路径加在相对路径前，就变成了绝对路径，接下来就变成了处理绝对路径的问题。</p>
<p>首先是处理多个<code>/</code>的问题，可以利用<code>/</code>将字符串分隔成多个目录或文件，储存到数组中，最后输出时再把数组元素前加上<code>/</code>即可。</p>
<p>然后就是处理<code>.</code>跟<code>..</code>，由于前面已经把<code>/</code>去除，结果所有字串存在数组里，接下来只要去除<code>..</code>跟上级目录、去除<code>.</code>就行。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> root, <span class="built_in">string</span> a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a[<span class="number">0</span>] != <span class="string">'/'</span>)</span><br><span class="line">		a = root + <span class="string">'/'</span> + a;<span class="comment">//相对路径变成绝对路径</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line">	<span class="built_in">string</span> temp = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">bool</span> found = <span class="literal">true</span>;<span class="comment">//标记是否遇到 '/', 便于处理以 '/' 结尾</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] == <span class="string">'/'</span> || i == a.<span class="built_in">size</span>()) &#123;<span class="comment">//遇到了 '/' 或到头了</span></span><br><span class="line">			<span class="keyword">if</span> (found == <span class="literal">false</span>) &#123;<span class="comment">// 不是连续出现的 '/'</span></span><br><span class="line">				found = <span class="literal">true</span>;</span><br><span class="line">				v.push_back(temp);</span><br><span class="line">				temp.<span class="built_in">clear</span>();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="comment">//没遇到 '/' 就一路通行，将字符一个一个加入temp</span></span><br><span class="line">			found = <span class="literal">false</span>;</span><br><span class="line">			temp += a[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>();) &#123;</span><br><span class="line">		<span class="keyword">if</span> (v[i] == <span class="string">".."</span>) &#123;<span class="comment">//遇到了 '..'</span></span><br><span class="line">			<span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;<span class="comment">//擦除 '..' 和上级</span></span><br><span class="line">				i--;</span><br><span class="line">				v.erase(v.<span class="built_in">begin</span>() + i);</span><br><span class="line">				v.erase(v.<span class="built_in">begin</span>() + i);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				v.erase(v.<span class="built_in">begin</span>() + i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (v[i] == <span class="string">"."</span>)<span class="comment">//遇到了一个'.'</span></span><br><span class="line">			v.erase(v.<span class="built_in">begin</span>() + i);<span class="comment">//直接去掉</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			i++;<span class="comment">//指针前进</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">if</span> (v.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">		res = <span class="string">"/"</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			res += <span class="string">"/"</span>;</span><br><span class="line">			res+= v[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> p;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">	<span class="built_in">string</span> curr;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; curr;</span><br><span class="line">	<span class="built_in">cin</span>.ignore();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != p; i++) &#123;</span><br><span class="line">		<span class="built_in">string</span> a;</span><br><span class="line">		getline(<span class="built_in">cin</span>, a);</span><br><span class="line">		<span class="built_in">string</span> b = convert(curr, a);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>迷宫问题 广度优先搜索</title>
    <url>/2020/03/05/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="迷宫问题-广度优先搜索"><a href="#迷宫问题-广度优先搜索" class="headerlink" title="迷宫问题: 广度优先搜索"></a><strong>迷宫问题: 广度优先搜索</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">东东有一张地图，想通过地图找到妹纸。地图显示，0表示可以走，1表示不可以走，左上角是入口，右下角是妹纸，这两个位置保证为0。既然已经知道了地图，那么东东找到妹纸就不难了，请你编一个程序，写出东东找到妹纸的最短路线。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入是一个5 × 5的二维数组，仅由0、1两数字组成，表示法阵地图。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出若干行，表示从左上角到右下角的最短路径依次经过的坐标，格式如样例所示。数据保证有唯一解。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input: </span><br><span class="line">0 1 0 0 0</span><br><span class="line">0 1 0 1 0</span><br><span class="line">0 1 0 1 0</span><br><span class="line">0 0 0 1 0</span><br><span class="line">0 1 0 1 0</span><br><span class="line"></span><br><span class="line">output: </span><br><span class="line">(0, 0)</span><br><span class="line">(1, 0)</span><br><span class="line">(2, 0)</span><br><span class="line">(3, 0)</span><br><span class="line">(3, 1)</span><br><span class="line">(3, 2)</span><br><span class="line">(2, 2)</span><br><span class="line">(1, 2)</span><br><span class="line">(0, 2)</span><br><span class="line">(0, 3)</span><br><span class="line">(0, 4)</span><br><span class="line">(1, 4)</span><br><span class="line">(2, 4)</span><br><span class="line">(3, 4)</span><br><span class="line">(4, 4)</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>广度优先搜索(BFS)：<br>从起始点开始遍历，先从相邻的点找起，如果可行，则加入生成的路径，同时已经加入的点不会再次访问。比如题中样例，BFS生成的路径用2表示，则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 1 0 0 0				2 1 2 2 2</span><br><span class="line">0 1 0 1 0				2 1 2 1 2</span><br><span class="line">0 1 0 1 0		→		2 1 2 1 2</span><br><span class="line">0 0 0 1 0				2 2 2 1 2</span><br><span class="line">0 1 0 1 0				0 1 2 1 2</span><br></pre></td></tr></table></figure>
<p>再比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 1 0 0 0				2 1 2 2 2</span><br><span class="line">0 1 0 1 0				2 1 2 1 2</span><br><span class="line">0 0 0 1 0		→		2 2 2 1 2</span><br><span class="line">0 1 0 1 1				0 1 2 1 1</span><br><span class="line">0 1 0 0 0				0 1 2 2 2</span><br></pre></td></tr></table></figure>
<p>同时这也产生了一个问题：没必要走的点加入了路径中！广搜产生的分支好比一棵树的枝干的枝杈，主枝一直往前延申直到终点，但分支也随之产生去探寻分支的终点，直到某个枝杈到达了目标终点，才能分辨出谁是主枝，剩下的才是分支。</p>
<p>所以通过终点，往回退，避开产生的分支，最后走回起点，这样就生成了最终路径。</p>
<p>详见代码。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*点的结构体  表示(x, y)坐标*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> x, y;</span><br><span class="line">	<span class="keyword">int</span> dis;<span class="comment">//用于记录原点到当前点路径上的距离</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*用于上下左右移动*/</span></span><br><span class="line"><span class="keyword">int</span> dx[] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> reach[<span class="number">5</span>][<span class="number">5</span>];<span class="comment">//标记到达的数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">point</span>&gt; path;<span class="comment">//生成路径</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">neighbour</span><span class="params">(<span class="built_in">point</span> a, <span class="built_in">point</span> b)</span> </span>&#123;<span class="comment">//判断两点是否相邻(上、下、左、右)</span></span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">abs</span>(a.x - b.x) == <span class="number">1</span> &amp;&amp; a.y == b.y) || (<span class="built_in">abs</span>(a.y - b.y) == <span class="number">1</span> &amp;&amp; a.x == b.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> maze[<span class="number">5</span>][<span class="number">5</span>])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化点坐标</span></span><br><span class="line">	<span class="built_in">point</span> dot;</span><br><span class="line">	dot.x = <span class="number">0</span>;</span><br><span class="line">	dot.y = <span class="number">0</span>;</span><br><span class="line">	dot.dis = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="built_in">point</span>&gt; q;<span class="comment">//队列 用于记录走过的点与下一可行点 保证先进先出</span></span><br><span class="line">	q.push(dot);<span class="comment">//起点(0, 0)开始，入队</span></span><br><span class="line">	reach[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//(0, 0)已走过</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">		<span class="built_in">point</span> curr = q.front();<span class="comment">//从队首取点，保证先进先出</span></span><br><span class="line">		path.push_back(curr);<span class="comment">//点可行 记入生成路径</span></span><br><span class="line">		q.pop();<span class="comment">//取走后就要出队</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;<span class="comment">//从取走的点开始上下左右判断可不可以走</span></span><br><span class="line">			<span class="keyword">int</span> x = curr.x + dx[i];</span><br><span class="line">			<span class="keyword">int</span> y = curr.y + dy[i];</span><br><span class="line">			<span class="comment">/*若在图边界内 且 非墙 且 还没走*/</span></span><br><span class="line">			<span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; <span class="number">5</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; <span class="number">5</span></span><br><span class="line">				&amp;&amp; maze[x][y] != <span class="number">1</span> &amp;&amp; reach[x][y] != <span class="number">1</span>) &#123;</span><br><span class="line">				reach[x][y] = <span class="number">1</span>;<span class="comment">//reached</span></span><br><span class="line">				curr.x = x, curr.y = y;</span><br><span class="line">				curr.dis++;</span><br><span class="line">				q.push(curr);<span class="comment">//可行 入队</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> maze[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; maze[i][j];<span class="comment">//录入迷宫</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">			reach[i][j] = <span class="number">0</span>;<span class="comment">//初始化所有点未到达</span></span><br><span class="line"></span><br><span class="line">	bfs(maze);<span class="comment">//生成路径</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">end</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != path.<span class="built_in">size</span>(); ++i)<span class="comment">//从生成路径中寻找终点的位置</span></span><br><span class="line">		<span class="keyword">if</span> (path.at(i).x == <span class="number">4</span> &amp;&amp; path.at(i).y == <span class="number">4</span>)</span><br><span class="line">			<span class="built_in">end</span> = i;<span class="comment">//是终点</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">end</span> != path.<span class="built_in">size</span>() - <span class="number">1</span>)<span class="comment">//如果终点不是生成路径的最后一个点的话</span></span><br><span class="line">		path.erase(path.<span class="built_in">begin</span>() + <span class="built_in">end</span> + <span class="number">1</span>, path.<span class="built_in">end</span>());<span class="comment">//后面的分支就可以移除了</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">/*从终点开始往前找路径*/</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = path.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!neighbour(path.at(i), path.at(i - <span class="number">1</span>)) ||</span><br><span class="line">			(path.at(i).dis - path.at(i - <span class="number">1</span>).dis != <span class="number">1</span>))</span><br><span class="line">         <span class="comment">/* 若前后的点非相邻点 或相邻两点距原点的路径距离差非1 */</span></span><br><span class="line">			path.erase(path.<span class="built_in">begin</span>() + i - <span class="number">1</span>);<span class="comment">//这个点可删除</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != path.<span class="built_in">size</span>(); ++i)<span class="comment">//输出</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; path.at(i).x &lt;&lt; <span class="string">", "</span> &lt;&lt; path.at(i).y &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>预测胜负</title>
    <url>/2020/04/06/%E9%A2%84%E6%B5%8B%E8%83%9C%E8%B4%9F/</url>
    <content><![CDATA[<h1 id="预测胜负"><a href="#预测胜负" class="headerlink" title="预测胜负"></a><strong>预测胜负</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">N 个人玩一个游戏，每两个人都要进行一场比赛。</span><br><span class="line">已知 M 个胜负关系，每个关系为 A B，表示 A 比 B 强， 胜负关系具有传递性。</span><br><span class="line">试问有多少场比赛的胜负无法预先得知？</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行给出数据组数。</span><br><span class="line">每组数据第一行给出 N 和 M（1 ≤ N, M ≤ 500）。</span><br><span class="line">接下来 M 行，每行给出 A B，表示 A 可以胜过 B。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每一组数据，判断有多少场比赛的胜负不能预先得知。</span><br><span class="line">注意 (a, b) 与 (b, a) 等价，即每一个二元组只被计算一次。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">3</span><br><span class="line">3 3</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">3 2</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">4 2</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br><span class="line">Output: </span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	32768 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>Floyd算法：用于寻找加权图中顶点间最短路径的算法。在 n × n 的矩阵 <code>M</code> 中，<code>M[i][j]</code>表示顶点<code>i</code>到顶点<code>j</code>的距离，然后对矩阵进行 <code>n</code> 次更新，第 <code>k</code> 次更新时，如果<code>M[i][j]</code> &gt; <code>M[i][k] + M[k][j]</code>，则更新为<code>M[i][k] + M[k][j]</code>。</p>
<p>本题可用二维数组来表示每个人之间的胜负关系，初始时值为0，表示关系不明。<br>由于胜负关系具有传递性，比如a &gt; b, b &gt; c, 则 a &gt; c，因此可用Floyd算法更新任意两人之间的胜负关系：<br>若<code>arr[a][b] = 1</code>，则a胜b；<br>若<code>arr[a][b] = 0</code>，则a与b胜负关系不明；<br>若<code>arr[a][b] = 1</code>且<code>arr[b][c] = 1</code>，则<code>arr[a][c] = 1</code>；<br>若<code>arr[a][b] = 0</code>且<code>arr[b][a] = 0</code>，则a与b的胜负关系无法预先判断。</p>
<p>所以最后确定多少场无法预知结果的比赛，只需计算<code>arr[a][b] = 0 &amp;&amp; arr[b][a] == 0 &amp;&amp; a != b</code>的个数，结果再除以2即可。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">505</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i0 = <span class="number">0</span>; i0 &lt; t; i0++) &#123;</span><br><span class="line">		<span class="keyword">int</span> n, m;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> arr[maxN][maxN] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> a, b;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">			arr[a][b] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// Floyd 算法</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">				<span class="keyword">if</span> (arr[j][i] == <span class="number">1</span>)<span class="comment">//已知道了两人关系 再进行更新第三人</span></span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">						<span class="keyword">if</span> (arr[i][k] == <span class="number">1</span>)</span><br><span class="line">							arr[j][k] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">				<span class="keyword">if</span> (i != j &amp;&amp; arr[i][j] == <span class="number">0</span> &amp;&amp; arr[j][i] == <span class="number">0</span>)</span><br><span class="line">					count++;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; count / <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// i 求了一遍，j 又求了一遍，所以要减半</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>Floyd</tag>
      </tags>
  </entry>
  <entry>
    <title>预测名次</title>
    <url>/2020/04/15/%E9%A2%84%E6%B5%8B%E5%90%8D%E6%AC%A1/</url>
    <content><![CDATA[<h1 id="猫猫比赛-预测名次"><a href="#猫猫比赛-预测名次" class="headerlink" title="猫猫比赛-预测名次"></a><strong>猫猫比赛-预测名次</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一共有 N 只猫猫，编号依次为1, 2, 3, …, N 进行比赛，求字典序最小的名次序列。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入有若干组，每组中的第一行为二个数 N (1 ≤ N ≤ 500), M；其中 N 表示猫猫的个数，M 表示接着有 M 行的输入数据。接下来的 M 行数据中，每行也有两个整数 P1, P2 表示即编号为 P1 的猫猫赢了编号为 P2 的猫猫。</span><br></pre></td></tr></table></figure>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给出一个符合要求的排名。输出时猫猫的编号之间有空格，最后一名后面没有空格!</span><br><span class="line"></span><br><span class="line">其他说明：符合条件的排名可能不是唯一的，此时要求输出时编号小的队伍在前；输入数据保证是正确的，即输入数据确保一定能有一个符合要求的排名。</span><br></pre></td></tr></table></figure>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">4 3</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">4 3</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">1 2 4 3</span><br></pre></td></tr></table></figure>
<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit		1000 ms</span><br><span class="line">Memory limit	32768 kB</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>比赛问题，若A胜B，A胜C，B胜C，则A的名次在B、C的前面，B的名次在C的前面，可以构成有向无环图，因此可以使用拓扑排序。</p>
<p>集合<code>U</code>为点集，每次选出入度为零的点<code>s</code>，加入结果集合<code>S</code>中，并从<code>U</code>中删除<code>s</code>，并修改<code>s</code>指向的点的入度，以此循环，直至<code>U</code>为空。</p>
<p>由于每次选的入度为零的点有多个，本题要求以字典序输出，因此可用优先级队列储存每次选取的入度为零的点，然后进行BFS，遍历全图。</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> ele;</span><br><span class="line">	node* next;</span><br><span class="line">	node() &#123; ele = <span class="number">-1</span>; next = <span class="literal">NULL</span>; &#125;</span><br><span class="line">	node(<span class="keyword">int</span> e) :ele(e) &#123; next = <span class="literal">NULL</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedList</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	node* header;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	linkedList() &#123; header = <span class="literal">NULL</span>; <span class="built_in">size</span> = <span class="number">0</span>; &#125;</span><br><span class="line">	~linkedList() &#123; <span class="built_in">clear</span>(); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size</span>; &#125;</span><br><span class="line">	<span class="function">node* <span class="title">getHeader</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> header; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> ele)</span> </span>&#123;</span><br><span class="line">		node* p = <span class="keyword">new</span> node(ele);</span><br><span class="line">		<span class="keyword">if</span> (header == <span class="literal">NULL</span>)</span><br><span class="line">			header = p;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			node* temp = header;</span><br><span class="line">			node* temp2 = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">				temp2 = temp;</span><br><span class="line">				temp = temp-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			temp2-&gt;next = p;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">size</span>++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		node* temp = header;</span><br><span class="line">		node* ttemp = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			ttemp = temp;</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">			ttemp = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		header = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">delete</span> temp;</span><br><span class="line">		<span class="keyword">delete</span> ttemp;</span><br><span class="line">		<span class="keyword">delete</span> header;</span><br><span class="line">		<span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">510</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">graph</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	linkedList arr[maxN];</span><br><span class="line">	<span class="keyword">int</span> inDeg[maxN];</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	graph() &#123; <span class="built_in">size</span> = <span class="number">0</span>; &#125;</span><br><span class="line">	graph(<span class="keyword">int</span> n) &#123; <span class="built_in">size</span> = n; setIN(); &#125;</span><br><span class="line">	~graph() &#123;  &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setIN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">size</span>; i++)</span><br><span class="line">			inDeg[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p1, <span class="keyword">int</span> p2)</span> </span>&#123;</span><br><span class="line">		arr[p1].add(p2);</span><br><span class="line">		inDeg[p2]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">topoSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">size</span>; i++)</span><br><span class="line">			<span class="keyword">if</span> (inDeg[i] == <span class="number">0</span>)</span><br><span class="line">				q.push(i);<span class="comment">//所有入度为零的点入队</span></span><br><span class="line">		<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> x = q.top();<span class="comment">//选出队首元素 开始遍历</span></span><br><span class="line">			q.pop();</span><br><span class="line">			ans.push_back(x);</span><br><span class="line">			<span class="keyword">for</span> (node* p = arr[x].getHeader(); p != <span class="literal">NULL</span>; p = p-&gt;next) &#123;</span><br><span class="line">				<span class="keyword">int</span> ele = p-&gt;ele;</span><br><span class="line">				inDeg[ele]--;<span class="comment">//与之相邻的点入度 -1</span></span><br><span class="line">				<span class="keyword">if</span> (inDeg[ele] == <span class="number">0</span>)<span class="comment">//入度为零 可入队</span></span><br><span class="line">					q.push(ele);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m).eof()) &#123;</span><br><span class="line">		<span class="function">graph <span class="title">G</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> p1, p2;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; p1 &gt;&gt; p2;</span><br><span class="line">			G.add(p1, p2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = G.topoSort();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>() - <span class="number">1</span>; i++)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; v[v.<span class="built_in">size</span>() - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程设</category>
      </categories>
      <tags>
        <tag>拓扑排序</tag>
      </tags>
  </entry>
</search>
