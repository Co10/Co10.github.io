<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荒芜知地</title>
  
  <subtitle>Knowhere</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="co10.github.io/"/>
  <updated>2020-06-12T00:46:40.455Z</updated>
  <id>co10.github.io/</id>
  
  <author>
    <name>K</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>201809-3-元素选择器</title>
    <link href="co10.github.io/2020/06/08/201809-3-%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>co10.github.io/2020/06/08/201809-3-%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8/</id>
    <published>2020-06-08T09:23:53.000Z</published>
    <updated>2020-06-12T00:46:40.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a><strong>元素选择器</strong></h1><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a><strong>问题背景</strong></h2><p>层叠样式表 (Cascading Style Sheets, 缩写 CSS) 是一种用来为结构化文档 (如 HTML 文档) 添加样式 (字体、间距和颜色等) 的计算机语言。例如，对于以下的 HTML 文档：</p><a id="more"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"Subtitle"</span>&gt;</span>Greetings<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配合以下 CSS 片段可以为其中的标题和段落设置相应的格式：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-weight</span>: bold; &#125;</span><br><span class="line"><span class="selector-id">#subtitle</span> &#123; <span class="attribute">font-size</span>: <span class="number">12px</span>; &#125;</span><br></pre></td></tr></table></figure><p>这段 CSS 片段为前面 HTML 文档添加了样式，使得标题 “Hello” 具有粗体，使得段落 “Greetings” 具有 12 个像素的字体大小。这里，CSS 片段第 1 行中出现的 <code>h1</code> 是一个选择器，它选中了 HTML 文档第 6 行的 <code>h1</code> 元素。CSS片段第 2 行中出现的 <code>#subtitle</code> 也是一个选择器，选中了 HTML 文档第 7 行 <code>id</code> 属性为 <code>subtitle</code> 的 <code>p</code> 元素。注意它并<strong>没有选中</strong> HTML 文档第 8 行不带属性的 <code>p</code> 元素。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本题要求实现一个简化版的元素选择器。给出一个结构化文档，和若干个选择器，对每个选择器找出文档中所对应选中的元素。</span><br><span class="line"></span><br><span class="line">【结构化文档】结构化文档由元素组成，一个元素可以包含若干个子元素 (可以没有)。一个文档有一个跟元素，在整体上形成树的结构。以下是本题结构化文档的一个例子：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line">..head</span><br><span class="line">....title</span><br><span class="line">..body</span><br><span class="line">....h1</span><br><span class="line">....p #subtitle</span><br><span class="line">....div #main</span><br><span class="line">......h2</span><br><span class="line">......p #one</span><br><span class="line">......div</span><br><span class="line">........p #two</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文档中每行表示一个元素，元素的标签由一个或者多个字母或数字组成。标签大小写不敏感，例如 div、Div、DIV 都是同一类标签。</span><br><span class="line">元素可以附加一个 id 属性，属性值也是由一个或者多个字母或数字组成，之前有一个井号 #。id 属性大小写敏感，例如 a 和 A 是两个不同的 id。如果元素有 id 属性，标签和属性之间用一个空格字符分隔。</span><br><span class="line">标签之前的缩进表示元素之间的包含关系：一个元素 E 所在行之后连续的缩进更深的行代表的元素是元素 E 的后代元素，其中缩进恰好深一层的是元素 E 的子元素。为了便于观察，每一级缩进用两个小数点符号 .. 表示。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【选择器】  本题中出现的选择器有三种，分别为：</span><br><span class="line">[标签选择器] 用标签来表示。例如 p 表示选择标签为 p 的所有元素。</span><br><span class="line">[id 选择器] 用 id 属性来表示。例如 #main 表示选择 id 属性为 main 的元素。题目保证文档中不同的元素不会有相同的 id 属性。</span><br><span class="line">[后代选择器] 复合表达式，格式为 A B ，其中 A 和 B 均为 标签选择器或 id 选择器，中间用一个空格字符分隔，表示选择满足选择器 B 的所有元素，且满足这些元素有祖先元素满足选择器 A 。例如，选择器 div p 在上面的文档中会选中最后一行的元素 p ，但不会选中 id 属性为 subtitle 的那个元素 p 。注意，后代选择器可以有更多的组成部分构成， div p 是一个两级的后代选择器，而 div div p 则是一个三级的后代选择器。</span><br></pre></td></tr></table></figure><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入第一行是两个正整数 n, m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10)，分别表示结构化文档的行数，和待查询的选择器的个数，中间用一个空格字符分隔。</span><br><span class="line">第 2 行至 第 n + 1 行逐行给出结构化文档的内容。</span><br><span class="line">第 n + 2 行至第 n + m + 1 行每行给出一个待查询的选择器。记第 n + 1 + i 行的选择器为 si， 1 ≤ i ≤ m。</span><br><span class="line">结构化文档和待查询的选择器每行长度不超过 80 个字符(不包括换行符)，保证输入的结构化文档和待查询的选择器都是合法的。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出共 m 行，每行有若干个整数。第 i 行表示选择器 si 选中的结果 (1 ≤ i ≤ m)。其中第一个整数 ri 表示 si 选中的元素个数。随后 ri 个整数，分别表示选中元素在结构化文档中出现的行号(行号从 1 开始编号)。行号按从小到大排序，相邻整数之间用一个空格字符分隔。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">11 5</span><br><span class="line">html</span><br><span class="line">..head</span><br><span class="line">....title</span><br><span class="line">..body</span><br><span class="line">....h1</span><br><span class="line">....p #subtitle</span><br><span class="line">....div #main</span><br><span class="line">......h2</span><br><span class="line">......p #one</span><br><span class="line">......div</span><br><span class="line">........p #two</span><br><span class="line">p</span><br><span class="line">#subtitle</span><br><span class="line">h3</span><br><span class="line">div p</span><br><span class="line">div div p</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">3 6 9 11</span><br><span class="line">1 6</span><br><span class="line">0</span><br><span class="line">2 9 11</span><br><span class="line">1 11</span><br><span class="line"></span><br><span class="line">Explain:</span><br><span class="line">对于样例中查询的 5 个选择器：</span><br><span class="line">1. p 选中所有的元素 p ；</span><br><span class="line">2. #subtitle 选中第 6 行 id 属性为 subtitle 的元素 p ；</span><br><span class="line">3. 由于没有标签为 h3 的元素，因此 h3 没有选中任何元素；</span><br><span class="line">4. 第 9 行和第 11 行的 p 元素都有祖先是 div 元素，而第 6 行的 p 元素 没有祖先是 div 元素；</span><br><span class="line">5. div div p 要求选中的 p 元素有两级祖先都是 div 元素，只有第 11 行的 p 元素满足这个条件。</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p><del>题目太长了，输入格式还不够 HTML 直观。</del></p><p><code>..</code>的数量可以看成级数，整体可以看成文件目录，若没有 <code>..</code> 则为根目录，每一次 <code>..</code> 的增加都是在当前目录下开出了一个新目录，样例可以变成：</p><p><img src="https://i.loli.net/2020/06/11/YIOtWJAqvc5uoiC.png" alt="ele_picker.png"></p><p>很明显的具有树形结构。根据题意，输入一定是按 HTML 文档顺序输入的，要求也只是查找，因此可以用数组或向量存储数据，不用建立树的结构。</p><p>储存的时候，处理数据，根据 <code>..</code> 赋值级数，根据是否有 <code>#</code> 处理 id、标签，并且标签全部转化为小写。并同时用一个变量 <code>father</code> 从后往前遍历向量，标记父节点位置，方便多级查询。</p><p>查询的时候，分隔 string，判断是哪一种选择器；若 substring 个数为1，则只需顺序遍历向量进行查询，根据 <code>#</code> 判断是否需要大小写处理；若不只有一个 substring，则从后往前遍历向量，从后往前逐级“剥去” id 或 标签，找到就 push 行数。</p><p>最后根据题意输出。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> lev, fa;</span><br><span class="line"><span class="built_in">string</span> label, id;</span><br><span class="line">node() &#123; lev = <span class="number">-2</span>; fa = <span class="number">-2</span>; &#125;</span><br><span class="line">node(<span class="keyword">int</span> l, <span class="keyword">int</span> f, <span class="built_in">string</span> la, <span class="built_in">string</span> ID) :lev(l), fa(f), label(la), id(ID) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">lowerCase</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c &gt;= <span class="number">65</span> &amp;&amp; c &lt;= <span class="number">90</span>)</span><br><span class="line">c += <span class="number">32</span>;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (s[pos] == <span class="string">'.'</span>)</span><br><span class="line">pos++;</span><br><span class="line"><span class="keyword">int</span> lev = pos / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> fa;</span><br><span class="line"><span class="keyword">if</span> (v.empty() || lev == <span class="number">0</span>)</span><br><span class="line">fa = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = v.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i].lev == lev - <span class="number">1</span>) &#123;</span><br><span class="line">fa = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> la, ID;</span><br><span class="line"><span class="keyword">bool</span> labeled = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (pos &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[pos] == <span class="string">'#'</span> || labeled) &#123;</span><br><span class="line">labeled = <span class="literal">true</span>;</span><br><span class="line">la += s[pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s[pos] != <span class="string">' '</span>)</span><br><span class="line">ID += lowerCase(s[pos]);</span><br><span class="line">&#125;</span><br><span class="line">pos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">tnode</span><span class="params">(lev, fa, la, ID)</span></span>;</span><br><span class="line">v.push_back(tnode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">lowerCaseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != s.<span class="built_in">size</span>(); i++)</span><br><span class="line">s[i] = lowerCase(s[i]);</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">lookup</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; sv;</span><br><span class="line"><span class="keyword">while</span> (!ss.eof()) &#123;</span><br><span class="line"><span class="built_in">string</span> stemp;</span><br><span class="line">ss &gt;&gt; stemp;</span><br><span class="line"><span class="keyword">if</span> (stemp[<span class="number">0</span>] != <span class="string">'#'</span>)</span><br><span class="line">stemp = lowerCaseString(stemp);</span><br><span class="line">sv.push_back(stemp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = v.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">int</span> pos2 = sv.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (sv[pos2] != v[i].label &amp;&amp; sv[pos2] != v[i].id)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">pos = v[i].fa;</span><br><span class="line">pos2--;</span><br><span class="line"><span class="keyword">while</span> (pos &gt;= <span class="number">0</span> &amp;&amp; pos2 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[pos].label == sv[pos2] || v[pos].id == sv[pos2])</span><br><span class="line">pos2--;</span><br><span class="line">pos = v[pos].fa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pos2 == <span class="number">-1</span>)</span><br><span class="line">ans.push_back(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">reverse(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line">v.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>, s);</span><br><span class="line">initial(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>, s);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans = lookup(s);</span><br><span class="line"><span class="keyword">if</span> (ans.empty())</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != ans.<span class="built_in">size</span>(); i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; ans[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;元素选择器&quot;&gt;&lt;a href=&quot;#元素选择器&quot; class=&quot;headerlink&quot; title=&quot;元素选择器&quot;&gt;&lt;/a&gt;&lt;strong&gt;元素选择器&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题背景&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;层叠样式表 (Cascading Style Sheets, 缩写 CSS) 是一种用来为结构化文档 (如 HTML 文档) 添加样式 (字体、间距和颜色等) 的计算机语言。例如，对于以下的 HTML 文档：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="字符串" scheme="co10.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>GCD &amp; 二叉搜索树</title>
    <link href="co10.github.io/2020/06/07/GCD-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>co10.github.io/2020/06/07/GCD-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</id>
    <published>2020-06-07T13:53:45.000Z</published>
    <updated>2020-06-12T00:52:17.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GCD-amp-二叉搜索树"><a href="#GCD-amp-二叉搜索树" class="headerlink" title="GCD &amp; 二叉搜索树"></a><strong>GCD &amp; 二叉搜索树</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有一些数，这些数要拼成一棵树。</span><br><span class="line">此树为二叉搜索树，且任意树边相连的两个节点的gcd都超过1。</span><br><span class="line">求这些数是否满足要求。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行一个整数 t，表示数据组数。</span><br><span class="line">对于每组数据，第一行输入一个 n，表示数的个数。</span><br><span class="line">接下来一行有 n 个数，保证输入是升序的。</span><br><span class="line">t ≤ 5，n ≤ 700，ai ≤ 1e9。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每组数据输出一行，如果能够造出来满足题目描述的树，输出Yes，否则输出No。</span><br><span class="line">无行末空格。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">3 6 9 18 36 108</span><br><span class="line">Output: </span><br><span class="line">Yes</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">7 17</span><br><span class="line">9</span><br><span class="line">4 8 10 12 15 18 33 44 81</span><br><span class="line">Output: </span><br><span class="line">No</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      5000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>一开始我是完全当作平衡二叉搜索树来做了，赛后补题才发现只是普通的二叉搜索树……</p><p>当时的思路是这样的：</p><p>中间位置为 root，分为左右两半，每半的中间位置是 father node，再分为左右两半……以此递归，可以确定节点以及其左右孩子，即确定数组的某位置与哪些位置相连，就像数组模拟的堆结构一样。</p><p><img src="https://i.loli.net/2020/06/11/VJabzdpCnRwy1hx.png" alt="bstree.png"></p><p>然而这棵树并不平衡，不可用数组这么“偷懒”，(按这么做的话样例 2 是错的，81不符合，当时我怎么就没发现呢。赛后补题觉得样例2好奇怪，看了好久才明白不是平衡二叉搜索树……)</p><p>既然他不平衡，如果要建树(我是觉得肯定不可能去写二叉树结构的，太费时间了)插入的时候就很有不确定性，有些节点无法明确插在哪，所以肯定不是要写树的结构。</p><p>然后一头雾水了。参考别人解法的时候发现这是个区间 dp 问题。</p><p>用两个数组 <code>l[i][j]</code>, <code>r[i][j]</code> 表示以 <em>i</em> 为父节点，向左到 <em>j</em>、向右到 <em>j</em> 可以到达的左子树、右子树。用 <code>dp[i][j]</code> 表示 <em>i</em>, <em>j</em> 可以构成一棵树。</p><p>若 <code>l[k][i] = r[k][j] = true</code>，<code>dp[i][j] = true</code>，<em>i</em> 和 <em>j</em> 以 <em>k</em> 为父节点。</p><p>状态转移方程为：</p><script type="math/tex; mode=display">l_{j+1,i} |=gcd(a_{j+1},a_k)，i≤k≤j</script><script type="math/tex; mode=display">r_{i-1,j} |=gcd(a_{i-1},a_k)，i≤k≤j</script><p>初始化时将 <code>l[i][i] = r[i][i] =true</code>，表示当 <em>i</em> 左右子树为空，符合题意。</p><p>结果返回 <code>dp[1][n]</code> 表示这个数组是否能建树。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">750</span>;</span><br><span class="line"><span class="keyword">int</span> arr[maxN];</span><br><span class="line"><span class="keyword">bool</span> dp[maxN][maxN], l[maxN][maxN], r[maxN][maxN], g[maxN][maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> _a, <span class="keyword">int</span> _b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> _b == <span class="number">0</span> ? _a : gcd(_b, _a % _b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">has_gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gcd(a, b) &gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBST_GCD</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n - i + <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt;= i + j - <span class="number">1</span>; k++) &#123;</span><br><span class="line"><span class="keyword">if</span> (l[k][j] &amp;&amp; r[k][i + j - <span class="number">1</span>]) &#123;</span><br><span class="line">dp[j][i + j - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">l[i + j][j] |= g[i + j][k];</span><br><span class="line">r[j - <span class="number">1</span>][i + j - <span class="number">1</span>] |= g[j - <span class="number">1</span>][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">1</span>][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">10</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n + <span class="number">10</span>; j++) &#123;</span><br><span class="line">l[i][j] = <span class="literal">false</span>;</span><br><span class="line">r[i][j] = <span class="literal">false</span>;</span><br><span class="line">dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">l[i][i] = <span class="literal">true</span>;</span><br><span class="line">r[i][i] = <span class="literal">true</span>;</span><br><span class="line">dp[i][i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">g[i][j] = has_gcd(arr[i], arr[j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isBST_GCD(n))</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GCD-amp-二叉搜索树&quot;&gt;&lt;a href=&quot;#GCD-amp-二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;GCD &amp;amp; 二叉搜索树&quot;&gt;&lt;/a&gt;&lt;strong&gt;GCD &amp;amp; 二叉搜索树&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;有一些数，这些数要拼成一棵树。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;此树为二叉搜索树，且任意树边相连的两个节点的gcd都超过1。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;求这些数是否满足要求。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="GCD" scheme="co10.github.io/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>保护罩</title>
    <link href="co10.github.io/2020/06/06/%E4%BF%9D%E6%8A%A4%E7%BD%A9/"/>
    <id>co10.github.io/2020/06/06/%E4%BF%9D%E6%8A%A4%E7%BD%A9/</id>
    <published>2020-06-06T13:40:04.000Z</published>
    <updated>2020-06-12T00:39:49.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="保护罩"><a href="#保护罩" class="headerlink" title="保护罩"></a><strong>保护罩</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设宇宙射线的发射点位于一个平面，ZJM已经通过特殊手段获取了所有宇宙射线的发射点，他们的坐标都是整数。而ZJM要构造一个保护罩，这个保护罩是一个圆形，中心位于⼀个宇宙射线的发射点上。为了节省经费，需要做一个最⼩⾯积的保护罩。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输⼊第一行一个正整数 n，表示宇宙射线发射点的个数</span><br><span class="line">接下来 N 行，每行两个整数 x,y，表示宇宙射线发射点的位置</span><br><span class="line">n ≤ 1000，|x| ≤ 100000，|y| ≤ 100000</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出包括两行</span><br><span class="line">第一行输出保护罩的中心坐标 x, y，用空格隔开</span><br><span class="line">第二行输出保护罩半径的平方</span><br><span class="line">（所有输出保留两位小数，如有多解，输出 x 较小的点，如扔有多解，输出 y 较小的点）</span><br><span class="line">无行末空格</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">5</span><br><span class="line">0 0</span><br><span class="line">0 1</span><br><span class="line">1 0</span><br><span class="line">0 -1</span><br><span class="line">-1 0</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">0.00 0.00</span><br><span class="line">1.00</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>一开始是想成最小圆覆盖问题，有注意到圆心在其中的某个点上，最后还是 <code>WA</code> 了……</p><p>然后其实这道题暴力就能解决，对于每个点，求出其他点到这个点的距离，取最大值，即得出这个点能到达的最远点；然后取这些最大值的最小值，就是所求半径。</p><p>全部用 <code>double</code> 来处理小数点问题。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line">dot() &#123; x = <span class="number">0</span>; y = <span class="number">0</span>; &#125;</span><br><span class="line">dot(<span class="keyword">double</span> a, <span class="keyword">double</span> b) :x(a), y(b) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">disBetPow</span><span class="params">(dot a, dot b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> xx = a.x - b.x;</span><br><span class="line"><span class="keyword">double</span> yy = a.y - b.y;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">double</span>)(xx * xx + yy * yy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;dot&gt; v;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="function">dot <span class="title">D</span><span class="params">(x, y)</span></span>;</span><br><span class="line">v.push_back(D);</span><br><span class="line">&#125;</span><br><span class="line">dot O = v[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">double</span> dis1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != v.<span class="built_in">size</span>(); i++)</span><br><span class="line">dis1 = <span class="built_in">max</span>(dis1, disBetPow(O, v[i]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> o_x = O.x, o_y = O.y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">double</span> dis2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != v.<span class="built_in">size</span>(); j++)</span><br><span class="line">dis2 = <span class="built_in">max</span>(dis2, disBetPow(v[i], v[j]));</span><br><span class="line"><span class="keyword">if</span> (dis1 &gt;= dis2) &#123;</span><br><span class="line"><span class="keyword">if</span> ((dis2 == dis1 &amp;&amp; (v[i].x &lt; o_x || (v[i].x == o_x &amp;&amp; v[i].y &lt; o_y)))</span><br><span class="line">|| dis1 &gt; dis2) &#123;</span><br><span class="line">o_x = v[i].x;</span><br><span class="line">o_y = v[i].y;</span><br><span class="line">dis1 = dis2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; o_x &lt;&lt; <span class="string">" "</span> &lt;&lt; o_y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dis1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;保护罩&quot;&gt;&lt;a href=&quot;#保护罩&quot; class=&quot;headerlink&quot; title=&quot;保护罩&quot;&gt;&lt;/a&gt;&lt;strong&gt;保护罩&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;假设宇宙射线的发射点位于一个平面，ZJM已经通过特殊手段获取了所有宇宙射线的发射点，他们的坐标都是整数。而ZJM要构造一个保护罩，这个保护罩是一个圆形，中心位于⼀个宇宙射线的发射点上。为了节省经费，需要做一个最⼩⾯积的保护罩。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数鸭子</title>
    <link href="co10.github.io/2020/06/04/%E6%95%B0%E9%B8%AD%E5%AD%90/"/>
    <id>co10.github.io/2020/06/04/%E6%95%B0%E9%B8%AD%E5%AD%90/</id>
    <published>2020-06-04T13:26:31.000Z</published>
    <updated>2020-06-12T00:39:37.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数鸭子"><a href="#数鸭子" class="headerlink" title="数鸭子"></a><strong>数鸭子</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">湖边有一群鸭子，每一只鸭子都不⼀样，或羽毛不同，或性格不同。TT在脑子里开了一个 map&lt;鸭子，整数&gt;tong，把鸭⼦变成了一些数字。现在他好奇，有多少只鸭子映射成的数的数位中不同的数字个数小于 k 。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输⼊第一行包含两个数 n, k，表示鸭子的个数和题目要求的 k。</span><br><span class="line">接下来一行有 n 个数 ai，每个数表示鸭子被TT映射之后的值。</span><br><span class="line">n ≤ 1e6，k ≤ 1e6，ai ≤ 1e15。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出一行，一个数，表示满足题目描述的鸭子的个数。</span><br><span class="line">无行末空格</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">6 5</span><br><span class="line">123456789 9876543210 233 666 1 114514</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>就是求一堆数串中有多少个数串的不同数字个数小于 k，比如12345，其值为5；11111，其值为 1。</p><p>然而题目数据 k 可以大于 10，一共就 0..9 九个数字，出个 k &gt; 10 的意义在哪，k &gt; 10 的话不是都不用求直接输出 n 吗……搞得我开始想多了，还好最后几分钟没改，真的是想多了。</p><p>把输入的数当成字符串处理，数据范围用 <code>long long</code>。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="built_in">string</span> a, <span class="keyword">long</span> <span class="keyword">long</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> reach[<span class="number">10</span>] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>; i != a.length(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!reach[a[i] - <span class="string">'0'</span>]) &#123;</span><br><span class="line">reach[a[i] - <span class="string">'0'</span>] = <span class="literal">true</span>;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count &gt;= k)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (solve(a, k))</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数鸭子&quot;&gt;&lt;a href=&quot;#数鸭子&quot; class=&quot;headerlink&quot; title=&quot;数鸭子&quot;&gt;&lt;/a&gt;&lt;strong&gt;数鸭子&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;湖边有一群鸭子，每一只鸭子都不⼀样，或羽毛不同，或性格不同。TT在脑子里开了一个 map&amp;lt;鸭子，整数&amp;gt;tong，把鸭⼦变成了一些数字。现在他好奇，有多少只鸭子映射成的数的数位中不同的数字个数小于 k 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>猫咪睡觉</title>
    <link href="co10.github.io/2020/06/01/%E7%8C%AB%E5%92%AA%E7%9D%A1%E8%A7%89/"/>
    <id>co10.github.io/2020/06/01/%E7%8C%AB%E5%92%AA%E7%9D%A1%E8%A7%89/</id>
    <published>2020-06-01T12:22:09.000Z</published>
    <updated>2020-06-12T00:39:08.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="猫咪睡觉"><a href="#猫咪睡觉" class="headerlink" title="猫咪睡觉"></a><strong>猫咪睡觉</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">喵睡觉的时段是连续的，即一旦喵喵开始睡觉了，就不能被打扰。</span><br><span class="line">可以假设喵喵必须要睡眠连续不少于 A 个小时，即一旦喵喵开始睡觉了，至少连续 A 个小时内（即 A×60 分钟内）不能被打扰！</span><br><span class="line">喵不能连续活动超过 B 个小时。</span><br><span class="line">喵要看新番，播放时间它已经贴在床头啦（每天都用同一张时间表），这段时间它必须醒着！！</span><br><span class="line">求安排睡眠时间。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多组数据，每组数据的格式如下：</span><br><span class="line">第 1 行输入三个整数，A 和 B 和 N (1 ≤ A ≤ 24, 1 ≤ B ≤ 24, 1 ≤ n ≤ 20)</span><br><span class="line">第 2 到 N + 1 行为每日的新番时间表，每行一个时间段，格式形如 hh:mm-hh:mm (闭区间)，这是一种时间格式，hh:mm 的范围为 00:00 到 23:59。注意一下，时间段是保证不重叠的，但是可能出现跨夜的新番，即新番的开始时间点大于结束时间点。</span><br><span class="line">保证每个时间段的开始时间点和结束时间点不一样，即不可能出现类似 08:00-08:00 这种的时间段。时长的计算由于是闭区间所以也是有点坑的，比如 12:00-13:59 的时长就是 120 分钟。</span><br><span class="line">不保证输入的新番时间表有序。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出的第一行是 Yes 或者 No，代表是否存在满足猫猫要求的时间管理办法。</span><br><span class="line">第2行输出一个整数 k，代表当天有多少个时间段要睡觉</span><br><span class="line">接下来 k 行是喵喵的睡觉时间段，每行一个时间段，格式形如 hh:mm-hh:mm (闭区间)，这个在前面也有定义。注意一下，如果喵喵的睡眠时段跨越当天到达了明天，比如从23点50分睡到0点40分，那就输出23:50-00:40，如果从今晚23:50睡到明天早上7:30，那就输出23:50-07:30。</span><br><span class="line">本题是 Special Judge。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">12 12 1</span><br><span class="line">23:00-01:00</span><br><span class="line">3 4 3</span><br><span class="line">07:00-08:00</span><br><span class="line">11:00-11:09</span><br><span class="line">19:00-19:59</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">Yes</span><br><span class="line">1</span><br><span class="line">01:07-22:13</span><br><span class="line">No</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    32768 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p><del>太坑了太坑了太坑了！！！</del></p><p>时间是闭区间，比如 7:00-8:00 是 61 分钟。</p><p>每天的 timetable 都是一样的，也就是说今天这个点在干嘛明天还是在干嘛，一开始我没想到这个问题，所以每天都从 0:00 开始规划……时间是一个闭环。</p><p>所有时间统一用分钟处理，若录入的开始时间 &gt; 结束时间，则跨天，结束时间 + 24 小时。</p><p>录入时间都排序后，需要判断进行合并区间。若间歇时间 &lt; a 小时，则这两个时间区间需要合并。</p><p>处理完后，判断这些醒着的时间是否 &gt; b小时。</p><p>安排睡眠时间，从 1 天的时间环中挖去这些醒着的时间，剩下的全部安排为睡眠时间。</p><p>判断安排的这些睡眠时间是否低于 a 小时。</p><p>输出统一将分钟改为 hh:mm，若超出 24 小时，则扣去。</p><p>注意 Yes/No 还是 YES/NO。</p><p>然后……WA WA WA WA WA…，我放弃了/(ㄒoㄒ)/。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">theTime</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">begin</span>, <span class="built_in">end</span>;</span><br><span class="line">theTime() &#123; <span class="built_in">begin</span> = <span class="number">0</span>; <span class="built_in">end</span> = <span class="number">0</span>; &#125;</span><br><span class="line">theTime(<span class="keyword">int</span> b, <span class="keyword">int</span> e) :<span class="built_in">begin</span>(b), <span class="built_in">end</span>(e) &#123;  &#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> theTime&amp; t) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">begin</span> &lt; t.<span class="built_in">begin</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;theTime&gt; <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="built_in">vector</span>&lt;theTime&gt; &amp;v)</span> </span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;theTime&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != v.<span class="built_in">size</span>(); i++)</span><br><span class="line">q.push_back(v[i]);</span><br><span class="line"><span class="built_in">vector</span>&lt;theTime&gt; ve;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">theTime t1 = q.front();</span><br><span class="line">q.pop_front();</span><br><span class="line"><span class="keyword">if</span> (q.empty()) &#123;</span><br><span class="line">ve.push_back(t1);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">theTime t2 = q.front();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((t2.<span class="built_in">begin</span> - t1.<span class="built_in">end</span> + <span class="number">1</span>) &lt; a * <span class="number">60</span>) &#123;</span><br><span class="line">t1.<span class="built_in">end</span> = t2.<span class="built_in">end</span>;</span><br><span class="line">q.pop_front();</span><br><span class="line">q.push_front(t1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ve.push_back(t1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ve.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; (ve[<span class="number">0</span>].<span class="built_in">begin</span> + <span class="number">24</span> * <span class="number">60</span> - ve.back().<span class="built_in">end</span> + <span class="number">1</span>) &lt; a * <span class="number">60</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> newBegin = ve.back().<span class="built_in">begin</span>;</span><br><span class="line">ve.pop_back();</span><br><span class="line">ve[<span class="number">0</span>].<span class="built_in">begin</span> = newBegin;</span><br><span class="line">ve[<span class="number">0</span>].<span class="built_in">end</span> += (<span class="number">24</span> * <span class="number">60</span>);</span><br><span class="line">sort(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> overWake = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sT;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != ve.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">theTime curTime = ve[i];</span><br><span class="line"><span class="keyword">if</span> ((curTime.<span class="built_in">end</span> - curTime.<span class="built_in">begin</span> + <span class="number">1</span>) &gt; b * <span class="number">60</span>) &#123;</span><br><span class="line">overWake = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">sT.push_back(curTime.<span class="built_in">begin</span> - <span class="number">1</span>);</span><br><span class="line">sT.push_back(curTime.<span class="built_in">end</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;theTime&gt; ans;</span><br><span class="line"><span class="keyword">if</span> (overWake || sT.empty()) &#123;</span><br><span class="line">ans.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ta = sT.back();</span><br><span class="line"><span class="keyword">int</span> tb = sT[<span class="number">0</span>] + <span class="number">24</span> * <span class="number">60</span>;</span><br><span class="line"><span class="keyword">if</span> (tb - ta + <span class="number">1</span> &lt; a * <span class="number">60</span>) &#123;</span><br><span class="line">ans.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">theTime ax(ta, tb);</span><br><span class="line">ans.push_back(ax);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != sT.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> ta = sT[i];</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">int</span> tb = sT[i];</span><br><span class="line"><span class="keyword">if</span> ((tb - ta) &lt; a * <span class="number">60</span>) &#123;</span><br><span class="line">ans.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">theTime ax(ta, tb);</span><br><span class="line">ans.push_back(ax);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outTime</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = t % <span class="number">60</span>;</span><br><span class="line"><span class="keyword">int</span> h = t / <span class="number">60</span>;</span><br><span class="line"><span class="keyword">if</span> (h &gt;= <span class="number">24</span>)</span><br><span class="line">h -= <span class="number">24</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setw(<span class="number">2</span>) &lt;&lt; setfill(<span class="string">'0'</span>) &lt;&lt; h &lt;&lt; <span class="string">":"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setw(<span class="number">2</span>) &lt;&lt; setfill(<span class="string">'0'</span>) &lt;&lt; m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, n;</span><br><span class="line"><span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; n).eof()) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;theTime&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> h1, m1, h2, m2;</span><br><span class="line"><span class="keyword">char</span> temp;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; h1 &gt;&gt; temp &gt;&gt; m1 &gt;&gt; temp &gt;&gt; h2 &gt;&gt; temp &gt;&gt; m2;</span><br><span class="line"><span class="keyword">int</span> t1 = h1 * <span class="number">60</span> + m1;</span><br><span class="line"><span class="keyword">int</span> t2 = h2 * <span class="number">60</span> + m2;</span><br><span class="line"><span class="keyword">if</span> (t2 &lt; t1)</span><br><span class="line">t2 += (<span class="number">24</span> * <span class="number">60</span>);</span><br><span class="line"><span class="function">theTime <span class="title">tt</span><span class="params">(t1, t2)</span></span>;</span><br><span class="line">v.push_back(tt);</span><br><span class="line">&#125;</span><br><span class="line">sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">vector</span>&lt;theTime&gt; v1 = solve(a, b, v);</span><br><span class="line"><span class="keyword">if</span> (v1.empty())</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != v1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">outTime(v1[i].<span class="built_in">begin</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-"</span>;</span><br><span class="line">outTime(v1[i].<span class="built_in">end</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;猫咪睡觉&quot;&gt;&lt;a href=&quot;#猫咪睡觉&quot; class=&quot;headerlink&quot; title=&quot;猫咪睡觉&quot;&gt;&lt;/a&gt;&lt;strong&gt;猫咪睡觉&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;喵睡觉的时段是连续的，即一旦喵喵开始睡觉了，就不能被打扰。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;可以假设喵喵必须要睡眠连续不少于 A 个小时，即一旦喵喵开始睡觉了，至少连续 A 个小时内（即 A×60 分钟内）不能被打扰！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;喵不能连续活动超过 B 个小时。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;喵要看新番，播放时间它已经贴在床头啦（每天都用同一张时间表），这段时间它必须醒着！！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;求安排睡眠时间。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>天降猫咪游戏</title>
    <link href="co10.github.io/2020/05/19/%E5%A4%A9%E9%99%8D%E7%8C%AB%E5%92%AA%E6%B8%B8%E6%88%8F/"/>
    <id>co10.github.io/2020/05/19/%E5%A4%A9%E9%99%8D%E7%8C%AB%E5%92%AA%E6%B8%B8%E6%88%8F/</id>
    <published>2020-05-19T09:05:02.000Z</published>
    <updated>2020-06-12T00:51:26.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="天降猫咪游戏"><a href="#天降猫咪游戏" class="headerlink" title="天降猫咪游戏"></a><strong>天降猫咪游戏</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">捡猫咪游戏是这样的，猫咪从天上往下掉，且只会掉在 [0, 10] 范围内，具体的坐标范围如下图所示。</span><br><span class="line">初始站在位置五上，且每秒只能在移动不超过一米的范围内接住掉落的猫咪，如果没有接住，猫咪就会跑掉。</span><br><span class="line">例如，在刚开始的一秒内，只能接到四、五、六这三个位置其中一个位置的猫咪。</span><br><span class="line">要求接住尽可能多的猫咪。</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://i.loli.net/2020/06/09/SDvdnleaX1Bbq46.jpg" alt="maomao.jpg"></p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多组样例。每组样例输入一个 m (0 &lt; m &lt; 100000)，表示有 m 只猫咪。</span><br><span class="line">在接下来的 m 行中，每行有两个整数 a, b (0 &lt; b &lt; 100000)，表示在第 b 秒的时候有一只猫咪掉落在 a 点上。</span><br><span class="line">注意，同一个点上同一秒可能掉落多只猫咪。m &#x3D; 0 时输入结束。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出一个整数 x，表示可能接住的最多的猫咪数。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">6</span><br><span class="line">5 1</span><br><span class="line">4 1</span><br><span class="line">6 1</span><br><span class="line">7 2</span><br><span class="line">7 2</span><br><span class="line">8 3</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>用 <code>f[i][j]</code> 表示第 <em>i</em> 秒在 <em>j</em> 位置能接住的猫咪数量，状态转移方程为：</p><script type="math/tex; mode=display">f_{i,j}=max(f_{i-1,j-1},f_{i-1,j},f_{i-1,j+1})+a_{i,j}</script><p>即每秒只能往左、往右或不动，取最大值。</p><p>从后往前，可以确定最终位置一定是在 位置 5 上。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">100020</span>;</span><br><span class="line"><span class="keyword">int</span> arr[maxN][<span class="number">13</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; m) &#123;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m + <span class="number">10</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">13</span>; j++)</span><br><span class="line">arr[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> bPoint = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">arr[b][a + <span class="number">1</span>]++;</span><br><span class="line">bPoint = <span class="built_in">max</span>(b, bPoint);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = bPoint - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">11</span>; j++) &#123;</span><br><span class="line">arr[i][j] += <span class="built_in">max</span>(arr[i + <span class="number">1</span>][j + <span class="number">1</span>], <span class="built_in">max</span>(arr[i + <span class="number">1</span>][j], arr[i + <span class="number">1</span>][j - <span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[<span class="number">0</span>][<span class="number">6</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;天降猫咪游戏&quot;&gt;&lt;a href=&quot;#天降猫咪游戏&quot; class=&quot;headerlink&quot; title=&quot;天降猫咪游戏&quot;&gt;&lt;/a&gt;&lt;strong&gt;天降猫咪游戏&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;捡猫咪游戏是这样的，猫咪从天上往下掉，且只会掉在 [0, 10] 范围内，具体的坐标范围如下图所示。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;初始站在位置五上，且每秒只能在移动不超过一米的范围内接住掉落的猫咪，如果没有接住，猫咪就会跑掉。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如，在刚开始的一秒内，只能接到四、五、六这三个位置其中一个位置的猫咪。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;要求接住尽可能多的猫咪。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第k大正整数</title>
    <link href="co10.github.io/2020/05/19/%E7%AC%ACk%E5%A4%A7%E6%AD%A3%E6%95%B4%E6%95%B0/"/>
    <id>co10.github.io/2020/05/19/%E7%AC%ACk%E5%A4%A7%E6%AD%A3%E6%95%B4%E6%95%B0/</id>
    <published>2020-05-19T09:01:58.000Z</published>
    <updated>2020-06-12T00:38:09.248Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-k-大正整数"><a href="#第-k-大正整数" class="headerlink" title="第 k 大正整数"></a><strong>第 k 大正整数</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定两个数字，分别表示 n 和 k，要求给出无法被 n 整除的第 k 大的正整数。</span><br><span class="line">例如 n &#x3D; 3, k &#x3D; 7，则前 7 个无法被 n 整除的正整数为 [1 2 4 5 7 8 10]，答案为 10。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行一个整数 T，表示数据组数，不超过 1000。</span><br><span class="line">之后 T 行，每一行给出两个正整数，分别表示 n（2 ≤ n ≤ 1e9）、k（1 ≤ k ≤ 1e9）。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每一组数据，输出无法被 n 整除的第 k 大的正整数。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">6</span><br><span class="line">3 7</span><br><span class="line">4 12</span><br><span class="line">2 1000000000</span><br><span class="line">7 97</span><br><span class="line">1000000000 1000000000</span><br><span class="line">2 1</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">10</span><br><span class="line">15</span><br><span class="line">1999999999</span><br><span class="line">113</span><br><span class="line">1000000001</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>以 <em>n</em> = 3 为例：</p><p><code>[1 2 (3)][4 5 (6)][7 8 (9)][10 11 (12)][13 14 (15)]...</code></p><p>每一个分组，都是 <em>n</em> - 1 个数 和 一个 <em>n</em> 的倍数组成，由此可以确定 <em>k</em> 的位置：</p><p>若 <em>k</em> 是 (<em>n</em> - 1) 的倍数，组数 = <em>k</em> ÷ (<em>n</em> - 1)，否则，组数 = <em>k</em> ÷ (<em>n</em> - 1) + 1；<br>然后用余数确定 <em>k</em> 的位置：若整除，则 答案 = <em>n</em> × <em>k</em>  ÷ (<em>n</em> - 1) - 1，否则，答案 = <em>n</em> × <em>k</em>  ÷ (<em>n</em> - 1) + 余数。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sub = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt1 = k / sub;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt2 = k % sub;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = cnt1 * n + cnt2;</span><br><span class="line"><span class="keyword">if</span> (cnt2 == <span class="number">0</span>)</span><br><span class="line">ans -= <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第-k-大正整数&quot;&gt;&lt;a href=&quot;#第-k-大正整数&quot; class=&quot;headerlink&quot; title=&quot;第 k 大正整数&quot;&gt;&lt;/a&gt;&lt;strong&gt;第 k 大正整数&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定两个数字，分别表示 n 和 k，要求给出无法被 n 整除的第 k 大的正整数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如 n &amp;#x3D; 3, k &amp;#x3D; 7，则前 7 个无法被 n 整除的正整数为 [1 2 4 5 7 8 10]，答案为 10。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>奇偶选数和</title>
    <link href="co10.github.io/2020/05/19/%E5%A5%87%E5%81%B6%E9%80%89%E6%95%B0%E5%92%8C/"/>
    <id>co10.github.io/2020/05/19/%E5%A5%87%E5%81%B6%E9%80%89%E6%95%B0%E5%92%8C/</id>
    <published>2020-05-19T08:58:45.000Z</published>
    <updated>2020-06-12T00:36:33.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="奇偶选数和"><a href="#奇偶选数和" class="headerlink" title="奇偶选数和"></a><strong>奇偶选数和</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">神秘人给了两个数字，分别表示 n 和 k，并要求 TT 给出 k 个奇偶性相同的正整数，使得其和等于 n。</span><br><span class="line">例如 n &#x3D; 10，k &#x3D; 3，答案可以为 [4 2 4]。</span><br><span class="line">本题是SPJ</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行一个整数 T，表示数据组数，不超过 1000。</span><br><span class="line">之后 T 行，每一行给出两个正整数，分别表示 n (1 ≤ n ≤ 1e9)、k (1 ≤ k ≤ 100)。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果存在这样 k 个数字，则第一行输出 “YES”，第二行输出 k 个数字。</span><br><span class="line">如果不存在，则输出 “NO”。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">8</span><br><span class="line">10 3</span><br><span class="line">100 4</span><br><span class="line">8 7</span><br><span class="line">97 2</span><br><span class="line">8 8</span><br><span class="line">3 10</span><br><span class="line">5 3</span><br><span class="line">1000000000 9</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">YES</span><br><span class="line">4 2 4</span><br><span class="line">YES</span><br><span class="line">55 5 5 35</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">1 1 1 1 1 1 1 1</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">3 1 1</span><br><span class="line">YES</span><br><span class="line">111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>由于是正整数，数最小只能取1，若 <em>k</em> &gt; <em>n</em>，则一定不行。</p><p>以下考虑 <em>n</em> ≥ <em>k</em>：<br>若 <em>n</em> 为偶数，且 <em>n</em> ≥ 2<em>k</em>，则一定可以，因为可以用 (<em>k</em> - 1) 个 2 表示，最后一个数一定是偶数；若 <em>k</em> ≤ <em>n</em> &lt; 2<em>k</em>，则可以先用 (<em>k</em> - 1) 个 1 表示，剩下最后一个数若为奇数，则可以，若为偶数则不行。<br>若 <em>n</em> 为奇数：若 <em>k</em> 为偶数，则一定不行；若 <em>k</em> 为奇数，用 (<em>k</em> - 1) 个 1 表示，剩下最后一个数一定也是奇数。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; n &gt;= <span class="number">2</span> * k) &#123;</span><br><span class="line"><span class="keyword">int</span> x1 = <span class="number">2</span> * (k - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x2 = n - x1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" 2"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; n &gt;= k &amp;&amp; n &lt; <span class="number">2</span> * k) &#123;</span><br><span class="line"><span class="keyword">int</span> x1 = n - (k - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (x1 % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" 1"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; n &gt;= k) &#123;</span><br><span class="line"><span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> x1 = n - (k - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" 1"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;奇偶选数和&quot;&gt;&lt;a href=&quot;#奇偶选数和&quot; class=&quot;headerlink&quot; title=&quot;奇偶选数和&quot;&gt;&lt;/a&gt;&lt;strong&gt;奇偶选数和&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;神秘人给了两个数字，分别表示 n 和 k，并要求 TT 给出 k 个奇偶性相同的正整数，使得其和等于 n。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如 n &amp;#x3D; 10，k &amp;#x3D; 3，答案可以为 [4 2 4]。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;本题是SPJ&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>清点人数</title>
    <link href="co10.github.io/2020/05/13/%E6%B8%85%E7%82%B9%E4%BA%BA%E6%95%B0/"/>
    <id>co10.github.io/2020/05/13/%E6%B8%85%E7%82%B9%E4%BA%BA%E6%95%B0/</id>
    <published>2020-05-13T08:53:48.000Z</published>
    <updated>2020-06-12T00:50:57.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="清点人数"><a href="#清点人数" class="headerlink" title="清点人数"></a><strong>清点人数</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">东东每个学期都会去寝室接受扫楼的任务，并清点每个寝室的人数。</span><br><span class="line">每个寝室里面有 ai 个人(1 ≤ i ≤ n)。从第 i 到第 j 个宿舍一共有 sum(i, j) &#x3D; a[i] + ... + a[j] 个人</span><br><span class="line">这让宿管阿姨非常开心，并且让东东扫楼 m 次，每一次数第 i 到第 j 个宿舍 sum(i, j)</span><br><span class="line">问题是要找到 sum(i1, j1) + ... + sum(im, jm) 的最大值。且 ix ≤ iy ≤ jx 和 ix ≤ jy ≤ jx 的情况是不被允许的。也就是说 m 段都不能相交。</span><br><span class="line">注：1 ≤ i ≤ n ≤ 1e6, -32768 ≤ ai ≤ 32767 人数可以为负数。(1 ≤ n ≤ 1000000)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入 m，输入 n。后面跟着输入 n 个 ai。</span><br><span class="line">处理到 EOF。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出最大和</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">1 3 1 2 3</span><br><span class="line">2 6 -1 4 -2 3 -2 3</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">6</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    32768 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p><del>吐个槽，这道题题面改的不怎么样，人数可以是负数？！</del></p><p>题意就是，一个数列，数有正有负，求最大和区间。</p><p>设数组 <code>f[i][j]</code> 表示前 <em>j</em> 个数分割成 <em>i</em> 段的最大值，初始化 <code>f[i][i] = 0</code> 。状态转移方程为：</p><script type="math/tex; mode=display">f_{i, j}=max(f_{i, j-1},f_{i-1,k})+a_j，i≤k≤j</script><p>由于 <em>i</em> = <em>j</em> 存在，所以可能会出现 <code>f[i][i - 1]</code> (<em>i</em> - 1 个数分割成 <em>i</em> 个区间)，显然不行，所以需要把 <code>f[i][i - 1]</code>置为最小值。</p><p>本题数据量非常大，需要用滚动数组优化空间。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> inF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> maxN = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> arr[maxN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">2</span>][maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reSet</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">dp[<span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">long</span> <span class="keyword">long</span> m)</span> </span>&#123;</span><br><span class="line">reSet(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>, k = <span class="number">1</span>; i &lt;= m; i++, k ^= <span class="number">1</span>) &#123;</span><br><span class="line">dp[k][i - <span class="number">1</span>] = -inF;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> maxPre = -inF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> j = i; j &lt;= n - m + i; j++) &#123;</span><br><span class="line">maxPre = <span class="built_in">max</span>(maxPre, dp[k ^ <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line">dp[k][j] = <span class="built_in">max</span>(dp[k][j - <span class="number">1</span>], maxPre) + arr[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = -inF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = m; i &lt;= n; i++)</span><br><span class="line">ans = <span class="built_in">max</span>(ans, dp[m &amp; <span class="number">1</span>][i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> m, n;</span><br><span class="line"><span class="keyword">while</span> (scanf_s(<span class="string">"%lld %lld"</span>, &amp;m, &amp;n) != EOF) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">scanf_s(<span class="string">"%lld"</span>, &amp;arr[i]);</span><br><span class="line">solve(n, m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;清点人数&quot;&gt;&lt;a href=&quot;#清点人数&quot; class=&quot;headerlink&quot; title=&quot;清点人数&quot;&gt;&lt;/a&gt;&lt;strong&gt;清点人数&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;东东每个学期都会去寝室接受扫楼的任务，并清点每个寝室的人数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;每个寝室里面有 ai 个人(1 ≤ i ≤ n)。从第 i 到第 j 个宿舍一共有 sum(i, j) &amp;#x3D; a[i] + ... + a[j] 个人&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这让宿管阿姨非常开心，并且让东东扫楼 m 次，每一次数第 i 到第 j 个宿舍 sum(i, j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;问题是要找到 sum(i1, j1) + ... + sum(im, jm) 的最大值。且 ix ≤ iy ≤ jx 和 ix ≤ jy ≤ jx 的情况是不被允许的。也就是说 m 段都不能相交。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注：1 ≤ i ≤ n ≤ 1e6, -32768 ≤ ai ≤ 32767 人数可以为负数。(1 ≤ n ≤ 1000000)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>三维迷宫</title>
    <link href="co10.github.io/2020/05/09/%E4%B8%89%E7%BB%B4%E8%BF%B7%E5%AE%AB/"/>
    <id>co10.github.io/2020/05/09/%E4%B8%89%E7%BB%B4%E8%BF%B7%E5%AE%AB/</id>
    <published>2020-05-09T08:49:27.000Z</published>
    <updated>2020-06-12T00:35:01.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三维迷宫"><a href="#三维迷宫" class="headerlink" title="三维迷宫"></a><strong>三维迷宫</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zjm 被困在一个三维的空间中, 现在要寻找最短路径逃生！</span><br><span class="line">空间由立方体单位构成。</span><br><span class="line">zjm 每次向上下前后左右移动一个单位需要一分钟，且 zjm 不能对角线移动。</span><br><span class="line">空间的四周封闭。zjm 的目标是走到空间的出口。</span><br><span class="line">是否存在逃出生天的可能性？如果存在，则需要多少时间？</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入第一行是一个数表示空间的数量。</span><br><span class="line">每个空间的描述的第一行为 L, R 和 C（皆不超过 30）。</span><br><span class="line">L 表示空间的高度，R 和 C 分别表示每层空间的行与列的大小。</span><br><span class="line">随后 L 层，每层 R 行，每行 C 个字符。</span><br><span class="line">每个字符表示空间的一个单元。&#39;#&#39; 表示不可通过单元，&#39;.&#39; 表示空白单元。</span><br><span class="line">zjm 的起始位置在 &#39;S&#39;，出口为 &#39;E&#39;。每层空间后都有一个空行。</span><br><span class="line">L, R 和 C 均为 0 时输入结束。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每个空间对应一行输出。</span><br><span class="line">如果可以逃生，则输出如下</span><br><span class="line">Escaped in x minute(s).</span><br><span class="line">x 为最短脱离时间。</span><br><span class="line"></span><br><span class="line">如果无法逃生，则输出如下</span><br><span class="line">Trapped!</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">3 4 5</span><br><span class="line">S....</span><br><span class="line">.###.</span><br><span class="line">.##..</span><br><span class="line">###.#</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">##.##</span><br><span class="line">##...</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">#.###</span><br><span class="line">####E</span><br><span class="line"></span><br><span class="line">1 3 3</span><br><span class="line">S##</span><br><span class="line">#E#</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">Escaped in 11 minute(s).</span><br><span class="line">Trapped!</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>三维空间的广搜，每次上下左右前后考虑，记录搜索路径，输出步数，没啥坑。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">coordinate</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, z;</span><br><span class="line">coordinate() &#123; x = <span class="number">0</span>; y = <span class="number">0</span>; z = <span class="number">0</span>; &#125;</span><br><span class="line">coordinate(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _z) :x(_x), y(_y), z(_z) &#123;  &#125;</span><br><span class="line">coordinate(<span class="keyword">const</span> coordinate&amp; c) &#123;</span><br><span class="line">x = c.x;</span><br><span class="line">y = c.y;</span><br><span class="line">z = c.z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> coordinate&amp; C) &#123;</span><br><span class="line"><span class="keyword">return</span> (x != C.x || y != C.y || z != C.z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> coordinate&amp; C) &#123;</span><br><span class="line"><span class="keyword">return</span> (x == C.x || y == C.y || z == C.z);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">char</span> room[maxN][maxN][maxN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dX[] = &#123; <span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dY[] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dZ[] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maze</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> c, coordinate S, coordinate E)</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> reached[maxN][maxN][maxN] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;coordinate&gt; q;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; steps;</span><br><span class="line">q.push(S);</span><br><span class="line">steps.push(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">coordinate cur = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> stp = steps.front();</span><br><span class="line">steps.pop();</span><br><span class="line"><span class="keyword">int</span> cx = cur.x, cy = cur.y, cz = cur.z;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> tx = cx + dX[i];</span><br><span class="line"><span class="keyword">int</span> ty = cy + dY[i];</span><br><span class="line"><span class="keyword">int</span> tz = cz + dZ[i];</span><br><span class="line"><span class="keyword">if</span> (tx &gt;= <span class="number">0</span> &amp;&amp; ty &gt;= <span class="number">0</span> &amp;&amp; tz &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">tx &lt; l &amp;&amp; ty &lt; r &amp;&amp; tz &lt; c &amp;&amp;</span><br><span class="line">!reached[tx][ty][tz] &amp;&amp;</span><br><span class="line">room[tx][ty][tz] != <span class="string">'#'</span>) &#123;</span><br><span class="line">reached[tx][ty][tz] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (room[tx][ty][tz] == <span class="string">'E'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (stp + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">coordinate <span class="title">tempC</span><span class="params">(tx, ty, tz)</span></span>;</span><br><span class="line">q.push(tempC);</span><br><span class="line">steps.push(stp + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l, r, c;</span><br><span class="line"><span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; c).eof()) &#123;</span><br><span class="line"><span class="keyword">if</span> (l == <span class="number">0</span> &amp;&amp; r == <span class="number">0</span> &amp;&amp; c == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">coordinate st, ed;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; r; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; c; k++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; room[i][j][k];</span><br><span class="line"><span class="keyword">if</span> (room[i][j][k] == <span class="string">'S'</span>) &#123;</span><br><span class="line"><span class="function">coordinate <span class="title">tempC</span><span class="params">(i, j, k)</span></span>;</span><br><span class="line">st = tempC;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (room[i][j][k] == <span class="string">'E'</span>) &#123;</span><br><span class="line"><span class="function">coordinate <span class="title">tempC</span><span class="params">(i, j, k)</span></span>;</span><br><span class="line">ed = tempC;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = maze(l, r, c, st, ed);</span><br><span class="line"><span class="keyword">if</span> (res != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Escaped in "</span> &lt;&lt; res &lt;&lt; <span class="string">" minute(s)."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Trapped!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;三维迷宫&quot;&gt;&lt;a href=&quot;#三维迷宫&quot; class=&quot;headerlink&quot; title=&quot;三维迷宫&quot;&gt;&lt;/a&gt;&lt;strong&gt;三维迷宫&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zjm 被困在一个三维的空间中, 现在要寻找最短路径逃生！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;空间由立方体单位构成。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zjm 每次向上下前后左右移动一个单位需要一分钟，且 zjm 不能对角线移动。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;空间的四周封闭。zjm 的目标是走到空间的出口。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;是否存在逃出生天的可能性？如果存在，则需要多少时间？&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="BFS" scheme="co10.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>找数</title>
    <link href="co10.github.io/2020/05/08/%E6%89%BE%E6%95%B0/"/>
    <id>co10.github.io/2020/05/08/%E6%89%BE%E6%95%B0/</id>
    <published>2020-05-08T08:46:09.000Z</published>
    <updated>2020-06-12T00:34:09.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="找数问题"><a href="#找数问题" class="headerlink" title="找数问题"></a><strong>找数问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给出 n 个数，欲找出出现至少 (n + 1) &#x2F; 2 次的数， 求这个数是多少？</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本题包含多组数据：每组数据包含两行。</span><br><span class="line">第一行一个数字 N (1 ≤ N ≤ 999999) ，保证 N 为奇数。</span><br><span class="line">第二行为 N 个用空格隔开的整数。</span><br><span class="line">数据以 EOF 结束。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每一组数据，输出找到的唯一的数。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">5</span><br><span class="line">1 3 2 3 3</span><br><span class="line">11</span><br><span class="line">1 1 1 1 1 5 5 5 5 5 5</span><br><span class="line">7</span><br><span class="line">1 1 1 1 1 1 1</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    32767 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>排序，从头到尾扫一遍，计数，若次数不小于(<em>n</em> + 1) / 2，则找出了这个数。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> arr[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt = (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> cnt1 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] == a)</span><br><span class="line">cnt1++;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (cnt1 &gt;= cnt)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">a = arr[i];</span><br><span class="line">cnt1 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n).eof()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">sort(arr, arr + n);</span><br><span class="line"><span class="keyword">int</span> res = solve(n);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;找数问题&quot;&gt;&lt;a href=&quot;#找数问题&quot; class=&quot;headerlink&quot; title=&quot;找数问题&quot;&gt;&lt;/a&gt;&lt;strong&gt;找数问题&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给出 n 个数，欲找出出现至少 (n + 1) &amp;#x2F; 2 次的数， 求这个数是多少？&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Delicious子串</title>
    <link href="co10.github.io/2020/05/06/Delicious%E5%AD%90%E4%B8%B2/"/>
    <id>co10.github.io/2020/05/06/Delicious%E5%AD%90%E4%B8%B2/</id>
    <published>2020-05-06T08:24:09.000Z</published>
    <updated>2020-06-11T09:08:23.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Delicious子串"><a href="#Delicious子串" class="headerlink" title="Delicious子串"></a><strong>Delicious子串</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有个字符串，只由 A 或 B 组成，求有多少个子串是Delicious的。</span><br><span class="line">Delicious定义：对于一个字符串，我们认为它是Delicious的，当且仅当它的每一个字符都属于一个大于 1 的回文子串中。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入第一行一个正整数 n，表示字符串长度。(n ≤ 300000)</span><br><span class="line">接下来一行，一个长度为 n 只由大写字母 A、B 构成的字符串。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出仅一行，表示符合题目要求的子串的个数。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">5</span><br><span class="line">AABBB</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">6</span><br><span class="line"></span><br><span class="line">Explain: </span><br><span class="line">    对于该样例，符合条件的六个子串分别是：</span><br><span class="line">AA AABB AABBB BB BBB BB</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    10000 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>题目可能有点难理解，刚开始想 AABB 不是回文， AABBAA 这样的才是回文啊……然后多观察了几下，就是求出多少个回文子串，并把这些位置连续的回文子串组合。</p><p>比如AABBB的回文子串是：<strong><em>AA</em></strong>BBB，AA<strong><em>BB</em></strong>B，AAB<strong><em>BB</em></strong>，AA<strong><em>BBB</em></strong>。Delicious子串包括这 4 个，再加上组合的 <strong><em>AABB</em></strong>B 跟 <strong><em>AABBB</em></strong>，共6个。</p><p>做题思路就是，找出所有子串，然后把他们拼起来……好像很难拼啊，不一定是两两拼接，还可能是3个、4个……然后想到连通图的问题了……然后我崩了，最后一个数据点都没过。</p><p>赛后看了别人的思路：所有子串个数是 <em>n</em>(<em>n</em> -1)/2，把它扣去不是Delicious子串的个数就好了……</p><p>问题变成什么不是Delicious子串：<em>ABB..B</em> &amp; <em>BAA..A</em>，<em>AA…AB</em> &amp; <em>BB..BA</em>。<br>从头到尾扫一遍，可以去除后者；从尾到头，可以去除前者。</p><p>然而这样 <em>AB</em> 跟 <em>BA</em> 子串会多减一次，所以要加回来。</p><p>注意数据范围，用 <code>long long</code>。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> maxN = <span class="number">300020</span>;</span><br><span class="line"><span class="keyword">char</span> arr[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = n * (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> same = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i - <span class="number">1</span>] == arr[i])</span><br><span class="line">same++;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ans -= same;</span><br><span class="line">same = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">same = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] == arr[i + <span class="number">1</span>])</span><br><span class="line">same++;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ans -= same;</span><br><span class="line">same = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">if</span> (arr[i - <span class="number">1</span>] != arr[i])</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"><span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n).eof()) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = solve(n);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Delicious子串&quot;&gt;&lt;a href=&quot;#Delicious子串&quot; class=&quot;headerlink&quot; title=&quot;Delicious子串&quot;&gt;&lt;/a&gt;&lt;strong&gt;Delicious子串&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;有个字符串，只由 A 或 B 组成，求有多少个子串是Delicious的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Delicious定义：对于一个字符串，我们认为它是Delicious的，当且仅当它的每一个字符都属于一个大于 1 的回文子串中。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="字符串" scheme="co10.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>消消乐</title>
    <link href="co10.github.io/2020/05/06/%E6%B6%88%E6%B6%88%E4%B9%90/"/>
    <id>co10.github.io/2020/05/06/%E6%B6%88%E6%B6%88%E4%B9%90/</id>
    <published>2020-05-06T08:23:35.000Z</published>
    <updated>2020-06-11T08:33:40.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="消消乐"><a href="#消消乐" class="headerlink" title="消消乐"></a><strong>消消乐</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">消消乐游戏在一个包含有 n (n ≤ 30)行 m (m ≤ 30)列的棋盘上进行，棋盘的每个格子都有一种颜色的棋子。当一行或一列上有连续三个或更多的相同颜色的棋子时，这些棋子都被消除。当有多处可以被消除时，这些地方的棋子将同时被消除。</span><br><span class="line">一个棋子可能在某一行和某一列同时被消除。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入第一行包含两个整数 n,m，表示行数和列数</span><br><span class="line">接下来 n 行 m 列，每行中数字用空格隔开，每个数字代表这个位置的棋子的颜色。数字都大于 0。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出 n 行 m 列，每行中数字用空格隔开，输出消除之后的棋盘。（如果一个方格中的棋子被消除，则对应的方格输出 0，否则输出棋子的颜色编号。）</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">4 5</span><br><span class="line">2 2 3 1 2</span><br><span class="line">3 4 5 1 4</span><br><span class="line">2 3 2 1 3</span><br><span class="line">2 2 2 4 4</span><br><span class="line">Output: </span><br><span class="line">2 2 3 0 2</span><br><span class="line">3 4 5 0 4</span><br><span class="line">2 3 2 0 3</span><br><span class="line">0 0 0 4 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">4 5</span><br><span class="line">2 2 3 1 2</span><br><span class="line">3 1 1 1 1</span><br><span class="line">2 3 2 1 3</span><br><span class="line">2 2 3 3 3</span><br><span class="line">Output: </span><br><span class="line">2 2 3 0 2</span><br><span class="line">3 0 0 0 0</span><br><span class="line">2 3 2 0 3</span><br><span class="line">2 2 0 0 0</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>咋一看好像是广搜，但其实暴力搜2次就行，而且广搜不好确定起点。</p><p>暴力做法是每行，搜出连着的数，置负。然后每列，搜出连着的数，置负。</p><p>输出的时候若是负数，则输出0，否则原样输出。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> arr[maxN][maxN];</span><br><span class="line"><span class="keyword">int</span> arr2[maxN][maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ve;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!ve.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = ve.back();</span><br><span class="line"><span class="keyword">if</span> (arr[i][x] != arr[i][j]) &#123;</span><br><span class="line"><span class="keyword">if</span> (ve.<span class="built_in">size</span>() &gt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = ve.front(); k &lt;= ve.back(); k++)</span><br><span class="line">arr2[i][k] = (<span class="number">-1</span>) * <span class="built_in">abs</span>(arr2[i][k]);</span><br><span class="line">&#125;</span><br><span class="line">ve.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ve.push_back(j);</span><br><span class="line"><span class="keyword">if</span> (j == m - <span class="number">1</span> &amp;&amp; ve.<span class="built_in">size</span>() &gt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = ve.front(); k &lt;= ve.back(); k++)</span><br><span class="line">arr2[i][k] = (<span class="number">-1</span>) * <span class="built_in">abs</span>(arr2[i][k]);</span><br><span class="line">ve.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ve;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!ve.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = ve.back();</span><br><span class="line"><span class="keyword">if</span> (arr[x][j] != arr[i][j]) &#123;</span><br><span class="line"><span class="keyword">if</span> (ve.<span class="built_in">size</span>() &gt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = ve.front(); k &lt;= ve.back(); k++)</span><br><span class="line">arr2[k][j] = (<span class="number">-1</span>) * <span class="built_in">abs</span>(arr2[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">ve.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ve.push_back(i);</span><br><span class="line"><span class="keyword">if</span> (i == n - <span class="number">1</span> &amp;&amp; ve.<span class="built_in">size</span>() &gt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = ve.front(); k &lt;= ve.back(); k++)</span><br><span class="line">arr2[k][j] = (<span class="number">-1</span>) * <span class="built_in">abs</span>(arr2[k][j]);</span><br><span class="line">ve.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr2[i][j] &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr2[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m).eof()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i][j];</span><br><span class="line">arr2[i][j] = arr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">solve(n, m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;消消乐&quot;&gt;&lt;a href=&quot;#消消乐&quot; class=&quot;headerlink&quot; title=&quot;消消乐&quot;&gt;&lt;/a&gt;&lt;strong&gt;消消乐&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;消消乐游戏在一个包含有 n (n ≤ 30)行 m (m ≤ 30)列的棋盘上进行，棋盘的每个格子都有一种颜色的棋子。当一行或一列上有连续三个或更多的相同颜色的棋子时，这些棋子都被消除。当有多处可以被消除时，这些地方的棋子将同时被消除。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一个棋子可能在某一行和某一列同时被消除。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>序列的段数</title>
    <link href="co10.github.io/2020/05/06/%E5%BA%8F%E5%88%97%E7%9A%84%E6%AE%B5%E6%95%B0/"/>
    <id>co10.github.io/2020/05/06/%E5%BA%8F%E5%88%97%E7%9A%84%E6%AE%B5%E6%95%B0/</id>
    <published>2020-05-06T08:23:11.000Z</published>
    <updated>2020-06-11T08:24:33.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序列的段数"><a href="#序列的段数" class="headerlink" title="序列的段数"></a><strong>序列的段数</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有一个序列，这个序列长度为 n (n ≤ 1000)，也就是一共有 n 个数(ai ≤ 1000)，求这个序列有几段？</span><br><span class="line">段的定义是位置连续的数值相同的最长整数序列</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入第一行一个整数 n，表示数的个数</span><br><span class="line">接下来一行 n 个空格隔开的整数，表示不同的数字</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出一行，这个序列有多少段</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">12</span><br><span class="line">2 3 3 6 6 6 1 1 4 5 1 4</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">8</span><br><span class="line"></span><br><span class="line">Explain: </span><br><span class="line">    序列可分为[2][3 3][6 6 6][1 1][4][5][1][4]  共八段</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>从头到尾扫一遍，若 <code>A[i] != A[i-1]</code>，则段数+1。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">int</span> arr[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i - <span class="number">1</span>] != arr[i])</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n).eof()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line"><span class="keyword">int</span> res = solve(n);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序列的段数&quot;&gt;&lt;a href=&quot;#序列的段数&quot; class=&quot;headerlink&quot; title=&quot;序列的段数&quot;&gt;&lt;/a&gt;&lt;strong&gt;序列的段数&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;有一个序列，这个序列长度为 n (n ≤ 1000)，也就是一共有 n 个数(ai ≤ 1000)，求这个序列有几段？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;段的定义是位置连续的数值相同的最长整数序列&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>播放CD</title>
    <link href="co10.github.io/2020/05/05/%E6%92%AD%E6%94%BECD/"/>
    <id>co10.github.io/2020/05/05/%E6%92%AD%E6%94%BECD/</id>
    <published>2020-05-05T09:51:29.000Z</published>
    <updated>2020-06-12T00:50:11.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="播放CD"><a href="#播放CD" class="headerlink" title="播放CD"></a><strong>播放CD</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">东东开车出去泡妞(在梦中)，车内提供了 m 张CD唱片，已知东东开车的时间是 n 分钟，他该如何去选择唱片去消磨这无聊的时间呢</span><br><span class="line">假设:</span><br><span class="line">CD数量不超过20张</span><br><span class="line">没有一张CD唱片超过 N 分钟</span><br><span class="line">每张唱片只能听一次</span><br><span class="line">唱片的播放长度为整数</span><br><span class="line"> N 也是整数</span><br><span class="line">我们需要找到最能消磨时间的唱片数量，并按使用顺序输出答案（必须是听完唱片，不能有唱片没听完却到了下车时间的情况发生）</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多组输入</span><br><span class="line">每行输入第一个数字N, 代表总时间，第二个数字 M 代表有 M 张唱片，后面紧跟 M 个数字，代表每张唱片的时长。</span><br><span class="line">例如样例一: N&#x3D;5, M&#x3D;3, 第一张唱片为 1 分钟, 第二张唱片 3 分钟, 第三张 4 分钟。</span><br><span class="line">所有数据均满足以下条件:</span><br><span class="line">N ≤ 10000</span><br><span class="line">M ≤ 20</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出所有唱片的时长和总时长，具体输出格式见样例</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">5 3 1 3 4</span><br><span class="line">10 4 9 8 4 2</span><br><span class="line">20 4 10 5 7 4</span><br><span class="line">90 8 10 23 1 2 3 4 5 7</span><br><span class="line">45 8 4 10 44 43 12 9 8 2</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">1 4 sum:5</span><br><span class="line">8 2 sum:10</span><br><span class="line">10 5 4 sum:19</span><br><span class="line">10 23 1 2 3 4 5 7 sum:55</span><br><span class="line">4 10 12 9 8 2 sum:45</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      3000 ms</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>题意就是从 <em>m</em> 个数中选出 <em>k</em> 个( <em>k</em> 不定)，使得这 <em>k</em> 个数的和为 <em>n</em>。这是个0-1背包问题。</p><p>用 <em>f</em><sub><em>i</em>, <em>j</em></sub> 表示考虑前 <em>i</em> 件物品，放入一个容量为 <em>j</em> 的背包可获得的最大价值。</p><script type="math/tex; mode=display">f_{i, j} = max(f_{i-1, j}, f_{i-1, j-w_i} + v_i)</script><p>对于第 <em>i</em> 件物品放或不放，若不放，则变成前 <em>i</em> - 1 件物品放入容量为 <em>j</em> 的背包中；若放，则前 <em>i</em> - 1 件物品放入容量为 <em>j</em> - <em>w</em><sub><em>i</em></sub> 的背包中。</p><p>本题用 <code>cnt[i][j]</code> 数组标记容量为 <em>j</em> 时，物品 <em>i</em> 取不取，用于输出。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">20000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxM = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[maxN];</span><br><span class="line"><span class="keyword">int</span> cnt[maxM][maxN];</span><br><span class="line"><span class="keyword">int</span> v[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> value, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxN; i++)</span><br><span class="line">arr[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxM; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; maxN; j++)</span><br><span class="line">cnt[i][j] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = value; j &gt;= v[i]; j--) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j - v[i]] + v[i] &gt; arr[j]) &#123;</span><br><span class="line">cnt[i][j] = <span class="number">1</span>;</span><br><span class="line">arr[j] = arr[j - v[i]] + v[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">int</span> j = value;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (cnt[i][j]) &#123;</span><br><span class="line">res.push_back(v[i]);</span><br><span class="line">j -= v[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = res.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sum:"</span> &lt;&lt; arr[value] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m).eof()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">solve(n, m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;播放CD&quot;&gt;&lt;a href=&quot;#播放CD&quot; class=&quot;headerlink&quot; title=&quot;播放CD&quot;&gt;&lt;/a&gt;&lt;strong&gt;播放CD&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;东东开车出去泡妞(在梦中)，车内提供了 m 张CD唱片，已知东东开车的时间是 n 分钟，他该如何去选择唱片去消磨这无聊的时间呢&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;假设:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CD数量不超过20张&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;没有一张CD唱片超过 N 分钟&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;每张唱片只能听一次&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;唱片的播放长度为整数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; N 也是整数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们需要找到最能消磨时间的唱片数量，并按使用顺序输出答案（必须是听完唱片，不能有唱片没听完却到了下车时间的情况发生）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="背包问题" scheme="co10.github.io/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>ATM</title>
    <link href="co10.github.io/2020/05/05/ATM/"/>
    <id>co10.github.io/2020/05/05/ATM/</id>
    <published>2020-05-05T09:51:05.000Z</published>
    <updated>2020-06-12T00:50:19.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ATM"><a href="#ATM" class="headerlink" title="ATM"></a><strong>ATM</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一家银行计划安装一台用于提取现金的机器, 机器能够按要求的现金量发送适当的账单。</span><br><span class="line">机器使用正好 N 种不同的面额钞票，例如 Dk，k &#x3D; 1, 2, …, N，并且对于每种面额 Dk，机器都有 nk 张钞票。</span><br><span class="line">例如：</span><br><span class="line">N &#x3D; 3，</span><br><span class="line">n1 &#x3D; 10，D1 &#x3D; 100，</span><br><span class="line">n2 &#x3D; 4，D2 &#x3D; 50，</span><br><span class="line">n3 &#x3D; 5，D3 &#x3D; 10</span><br><span class="line">表示机器有10张面额为100的钞票、4张面额为50的钞票、5张面额为10的钞票。</span><br><span class="line"></span><br><span class="line">东东在写一个 ATM 的程序，可根据具体金额请求机器交付现金。</span><br><span class="line">注意，这个程序计算程序得出的最大现金少于或等于可以根据设备的可用票据供应有效交付的现金。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">程序输入来自标准输入。 输入中的每个数据集代表特定交易，其格式为：</span><br><span class="line">Cash N n1 D1 n2 D2 ... nN DN</span><br><span class="line">其中 Cash (0 ≤ Cash ≤ 100000) 是所请求的现金量，N (0 ≤ N ≤ 10) 是纸币面额的数量，nk (0 ≤ nk ≤ 1000) 是 Dk (1 &lt;&#x3D; Dk &lt;&#x3D; 1000，k &#x3D; 1, 2, ..., N) 面额的可用纸币的数量。</span><br><span class="line">输入中的数字之间可以自由出现空格。输入数据正确。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每组数据，程序将在下一行中将结果打印到单独一行上的标准输出中。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">735 3  4 125  6 5  3 350</span><br><span class="line">633 4  500 30  6 100  1 5  0 1</span><br><span class="line">735 0</span><br><span class="line">0 3  10 100  10 50  10 10</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">735</span><br><span class="line">630</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">Explain: </span><br><span class="line">    第一个数据集指定一笔交易，其中请求的现金金额为 735。 机器包含3种面额的纸币：4张钞票 125、6 张钞票 5 和 3 张钞票 350。 机器可以交付所需现金的确切金额。</span><br><span class="line">在第二种情况下，机器的票据供应不能满足所要求的确切现金数量。 可以交付的最大现金为 630。 请注意，在机器中组合钞票以匹配交付的现金有多种可能性。</span><br><span class="line">    在第三种情况下，机器是空的，没有现金交付。 在第四种情况下，请求的现金金额为 0，因此机器不交付现金。</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    10000 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>多重背包问题。</p><p><code>f[i][j]</code> 表示前 <em>i</em> 种物品恰放入一个容量为 <em>V</em> 的背包的最大权值。<em>C</em><sub><em>i</em></sub> 表示物品个数。</p><script type="math/tex; mode=display">f_{i, j} = max(f_{i-1, j}, f_{i-1, j-k×w_i} + k × v_i | k=0,1,2,...,C_i)</script><p>本题钞票用数组表示 <em>x</em> 元选 <em>n</em><sub><em>i</em></sub> 张共 <em>x</em> × <em>n</em><sub><em>i</em></sub> 元。将<em>k</em> × <em>v</em><sub><em>i</em></sub> 优化成 <em>v</em><sub><em>i</em></sub> 。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> v, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ve)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = ve.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[v + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v + <span class="number">10</span>; i++)</span><br><span class="line">arr[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = v; j &gt;= ve[i]; j--)</span><br><span class="line">arr[j] = <span class="built_in">max</span>(arr[j], arr[j - ve[i]] + ve[i]);</span><br><span class="line"><span class="keyword">return</span> arr[v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cash, n;</span><br><span class="line"><span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; cash &gt;&gt; n).eof()) &#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> n0, d0;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n0 &gt;&gt; d0;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n0; j &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">v.push_back(j * d0);</span><br><span class="line">n0 -= j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n0)</span><br><span class="line">v.push_back(n0 * d0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cash == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = solve(cash, v);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ATM&quot;&gt;&lt;a href=&quot;#ATM&quot; class=&quot;headerlink&quot; title=&quot;ATM&quot;&gt;&lt;/a&gt;&lt;strong&gt;ATM&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;一家银行计划安装一台用于提取现金的机器, 机器能够按要求的现金量发送适当的账单。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;机器使用正好 N 种不同的面额钞票，例如 Dk，k &amp;#x3D; 1, 2, …, N，并且对于每种面额 Dk，机器都有 nk 张钞票。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;N &amp;#x3D; 3，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n1 &amp;#x3D; 10，D1 &amp;#x3D; 100，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n2 &amp;#x3D; 4，D2 &amp;#x3D; 50，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n3 &amp;#x3D; 5，D3 &amp;#x3D; 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;表示机器有10张面额为100的钞票、4张面额为50的钞票、5张面额为10的钞票。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;东东在写一个 ATM 的程序，可根据具体金额请求机器交付现金。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意，这个程序计算程序得出的最大现金少于或等于可以根据设备的可用票据供应有效交付的现金。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="背包问题" scheme="co10.github.io/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>连续寿司</title>
    <link href="co10.github.io/2020/05/05/%E8%BF%9E%E7%BB%AD%E5%AF%BF%E5%8F%B8/"/>
    <id>co10.github.io/2020/05/05/%E8%BF%9E%E7%BB%AD%E5%AF%BF%E5%8F%B8/</id>
    <published>2020-05-05T09:18:20.000Z</published>
    <updated>2020-06-11T07:49:50.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="连续寿司"><a href="#连续寿司" class="headerlink" title="连续寿司"></a><strong>连续寿司</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">东东和他的女朋友(幻想的)去寿司店吃晚餐(在梦中)，他发现了一个有趣的事情，这家餐厅提供的 n 个的寿司被连续的放置在桌子上 (有序)，东东可以选择一段连续的寿司来吃</span><br><span class="line"></span><br><span class="line">东东想吃鳗鱼，但是东妹想吃金枪鱼。核 平 起 见，他们想选择一段连续的寿司（这段寿司必须满足金枪鱼的数量等于鳗鱼的数量，且前一半全是一种，后一半全是另外一种）我们用1代表鳗鱼，2代表金枪鱼。</span><br><span class="line"></span><br><span class="line">比如，[2,2,2,1,1,1]这段序列是合法的，[1,2,1,2,1,2]是非法的。因为它不满足第二个要求。</span><br><span class="line"></span><br><span class="line">东东希望你能帮助他找到最长的一段合法寿司，以便自己能吃饱。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行：一个整数n（2 ≤ n ≤ 100000），寿司序列的长度。</span><br><span class="line">第二行：n 个整数（每个整数不是 1 就是 2，意义如上所述）</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个整数（代表东东可以选择的最长的一段连续的且合法的寿司）</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">7</span><br><span class="line">2 2 2 1 1 2 2</span><br><span class="line">Output: </span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">6</span><br><span class="line">1 2 1 2 1 2</span><br><span class="line">Output: </span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">9</span><br><span class="line">2 2 1 1 1 2 2 2 2</span><br><span class="line">Output: </span><br><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>用一个双向队列来维护。</p><p>若队空或元素与队尾相同，或者元素与队首不同，则入队。</p><p>否则，遇到了元素与队尾不同的情况，即类似于<code>AABBB</code>此时加入<code>A</code>，则需要把队首的所有<code>A</code>弹出，保证序列只能为<code>多个A-多个B</code>或<code>多个B-多个A</code>。此时，需要计算原队列<code>A-B</code>长度，取min，再把这个min与答案取max。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>* arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (q.empty() || (!q.empty() &amp;&amp; arr[i] == q.back())</span><br><span class="line">|| (!q.empty() &amp;&amp; q.front() != arr[i])) &#123;</span><br><span class="line">q.push_back(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!q.empty() &amp;&amp; q.back() != arr[i]) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front();</span><br><span class="line"><span class="keyword">int</span> c0 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (q.front() == x) &#123;</span><br><span class="line">q.pop_front();</span><br><span class="line">c0++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c1 = q.<span class="built_in">size</span>();</span><br><span class="line">res = <span class="built_in">max</span>(res, <span class="number">2</span> * <span class="built_in">min</span>(c0, c1));</span><br><span class="line">q.push_back(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front();</span><br><span class="line"><span class="keyword">int</span> c0 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (q.front() == x) &#123;</span><br><span class="line">q.pop_front();</span><br><span class="line">c0++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c1 = q.<span class="built_in">size</span>();</span><br><span class="line">res = <span class="built_in">max</span>(res, <span class="number">2</span> * <span class="built_in">min</span>(c0, c1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n).eof()) &#123;</span><br><span class="line"><span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line"><span class="keyword">int</span> ans = solve(n, arr);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;连续寿司&quot;&gt;&lt;a href=&quot;#连续寿司&quot; class=&quot;headerlink&quot; title=&quot;连续寿司&quot;&gt;&lt;/a&gt;&lt;strong&gt;连续寿司&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;东东和他的女朋友(幻想的)去寿司店吃晚餐(在梦中)，他发现了一个有趣的事情，这家餐厅提供的 n 个的寿司被连续的放置在桌子上 (有序)，东东可以选择一段连续的寿司来吃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;东东想吃鳗鱼，但是东妹想吃金枪鱼。核 平 起 见，他们想选择一段连续的寿司（这段寿司必须满足金枪鱼的数量等于鳗鱼的数量，且前一半全是一种，后一半全是另外一种）我们用1代表鳗鱼，2代表金枪鱼。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;比如，[2,2,2,1,1,1]这段序列是合法的，[1,2,1,2,1,2]是非法的。因为它不满足第二个要求。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;东东希望你能帮助他找到最长的一段合法寿司，以便自己能吃饱。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>解码</title>
    <link href="co10.github.io/2020/05/05/%E8%A7%A3%E7%A0%81/"/>
    <id>co10.github.io/2020/05/05/%E8%A7%A3%E7%A0%81/</id>
    <published>2020-05-05T09:03:08.000Z</published>
    <updated>2020-06-11T06:49:27.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ASCII解码"><a href="#ASCII解码" class="headerlink" title="ASCII解码"></a><strong>ASCII解码</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Julius Caesar 曾经使用过一种很简单的密码。对于明文中的每个字符，将它用它字母表中后 55 位对应的字符来代替，这样就得到了密文。比如字符&#39;A&#39;用&#39;F&#39;来代替。如下是密文和明文中字符的对应关系。</span><br><span class="line"></span><br><span class="line">密文: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</span><br><span class="line">明文: V W X Y Z A B C D E F G H I J K L M N O P Q R S T U</span><br><span class="line"></span><br><span class="line">你的任务是对给定的密文进行解密得到明文。</span><br><span class="line">你需要注意的是，密文中出现的字母都是大写字母。密文中也包括非字母的字符，对这些字符不用进行解码。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一行，给出密文，密文不为空，而且其中的字符数不超过 200。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出一行，即密文对应的明文。</span><br><span class="line">输出时每行末尾的多余空格，不影响答案正确性</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    65536 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>根据加密原则，易得：<code>大写英文字母密文 = (大写英文字母明文 + 5) % 26</code>，解密就是：<code>大写英文字母明文 = (大写英文字母密文 + 21) % 26</code>。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line"><span class="keyword">while</span> (!(getline(<span class="built_in">cin</span>, a).eof())) &#123;</span><br><span class="line"><span class="keyword">int</span> sz = a.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt;= <span class="number">65</span> &amp;&amp; a[i] &lt;= <span class="number">90</span>)</span><br><span class="line">a[i] = (a[i] - <span class="number">65</span> - <span class="number">5</span> + <span class="number">26</span>) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ASCII解码&quot;&gt;&lt;a href=&quot;#ASCII解码&quot; class=&quot;headerlink&quot; title=&quot;ASCII解码&quot;&gt;&lt;/a&gt;&lt;strong&gt;ASCII解码&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Julius Caesar 曾经使用过一种很简单的密码。对于明文中的每个字符，将它用它字母表中后 55 位对应的字符来代替，这样就得到了密文。比如字符&amp;#39;A&amp;#39;用&amp;#39;F&amp;#39;来代替。如下是密文和明文中字符的对应关系。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;密文: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;明文: V W X Y Z A B C D E F G H I J K L M N O P Q R S T U&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你的任务是对给定的密文进行解密得到明文。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;你需要注意的是，密文中出现的字母都是大写字母。密文中也包括非字母的字符，对这些字符不用进行解码。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>方阵</title>
    <link href="co10.github.io/2020/05/05/%E6%96%B9%E9%98%B5/"/>
    <id>co10.github.io/2020/05/05/%E6%96%B9%E9%98%B5/</id>
    <published>2020-05-05T08:24:33.000Z</published>
    <updated>2020-06-11T06:43:22.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方阵旋转"><a href="#方阵旋转" class="headerlink" title="方阵旋转"></a><strong>方阵旋转</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">蒜头君的班级里有 n^2 (1 ≤ n ≤ 20) 个同学，现在全班同学已经排列成一个 n × n 的方阵，但是老师却临时给出了一组新的列队方案</span><br><span class="line">为了方便列队，所以老师只关注这个方阵中同学的性别，不看具体的人是谁</span><br><span class="line">这里我们用 0 表示男生，用 1 表示女生</span><br><span class="line">现在蒜头君告诉你同学们已经排好的方阵是什么样的，再告诉你老师希望的方阵是什么样的</span><br><span class="line">他想知道同学们已经列好的方阵能否通过顺时针旋转变成老师希望的方阵</span><br><span class="line">不需要旋转则输出 0</span><br><span class="line">顺时针旋转 90° 则输出 1</span><br><span class="line">顺时针旋转 180° 则输出 2</span><br><span class="line">顺时针旋转 270° 则输出 3</span><br><span class="line">若不满足以上四种情况则输出 -1</span><br><span class="line">若满足多种情况，则输出较小的数字</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行为一个整数 n</span><br><span class="line">接下来的 n 行同学们已经列好的 01 方阵；</span><br><span class="line">再接下来的 n 行表示老师希望的的 01 方阵。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出仅有一行，该行只有一个整数，如题所示。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">4</span><br><span class="line">0 0 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 1 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 1 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    524288 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>n 阶方阵 <code>M</code>，对于点 <code>i, j</code>(1 ≤ <em>i</em> ≤ <em>n</em>, 1 ≤ <em>j</em> ≤ <em>n</em>)，<code>M[i][j]</code> 顺时针 90°: <code>M[j][n - i + 1]</code>，180°: <code>M[n - i + 1][n - j + 1]</code>，270°: <code>M[n - j + 1][i]</code>。数组从 0 记到 n - 1 的话得把 <code>n - i + 1</code> 改成 <code>n - 1 - i + 1 - 1 = n - i - 1</code>.</p><p>遍历的时候判断是否旋转，根据题意输出即可。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">410</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr1[maxN][maxN];</span><br><span class="line"><span class="keyword">int</span> arr2[maxN][maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxN; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; maxN; j++) &#123;</span><br><span class="line">arr1[i][j] = <span class="number">0</span>;</span><br><span class="line">arr2[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rotateM</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> r0 = <span class="literal">true</span>, r1 = <span class="literal">true</span>, r2 = <span class="literal">true</span>, r3 = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr1[i][j] != arr2[i][j])</span><br><span class="line">r0 = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr1[i][j] != arr2[j][n - i - <span class="number">1</span>])</span><br><span class="line">r1 = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr1[i][j] != arr2[n - i - <span class="number">1</span>][n - j - <span class="number">1</span>])</span><br><span class="line">r2 = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr1[i][j] != arr2[n - j - <span class="number">1</span>][i])</span><br><span class="line">r3 = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r0)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (r1)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (r2)</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (r3)</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n).eof()) &#123;</span><br><span class="line">reset();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr1[i][j];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr2[i][j];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = rotateM(n);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;方阵旋转&quot;&gt;&lt;a href=&quot;#方阵旋转&quot; class=&quot;headerlink&quot; title=&quot;方阵旋转&quot;&gt;&lt;/a&gt;&lt;strong&gt;方阵旋转&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;蒜头君的班级里有 n^2 (1 ≤ n ≤ 20) 个同学，现在全班同学已经排列成一个 n × n 的方阵，但是老师却临时给出了一组新的列队方案&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;为了方便列队，所以老师只关注这个方阵中同学的性别，不看具体的人是谁&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这里我们用 0 表示男生，用 1 表示女生&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;现在蒜头君告诉你同学们已经排好的方阵是什么样的，再告诉你老师希望的方阵是什么样的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;他想知道同学们已经列好的方阵能否通过顺时针旋转变成老师希望的方阵&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不需要旋转则输出 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;顺时针旋转 90° 则输出 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;顺时针旋转 180° 则输出 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;顺时针旋转 270° 则输出 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;若不满足以上四种情况则输出 -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;若满足多种情况，则输出较小的数字&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>买房</title>
    <link href="co10.github.io/2020/05/05/%E4%B9%B0%E6%88%BF/"/>
    <id>co10.github.io/2020/05/05/%E4%B9%B0%E6%88%BF/</id>
    <published>2020-05-05T07:46:29.000Z</published>
    <updated>2020-06-12T00:49:41.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="买房问题"><a href="#买房问题" class="headerlink" title="买房问题"></a><strong>买房问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">蒜头君从现在开始工作，年薪 N 万。他希望在蒜厂附近买一套 60 平米的房子，现在价格是 200 万。假设房子价格以每年百分之 K 增长，并且蒜头君未来年薪不变，且不吃不喝，不用交税，每年所得 N 万全都积攒起来，问第几年能够买下这套房子？（第一年年薪 N 万，房价 200 万）</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一行，包含两个正整数 N (10 ≤N ≤ 50)，K (1 ≤ K ≤ 20)，中间用单个空格隔开。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果在第 20 年或者之前就能买下这套房子，则输出一个整数 M，表示最早需要在第 M 年能买下；否则输出&quot;Impossible&quot;。</span><br><span class="line">输出时每行末尾的多余空格，不影响答案正确性</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">50 10</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">8</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    32767 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>纯数学题。假设 <em>x</em> 年后可买房，则：</p><script type="math/tex; mode=display">xN ≥ 200(1+0.01k)^{x-1}，1 ≤ x ≤ 20</script><p>逐年枚举 <em>x</em> 求解就行，注意 <code>float</code> 的细节。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k).eof()) &#123;</span><br><span class="line"><span class="keyword">float</span> y = (<span class="keyword">float</span>) n / <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> z = (<span class="keyword">float</span>)(powf((<span class="keyword">float</span>)(<span class="number">1</span> + k * <span class="number">0.01</span>), (<span class="keyword">float</span>)(x - <span class="number">1</span>))) / x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (z &gt;= y) &#123;</span><br><span class="line">x++;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">20</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">z = (<span class="keyword">float</span>) (powf((<span class="keyword">float</span>)(<span class="number">1</span> + k * <span class="number">0.01</span>), (<span class="keyword">float</span>)(x - <span class="number">1</span>))) / x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">20</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;买房问题&quot;&gt;&lt;a href=&quot;#买房问题&quot; class=&quot;headerlink&quot; title=&quot;买房问题&quot;&gt;&lt;/a&gt;&lt;strong&gt;买房问题&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;蒜头君从现在开始工作，年薪 N 万。他希望在蒜厂附近买一套 60 平米的房子，现在价格是 200 万。假设房子价格以每年百分之 K 增长，并且蒜头君未来年薪不变，且不吃不喝，不用交税，每年所得 N 万全都积攒起来，问第几年能够买下这套房子？（第一年年薪 N 万，房价 200 万）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
