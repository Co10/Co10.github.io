<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荒芜知地</title>
  
  <subtitle>Knowhere</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="co10.github.io/"/>
  <updated>2021-05-22T06:07:19.244Z</updated>
  <id>co10.github.io/</id>
  
  <author>
    <name>K</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>more system calls in Nachos</title>
    <link href="co10.github.io/2021/05/21/more-system-calls-in-Nachos/"/>
    <id>co10.github.io/2021/05/21/more-system-calls-in-Nachos/</id>
    <published>2021-05-21T02:42:30.000Z</published>
    <updated>2021-05-22T06:07:19.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Multi-thread"><a href="#Multi-thread" class="headerlink" title="Multi-thread"></a>Multi-thread</h2><p>Currently Nachos does not support multi-thread (or multi-process), so we need a <code>pid</code> to note the process.</p><a id="more"></a><p>Modify <code>bar.c</code> : </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SpaceId pid = Exec(<span class="string">"../test/exec.noff"</span>);</span><br><span class="line">    Halt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpaceId"><a href="#SpaceId" class="headerlink" title="SpaceId"></a><code>SpaceId</code></h3><p>In <code>exception.cc</code> , add :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StartProcess</span><span class="params">(<span class="keyword">int</span> spaceID)</span> </span>&#123;</span><br><span class="line">    currentThread-&gt;space-&gt;InitRegisters();</span><br><span class="line">    currentThread-&gt;space-&gt;RestoreState();</span><br><span class="line">    machine-&gt;Run();</span><br><span class="line">    ASSERT(FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>addrspace.h</code> :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> spaceID;</span><br><span class="line">    <span class="keyword">static</span> BitMap* userMap, pidMap;</span><br></pre></td></tr></table></figure><p><code>addrspace.cc</code> :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max_UserProcess 256</span></span><br><span class="line"></span><br><span class="line">BitMap* AddrSpace::userMap = <span class="keyword">new</span> BitMap(NumPhysPages);</span><br><span class="line">BitMap* AddrSpace::pidMap = <span class="keyword">new</span> BitMap(Max_UserProcess);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">AddrSpace::getSpaceId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> spaceID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AddrSpace::AddrSpace(OpenFile *executable) &#123;</span><br><span class="line">    spaceID = pidMap-&gt;Find()+<span class="number">100</span>; <span class="comment">// find a pid for the process</span></span><br><span class="line">    <span class="comment">// ...........</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AddrSpace::~AddrSpace() &#123;</span><br><span class="line">    pidMap-&gt;Clear(spaceID<span class="number">-100</span>); <span class="comment">// remember to remove it</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numPages; i++) &#123;</span><br><span class="line">        userMap-&gt;Clear(pageTable[i].physicalPage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] pageTable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To test whether the space id works, print the <code>pid</code> in <code>StartProcess</code> :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"PID: %d\n"</span>, space-&gt;getSpaceId());</span><br><span class="line">space-&gt;<span class="built_in">print</span>();</span><br></pre></td></tr></table></figure><p>Then <code>make clean</code>, <code>make</code>, <code>./nachos -d -x ../test/bar.noff</code> :</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PID: 100</span><br><span class="line">page table dump: 11 pages in total</span><br><span class="line">============================================</span><br><span class="line">        VirtPage,       PhysPage</span><br><span class="line">         0,             0</span><br><span class="line">         1,             1</span><br><span class="line">         2,             2</span><br><span class="line">         3,             3</span><br><span class="line">         4,             4</span><br><span class="line">         5,             5</span><br><span class="line">         6,             6</span><br><span class="line">         7,             7</span><br><span class="line">         8,             8</span><br><span class="line">         9,             9</span><br><span class="line">         10,            10</span><br><span class="line">============================================</span><br><span class="line"></span><br><span class="line">[1 2], SC_Exec</span><br><span class="line">../test/exec.noff</span><br><span class="line">Initializing code segment, at 0x580, size 256</span><br><span class="line">EXEC: PID: 101</span><br><span class="line">[1 0], SC_Halt</span><br><span class="line">Machine halting!</span><br></pre></td></tr></table></figure><p>We see the main process with <code>pid</code> 100 and the exec process with <code>pid</code> 101.</p><h2 id="Exit"><a href="#Exit" class="headerlink" title="Exit()"></a><code>Exit()</code></h2><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">.globl Exit</span><br><span class="line">.entExit</span><br><span class="line">Exit:</span><br><span class="line">addiu $<span class="number">2</span>,$<span class="number">0</span>,SC_Exit</span><br><span class="line">syscall</span><br><span class="line">j$<span class="number">31</span></span><br><span class="line">.end Exit</span><br></pre></td></tr></table></figure><p>Create a file named <code>exit.c</code> in <code>test</code> directory :</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"syscall.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <code>Makefile</code>, add <code>exit</code> to target in line 53, then <code>make</code>.</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">targets = exit exec bar halt shell matmult sort</span><br></pre></td></tr></table></figure><p>To generate a <code>.s</code> file: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/mips/bin/decstation-ultrix-gcc -I ../userprog -I ../threads -S exit.c</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">.file<span class="number">1</span> <span class="string">"exit.c"</span></span><br><span class="line">gcc2_compiled.:</span><br><span class="line">__gnu_compiled_c:</span><br><span class="line">.text</span><br><span class="line">.align<span class="number">2</span></span><br><span class="line">.globlmain</span><br><span class="line">.entmain</span><br><span class="line">main:</span><br><span class="line">.frame$fp,<span class="number">24</span>,$<span class="number">31</span><span class="comment"># vars= 0, regs= 2/0, args= 16, extra= 0</span></span><br><span class="line">.mask<span class="number">0xc0000000</span>,-<span class="number">4</span></span><br><span class="line">.fmask<span class="number">0x00000000</span>,<span class="number">0</span></span><br><span class="line">subu$sp,$sp,<span class="number">24</span></span><br><span class="line">sw$<span class="number">31</span>,<span class="number">20</span>($sp)</span><br><span class="line">sw$fp,<span class="number">16</span>($sp)</span><br><span class="line">move$fp,$sp</span><br><span class="line">jal__main</span><br><span class="line">li$<span class="number">4</span>,<span class="number">1</span><span class="comment"># 0x00000001</span></span><br><span class="line">jalExit</span><br><span class="line">$L1:</span><br><span class="line">move$sp,$fp</span><br><span class="line">lw$<span class="number">31</span>,<span class="number">20</span>($sp)</span><br><span class="line">lw$fp,<span class="number">16</span>($sp)</span><br><span class="line">addu$sp,$sp,<span class="number">24</span></span><br><span class="line">j$<span class="number">31</span></span><br><span class="line">.endmain</span><br></pre></td></tr></table></figure><p>We see <code>li    $4,1</code> , which means it passes the argument to Register 4. And the argument is the exit code.</p><p>We need to save the exit code, so modify <code>exception.cc</code> : </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == SC_Exit) &#123;</span><br><span class="line">    <span class="keyword">int</span> exitCode = machine-&gt;ReadRegister(<span class="number">4</span>);</span><br><span class="line">    machine-&gt;WriteRegister(<span class="number">2</span>, exitCode);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------[SC_Exit] PID: %d exit_code: %d--------\n"</span>, (currentThread-&gt;space)-&gt;getSpaceId(), exitCode);</span><br><span class="line">    <span class="keyword">delete</span> currentThread-&gt;space;</span><br><span class="line">    currentThread-&gt;Finish();</span><br><span class="line">    advancePC();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>New file <code>test_exit.c</code> :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"syscall.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SpaceId pid1 = Exec(<span class="string">"../test/exit.noff"</span>);</span><br><span class="line">    SpaceId pid2 = Exec(<span class="string">"../test/halt.noff"</span>);</span><br><span class="line">    Exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After <code>make</code> (Don’t forget to add it in <code>Makefile</code>), test it by <code>./nachos -d -x ../test/test_exit.noff</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--------[SC_Exec] PID: 100 filename: ../test/exit.noff--------</span><br><span class="line">Initializing code segment, at 0x580, size 256</span><br><span class="line">--------[SC_Exec] PID: 100 filename: ../test/halt.noff--------</span><br><span class="line">Initializing code segment, at 0xa80, size 320</span><br><span class="line">--------[SC_Exit] PID: 100 exit_code: 0--------</span><br><span class="line">--------[SC_Exit] PID: 101 exit_code: 1--------</span><br><span class="line">--------[SC_Halt] PID: 102--------</span><br><span class="line">Machine halting!</span><br></pre></td></tr></table></figure><p>The main process with <code>PID = 100</code>, executes <code>exit.noff</code> and <code>halt.noff</code>, then exits with code <code>0</code>; while the <code>exit.noff</code> gets it <code>PID = 101</code>, exits with code <code>1</code>, and the <code>halt.noff</code> with <code>PID = 102</code> halts. </p><p>So there is a little problem: the father process won’t wait until its child process exits. That’s what <code>Join</code> does.</p><h2 id="Join"><a href="#Join" class="headerlink" title="Join()"></a><code>Join()</code></h2><p>This is similar to <code>pthread_join(tid)</code> in Linux, waiting for a process then it continues.</p><p>Here is how it works: </p><ol><li>The child process is in a waiting queue.</li><li><code>Join()</code> sleeps the current process.</li><li>Get a process from waiting queue, give it CPU.</li><li>After it ends, <code>Finish</code> it, then wake up father process.</li><li>The father process get the <code>Join</code> code, wake up.</li></ol><p>In <code>scheduler.h</code> in threads directory: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USER_PROGRAM</span></span><br><span class="line">    <span class="function">List* <span class="title">getWaitingList</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> waitingList; &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    List *readyList;  <span class="comment">// queue of threads that are ready to run, but not running</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USER_PROGRAM</span></span><br><span class="line">    List *waitingList;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>In <code>scheduler.cc</code> : </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Scheduler</span>::<span class="built_in">Scheduler</span>() &#123; </span><br><span class="line">    readyList = <span class="keyword">new</span> List;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USER_PROGRAM</span></span><br><span class="line">    waitingList = <span class="keyword">new</span> List;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">Scheduler</span>::~<span class="built_in">Scheduler</span>() &#123; </span><br><span class="line">    <span class="keyword">delete</span> readyList;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USER_PROGRAM</span></span><br><span class="line">    <span class="keyword">delete</span> waitingList;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <code>thread.h</code> in <code>threads</code> directory, add: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Join</span><span class="params">(SpaceId id)</span></span>;</span><br></pre></td></tr></table></figure><p>Forget it. Too complex and too hard.</p><h2 id="Yield"><a href="#Yield" class="headerlink" title="Yield()"></a><code>Yield()</code></h2><p>Just use the original <code>Yield()</code> :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == SC_Yield) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------[SC_Yield] PID: %d--------\n"</span>, (currentThread-&gt;space)-&gt;getSpaceId());</span><br><span class="line">    currentThread-&gt;Yield();</span><br><span class="line">    advancePC();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>New a file named <code>yield.c</code> in <code>test</code> directory :</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"syscall.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SpaceId pid = Exec(<span class="string">"../test/exit.noff"</span>);</span><br><span class="line">    Yield();</span><br><span class="line">    Exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>./nachos -d -x ../test/yield.noff</code> :</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--------[SC_Exec] PID: 100 filename: ../test/exit.noff--------</span><br><span class="line">Initializing code segment, at 0x580, size 256</span><br><span class="line">--------[SC_Yield] PID: 100--------</span><br><span class="line">--------[SC_Exit] PID: 101 exit_code: 1--------</span><br><span class="line">--------[SC_Exit] PID: 100 exit_code: 0--------</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br></pre></td></tr></table></figure><p>First, exec, then yield, then the child exits. At last it exits.</p><h2 id="File-Operation"><a href="#File-Operation" class="headerlink" title="File Operation"></a>File Operation</h2><h3 id="Create"><a href="#Create" class="headerlink" title="Create()"></a><code>Create()</code></h3><p>Obviously, create need to read a filename, then create an empty file:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == SC_Create) &#123;</span><br><span class="line">    <span class="keyword">int</span> address = machine-&gt;ReadRegister(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">char</span> filename[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++) &#123;</span><br><span class="line">        machine-&gt;ReadMem(address+i, <span class="number">1</span>, (<span class="keyword">int</span> *)&amp;filename[i]);</span><br><span class="line">        <span class="keyword">if</span> (filename[i] == <span class="string">'\0'</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------[SC_Create] PID: %d, filename: %s--------\n"</span>, (currentThread-&gt;space)-&gt;getSpaceId(), filename);</span><br><span class="line">    <span class="keyword">int</span> fileDescriptor = OpenForWrite(filename); </span><br><span class="line">    <span class="keyword">if</span> (fileDescriptor == <span class="number">-1</span>) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"create file %s failed!\n"</span>, filename);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"create file %s succeed!, the file id is %d\n"</span>, filename, fileDescriptor);</span><br><span class="line">    Close(fileDescriptor); </span><br><span class="line">    <span class="comment">//machine-&gt;WriteRegister(2,fileDescriptor);</span></span><br><span class="line">    advancePC();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Open"><a href="#Open" class="headerlink" title="Open()"></a><code>Open()</code></h3><p>It opens a file, then returns the file id(write to register 2 for future use):</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == SC_Open) &#123;</span><br><span class="line">          <span class="keyword">int</span> address = machine-&gt;ReadRegister(<span class="number">4</span>);</span><br><span class="line">          <span class="keyword">char</span> filename[<span class="number">128</span>];</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++) &#123;</span><br><span class="line">              machine-&gt;ReadMem(address+i, <span class="number">1</span>, (<span class="keyword">int</span> *)&amp;filename[i]);</span><br><span class="line">              <span class="keyword">if</span> (filename[i] == <span class="string">'\0'</span>)</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"--------[SC_Open] PID: %d, filename: %s--------\n"</span>, (currentThread-&gt;space)-&gt;getSpaceId(), filename);</span><br><span class="line">          <span class="keyword">int</span> fileDescriptor = OpenForWrite(filename); </span><br><span class="line">          <span class="keyword">if</span> (fileDescriptor == <span class="number">-1</span>) </span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"open file %s failed!\n"</span>, filename);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"open file %s succeed!, the file id is %d\n"</span>, filename, fileDescriptor);</span><br><span class="line">          machine-&gt;WriteRegister(<span class="number">2</span>, fileDescriptor);</span><br><span class="line">          advancePC();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="Write"><a href="#Write" class="headerlink" title="Write()"></a><code>Write()</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Write "size" bytes from "buffer" to the open file. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">buffer</span>, <span class="keyword">int</span> <span class="built_in">size</span>, OpenFileId id)</span></span>;</span><br></pre></td></tr></table></figure><p>3 arguments, obviously.</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == SC_Write) &#123;</span><br><span class="line">    <span class="keyword">int</span> address = machine-&gt;ReadRegister(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">int</span> bufsize = machine-&gt;ReadRegister(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">int</span> fileID = machine-&gt;ReadRegister(<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------[SC_Write] PID: %d, fileid: %d, buffer address: %d with size=%d--------\n"</span>, (currentThread-&gt;space)-&gt;getSpaceId(), fileID, address, bufsize);</span><br><span class="line">    OpenFile* openfile = <span class="keyword">new</span> OpenFile(fileID);</span><br><span class="line">    ASSERT(openfile != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bufsize; i++) &#123;</span><br><span class="line">        machine-&gt;ReadMem(address+i, <span class="number">1</span>, (<span class="keyword">int</span> *)&amp;<span class="built_in">buffer</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">buffer</span>[bufsize] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"the buffer is %s\n"</span>, <span class="built_in">buffer</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> WritePosition;</span><br><span class="line">    <span class="keyword">if</span> (fileID == <span class="number">1</span>)</span><br><span class="line">        WritePosition = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        WritePosition = openfile-&gt;Length();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> writtenBytes = openfile-&gt;WriteAt(<span class="built_in">buffer</span>, bufsize, WritePosition);</span><br><span class="line">    <span class="keyword">if</span> ((writtenBytes) == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Writing file failed!\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\"%s\" has been written in file %d successfully!\n"</span>, <span class="built_in">buffer</span>, fileID);</span><br><span class="line">    advancePC();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Read"><a href="#Read" class="headerlink" title="Read()"></a><code>Read()</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Read "size" bytes from the open file into "buffer".  </span></span><br><span class="line"><span class="comment"> * Return the number of bytes actually read -- if the open file isn't long enough, or if it is an I/O device, and there aren't enough characters to read, return whatever is available (for I/O devices, you should always wait until you can return at least one character). */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Read</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">buffer</span>, <span class="keyword">int</span> <span class="built_in">size</span>, OpenFileId id)</span></span>;</span><br></pre></td></tr></table></figure><p>Similar to <code>write()</code> :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == SC_Read) &#123;</span><br><span class="line">    <span class="keyword">int</span> address = machine-&gt;ReadRegister(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">int</span> bufsize = machine-&gt;ReadRegister(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">int</span> fileID = machine-&gt;ReadRegister(<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------[SC_Read] PID: %d, fileid: %d, buffer address: %d with size=%d--------\n"</span>, (currentThread-&gt;space)-&gt;getSpaceId(), fileID, address, bufsize);</span><br><span class="line">    </span><br><span class="line">    OpenFile* openfile = <span class="keyword">new</span> OpenFile(fileID);</span><br><span class="line">    ASSERT(openfile != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">int</span> readnum = openfile-&gt;Read(<span class="built_in">buffer</span>, bufsize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bufsize; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!machine-&gt;WriteMem(address, <span class="number">1</span>, <span class="built_in">buffer</span>[i]))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"There is something wrong.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">buffer</span>[bufsize] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Read successfully! The content is \"%s\" , length = %d\n"</span>, <span class="built_in">buffer</span>, bufsize);</span><br><span class="line">    machine-&gt;WriteRegister(<span class="number">2</span>, readnum);</span><br><span class="line">    advancePC();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Close"><a href="#Close" class="headerlink" title="Close()"></a><code>Close()</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Close the file, we're done reading and writing to it. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Close</span><span class="params">(OpenFileId id)</span></span>;</span><br></pre></td></tr></table></figure><p>Quite simple: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == SC_Close) &#123;</span><br><span class="line">    <span class="keyword">int</span> fileID = machine-&gt;ReadRegister(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------[SC_Close] PID: %d, fileid: %d--------\n"</span>, (currentThread-&gt;space)-&gt;getSpaceId(), fileID);</span><br><span class="line">    Close(fileID);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Close file[%d] successfully!\n"</span>, fileID);</span><br><span class="line">    advancePC();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><p>New file named <code>filetest.c</code> in <code>test</code> directory :</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"syscall.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    OpenFileId file;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> readsz;</span><br><span class="line">    Create(<span class="string">"Test"</span>);</span><br><span class="line">    file = Open(<span class="string">"Test"</span>);</span><br><span class="line">    Write(<span class="string">"something to test."</span>, <span class="number">15</span>, file);</span><br><span class="line">    readsz = Read(<span class="built_in">buffer</span>, <span class="number">10</span>, file);</span><br><span class="line">    Close(file);</span><br><span class="line">    Exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>./nachos -d -x ../test/filetest.noff</code> : </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--------[SC_Create] PID: 100, filename: Test--------</span><br><span class="line">create file Test succeed!, the file id is 3</span><br><span class="line">--------[SC_Open] PID: 100, filename: Test--------</span><br><span class="line">open file Test succeed!, the file id is 3</span><br><span class="line">--------[SC_Write] PID: 100, fileid: 3, buffer address: 360 with size=15--------</span><br><span class="line">the buffer is something to te</span><br><span class="line">"something to te" has been written in file 3 successfully!</span><br><span class="line">--------[SC_Read] PID: 100, fileid: 3, buffer address: 1320 with size=10--------</span><br><span class="line">Read successfully! The content is "something " , length = 10</span><br><span class="line">--------[SC_Close] PID: 100, fileid: 3--------</span><br><span class="line">Close file[3] successfully!</span><br><span class="line">--------[SC_Exit] PID: 100 exit_code: 0--------</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br></pre></td></tr></table></figure><p>Nothing wrong.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Multi-thread&quot;&gt;&lt;a href=&quot;#Multi-thread&quot; class=&quot;headerlink&quot; title=&quot;Multi-thread&quot;&gt;&lt;/a&gt;Multi-thread&lt;/h2&gt;&lt;p&gt;Currently Nachos does not support multi-thread (or multi-process), so we need a &lt;code&gt;pid&lt;/code&gt; to note the process.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="co10.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>The Expansion of Nachos Address Space</title>
    <link href="co10.github.io/2021/05/11/The-Expansion-of-Nachos-Address-Space/"/>
    <id>co10.github.io/2021/05/11/The-Expansion-of-Nachos-Address-Space/</id>
    <published>2021-05-11T06:39:52.000Z</published>
    <updated>2021-05-21T12:55:29.618Z</updated>
    
    <content type="html"><![CDATA[<p>Actually, we only need to modify the <code>addrspace</code> code, but it cannot be tested directly, so there is an <code>Exec</code> system call. </p><a id="more"></a><h2 id="New-codes"><a href="#New-codes" class="headerlink" title="New codes"></a>New codes</h2><p>Create a file named <code>exec.c</code> , and <code>bar.c</code> in <code>test</code> directory.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// exec.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"syscall.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Halt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bar.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"syscall.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Exec(<span class="string">"../test/exec.noff"</span>);</span><br><span class="line">    Halt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then Modify <code>Makefile</code> in <code>test</code> directory: </p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">## in line 53</span></span><br><span class="line">targets = exec bar halt shell matmult sort</span><br><span class="line"></span><br><span class="line"><span class="comment">## in line 74</span></span><br><span class="line">INCDIR = -I../lab7-8 -I../userprog -I../threads</span><br></pre></td></tr></table></figure><p><code>make</code>.</p><p>Then in <code>userprog</code> directory, run below: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nachos -d m -x ../test/bar.noff</span><br></pre></td></tr></table></figure><p>Then we got: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Exception: syscall</span><br><span class="line">Unexpected user mode exception 1 2</span><br><span class="line">Assertion failed: line 61, file "exception.cc"</span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure><p>This is because when executing <code>Exec(&quot;../test/exec.noff&quot;);</code> , the system should load <code>../test/exec.noff</code> to memory, and allocate address space for it, but in the last experiment we know that in the construction of <code>AddrSpace</code> we just simply project virtual page to physical page with the same index, so when loading a new program the project of pages will be covered and destroyed. </p><h2 id="Modify-codes"><a href="#Modify-codes" class="headerlink" title="Modify codes"></a>Modify codes</h2><h3 id="AddrSpace"><a href="#AddrSpace" class="headerlink" title="AddrSpace"></a><code>AddrSpace</code></h3><p>In <code>AddrSpace</code>, we need to note which pages are taken, so add a bitmap in <code>addrspace.h</code> in <code>private</code> area: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> BitMap* userMap;</span><br></pre></td></tr></table></figure><p>Don’t forget to <code>include &quot;bitmap.h&quot;</code> . Then assign it in <code>addrspace.cc</code> :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BitMap* AddrSpace::userMap = <span class="keyword">new</span> BitMap(NumPhysPages);</span><br></pre></td></tr></table></figure><p>Modify the constructor of <code>AddrSpace</code> to change the projection of virtual pages and physical pages: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// make sure we have enough space</span></span><br><span class="line">ASSERT(userMap-&gt;NumClear() &gt;= numPages);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numPages; i++) &#123;</span><br><span class="line">    pageTable[i].virtualPage = i;<span class="comment">// for now, virtual page # = phys page #</span></span><br><span class="line">    pageTable[i].physicalPage = userMap-&gt;Find();</span><br><span class="line">    pageTable[i].valid = TRUE;</span><br><span class="line">    pageTable[i].use = FALSE;</span><br><span class="line">    pageTable[i].dirty = FALSE;</span><br><span class="line">    pageTable[i].readOnly = FALSE;  <span class="comment">// if the code segment was entirely on </span></span><br><span class="line"><span class="comment">// a separate page, we could set its pages to be read-only</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After that, when fetching a <code>noff</code> file, coping its data and putting to machine, we should know where the physical address really is, so we should locate the page and its offset: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// then, copy in the code and data segments into memory</span></span><br><span class="line"> <span class="keyword">if</span> (noffH.code.<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="comment">// calculate where the physical page locates</span></span><br><span class="line">     <span class="keyword">int</span> pagePosition = pageTable[noffH.code.virtualAddr / PageSize].physicalPage * PageSize;</span><br><span class="line">     <span class="comment">// and the offset</span></span><br><span class="line">     <span class="keyword">int</span> offset = noffH.code.virtualAddr % PageSize;</span><br><span class="line">     DEBUG(<span class="string">'a'</span>, <span class="string">"Initializing code segment, at 0x%x, size %d\n"</span>, </span><br><span class="line">pagePosition + offset, noffH.code.<span class="built_in">size</span>);</span><br><span class="line">     executable-&gt;ReadAt(&amp;(machine-&gt;mainMemory[pagePosition + offset]),</span><br><span class="line">noffH.code.<span class="built_in">size</span>, noffH.code.inFileAddr);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (noffH.initData.<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="keyword">int</span> pagePosition = pageTable[noffH.initData.virtualAddr / PageSize].physicalPage * PageSize;</span><br><span class="line">     <span class="keyword">int</span> offset = noffH.initData.virtualAddr % PageSize;</span><br><span class="line">     DEBUG(<span class="string">'a'</span>, <span class="string">"Initializing data segment, at 0x%x, size %d\n"</span>, </span><br><span class="line">pagePosition + offset, noffH.initData.<span class="built_in">size</span>);</span><br><span class="line">     executable-&gt;ReadAt(&amp;(machine-&gt;mainMemory[pagePosition + offset]),</span><br><span class="line">noffH.initData.<span class="built_in">size</span>, noffH.initData.inFileAddr);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>Also the destructor: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">AddrSpace::~AddrSpace() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numPages; i++) &#123;</span><br><span class="line">        userMap-&gt;Clear(pageTable[i].physicalPage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] pageTable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>On a context switch, save any machine state:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddrSpace::SaveState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pageTable = machine-&gt;pageTable;</span><br><span class="line">    numPages = machine-&gt;pageTableSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="System-Call"><a href="#System-Call" class="headerlink" title="System Call"></a>System Call</h3><p>The system call is only allowed in kernel mode, so when it comes to a system call, the system will throw an exception to switch to kernel mode to handle this. </p><p>So when does this happen?</p><p>When fetching and executing instructions, we see something in <code>Machine::OneInstruction(Instruction *instr)</code> :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">case</span> OP_SYSCALL:</span><br><span class="line">RaiseException(SyscallException, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><p>Look into <code>RaiseException</code> :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Transfer control to the Nachos kernel from user mode, because</span></span><br><span class="line"><span class="comment">//the user program either invoked a system call, or some exception</span></span><br><span class="line"><span class="comment">//occured (such as the address translation failed).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//"which" -- the cause of the kernel trap</span></span><br><span class="line"><span class="comment">//"badVaddr" -- the virtual address causing the trap, if appropriate</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Machine::RaiseException</span><span class="params">(ExceptionType which, <span class="keyword">int</span> badVAddr)</span> </span>&#123;</span><br><span class="line">    DEBUG(<span class="string">'m'</span>, <span class="string">"Exception: %s\n"</span>, exceptionNames[which]);</span><br><span class="line"><span class="comment">//  ASSERT(interrupt-&gt;getStatus() == UserMode);</span></span><br><span class="line">    registers[BadVAddrReg] = badVAddr;</span><br><span class="line">    DelayedLoad(<span class="number">0</span>, <span class="number">0</span>);<span class="comment">// finish anything in progress</span></span><br><span class="line">    interrupt-&gt;setStatus(SystemMode);</span><br><span class="line">    ExceptionHandler(which);<span class="comment">// interrupts are enabled at this point</span></span><br><span class="line">    interrupt-&gt;setStatus(UserMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It falls into system mode, then handles exception, after which goes back to user mode.</p><p>Let’s see <code>ExceptionHandler</code> , which is in <code>exception.cc</code> in <code>userprog</code> directory:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExceptionHandler</span><span class="params">(ExceptionType which)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> type = machine-&gt;ReadRegister(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> ((which == SyscallException) &amp;&amp; (type == SC_Halt)) &#123;</span><br><span class="line">        DEBUG(<span class="string">'a'</span>, <span class="string">"Shutdown, initiated by user program.\n"</span>);</span><br><span class="line">        interrupt-&gt;Halt();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Unexpected user mode exception %d %d\n"</span>, which, type);</span><br><span class="line">        ASSERT(FALSE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The result of the system call, if any, must be put back into register 2. </p></blockquote><p>The <code>type</code> is the type of system call, which currently only recognize <code>SC_Halt</code> . So let’s add exec to this: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (which == SyscallException) &#123;</span><br><span class="line">    <span class="keyword">if</span> (type == SC_Halt) &#123;</span><br><span class="line">        DEBUG(<span class="string">'a'</span>, <span class="string">"Shutdown, initiated by user program.\n"</span>);</span><br><span class="line">        interrupt-&gt;Halt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type == SC_Exec) &#123;</span><br><span class="line">        DEBUG(<span class="string">'a'</span>, <span class="string">"Shutdown, initiated by user program.\n"</span>);</span><br><span class="line">        <span class="comment">// how to handle this?</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Unexpected user mode exception [type] %d %d\n"</span>, which, type);</span><br><span class="line">        ASSERT(FALSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Unexpected user mode exception %d %d\n"</span>, which, type);</span><br><span class="line">    ASSERT(FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But we don’t know how to handle the system call currently, so there’s more to do.</p><h3 id="bar-c"><a href="#bar-c" class="headerlink" title="bar.c"></a><code>bar.c</code></h3><p>In <code>start.s</code> :</p><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">.globl Exec</span><br><span class="line">.entExec</span><br><span class="line">Exec:</span><br><span class="line">addiu $<span class="number">2</span>,$<span class="number">0</span>,SC_Exec</span><br><span class="line">syscall</span><br><span class="line">j$<span class="number">31</span></span><br><span class="line">.end Exec</span><br></pre></td></tr></table></figure><p><code>Register 2 = Register 0 + SC_Exec</code> , then a system call, then jump to <code>$31</code> , which means go back, then the end. </p><p>Use below to generate a <code>.s</code> file of <code>bar.c</code> :</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/mips/bin/decstation-ultrix-gcc -I ../userprog -I ../threads -S bar.c</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">.file<span class="number">1</span> <span class="string">"bar.c"</span></span><br><span class="line">gcc2_compiled.:</span><br><span class="line">__gnu_compiled_c:</span><br><span class="line">.rdata</span><br><span class="line">.align<span class="number">2</span></span><br><span class="line">$LC0:</span><br><span class="line">.ascii<span class="string">"../test/exec.noff\000"</span></span><br><span class="line">.text</span><br><span class="line">.align<span class="number">2</span></span><br><span class="line">.globlmain</span><br><span class="line">.entmain</span><br><span class="line">main:</span><br><span class="line">.frame$fp,<span class="number">24</span>,$<span class="number">31</span><span class="comment"># vars= 0, regs= 2/0, args= 16, extra= 0</span></span><br><span class="line">.mask<span class="number">0xc0000000</span>,-<span class="number">4</span></span><br><span class="line">.fmask<span class="number">0x00000000</span>,<span class="number">0</span></span><br><span class="line">subu$sp,$sp,<span class="number">24</span></span><br><span class="line">sw$<span class="number">31</span>,<span class="number">20</span>($sp)</span><br><span class="line">sw$fp,<span class="number">16</span>($sp)</span><br><span class="line">move$fp,$sp</span><br><span class="line">jal__main</span><br><span class="line">la$<span class="number">4</span>,$LC0</span><br><span class="line">jalExec</span><br><span class="line">jalHalt</span><br><span class="line">$L1:</span><br><span class="line">move$sp,$fp</span><br><span class="line">lw$<span class="number">31</span>,<span class="number">20</span>($sp)</span><br><span class="line">lw$fp,<span class="number">16</span>($sp)</span><br><span class="line">addu$sp,$sp,<span class="number">24</span></span><br><span class="line">j$<span class="number">31</span></span><br><span class="line">.endmain</span><br></pre></td></tr></table></figure><p>From <code>la    $4,$LC0</code> we can see that the Register 4 stores the argument. So the code in <code>exception.cc</code> is : </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == SC_Exec) &#123;</span><br><span class="line">    <span class="keyword">int</span> address = machine-&gt;ReadRegister(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">char</span> filename[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> it = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        machine-&gt;ReadMem(address+it, <span class="number">1</span>, (<span class="keyword">int</span>*)&amp;filename[it]);</span><br><span class="line">        <span class="keyword">if</span>(filename[it]==<span class="string">'\0'</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        it++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[%d %d], SC_Exec\n"</span>, which, type);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, filename);</span><br><span class="line">    DEBUG(<span class="string">'a'</span>, <span class="string">"Shutdown, initiated by user program.\n"</span>);</span><br><span class="line">    interrupt-&gt;Halt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then <code>make clean</code>, <code>make</code> , run <code>./nachos -d m -x ../test/bar.noff</code> : </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Exception: syscall</span><br><span class="line">[1 2], SC_Exec</span><br><span class="line">../test/exec.noff</span><br><span class="line">Machine halting!</span><br></pre></td></tr></table></figure><h3 id="RaiseException"><a href="#RaiseException" class="headerlink" title="RaiseException"></a><code>RaiseException</code></h3><p>In <code>mipssim.cc</code> :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> OP_SYSCALL:</span><br><span class="line">RaiseException(SyscallException, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><p>The return shows that when an exception is trapped, it’s handled and after that it returns to the main process then executes the instruction again. So it will cause an endless loop.</p><h3 id="AdvancePC"><a href="#AdvancePC" class="headerlink" title="AdvancePC"></a><code>AdvancePC</code></h3><p>To solve the problem, we can manually forward PC.</p><p>In <code>exception.cc</code> in <code>userprog</code> directory, add :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">advancePC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    machine-&gt;WriteRegister(PrevPCReg, machine-&gt;ReadRegister(PCReg));</span><br><span class="line">    machine-&gt;WriteRegister(PCReg, machine-&gt;ReadRegister(NextPCReg));</span><br><span class="line">    machine-&gt;WriteRegister(NextPCReg, machine-&gt;ReadRegister(NextPCReg) + <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To use it :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type == SC_Exec) &#123;</span><br><span class="line">    <span class="keyword">int</span> address = machine-&gt;ReadRegister(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">char</span> filename[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> it = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        machine-&gt;ReadMem(address+it, <span class="number">1</span>, (<span class="keyword">int</span>*)&amp;filename[it]);</span><br><span class="line">        <span class="keyword">if</span>(filename[it]==<span class="string">'\0'</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        it++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[%d %d], SC_Exec\n"</span>, which, type);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, filename);</span><br><span class="line">    advancePC();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>What if we don’t use <code>advancePC()</code> ? Here is the result: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">..................</span><br><span class="line">../test/exec.noff</span><br><span class="line">At PC = 0x34: SYSCALL</span><br><span class="line">Exception: syscall</span><br><span class="line">[1 2], SC_Exec</span><br><span class="line">../test/exec.noff</span><br><span class="line">At PC = 0x34: SYSCALL</span><br><span class="line">Exception: syscall</span><br><span class="line">[1 2], SC_Exec</span><br><span class="line">../test/exec.noff</span><br><span class="line">At PC = 0x34: SYSCALL</span><br><span class="line">Exception: syscall</span><br><span class="line">[1 2], SC_Exec</span><br><span class="line">../test/exec.noff</span><br><span class="line">At PC = 0x34: SYSCALL</span><br><span class="line">Exception: syscall</span><br><span class="line">[1 2], SC_Exec</span><br><span class="line">../test/exec.noff</span><br><span class="line">..................</span><br></pre></td></tr></table></figure><p>An endless loop. If we use it: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Exception: syscall</span><br><span class="line">[1 2], SC_Exec</span><br><span class="line">../test/exec.noff</span><br><span class="line">At PC = 0x38: JR r0,r31</span><br><span class="line">At PC = 0x3c: SLL r0,r0,0</span><br><span class="line">At PC = 0xf0: JAL 4</span><br><span class="line">At PC = 0xf4: SLL r0,r0,0</span><br><span class="line">At PC = 0x10: ADDIU r2,r0,0</span><br><span class="line">At PC = 0x14: SYSCALL</span><br><span class="line">Exception: syscall</span><br><span class="line">[1 0], SC_Halt</span><br><span class="line">Machine halting!</span><br></pre></td></tr></table></figure><p>It works normally.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Actually, we only need to modify the &lt;code&gt;addrspace&lt;/code&gt; code, but it cannot be tested directly, so there is an &lt;code&gt;Exec&lt;/code&gt; system call. &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="co10.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>User Programs and System Call in Nachos</title>
    <link href="co10.github.io/2021/05/05/User-Programs-and-System-Call-in-Nachos/"/>
    <id>co10.github.io/2021/05/05/User-Programs-and-System-Call-in-Nachos/</id>
    <published>2021-05-05T08:40:28.000Z</published>
    <updated>2021-05-11T14:48:44.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-Nachos-generates-a-user-program"><a href="#How-Nachos-generates-a-user-program" class="headerlink" title="How Nachos generates a user program"></a>How Nachos generates a user program</h2><p>The Nachos uses <code>gcc MIPS</code> to compile a <code>.c</code> file to a <code>COFF</code> file, then uses <code>coff2noff</code> to translate it to <code>NOFF</code> to make it recognizable by Nachos CPU. </p><a id="more"></a><h3 id="NOFF-file"><a href="#NOFF-file" class="headerlink" title="NOFF file"></a><code>NOFF</code> file</h3><p>In <code>bin</code> directory, <code>noff.h</code> : </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOFFMAGIC0xbadfad <span class="comment">/* magic number denoting Nachos object code file */</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">segment</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> virtualAddr;<span class="comment">/* location of segment in virt addr space */</span></span><br><span class="line">    <span class="keyword">int</span> inFileAddr;<span class="comment">/* location of segment in this file */</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>;<span class="comment">/* size of segment */</span></span><br><span class="line">&#125; Segment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">noffHeader</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> noffMagic;<span class="comment">/* should be NOFFMAGIC */</span></span><br><span class="line">    Segment code;<span class="comment">/* executable code segment */</span> </span><br><span class="line">    Segment initData;<span class="comment">/* initialized data segment */</span></span><br><span class="line">    Segment uninitData;<span class="comment">/* uninitialized data segment -- should be zero'ed before use */</span></span><br><span class="line">&#125; NoffHeader;</span><br></pre></td></tr></table></figure><p>There are only three kinds of segment in Nachos file header: executable code, initialized data and uninitialized data. And the <code>noffMagic</code> is a special number to be recognized as a Nachos file.</p><h3 id="Start-Process"><a href="#Start-Process" class="headerlink" title="Start Process"></a>Start Process</h3><p>In <code>main.cc</code> in <code>threads</code> directory, we see:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(*argv, <span class="string">"-x"</span>)) &#123;        <span class="comment">// run a user program</span></span><br><span class="line">    ASSERT(argc &gt; <span class="number">1</span>);</span><br><span class="line">    StartProcess(*(argv + <span class="number">1</span>));</span><br><span class="line">    argCount = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>StartProcess</code> is in <code>progtest.cc</code> in <code>userprog</code> directory: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StartProcess</span><span class="params">(<span class="keyword">char</span> *filename)</span> </span>&#123;</span><br><span class="line">    OpenFile *executable = fileSystem-&gt;Open(filename);</span><br><span class="line">    AddrSpace *space;</span><br><span class="line">    <span class="keyword">if</span> (executable == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Unable to open file %s\n"</span>, filename);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    space = <span class="keyword">new</span> AddrSpace(executable);    </span><br><span class="line">    currentThread-&gt;space = space;</span><br><span class="line">    space-&gt;<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">delete</span> executable;<span class="comment">// close file</span></span><br><span class="line">    space-&gt;InitRegisters();<span class="comment">// set the initial register values</span></span><br><span class="line">    space-&gt;RestoreState();<span class="comment">// load page table register</span></span><br><span class="line">    machine-&gt;Run();<span class="comment">// jump to the user progam</span></span><br><span class="line">    ASSERT(FALSE);<span class="comment">// machine-&gt;Run never returns;</span></span><br><span class="line"><span class="comment">// the address space exits by doing the syscall "exit"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Firstly it opens an executable file, then gives it address space, make the current thread to execute it, initialize all registers, load page table, then run.</p><p>For details, we should look into every function.</p><h3 id="addrspace-cc"><a href="#addrspace-cc" class="headerlink" title="addrspace.cc"></a><code>addrspace.cc</code></h3><p>In <code>userprog</code> directory. See the constructor: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">AddrSpace::AddrSpace(OpenFile *executable) &#123;</span><br><span class="line">    NoffHeader noffH;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i, <span class="built_in">size</span>;</span><br><span class="line">    executable-&gt;ReadAt((<span class="keyword">char</span> *)&amp;noffH, <span class="keyword">sizeof</span>(noffH), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ((noffH.noffMagic != NOFFMAGIC) &amp;&amp; (WordToHost(noffH.noffMagic) == NOFFMAGIC))</span><br><span class="line">    SwapHeader(&amp;noffH);</span><br><span class="line">    ASSERT(noffH.noffMagic == NOFFMAGIC);</span><br><span class="line"><span class="comment">// how big is address space?</span></span><br><span class="line">    <span class="built_in">size</span> = noffH.code.<span class="built_in">size</span> + noffH.initData.<span class="built_in">size</span> + noffH.uninitData.<span class="built_in">size</span> + UserStackSize;</span><br><span class="line">    <span class="comment">// we need to increase the size to leave room for the stack</span></span><br><span class="line">    numPages = divRoundUp(<span class="built_in">size</span>, PageSize);</span><br><span class="line">    <span class="built_in">size</span> = numPages * PageSize;</span><br><span class="line">    ASSERT(numPages &lt;= NumPhysPages);<span class="comment">// check we're not trying to run anything too big</span></span><br><span class="line"><span class="comment">// at least until we have virtual memory</span></span><br><span class="line">    DEBUG(<span class="string">'a'</span>, <span class="string">"Initializing address space, num pages %d, size %d\n"</span>, numPages, <span class="built_in">size</span>);</span><br><span class="line"><span class="comment">// first, set up the translation </span></span><br><span class="line">    pageTable = <span class="keyword">new</span> TranslationEntry[numPages];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numPages; i++) &#123;</span><br><span class="line">        pageTable[i].virtualPage = i;<span class="comment">// for now, virtual page # = phys page #</span></span><br><span class="line">        pageTable[i].physicalPage = i;</span><br><span class="line">        pageTable[i].valid = TRUE;</span><br><span class="line">        pageTable[i].use = FALSE;</span><br><span class="line">        pageTable[i].dirty = FALSE;</span><br><span class="line">        pageTable[i].readOnly = FALSE;  <span class="comment">// if the code segment was entirely on a separate page,</span></span><br><span class="line"><span class="comment">//  we could set its pages to be read-only</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// zero out the entire address space, to zero the unitialized data segment and the stack segment</span></span><br><span class="line">    bzero(machine-&gt;mainMemory, <span class="built_in">size</span>);</span><br><span class="line"><span class="comment">// then, copy in the code and data segments into memory</span></span><br><span class="line">    <span class="keyword">if</span> (noffH.code.<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        DEBUG(<span class="string">'a'</span>, <span class="string">"Initializing code segment, at 0x%x, size %d\n"</span>, </span><br><span class="line">noffH.code.virtualAddr, noffH.code.<span class="built_in">size</span>);</span><br><span class="line">        executable-&gt;ReadAt(&amp;(machine-&gt;mainMemory[noffH.code.virtualAddr]),</span><br><span class="line">noffH.code.<span class="built_in">size</span>, noffH.code.inFileAddr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (noffH.initData.<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        DEBUG(<span class="string">'a'</span>, <span class="string">"Initializing data segment, at 0x%x, size %d\n"</span>, </span><br><span class="line">noffH.initData.virtualAddr, noffH.initData.<span class="built_in">size</span>);</span><br><span class="line">        executable-&gt;ReadAt(&amp;(machine-&gt;mainMemory[noffH.initData.virtualAddr]),</span><br><span class="line">noffH.initData.<span class="built_in">size</span>, noffH.initData.inFileAddr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First it reads the file header, and make sure it’s big endian and it’s a NOFF file by the NOFF magic number. Then it calculates the size of address space, including the stack, after which the page numbers can be decided. Then it creates the page tables, initializing all the values in each page table. Currently the virtual page is the same as the physical page. </p><p>Then it clear all the address space. After that, copy the code and data into memory.</p><h3 id="Page-table"><a href="#Page-table" class="headerlink" title="Page table"></a>Page table</h3><p>The last step we see the page table, the code of translation from virtual page to physical page is in <code>translate</code> in <code>machine</code> directory: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TranslationEntry</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> virtualPage;  <span class="comment">// The page number in virtual memory.</span></span><br><span class="line">    <span class="keyword">int</span> physicalPage;  <span class="comment">// The page number in real memory (relative to the start of "mainMemory"</span></span><br><span class="line">    <span class="keyword">bool</span> valid;     <span class="comment">// If this bit is set, the translation is ignored.</span></span><br><span class="line"><span class="comment">// (In other words, the entry hasn't been initialized.)</span></span><br><span class="line">    <span class="keyword">bool</span> readOnly;<span class="comment">// If this bit is set, the user program is not allowed</span></span><br><span class="line"><span class="comment">// to modify the contents of the page.</span></span><br><span class="line">    <span class="keyword">bool</span> use;       <span class="comment">// This bit is set by the hardware every time the</span></span><br><span class="line"><span class="comment">// page is referenced or modified.</span></span><br><span class="line">    <span class="keyword">bool</span> dirty;     <span class="comment">// This bit is set by the hardware every time the page is modified.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ExceptionType <span class="title">Machine::Translate</span><span class="params">(<span class="keyword">int</span> virtAddr, <span class="keyword">int</span>* physAddr, <span class="keyword">int</span> <span class="built_in">size</span>, <span class="keyword">bool</span> writing)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> vpn, offset;</span><br><span class="line">    TranslationEntry *entry;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> pageFrame;</span><br><span class="line">    DEBUG(<span class="string">'a'</span>, <span class="string">"\tTranslate 0x%x, %s: "</span>, virtAddr, writing ? <span class="string">"write"</span> : <span class="string">"read"</span>);</span><br><span class="line"><span class="comment">// check for alignment errors</span></span><br><span class="line">    <span class="keyword">if</span> (((<span class="built_in">size</span> == <span class="number">4</span>) &amp;&amp; (virtAddr &amp; <span class="number">0x3</span>)) || ((<span class="built_in">size</span> == <span class="number">2</span>) &amp;&amp; (virtAddr &amp; <span class="number">0x1</span>))) &#123;</span><br><span class="line">        DEBUG(<span class="string">'a'</span>, <span class="string">"alignment problem at %d, size %d!\n"</span>, virtAddr, <span class="built_in">size</span>);</span><br><span class="line">        <span class="keyword">return</span> AddressErrorException;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// we must have either a TLB or a page table, but not both!</span></span><br><span class="line">    ASSERT(tlb == <span class="literal">NULL</span> || pageTable == <span class="literal">NULL</span>);</span><br><span class="line">    ASSERT(tlb != <span class="literal">NULL</span> || pageTable != <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// calculate the virtual page number, and offset within the page, from the virtual address</span></span><br><span class="line">    vpn = (<span class="keyword">unsigned</span>) virtAddr / PageSize;</span><br><span class="line">    offset = (<span class="keyword">unsigned</span>) virtAddr % PageSize;</span><br><span class="line">    <span class="keyword">if</span> (tlb == <span class="literal">NULL</span>) &#123;<span class="comment">// =&gt; page table =&gt; vpn is index into table</span></span><br><span class="line">        <span class="keyword">if</span> (vpn &gt;= pageTableSize) &#123;</span><br><span class="line">            DEBUG(<span class="string">'a'</span>, <span class="string">"virtual page # %d too large for page table size %d!\n"</span>, </span><br><span class="line">                virtAddr, pageTableSize);</span><br><span class="line">            <span class="keyword">return</span> AddressErrorException;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pageTable[vpn].valid) &#123;</span><br><span class="line">            DEBUG(<span class="string">'a'</span>, <span class="string">"virtual page # %d too large for page table size %d!\n"</span>, </span><br><span class="line">                virtAddr, pageTableSize);</span><br><span class="line">            <span class="keyword">return</span> PageFaultException;</span><br><span class="line">        &#125;</span><br><span class="line">        entry = &amp;pageTable[vpn];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (entry = <span class="literal">NULL</span>, i = <span class="number">0</span>; i &lt; TLBSize; i++)</span><br><span class="line">        <span class="keyword">if</span> (tlb[i].valid &amp;&amp; ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)tlb[i].virtualPage == vpn)) &#123;</span><br><span class="line">            entry = &amp;tlb[i];<span class="comment">// FOUND!</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="keyword">if</span> (entry == <span class="literal">NULL</span>) &#123;<span class="comment">// not found</span></span><br><span class="line">    DEBUG(<span class="string">'a'</span>, <span class="string">"*** no valid TLB entry found for this virtual page!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> PageFaultException;<span class="comment">// really, this is a TLB fault,</span></span><br><span class="line">                            <span class="comment">// the page may be in memory, but not in the TLB</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (entry-&gt;readOnly &amp;&amp; writing) &#123;<span class="comment">// trying to write to a read-only page</span></span><br><span class="line">DEBUG(<span class="string">'a'</span>, <span class="string">"%d mapped read-only at %d in TLB!\n"</span>, virtAddr, i);</span><br><span class="line"><span class="keyword">return</span> ReadOnlyException;</span><br><span class="line">    &#125;</span><br><span class="line">    pageFrame = entry-&gt;physicalPage;</span><br><span class="line">    <span class="comment">// if the pageFrame is too big, there is something really wrong! </span></span><br><span class="line">    <span class="comment">// An invalid translation was loaded into the page table or TLB. </span></span><br><span class="line">    <span class="keyword">if</span> (pageFrame &gt;= NumPhysPages) &#123; </span><br><span class="line">        DEBUG(<span class="string">'a'</span>, <span class="string">"*** frame %d &gt; %d!\n"</span>, pageFrame, NumPhysPages);</span><br><span class="line">        <span class="keyword">return</span> BusErrorException;</span><br><span class="line">    &#125;</span><br><span class="line">    entry-&gt;use = TRUE;<span class="comment">// set the use, dirty bits</span></span><br><span class="line">    <span class="keyword">if</span> (writing)</span><br><span class="line">entry-&gt;dirty = TRUE;</span><br><span class="line">    *physAddr = pageFrame * PageSize + offset;</span><br><span class="line">    ASSERT((*physAddr &gt;= <span class="number">0</span>) &amp;&amp; ((*physAddr + <span class="built_in">size</span>) &lt;= MemorySize));</span><br><span class="line">    DEBUG(<span class="string">'a'</span>, <span class="string">"phys addr = 0x%x\n"</span>, *physAddr);</span><br><span class="line">    <span class="keyword">return</span> NoException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It decides whether to use TLB or page table. Get page entry, then get physical page frame, make current page entry in use, if writing, make it dirty which means it’s modified, then get the physical address.</p><h3 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a>Registers</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddrSpace::InitRegisters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NumTotalRegs; i++)</span><br><span class="line">machine-&gt;WriteRegister(i, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Initial program counter -- must be location of "Start"</span></span><br><span class="line">    machine-&gt;WriteRegister(PCReg, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Need to also tell MIPS where next instruction is, because of branch delay possibility</span></span><br><span class="line">    machine-&gt;WriteRegister(NextPCReg, <span class="number">4</span>);</span><br><span class="line">    <span class="comment">// Set the stack register to the end of the address space, where we allocated the stack;</span></span><br><span class="line">    <span class="comment">// but subtract off a bit, to make sure we don't accidentally reference off the end!</span></span><br><span class="line">    machine-&gt;WriteRegister(StackReg, numPages * PageSize - <span class="number">16</span>);</span><br><span class="line">    DEBUG(<span class="string">'a'</span>, <span class="string">"Initializing stack register to %d\n"</span>, numPages * PageSize - <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddrSpace::RestoreState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    machine-&gt;pageTable = pageTable;</span><br><span class="line">    machine-&gt;pageTableSize = numPages;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Machine::Run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Instruction *instr = <span class="keyword">new</span> Instruction;  <span class="comment">// storage for decoded instruction</span></span><br><span class="line">    <span class="keyword">if</span>(DebugIsEnabled(<span class="string">'m'</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Starting thread \"%s\" at time %d\n"</span>, currentThread-&gt;getName(), stats-&gt;totalTicks);</span><br><span class="line">    interrupt-&gt;setStatus(UserMode);</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        OneInstruction(instr);</span><br><span class="line">interrupt-&gt;OneTick();</span><br><span class="line"><span class="keyword">if</span> (singleStep &amp;&amp; (runUntilTime &lt;= stats-&gt;totalTicks))</span><br><span class="line">  Debugger();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It runs the instructions one by one from registers. Below is how it’s fetched: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Machine::ReadMem</span><span class="params">(<span class="keyword">int</span> addr, <span class="keyword">int</span> <span class="built_in">size</span>, <span class="keyword">int</span> *value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    ExceptionType exception;</span><br><span class="line">    <span class="keyword">int</span> physicalAddress;</span><br><span class="line">    DEBUG(<span class="string">'a'</span>, <span class="string">"Reading VA 0x%x, size %d\n"</span>, addr, <span class="built_in">size</span>);</span><br><span class="line">    exception = Translate(addr, &amp;physicalAddress, <span class="built_in">size</span>, FALSE);</span><br><span class="line">    <span class="keyword">if</span> (exception != NoException) &#123;</span><br><span class="line">        machine-&gt;RaiseException(exception, addr);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">size</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            data = machine-&gt;mainMemory[physicalAddress];</span><br><span class="line">            *value = data;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            data = *(<span class="keyword">unsigned</span> short *) &amp;machine-&gt;mainMemory[physicalAddress];</span><br><span class="line">            *value = ShortToHost(data);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            data = *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *) &amp;machine-&gt;mainMemory[physicalAddress];</span><br><span class="line">            *value = WordToHost(data);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>: ASSERT(FALSE);</span><br><span class="line">    &#125;</span><br><span class="line">    DEBUG(<span class="string">'a'</span>, <span class="string">"\tvalue read = %8.8x\n"</span>, *value);</span><br><span class="line">    <span class="keyword">return</span> (TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First it translate virtual address to physical address, then read in main memory.</p><h2 id="To-do"><a href="#To-do" class="headerlink" title="To do"></a>To do</h2><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>In <code>test</code> directory, do below to <code>halt.c</code> : </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    k = <span class="number">3</span>;</span><br><span class="line">    i = <span class="number">2</span>;</span><br><span class="line">    j = i - <span class="number">1</span>;</span><br><span class="line">    k = i - j + k;</span><br><span class="line">    Halt();</span><br><span class="line">    <span class="comment">/* not reached*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then <code>make</code> .</p><p>To Generate <code>.s</code> file, do below: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/mips/bin/decstation-ultrix-gcc -I ../userprog -I ../threads -S halt.c</span><br></pre></td></tr></table></figure><p>Then there is a <code>halt.s</code> :</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.file<span class="number">1</span> <span class="string">"halt.c"</span></span><br><span class="line">gcc2_compiled.:</span><br><span class="line">__gnu_compiled_c:</span><br><span class="line">.<span class="built_in">text</span></span><br><span class="line">.align<span class="number">2</span></span><br><span class="line">.globlmain</span><br><span class="line">.entmain</span><br><span class="line">main:</span><br><span class="line">.frame$fp,<span class="number">40</span>,$<span class="number">31</span><span class="meta"># vars= 16, regs= 2/0, args= 16, extra= 0</span></span><br><span class="line">.mask<span class="number">0xc0000000</span>,<span class="number">-4</span></span><br><span class="line">.fmask<span class="number">0x00000000</span>,<span class="number">0</span></span><br><span class="line">subu$sp,$sp,<span class="number">40</span></span><br><span class="line">sw$<span class="number">31</span>,<span class="number">36</span>($sp)</span><br><span class="line">sw$fp,<span class="number">32</span>($sp)</span><br><span class="line"><span class="built_in">move</span>$fp,$sp</span><br><span class="line">jal__main</span><br><span class="line">li$<span class="number">2</span>,<span class="number">3</span># <span class="number">0x00000003</span></span><br><span class="line">sw$<span class="number">2</span>,<span class="number">24</span>($fp)</span><br><span class="line">li$<span class="number">2</span>,<span class="number">2</span># <span class="number">0x00000002</span></span><br><span class="line">sw$<span class="number">2</span>,<span class="number">16</span>($fp)</span><br><span class="line">lw$<span class="number">2</span>,<span class="number">16</span>($fp)</span><br><span class="line">addu$<span class="number">3</span>,$<span class="number">2</span>,<span class="number">-1</span></span><br><span class="line">sw$<span class="number">3</span>,<span class="number">20</span>($fp)</span><br><span class="line">lw$<span class="number">2</span>,<span class="number">16</span>($fp)</span><br><span class="line">lw$<span class="number">3</span>,<span class="number">20</span>($fp)</span><br><span class="line">subu$<span class="number">2</span>,$<span class="number">2</span>,$<span class="number">3</span></span><br><span class="line">lw$<span class="number">3</span>,<span class="number">24</span>($fp)</span><br><span class="line">addu$<span class="number">2</span>,$<span class="number">3</span>,$<span class="number">2</span></span><br><span class="line">sw$<span class="number">2</span>,<span class="number">24</span>($fp)</span><br><span class="line">jalHalt</span><br><span class="line">$L1:</span><br><span class="line"><span class="built_in">move</span>$sp,$fp</span><br><span class="line">lw$<span class="number">31</span>,<span class="number">36</span>($sp)</span><br><span class="line">lw$fp,<span class="number">32</span>($sp)</span><br><span class="line">addu$sp,$sp,<span class="number">40</span></span><br><span class="line">j$<span class="number">31</span></span><br><span class="line">.<span class="built_in">end</span>main</span><br><span class="line"></span><br><span class="line">.lcomma,<span class="number">160</span></span><br></pre></td></tr></table></figure><p>In <code>subu    $sp,$sp,40</code> , it creates stack pointer. In <code>addu    $sp,$sp,40</code> , it takes back stack pointer.</p><h3 id="User-program"><a href="#User-program" class="headerlink" title="User program"></a>User program</h3><p>In <code>userprog</code> directory, first <code>make clean</code> , then <code>make</code> , then: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nachos –d m –x ../test/halt.noff</span><br></pre></td></tr></table></figure><p>Add below to <code>addrspace</code> : </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddrSpace::print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"page table dump: %d pages in total\n"</span>, numPages); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"============================================\n"</span>); <span class="built_in">printf</span>(<span class="string">"\tVirtPage, \tPhysPage\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numPages; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\t %d, \t\t%d\n"</span>, pageTable[i].virtualPage, pageTable[i].physicalPage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"============================================\n\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And in <code>progtest.cc</code> , add <code>space-&gt;print();</code> : </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StartProcess</span><span class="params">(<span class="keyword">char</span> *filename)</span> </span>&#123;</span><br><span class="line">    OpenFile *executable = fileSystem-&gt;Open(filename);</span><br><span class="line">    AddrSpace *space;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (executable == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Unable to open file %s\n"</span>, filename);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    space = <span class="keyword">new</span> AddrSpace(executable);    </span><br><span class="line">    currentThread-&gt;space = space;</span><br><span class="line">    <span class="comment">// here</span></span><br><span class="line">    space-&gt;<span class="built_in">print</span>();</span><br></pre></td></tr></table></figure><p>Run <code>nachos –d m –x ../test/halt.noff</code> , we can see: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">============================================</span><br><span class="line">        VirtPage,       PhysPage</span><br><span class="line">         0,             0</span><br><span class="line">         1,             1</span><br><span class="line">         2,             2</span><br><span class="line">         3,             3</span><br><span class="line">         4,             4</span><br><span class="line">         5,             5</span><br><span class="line">         6,             6</span><br><span class="line">         7,             7</span><br><span class="line">         8,             8</span><br><span class="line">         9,             9</span><br><span class="line">         10,            10</span><br><span class="line">============================================</span><br></pre></td></tr></table></figure><p>11 pages in total.</p><p>Back to <code>halt.c</code>, add <code>static int a[40];</code> as global variable, then <code>make</code>. And in <code>userprog</code> run <code>nachos –d m –x ../test/halt.noff</code> , we can see: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">page table dump: 12 pages in total</span><br><span class="line">============================================</span><br><span class="line">        VirtPage,       PhysPage</span><br><span class="line">         0,             0</span><br><span class="line">         1,             1</span><br><span class="line">         2,             2</span><br><span class="line">         3,             3</span><br><span class="line">         4,             4</span><br><span class="line">         5,             5</span><br><span class="line">         6,             6</span><br><span class="line">         7,             7</span><br><span class="line">         8,             8</span><br><span class="line">         9,             9</span><br><span class="line">         10,            10</span><br><span class="line">         11,            11</span><br><span class="line">============================================</span><br></pre></td></tr></table></figure><p>There are 12 pages.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;How-Nachos-generates-a-user-program&quot;&gt;&lt;a href=&quot;#How-Nachos-generates-a-user-program&quot; class=&quot;headerlink&quot; title=&quot;How Nachos generates a user program&quot;&gt;&lt;/a&gt;How Nachos generates a user program&lt;/h2&gt;&lt;p&gt;The Nachos uses &lt;code&gt;gcc MIPS&lt;/code&gt; to compile a &lt;code&gt;.c&lt;/code&gt; file to a &lt;code&gt;COFF&lt;/code&gt; file, then uses &lt;code&gt;coff2noff&lt;/code&gt; to translate it to &lt;code&gt;NOFF&lt;/code&gt; to make it recognizable by Nachos CPU. &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="co10.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>语法分析器</title>
    <link href="co10.github.io/2021/05/02/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/"/>
    <id>co10.github.io/2021/05/02/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/</id>
    <published>2021-05-02T08:19:40.000Z</published>
    <updated>2021-05-03T09:12:56.374Z</updated>
    
    <content type="html"><![CDATA[<p>有点晕，先记录一下。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>PL/0语言的语法可以用以下上下文无关文法描述：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;程序&gt;→&lt;分程序&gt;.</span><br><span class="line">&lt;分程序&gt;→ [&lt;常量说明部分&gt;][&lt;变量说明部分&gt;][&lt;过程说明部分&gt;]&lt;语句&gt;</span><br><span class="line">&lt;常量说明部分&gt; → CONST&lt;常量定义&gt;&#123; ,&lt;常量定义&gt;&#125;;</span><br><span class="line">&lt;常量定义&gt; → &lt;标识符&gt;=&lt;无符号整数&gt;</span><br><span class="line">&lt;无符号整数&gt; → &lt;数字&gt;&#123;&lt;数字&gt;&#125;</span><br><span class="line">&lt;变量说明部分&gt; → VAR&lt;标识符&gt;&#123; ,&lt;标识符&gt;&#125;;</span><br><span class="line">&lt;标识符&gt; → &lt;字母&gt;&#123;&lt;字母&gt;|&lt;数字&gt;&#125;</span><br><span class="line">&lt;过程说明部分&gt; → &lt;过程首部&gt;&lt;分程序&gt;;&#123;&lt;过程说明部分&gt;&#125;</span><br><span class="line">&lt;过程首部&gt; → PROCEDURE &lt;标识符&gt;;</span><br><span class="line">&lt;语句&gt; → &lt;赋值语句&gt;|&lt;条件语句&gt;|&lt;当型循环语句&gt;|&lt;过程调用语句&gt;|&lt;读语句&gt;|&lt;写语句&gt;|&lt;复合语句&gt;|&lt;空语句&gt;</span><br><span class="line">&lt;赋值语句&gt; → &lt;标识符&gt;:=&lt;表达式&gt;</span><br><span class="line">&lt;复合语句&gt; → BEGIN&lt;语句&gt;&#123; ;&lt;语句&gt;&#125; END</span><br><span class="line">&lt;条件&gt; → &lt;表达式&gt;&lt;关系运算符&gt;&lt;表达式&gt;|ODD&lt;表达式&gt;</span><br><span class="line">&lt;表达式&gt; → [+|-]&lt;项&gt;&#123;&lt;加减运算符&gt;&lt;项&gt;&#125;</span><br><span class="line">&lt;项&gt; → &lt;因子&gt;&#123;&lt;乘除运算符&gt;&lt;因子&gt;&#125;</span><br><span class="line">&lt;因子&gt; → &lt;标识符&gt;|&lt;无符号整数&gt;|(&lt;表达式&gt;)</span><br><span class="line">&lt;加减运算符&gt; → +|-</span><br><span class="line">&lt;乘除运算符&gt; → *|/</span><br><span class="line">&lt;关系运算符&gt; → =|#|&lt;|&lt;=|&gt;|&gt;=</span><br><span class="line">&lt;条件语句&gt; → IF&lt;条件&gt;THEN&lt;语句&gt;</span><br><span class="line">&lt;过程调用语句&gt; → CALL&lt;标识符&gt;</span><br><span class="line">&lt;当型循环语句&gt; → WHILE&lt;条件&gt;DO&lt;语句&gt;</span><br><span class="line">&lt;读语句&gt; → READ(&lt;标识符&gt;&#123; ,&lt;标识符&gt;&#125;)</span><br><span class="line">&lt;写语句&gt; → WRITE(&lt;标识符&gt;&#123;,&lt;标识符&gt;&#125;)</span><br><span class="line">&lt;字母&gt; → A|B|C…X|Y|Z</span><br><span class="line">&lt;数字&gt; → <span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>…<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span></span><br><span class="line">&lt;空语句&gt; → epsilon</span><br></pre></td></tr></table></figure></p></blockquote><p>原文描述的这个，感觉很乱……</p><h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><p><code>&lt;程序&gt;→&lt;分程序&gt;.</code></p><p>这是一整个程序的大体思路，然后接下来慢慢细分（注意文末这个 <code>.</code> ）。</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p><code>&lt;分程序&gt;→[&lt;常量说明部分&gt;][&lt;变量说明部分&gt;][&lt;过程说明部分&gt;]&lt;语句&gt;</code></p><p>一个分程序可以分出：常量、变量、过程，后面接的都是句子。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;常量说明部分&gt; → CONST&lt;常量定义&gt;&#123; ,&lt;常量定义&gt;&#125;;</span><br><span class="line">&lt;常量定义&gt; → &lt;标识符&gt;=&lt;无符号整数&gt;</span><br><span class="line">&lt;无符号整数&gt; → &lt;数字&gt;&#123;&lt;数字&gt;&#125;</span><br><span class="line">&lt;变量说明部分&gt; → VAR&lt;标识符&gt;&#123; ,&lt;标识符&gt;&#125;;</span><br><span class="line">&lt;标识符&gt; → &lt;字母&gt;&#123;&lt;字母&gt;|&lt;数字&gt;&#125;</span><br><span class="line">&lt;过程说明部分&gt; → &lt;过程首部&gt;&lt;分程序&gt;;&#123;&lt;过程说明部分&gt;&#125;</span><br><span class="line">&lt;过程首部&gt; → PROCEDURE &lt;标识符&gt;;</span><br></pre></td></tr></table></figure><p>写的抽象复杂，其实也就如下的形式(其中 <code>i</code> 为标识符 identifier (由字母、数字组成)，<code>num</code> 为无符号整数代表的数字)：</p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">CONST i = num;</span><br><span class="line">CONST i1 = num1, i2 = num2, i3 = num3, ..., i_n = numn;</span><br></pre></td></tr></table></figure><p><code>CONST</code> 可定义一个或多个常量，其中每部分都是 <code>i = num</code> 的形式（ <code>,</code> 隔开），以 <code>;</code> 结尾。</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">VAR i;</span><br><span class="line">VAR i1, i2, i3, ..., i_n;</span><br></pre></td></tr></table></figure><p>和常量差不多，注意定义变量的时候不会进行赋值。</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">PROCEDURE i;</span><br></pre></td></tr></table></figure><p>其中过程可以多层嵌套，但最大为3层：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">PROCEDURE i1;</span><br><span class="line">PROCEDURE i2;</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">PROCEDURE i1;</span><br><span class="line">PROCEDURE i2;</span><br><span class="line">PROCEDURE i3;</span><br></pre></td></tr></table></figure><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>接下来是最麻烦的部分，声明好了之后就需要分析语句。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;语句&gt; → &lt;赋值语句&gt;|&lt;条件语句&gt;|&lt;当型循环语句&gt;|&lt;过程调用语句&gt;|&lt;读语句&gt;|&lt;写语句&gt;|&lt;复合语句&gt;|&lt;空语句&gt;</span><br></pre></td></tr></table></figure><p>有8种语句。用 <code>syntax</code> 代表语句。</p><h4 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;赋值语句&gt; → &lt;标识符&gt;:=&lt;表达式&gt;</span><br><span class="line">&lt;表达式&gt; → [+|-]&lt;项&gt;&#123;&lt;加减运算符&gt;&lt;项&gt;&#125;<span class="comment">// &lt;加减运算符&gt; → +|-</span></span><br><span class="line">&lt;项&gt; → &lt;因子&gt;&#123;&lt;乘除运算符&gt;&lt;因子&gt;&#125;<span class="comment">// &lt;乘除运算符&gt; → *|/</span></span><br><span class="line">&lt;因子&gt; → &lt;标识符&gt;|&lt;无符号整数&gt;|(&lt;表达式&gt;)</span><br></pre></td></tr></table></figure><p>循环嵌套，咋一看很乱，慢慢整理：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">i <span class="symbol">:</span>= expression</span><br></pre></td></tr></table></figure><p>这个地方最好用 <code>expression</code> 代表一下表达式，不如很乱。表达式格式如下：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">+i-ii</span><br><span class="line">+num-numnum</span><br><span class="line">即以上总结为[+<span class="params">|-]i|</span>num</span><br><span class="line">[+<span class="params">|-] i|</span>num &#123;+<span class="params">|-|</span>*<span class="params">|/ i|</span>num&#125;</span><br></pre></td></tr></table></figure><p>就像这样的可以无限套娃，注意由乘除衔接的成为因子，用加减衔接的成为项。</p><p>综上，赋值语句表示为 <code>i := 我们熟悉的只含加减乘除的那种式子</code> 。</p><h4 id="条件语句-当型循环语句"><a href="#条件语句-当型循环语句" class="headerlink" title="条件语句/当型循环语句"></a>条件语句/当型循环语句</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;条件语句&gt; → IF&lt;条件&gt;THEN&lt;语句&gt;</span><br><span class="line">&lt;条件&gt; → &lt;表达式&gt;&lt;关系运算符&gt;&lt;表达式&gt;|ODD&lt;表达式&gt;</span><br><span class="line">    &lt;关系运算符&gt; → =|#|&lt;|&lt;=|&gt;|&gt;=</span><br><span class="line">&lt;当型循环语句&gt; → WHILE&lt;条件&gt;DO&lt;语句&gt;</span><br></pre></td></tr></table></figure><p>关系运算符的 <code>#</code> 代表 <code>!=</code> 。用 condition 代表条件：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">IF condition THEN syntax;</span><br><span class="line">WHILE condition DO syntax;</span><br></pre></td></tr></table></figure><p>其中条件参考条件语句：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">expression1 = <span class="params">| # |</span> &lt; <span class="params">| &lt;= |</span> &gt; <span class="params">| &gt;= expression2</span></span><br><span class="line"><span class="params">举个例子，形如 i = 1   i + i &lt; 9   i * i &gt;= 10</span></span><br></pre></td></tr></table></figure><h4 id="过程调用语句"><a href="#过程调用语句" class="headerlink" title="过程调用语句"></a>过程调用语句</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;过程调用语句&gt; → CALL&lt;标识符&gt;</span><br></pre></td></tr></table></figure><p>比较简单，也就是</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">CALL i</span><br></pre></td></tr></table></figure><h4 id="读语句-写语句"><a href="#读语句-写语句" class="headerlink" title="读语句/写语句"></a>读语句/写语句</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;读语句&gt; → READ(&lt;标识符&gt;&#123; ,&lt;标识符&gt;&#125;)</span><br><span class="line">&lt;写语句&gt; → WRITE(&lt;标识符&gt;&#123;,&lt;标识符&gt;&#125;)</span><br></pre></td></tr></table></figure><p>也比较简单：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">READ(i)</span><br><span class="line">READ(i1, i2, ..., i_n)</span><br><span class="line">WRITE(i)</span><br><span class="line">WRITE(i1, i2, ..., i_n)</span><br></pre></td></tr></table></figure><h4 id="复合语句"><a href="#复合语句" class="headerlink" title="复合语句"></a>复合语句</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;复合语句&gt; → BEGIN&lt;语句&gt;&#123; ;&lt;语句&gt;&#125; END</span><br></pre></td></tr></table></figure><p>也就是说，形如：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">syntax;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>也可多个语句：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">syntax1;</span><br><span class="line">syntax2;</span><br><span class="line">....</span><br><span class="line">    syntax_n;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>分号大概是这样没错。</p><h4 id="空语句"><a href="#空语句" class="headerlink" title="空语句"></a>空语句</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;空语句&gt; → epsilon</span><br></pre></td></tr></table></figure><p>推出空，也就先放着吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有点晕，先记录一下。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="编译原理" scheme="co10.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Append() in Nachos FIle System</title>
    <link href="co10.github.io/2021/05/02/Append-in-Nachos-FIle-System/"/>
    <id>co10.github.io/2021/05/02/Append-in-Nachos-FIle-System/</id>
    <published>2021-05-02T06:06:42.000Z</published>
    <updated>2021-05-02T08:18:48.170Z</updated>
    
    <content type="html"><![CDATA[<p>One of the flaws in Nachos is that you cannot expand a file in the Nachos File System. So this is what experiment 5 does. </p><p>We need to do the append and half append, both from UNIX file to Nachos file and from Nachos file to Nachos file. </p><a id="more"></a><h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>Copy <code>filehdr</code> , <code>directory</code> , <code>filesys</code> , <code>Makefile</code> , <code>Makefile.local</code> , <code>openfile</code> and <code>synchdisk</code> from <code>filesys</code> directory, and copy the <code>arch</code> directory of course, and did the same thing as experiment 2 : remove object files and bin files.  </p><h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a><code>Makefile</code></h3><p>Now we need to change the <code>Makefile</code> , only three lines : </p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ifndef</span> MAKEFILE_LAB5</span><br><span class="line"><span class="keyword">define</span> MAKEFILE_LAB5</span><br><span class="line"><span class="comment">## ...........................</span></span><br><span class="line"><span class="keyword">include</span> ../lab5/Makefile.local</span><br></pre></td></tr></table></figure><p>And the <code>Makefile.local</code> : </p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ifndef</span> MAKEFILE_LAB5_LOCAL</span><br><span class="line"><span class="keyword">define</span> MAKEFILE_LAB5_LOCAL</span><br><span class="line">yes</span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add new sourcefiles here.</span></span><br><span class="line"></span><br><span class="line">CCFILES +=main.cc\</span><br><span class="line">bitmap.cc\</span><br><span class="line">    directory.cc\</span><br><span class="line">filehdr.cc\</span><br><span class="line">filesys.cc\</span><br><span class="line">fstest.cc\</span><br><span class="line">openfile.cc\</span><br><span class="line">synchdisk.cc\</span><br><span class="line">disk.cc</span><br><span class="line"></span><br><span class="line"><span class="keyword">ifdef</span> MAKEFILE_USERPROG_LOCAL</span><br><span class="line">DEFINES := $(DEFINES:FILESYS_STUB=FILESYS)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">INCPATH += -I../lab5 -I../userprog</span><br><span class="line">DEFINES += -DFILESYS_NEEDED -DFILESYS</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endif</span> <span class="comment"># MAKEFILE_LAB5_LOCAL</span></span><br></pre></td></tr></table></figure><p>Now we could make file correctly, but there are also a few things to change: </p><h3 id="main-cc"><a href="#main-cc" class="headerlink" title="main.cc"></a><code>main.cc</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">NAppend</span><span class="params">(<span class="keyword">char</span> *nachosFileFrom, <span class="keyword">char</span> *nachosFileTo, <span class="keyword">int</span> half)</span></span>;</span><br><span class="line"><span class="comment">// ....................................................................</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(*argv, <span class="string">"-hnap"</span>)) &#123;  <span class="comment">// cut half and append from Nachos to Nachos</span></span><br><span class="line">    ASSERT(argc &gt; <span class="number">2</span>);</span><br><span class="line">    NAppend(*(argv + <span class="number">1</span>), *(argv + <span class="number">2</span>), <span class="number">1</span>);</span><br><span class="line">    argCount = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>So that we can use half append from Nachos file to Nachos file.</p><h2 id="Read-and-modify-Codes"><a href="#Read-and-modify-Codes" class="headerlink" title="Read and modify Codes"></a>Read and modify Codes</h2><p>We only need to focus on the append operation, so directly go to the major code part.</p><h3 id="fstest-cc"><a href="#fstest-cc" class="headerlink" title="fstest.cc"></a><code>fstest.cc</code></h3><blockquote><p><code>Append</code></p><p>Append the contents of the UNIX file “<code>from</code>“ to the Nachos file “<code>to</code>“.</p><p>If “<code>half</code>“ is non-zero, start at the middle of file “<code>to</code>“ to appending the contents of “from”; Otherwise, do real appending after the end of file “to”.</p><p>If Nachos file “to” does not exist, create the nachos file “to” with length 0, then append the contents of UNIX file  “from” to the end of it.</p><p><code>NAppend</code></p><p><code>NAppend</code> is the same as <code>Append</code> except that the “<code>from</code>“ file is a Nachos file instead of a UNIX file. It appends the contents of Nachos file “<code>from</code>“ to the end of Nachos file “<code>to</code>“.</p><p>If Nachos file “<code>to</code>“ does not exist, create the nachos file “<code>to</code>“ with length 0, then append the contents of UNIX file “<code>from</code>“ to the end of it.</p></blockquote><p><code>Append</code> and <code>NAppend</code> are majorly the same, so we only need to compare the different part and also change parts of the same codes. The start position is defined by half : 0 to tail append, 1 to half append. And the data is collected in a buffer: <code>buffer = new char[TransferSize];</code> . <code>TransferSize</code> is 10, the reading speed. And we see the reading process use <code>openFile-&gt;Write(buffer, amountRead);</code> . This is how it works. so dig into that.</p><h3 id="Write-amp-WriteAt"><a href="#Write-amp-WriteAt" class="headerlink" title="Write() &amp; WriteAt()"></a><code>Write()</code> &amp; <code>WriteAt()</code></h3><p><code>Write()</code> is in <code>openfile.cc</code> , and it uses <code>WriteAt()</code>, so just focus on <code>WriteAt()</code> . </p><p>We see </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((numBytes &lt;= <span class="number">0</span>) || (<span class="built_in">position</span> &gt;= fileLength))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>This is a restriction from appending files, so change it to :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((numBytes &lt;= <span class="number">0</span>) || (<span class="built_in">position</span> &gt; fileLength)) <span class="comment">// change here to make its end appendable</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>And </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="built_in">position</span> + numBytes) &gt; fileLength)</span><br><span class="line">numBytes = fileLength - <span class="built_in">position</span>;</span><br></pre></td></tr></table></figure><p>The original code just cut the file length, instead of finding a new sector for the exceeded part, so change it:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="built_in">position</span> + numBytes) &gt; fileLength) &#123; <span class="comment">// which means it needs to be expanded</span></span><br><span class="line">    <span class="keyword">int</span> increaseBytes = <span class="built_in">position</span> + numBytes - fileLength; <span class="comment">// how long to increase</span></span><br><span class="line">    BitMap *freeBitMap = fileSystem-&gt;getBitMap(); <span class="comment">// fetch bitmap</span></span><br><span class="line">    <span class="keyword">bool</span> hdrResult;</span><br><span class="line">    hdrResult = hdr-&gt;Allocate(freeBitMap, fileLength, increaseBytes); <span class="comment">// modify header, bitmap</span></span><br><span class="line">    <span class="keyword">if</span> (!hdrResult)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">fileSystem-&gt;setBitMap(freeBitMap); <span class="comment">// update bitmap</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In order to get BitMap and set BitMap, we should add a few things to filesys :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BitMap* <span class="title">FileSystem::getBitMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BitMap *freeBitMap = <span class="keyword">new</span> BitMap(NumSectors);</span><br><span class="line">    freeBitMap-&gt;FetchFrom(freeMapFile);</span><br><span class="line">    <span class="keyword">return</span> freeBitMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FileSystem::setBitMap</span><span class="params">(BitMap* freeMap)</span> </span>&#123;</span><br><span class="line">    freeMap-&gt;WriteBack(freeMapFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Don’t forget to declare that in <code>filesys.h</code> .</p><h3 id="filehdr-cc"><a href="#filehdr-cc" class="headerlink" title="filehdr.cc"></a><code>filehdr.cc</code></h3><p>Also, in the last step we changed file header by using <code>Allocate</code> , which is in <code>filehdr.cc</code> : </p><blockquote><p><code>FileHeader::Allocate</code></p><p>Initialize a fresh file header for a newly created file. Allocate data blocks for the file out of the map of free disk blocks. Return FALSE if there are not enough free blocks to accommodate the new file.</p><p>“<code>freeMap</code>“ is the bit map of free disk sectors<br>“<code>fileSize</code>“ is the bit map of free disk sectors</p></blockquote><p>The original Allocate is only made for creating a new file, so we need to change it to make it available for appending files. Below is the code:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FileHeader::Allocate</span><span class="params">(BitMap *freeMap, <span class="keyword">int</span> fileSize, <span class="keyword">int</span> incrementBytes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (numSectors &gt; NumDirect) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// append in a blank file</span></span><br><span class="line">    <span class="keyword">if</span> ((fileSize == <span class="number">0</span>) &amp;&amp; (incrementBytes &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (freeMap-&gt;NumClear() &lt; <span class="number">1</span>) &#123; <span class="comment">// no enough space</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Insufficient Disk Space.\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dataSectors[<span class="number">0</span>] = freeMap-&gt;Find(); <span class="comment">// find a free space</span></span><br><span class="line">        numSectors = <span class="number">1</span>;</span><br><span class="line">        numBytes = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    numBytes = fileSize;</span><br><span class="line">    <span class="keyword">int</span> offset = numSectors * SectorSize - numBytes; <span class="comment">// the last sector offset to full in the original file</span></span><br><span class="line">    <span class="keyword">int</span> newSectorBytes = incrementBytes - offset; <span class="comment">// new sector takes</span></span><br><span class="line">    <span class="keyword">if</span> (newSectorBytes &lt;= <span class="number">0</span>) &#123; <span class="comment">// just put in the original sector (enough)</span></span><br><span class="line">        numBytes = numBytes + incrementBytes;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// original sector not enough, need to expand</span></span><br><span class="line">    <span class="keyword">int</span> moreSectors = divRoundUp(newSectorBytes, SectorSize);</span><br><span class="line">    <span class="keyword">if</span> (numSectors + moreSectors &gt; NumDirect)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    <span class="keyword">if</span> (freeMap-&gt;NumClear() &lt; moreSectors) &#123; <span class="comment">// no enough space to use</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Insufficient Disk Space.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = numSectors; i &lt; numSectors + moreSectors; i++)</span><br><span class="line">        dataSectors[i] = freeMap-&gt;Find();</span><br><span class="line">    numBytes = numBytes + incrementBytes;</span><br><span class="line">    numSectors = numSectors + moreSectors;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>NumDirect</code> is the number of free sector in the whole file system: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NumDirect ((SectorSize - 2 * sizeof(int)) / sizeof(int))</span></span><br></pre></td></tr></table></figure><p>The <code>SectorSize</code> is 128 , Think of the structure of the file header, the first 2 is used for 2 integers, so the left is </p><p>$(128-2\times4)\div4=30$ . Only 30 sectors available at most.</p><p>So if it asks too much, there is no space for it, return FALSE.</p><p>The following lines calculate how many sectors it should take: </p><p>If the last sector of the original file is big enough to contain the increasement, no extra sectors are needed. If not, find sectors for them.</p><h3 id="openfile-cc"><a href="#openfile-cc" class="headerlink" title="openfile.cc"></a><code>openfile.cc</code></h3><p>The last thing is write back. so enable the codes in <code>fstest.cc</code> :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">openFile-&gt;WriteBack();</span><br><span class="line">DEBUG(<span class="string">'f'</span>,<span class="string">"inodes have been written back\n"</span>);</span><br></pre></td></tr></table></figure><p>And modify <code>openfile.cc</code> :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">OpenFile::OpenFile(<span class="keyword">int</span> sector) &#123; </span><br><span class="line">    hdr = <span class="keyword">new</span> FileHeader;</span><br><span class="line">    hdr-&gt;FetchFrom(sector);</span><br><span class="line">    seekPosition = <span class="number">0</span>;</span><br><span class="line">    hdrSector = sector;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// .............................</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OpenFile::WriteBack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    hdr-&gt;WriteBack(hdrSector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>All is done.</p><h2 id="Run-and-Test"><a href="#Run-and-Test" class="headerlink" title="Run and Test"></a>Run and Test</h2><p>There are too many things to do, so I write 4 shell files:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############ 1.sh #############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># test append</span></span></span><br><span class="line">rm DISK</span><br><span class="line">./nachos -f</span><br><span class="line">./nachos -cp test/small small</span><br><span class="line">hexdump -C DISK</span><br><span class="line">./nachos -ap test/small small</span><br><span class="line">hexdump -C DISK</span><br><span class="line">./nachos -cp test/empty empty</span><br><span class="line">hexdump -C DISK</span><br><span class="line">./nachos -ap test/medium empty</span><br><span class="line">hexdump -C DISK</span><br><span class="line">./nachos -D</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############ 2.sh #############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># test half append</span></span></span><br><span class="line">rm DISK</span><br><span class="line">./nachos -f</span><br><span class="line">./nachos -cp test/small small</span><br><span class="line">./nachos -cp test/big big</span><br><span class="line">hexdump -C DISK</span><br><span class="line">./nachos -hap test/small big</span><br><span class="line">./nachos -hap test/big small</span><br><span class="line">hexdump -C DISK</span><br><span class="line">./nachos -D</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############ 3.sh #############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># test nachos append</span></span></span><br><span class="line">rm DISK</span><br><span class="line">./nachos -f</span><br><span class="line">./nachos -cp test/medium medium</span><br><span class="line">./nachos -cp test/big big</span><br><span class="line">hexdump -C DISK</span><br><span class="line">./nachos -nap medium big</span><br><span class="line">hexdump -C DISK</span><br><span class="line">./nachos -D</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############ 4.sh #############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># test half N-append</span></span></span><br><span class="line">rm DISK</span><br><span class="line">./nachos -f</span><br><span class="line">./nachos -cp test/medium medium</span><br><span class="line">./nachos -cp test/big big</span><br><span class="line">hexdump -C DISK</span><br><span class="line">./nachos -hnap medium big</span><br><span class="line">hexdump -C DISK</span><br><span class="line">./nachos -D</span><br></pre></td></tr></table></figure><p>Testing <code>append</code>, <code>half-append</code>, <code>nachos-append</code>, <code>half-nachos-append</code>.</p><p>Below is the result:</p><h3 id="append"><a href="#append" class="headerlink" title="append"></a><code>append</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab5# ./001.sh</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">....................................</span><br><span class="line">Cleaning up...</span><br><span class="line">00000000  ab 89 67 45 80 00 00 00  01 00 00 00 02 00 00 00  |..gE............|</span><br><span class="line">00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000080  00 00 00 00 c8 00 00 00  02 00 00 00 03 00 00 00  |................|</span><br><span class="line">00000090  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000100  00 00 00 00 7f 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000180  00 00 00 00 01 00 00 00  05 00 00 00 73 6d 61 6c  |............smal|</span><br><span class="line">00000190  6c 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |l...............|</span><br><span class="line">000001a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000280  00 00 00 00 28 00 00 00  01 00 00 00 06 00 00 00  |....(...........|</span><br><span class="line">00000290  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000300  00 00 00 00 54 68 69 73  20 69 73 20 61 20 73 6d  |....This is a sm|</span><br><span class="line">00000310  61 6c 6c 20 66 69 6c 65  2e 0a 2a 2a 2a 65 6e 64  |all file..***end|</span><br><span class="line">00000320  20 6f 66 20 66 69 6c 65  2a 2a 2a 0a 00 00 00 00  | of file***.....|</span><br><span class="line">00000330  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00020004</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 83020, idle 82350, system 670, user 0</span><br><span class="line">Disk I/O: reads 13, writes 9</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line">00000000  ab 89 67 45 80 00 00 00  01 00 00 00 02 00 00 00  |..gE............|</span><br><span class="line">00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000080  00 00 00 00 c8 00 00 00  02 00 00 00 03 00 00 00  |................|</span><br><span class="line">00000090  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000100  00 00 00 00 7f 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000180  00 00 00 00 01 00 00 00  05 00 00 00 73 6d 61 6c  |............smal|</span><br><span class="line">00000190  6c 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |l...............|</span><br><span class="line">000001a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000280  00 00 00 00 50 00 00 00  01 00 00 00 06 00 00 00  |....P...........|</span><br><span class="line">00000290  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000300  00 00 00 00 54 68 69 73  20 69 73 20 61 20 73 6d  |....This is a sm|</span><br><span class="line">00000310  61 6c 6c 20 66 69 6c 65  2e 0a 2a 2a 2a 65 6e 64  |all file..***end|</span><br><span class="line">00000320  20 6f 66 20 66 69 6c 65  2a 2a 2a 0a 54 68 69 73  | of file***.This|</span><br><span class="line">00000330  20 69 73 20 61 20 73 6d  61 6c 6c 20 66 69 6c 65  | is a small file|</span><br><span class="line">00000340  2e 0a 2a 2a 2a 65 6e 64  20 6f 66 20 66 69 6c 65  |..***end of file|</span><br><span class="line">00000350  2a 2a 2a 0a 00 00 00 00  00 00 00 00 00 00 00 00  |***.............|</span><br><span class="line">00000360  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00020004</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 51110, idle 50710, system 400, user 0</span><br><span class="line">Disk I/O: reads 9, writes 4</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line">00000000  ab 89 67 45 80 00 00 00  01 00 00 00 02 00 00 00  |..gE............|</span><br><span class="line">00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000080  00 00 00 00 c8 00 00 00  02 00 00 00 03 00 00 00  |................|</span><br><span class="line">00000090  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000100  00 00 00 00 ff 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000180  00 00 00 00 01 00 00 00  05 00 00 00 73 6d 61 6c  |............smal|</span><br><span class="line">00000190  6c 00 00 00 00 00 00 00  01 00 00 00 07 00 00 00  |l...............|</span><br><span class="line">000001a0  65 6d 70 74 79 00 00 00  00 00 00 00 00 00 00 00  |empty...........|</span><br><span class="line">000001b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000280  00 00 00 00 50 00 00 00  01 00 00 00 06 00 00 00  |....P...........|</span><br><span class="line">00000290  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000300  00 00 00 00 54 68 69 73  20 69 73 20 61 20 73 6d  |....This is a sm|</span><br><span class="line">00000310  61 6c 6c 20 66 69 6c 65  2e 0a 2a 2a 2a 65 6e 64  |all file..***end|</span><br><span class="line">00000320  20 6f 66 20 66 69 6c 65  2a 2a 2a 0a 54 68 69 73  | of file***.This|</span><br><span class="line">00000330  20 69 73 20 61 20 73 6d  61 6c 6c 20 66 69 6c 65  | is a small file|</span><br><span class="line">00000340  2e 0a 2a 2a 2a 65 6e 64  20 6f 66 20 66 69 6c 65  |..***end of file|</span><br><span class="line">00000350  2a 2a 2a 0a 00 00 00 00  00 00 00 00 00 00 00 00  |***.............|</span><br><span class="line">00000360  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00020004</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 228020, idle 226270, system 1750, user 0</span><br><span class="line">Disk I/O: reads 31, writes 27</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line">00000000  ab 89 67 45 80 00 00 00  01 00 00 00 02 00 00 00  |..gE............|</span><br><span class="line">00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000080  00 00 00 00 c8 00 00 00  02 00 00 00 03 00 00 00  |................|</span><br><span class="line">00000090  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000100  00 00 00 00 ff 01 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000180  00 00 00 00 01 00 00 00  05 00 00 00 73 6d 61 6c  |............smal|</span><br><span class="line">00000190  6c 00 00 00 00 00 00 00  01 00 00 00 07 00 00 00  |l...............|</span><br><span class="line">000001a0  65 6d 70 74 79 00 00 00  00 00 00 00 00 00 00 00  |empty...........|</span><br><span class="line">000001b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000280  00 00 00 00 50 00 00 00  01 00 00 00 06 00 00 00  |....P...........|</span><br><span class="line">00000290  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000300  00 00 00 00 54 68 69 73  20 69 73 20 61 20 73 6d  |....This is a sm|</span><br><span class="line">00000310  61 6c 6c 20 66 69 6c 65  2e 0a 2a 2a 2a 65 6e 64  |all file..***end|</span><br><span class="line">00000320  20 6f 66 20 66 69 6c 65  2a 2a 2a 0a 54 68 69 73  | of file***.This|</span><br><span class="line">00000330  20 69 73 20 61 20 73 6d  61 6c 6c 20 66 69 6c 65  | is a small file|</span><br><span class="line">00000340  2e 0a 2a 2a 2a 65 6e 64  20 6f 66 20 66 69 6c 65  |..***end of file|</span><br><span class="line">00000350  2a 2a 2a 0a 00 00 00 00  00 00 00 00 00 00 00 00  |***.............|</span><br><span class="line">00000360  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000380  00 00 00 00 80 00 00 00  01 00 00 00 08 00 00 00  |................|</span><br><span class="line">00000390  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000400  00 00 00 00 54 68 69 73  20 69 73 20 61 20 6d 65  |....This is a me|</span><br><span class="line">00000410  64 69 75 6d 20 66 69 6c  65 0a 54 68 69 73 20 69  |dium file.This i|</span><br><span class="line">00000420  73 20 61 20 6d 65 64 69  75 6d 20 66 69 6c 65 0a  |s a medium file.|</span><br><span class="line">00000430  54 68 69 73 20 69 73 20  61 20 6d 65 64 69 75 6d  |This is a medium|</span><br><span class="line">00000440  20 66 69 6c 65 0a 54 68  69 73 20 69 73 20 61 20  | file.This is a |</span><br><span class="line">00000450  6d 65 64 69 75 6d 20 66  69 6c 65 0a 54 68 69 73  |medium file.This|</span><br><span class="line">00000460  20 69 73 20 61 20 6d 65  64 69 75 6d 20 66 69 6c  | is a medium fil|</span><br><span class="line">00000470  65 0a 2a 2a 2a 65 6e 64  20 6f 66 20 66 69 6c 65  |e.***end of file|</span><br><span class="line">00000480  2a 2a 2a 0a 00 00 00 00  00 00 00 00 00 00 00 00  |***.............|</span><br><span class="line">00000490  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00020004</span><br><span class="line">Bit map file header:</span><br><span class="line">FileHeader contents.  File size: 128.  File blocks:</span><br><span class="line">2 </span><br><span class="line">File contents:</span><br><span class="line">\ff\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><br><span class="line">Directory file header:</span><br><span class="line">FileHeader contents.  File size: 200.  File blocks:</span><br><span class="line">3 4 </span><br><span class="line">File contents:</span><br><span class="line">\1\0\0\0\5\0\0\0small\0\0\0\0\0\0\0\1\0\0\0\7\0\0\0empty\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><br><span class="line">\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><br><span class="line">Bitmap set:</span><br><span class="line">0, 1, 2, 3, 4, 5, 6, 7, 8, </span><br><span class="line">Directory contents:</span><br><span class="line">Name: small, Sector: 5</span><br><span class="line">FileHeader contents.  File size: 80.  File blocks:</span><br><span class="line">6 </span><br><span class="line">File contents:</span><br><span class="line">This is a small file.\a***end of file***\aThis is a small file.\a***end of file***\a</span><br><span class="line">Name: empty, Sector: 7</span><br><span class="line">FileHeader contents.  File size: 128.  File blocks:</span><br><span class="line">8 </span><br><span class="line">File contents:</span><br><span class="line">This is a medium file\aThis is a medium file\aThis is a medium file\aThis is a medium file\aThis is a medium file\a***end of file***\a</span><br><span class="line"></span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 7430, idle 7000, system 430, user 0</span><br><span class="line">Disk I/O: reads 14, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure><p>Copy empty, append small to small and append medium to empty works fine.</p><h3 id="half-append"><a href="#half-append" class="headerlink" title="half-append"></a><code>half-append</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab5# ./002.sh</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">...........................................</span><br><span class="line">Cleaning up...</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 597520, idle 595020, system 2500, user 0</span><br><span class="line">Disk I/O: reads 44, writes 39</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line">00000000  ab 89 67 45 80 00 00 00  01 00 00 00 02 00 00 00  |..gE............|</span><br><span class="line">00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000080  00 00 00 00 c8 00 00 00  02 00 00 00 03 00 00 00  |................|</span><br><span class="line">00000090  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000100  00 00 00 00 ff 07 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000180  00 00 00 00 01 00 00 00  05 00 00 00 73 6d 61 6c  |............smal|</span><br><span class="line">00000190  6c 00 00 00 00 00 00 00  01 00 00 00 07 00 00 00  |l...............|</span><br><span class="line">000001a0  62 69 67 00 00 00 00 00  00 00 00 00 00 00 00 00  |big.............|</span><br><span class="line">000001b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000280  00 00 00 00 28 00 00 00  01 00 00 00 06 00 00 00  |....(...........|</span><br><span class="line">00000290  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000300  00 00 00 00 54 68 69 73  20 69 73 20 61 20 73 6d  |....This is a sm|</span><br><span class="line">00000310  61 6c 6c 20 66 69 6c 65  2e 0a 2a 2a 2a 65 6e 64  |all file..***end|</span><br><span class="line">00000320  20 6f 66 20 66 69 6c 65  2a 2a 2a 0a 00 00 00 00  | of file***.....|</span><br><span class="line">00000330  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000380  00 00 00 00 42 01 00 00  03 00 00 00 08 00 00 00  |....B...........|</span><br><span class="line">00000390  09 00 00 00 0a 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000003a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000400  00 00 00 00 54 68 69 73  20 69 73 20 61 20 62 69  |....This is a bi|</span><br><span class="line">00000410  67 20 66 69 6c 65 0a 54  68 69 73 20 69 73 20 61  |g file.This is a|</span><br><span class="line">00000420  20 62 69 67 20 66 69 6c  65 0a 54 68 69 73 20 69  | big file.This i|</span><br><span class="line">00000430  73 20 61 20 62 69 67 20  66 69 6c 65 0a 54 68 69  |s a big file.Thi|</span><br><span class="line">00000440  73 20 69 73 20 61 20 62  69 67 20 66 69 6c 65 0a  |s is a big file.|</span><br><span class="line">00000450  54 68 69 73 20 69 73 20  61 20 62 69 67 20 66 69  |This is a big fi|</span><br><span class="line">00000460  6c 65 0a 54 68 69 73 20  69 73 20 61 20 62 69 67  |le.This is a big|</span><br><span class="line">00000470  20 66 69 6c 65 0a 54 68  69 73 20 69 73 20 61 20  | file.This is a |</span><br><span class="line">00000480  62 69 67 20 66 69 6c 65  0a 54 68 69 73 20 69 73  |big file.This is|</span><br><span class="line">00000490  20 61 20 62 69 67 20 66  69 6c 65 0a 54 68 69 73  | a big file.This|</span><br><span class="line">000004a0  20 69 73 20 61 20 62 69  67 20 66 69 6c 65 0a 54  | is a big file.T|</span><br><span class="line">000004b0  68 69 73 20 69 73 20 61  20 62 69 67 20 66 69 6c  |his is a big fil|</span><br><span class="line">000004c0  65 0a 54 68 69 73 20 69  73 20 61 20 62 69 67 20  |e.This is a big |</span><br><span class="line">000004d0  66 69 6c 65 0a 54 68 69  73 20 69 73 20 61 20 62  |file.This is a b|</span><br><span class="line">000004e0  69 67 20 66 69 6c 65 0a  54 68 69 73 20 69 73 20  |ig file.This is |</span><br><span class="line">000004f0  61 20 62 69 67 20 66 69  6c 65 0a 54 68 69 73 20  |a big file.This |</span><br><span class="line">00000500  69 73 20 61 20 62 69 67  20 66 69 6c 65 0a 54 68  |is a big file.Th|</span><br><span class="line">00000510  69 73 20 69 73 20 61 20  62 69 67 20 66 69 6c 65  |is is a big file|</span><br><span class="line">00000520  0a 54 68 69 73 20 69 73  20 61 20 62 69 67 20 66  |.This is a big f|</span><br><span class="line">00000530  69 6c 65 0a 2a 2a 2a 65  6e 64 20 6f 66 20 66 69  |ile.***end of fi|</span><br><span class="line">00000540  6c 65 2a 2a 2a 0a 00 00  00 00 00 00 00 00 00 00  |le***...........|</span><br><span class="line">00000550  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00020004</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 84020, idle 83590, system 430, user 0</span><br><span class="line">Disk I/O: reads 9, writes 5</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 563020, idle 558870, system 4150, user 0</span><br><span class="line">Disk I/O: reads 71, writes 67</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line">00000000  ab 89 67 45 80 00 00 00  01 00 00 00 02 00 00 00  |..gE............|</span><br><span class="line">00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000080  00 00 00 00 c8 00 00 00  02 00 00 00 03 00 00 00  |................|</span><br><span class="line">00000090  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000100  00 00 00 00 ff 1f 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000180  00 00 00 00 01 00 00 00  05 00 00 00 73 6d 61 6c  |............smal|</span><br><span class="line">00000190  6c 00 00 00 00 00 00 00  01 00 00 00 07 00 00 00  |l...............|</span><br><span class="line">000001a0  62 69 67 00 00 00 00 00  00 00 00 00 00 00 00 00  |big.............|</span><br><span class="line">000001b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000280  00 00 00 00 56 01 00 00  03 00 00 00 06 00 00 00  |....V...........|</span><br><span class="line">00000290  0b 00 00 00 0c 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000002a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000300  00 00 00 00 54 68 69 73  20 69 73 20 61 20 73 6d  |....This is a sm|</span><br><span class="line">00000310  61 6c 6c 20 66 69 6c 65  54 68 69 73 20 69 73 20  |all fileThis is |</span><br><span class="line">00000320  61 20 62 69 67 20 66 69  6c 65 0a 54 68 69 73 20  |a big file.This |</span><br><span class="line">00000330  69 73 20 61 20 62 69 67  20 66 69 6c 65 0a 54 68  |is a big file.Th|</span><br><span class="line">00000340  69 73 20 69 73 20 61 20  62 69 67 20 66 69 6c 65  |is is a big file|</span><br><span class="line">00000350  0a 54 68 69 73 20 69 73  20 61 20 62 69 67 20 66  |.This is a big f|</span><br><span class="line">00000360  69 6c 65 0a 54 68 69 73  20 69 73 20 61 20 62 69  |ile.This is a bi|</span><br><span class="line">00000370  67 20 66 69 6c 65 0a 54  68 69 73 20 69 73 20 61  |g file.This is a|</span><br><span class="line">00000380  20 62 69 67 42 01 00 00  03 00 00 00 08 00 00 00  | bigB...........|</span><br><span class="line">00000390  09 00 00 00 0a 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000003a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000400  00 00 00 00 54 68 69 73  20 69 73 20 61 20 62 69  |....This is a bi|</span><br><span class="line">00000410  67 20 66 69 6c 65 0a 54  68 69 73 20 69 73 20 61  |g file.This is a|</span><br><span class="line">00000420  20 62 69 67 20 66 69 6c  65 0a 54 68 69 73 20 69  | big file.This i|</span><br><span class="line">00000430  73 20 61 20 62 69 67 20  66 69 6c 65 0a 54 68 69  |s a big file.Thi|</span><br><span class="line">00000440  73 20 69 73 20 61 20 62  69 67 20 66 69 6c 65 0a  |s is a big file.|</span><br><span class="line">00000450  54 68 69 73 20 69 73 20  61 20 62 69 67 20 66 69  |This is a big fi|</span><br><span class="line">00000460  6c 65 0a 54 68 69 73 20  69 73 20 61 20 62 69 67  |le.This is a big|</span><br><span class="line">00000470  20 66 69 6c 65 0a 54 68  69 73 20 69 73 20 61 20  | file.This is a |</span><br><span class="line">00000480  62 69 67 20 66 69 6c 65  0a 54 68 69 73 20 69 73  |big file.This is|</span><br><span class="line">00000490  20 61 20 62 69 67 20 66  69 6c 65 0a 54 68 69 73  | a big file.This|</span><br><span class="line">000004a0  20 69 73 20 61 54 68 69  73 20 69 73 20 61 20 73  | is aThis is a s|</span><br><span class="line">000004b0  6d 61 6c 6c 20 66 69 6c  65 2e 0a 2a 2a 2a 65 6e  |mall file..***en|</span><br><span class="line">000004c0  64 20 6f 66 20 66 69 6c  65 2a 2a 2a 0a 69 67 20  |d of file***.ig |</span><br><span class="line">000004d0  66 69 6c 65 0a 54 68 69  73 20 69 73 20 61 20 62  |file.This is a b|</span><br><span class="line">000004e0  69 67 20 66 69 6c 65 0a  54 68 69 73 20 69 73 20  |ig file.This is |</span><br><span class="line">000004f0  61 20 62 69 67 20 66 69  6c 65 0a 54 68 69 73 20  |a big file.This |</span><br><span class="line">00000500  69 73 20 61 20 62 69 67  20 66 69 6c 65 0a 54 68  |is a big file.Th|</span><br><span class="line">00000510  69 73 20 69 73 20 61 20  62 69 67 20 66 69 6c 65  |is is a big file|</span><br><span class="line">00000520  0a 54 68 69 73 20 69 73  20 61 20 62 69 67 20 66  |.This is a big f|</span><br><span class="line">00000530  69 6c 65 0a 2a 2a 2a 65  6e 64 20 6f 66 20 66 69  |ile.***end of fi|</span><br><span class="line">00000540  6c 65 2a 2a 2a 0a 00 00  00 00 00 00 00 00 00 00  |le***...........|</span><br><span class="line">00000550  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000580  00 00 00 00 20 66 69 6c  65 0a 54 68 69 73 20 69  |.... file.This i|</span><br><span class="line">00000590  73 20 61 20 62 69 67 20  66 69 6c 65 0a 54 68 69  |s a big file.Thi|</span><br><span class="line">000005a0  73 20 69 73 20 61 20 62  69 67 20 66 69 6c 65 0a  |s is a big file.|</span><br><span class="line">000005b0  54 68 69 73 20 69 73 20  61 20 62 69 67 20 66 69  |This is a big fi|</span><br><span class="line">000005c0  6c 65 0a 54 68 69 73 20  69 73 20 61 20 62 69 67  |le.This is a big|</span><br><span class="line">000005d0  20 66 69 6c 65 0a 54 68  69 73 20 69 73 20 61 20  | file.This is a |</span><br><span class="line">000005e0  62 69 67 20 66 69 6c 65  0a 54 68 69 73 20 69 73  |big file.This is|</span><br><span class="line">000005f0  20 61 20 62 69 67 20 66  69 6c 65 0a 54 68 69 73  | a big file.This|</span><br><span class="line">00000600  20 69 73 20 61 20 62 69  67 20 66 69 6c 65 0a 54  | is a big file.T|</span><br><span class="line">00000610  68 69 73 20 69 73 20 61  20 62 69 67 20 66 69 6c  |his is a big fil|</span><br><span class="line">00000620  65 0a 54 68 69 73 20 69  73 20 61 20 62 69 67 20  |e.This is a big |</span><br><span class="line">00000630  66 69 6c 65 0a 54 68 69  73 20 69 73 20 61 20 62  |file.This is a b|</span><br><span class="line">00000640  69 67 20 66 69 6c 65 0a  2a 2a 2a 65 6e 64 20 6f  |ig file.***end o|</span><br><span class="line">00000650  66 20 66 69 6c 65 2a 2a  2a 0a 00 00 00 00 00 00  |f file***.......|</span><br><span class="line">00000660  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00020004</span><br><span class="line">Bit map file header:</span><br><span class="line">FileHeader contents.  File size: 128.  File blocks:</span><br><span class="line">2 </span><br><span class="line">File contents:</span><br><span class="line">\ff\1f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><br><span class="line">Directory file header:</span><br><span class="line">FileHeader contents.  File size: 200.  File blocks:</span><br><span class="line">3 4 </span><br><span class="line">File contents:</span><br><span class="line">\1\0\0\0\5\0\0\0small\0\0\0\0\0\0\0\1\0\0\0\7\0\0\0big\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><br><span class="line">\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><br><span class="line">Bitmap set:</span><br><span class="line">0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, </span><br><span class="line">Directory contents:</span><br><span class="line">Name: small, Sector: 5</span><br><span class="line">FileHeader contents.  File size: 342.  File blocks:</span><br><span class="line">6 11 12 </span><br><span class="line">File contents:</span><br><span class="line">This is a small fileThis is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big</span><br><span class="line"> file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is </span><br><span class="line">a big file\aThis is a big file\aThis is a big file\aThis is a big file\a***end of file***\a</span><br><span class="line">Name: big, Sector: 7</span><br><span class="line">FileHeader contents.  File size: 322.  File blocks:</span><br><span class="line">8 9 10 </span><br><span class="line">File contents:</span><br><span class="line">This is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big </span><br><span class="line">file\aThis is a big file\aThis is aThis is a small file.\a***end of file***\aig file\aThis is a big file\aThis is a big file\aThis is a</span><br><span class="line"> big file\aThis is a big file\aThis is a big file\a***end of file***\a</span><br><span class="line"></span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 9550, idle 9000, system 550, user 0</span><br><span class="line">Disk I/O: reads 18, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure><p>Half append big to small and small to big works fine.</p><h3 id="nachos-append"><a href="#nachos-append" class="headerlink" title="nachos-append"></a><code>nachos-append</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab5# ./003.sh</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">....................................</span><br><span class="line">Cleaning up...</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 597520, idle 595020, system 2500, user 0</span><br><span class="line">Disk I/O: reads 44, writes 39</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line">00000000  ab 89 67 45 80 00 00 00  01 00 00 00 02 00 00 00  |..gE............|</span><br><span class="line">00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000080  00 00 00 00 c8 00 00 00  02 00 00 00 03 00 00 00  |................|</span><br><span class="line">00000090  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000100  00 00 00 00 ff 07 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000180  00 00 00 00 01 00 00 00  05 00 00 00 6d 65 64 69  |............medi|</span><br><span class="line">00000190  75 6d 00 00 00 00 00 00  01 00 00 00 07 00 00 00  |um..............|</span><br><span class="line">000001a0  62 69 67 00 00 00 00 00  00 00 00 00 00 00 00 00  |big.............|</span><br><span class="line">000001b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000280  00 00 00 00 80 00 00 00  01 00 00 00 06 00 00 00  |................|</span><br><span class="line">00000290  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000300  00 00 00 00 54 68 69 73  20 69 73 20 61 20 6d 65  |....This is a me|</span><br><span class="line">00000310  64 69 75 6d 20 66 69 6c  65 0a 54 68 69 73 20 69  |dium file.This i|</span><br><span class="line">00000320  73 20 61 20 6d 65 64 69  75 6d 20 66 69 6c 65 0a  |s a medium file.|</span><br><span class="line">00000330  54 68 69 73 20 69 73 20  61 20 6d 65 64 69 75 6d  |This is a medium|</span><br><span class="line">00000340  20 66 69 6c 65 0a 54 68  69 73 20 69 73 20 61 20  | file.This is a |</span><br><span class="line">00000350  6d 65 64 69 75 6d 20 66  69 6c 65 0a 54 68 69 73  |medium file.This|</span><br><span class="line">00000360  20 69 73 20 61 20 6d 65  64 69 75 6d 20 66 69 6c  | is a medium fil|</span><br><span class="line">00000370  65 0a 2a 2a 2a 65 6e 64  20 6f 66 20 66 69 6c 65  |e.***end of file|</span><br><span class="line">00000380  2a 2a 2a 0a 42 01 00 00  03 00 00 00 08 00 00 00  |***.B...........|</span><br><span class="line">00000390  09 00 00 00 0a 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000003a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000400  00 00 00 00 54 68 69 73  20 69 73 20 61 20 62 69  |....This is a bi|</span><br><span class="line">00000410  67 20 66 69 6c 65 0a 54  68 69 73 20 69 73 20 61  |g file.This is a|</span><br><span class="line">00000420  20 62 69 67 20 66 69 6c  65 0a 54 68 69 73 20 69  | big file.This i|</span><br><span class="line">00000430  73 20 61 20 62 69 67 20  66 69 6c 65 0a 54 68 69  |s a big file.Thi|</span><br><span class="line">00000440  73 20 69 73 20 61 20 62  69 67 20 66 69 6c 65 0a  |s is a big file.|</span><br><span class="line">00000450  54 68 69 73 20 69 73 20  61 20 62 69 67 20 66 69  |This is a big fi|</span><br><span class="line">00000460  6c 65 0a 54 68 69 73 20  69 73 20 61 20 62 69 67  |le.This is a big|</span><br><span class="line">00000470  20 66 69 6c 65 0a 54 68  69 73 20 69 73 20 61 20  | file.This is a |</span><br><span class="line">00000480  62 69 67 20 66 69 6c 65  0a 54 68 69 73 20 69 73  |big file.This is|</span><br><span class="line">00000490  20 61 20 62 69 67 20 66  69 6c 65 0a 54 68 69 73  | a big file.This|</span><br><span class="line">000004a0  20 69 73 20 61 20 62 69  67 20 66 69 6c 65 0a 54  | is a big file.T|</span><br><span class="line">000004b0  68 69 73 20 69 73 20 61  20 62 69 67 20 66 69 6c  |his is a big fil|</span><br><span class="line">000004c0  65 0a 54 68 69 73 20 69  73 20 61 20 62 69 67 20  |e.This is a big |</span><br><span class="line">000004d0  66 69 6c 65 0a 54 68 69  73 20 69 73 20 61 20 62  |file.This is a b|</span><br><span class="line">000004e0  69 67 20 66 69 6c 65 0a  54 68 69 73 20 69 73 20  |ig file.This is |</span><br><span class="line">000004f0  61 20 62 69 67 20 66 69  6c 65 0a 54 68 69 73 20  |a big file.This |</span><br><span class="line">00000500  69 73 20 61 20 62 69 67  20 66 69 6c 65 0a 54 68  |is a big file.Th|</span><br><span class="line">00000510  69 73 20 69 73 20 61 20  62 69 67 20 66 69 6c 65  |is is a big file|</span><br><span class="line">00000520  0a 54 68 69 73 20 69 73  20 61 20 62 69 67 20 66  |.This is a big f|</span><br><span class="line">00000530  69 6c 65 0a 2a 2a 2a 65  6e 64 20 6f 66 20 66 69  |ile.***end of fi|</span><br><span class="line">00000540  6c 65 2a 2a 2a 0a 00 00  00 00 00 00 00 00 00 00  |le***...........|</span><br><span class="line">00000550  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00020004</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 244020, idle 241730, system 2290, user 0</span><br><span class="line">Disk I/O: reads 48, writes 28</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line">00000000  ab 89 67 45 80 00 00 00  01 00 00 00 02 00 00 00  |..gE............|</span><br><span class="line">00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000080  00 00 00 00 c8 00 00 00  02 00 00 00 03 00 00 00  |................|</span><br><span class="line">00000090  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000100  00 00 00 00 ff 0f 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000180  00 00 00 00 01 00 00 00  05 00 00 00 6d 65 64 69  |............medi|</span><br><span class="line">00000190  75 6d 00 00 00 00 00 00  01 00 00 00 07 00 00 00  |um..............|</span><br><span class="line">000001a0  62 69 67 00 00 00 00 00  00 00 00 00 00 00 00 00  |big.............|</span><br><span class="line">000001b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000280  00 00 00 00 80 00 00 00  01 00 00 00 06 00 00 00  |................|</span><br><span class="line">00000290  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000300  00 00 00 00 54 68 69 73  20 69 73 20 61 20 6d 65  |....This is a me|</span><br><span class="line">00000310  64 69 75 6d 20 66 69 6c  65 0a 54 68 69 73 20 69  |dium file.This i|</span><br><span class="line">00000320  73 20 61 20 6d 65 64 69  75 6d 20 66 69 6c 65 0a  |s a medium file.|</span><br><span class="line">00000330  54 68 69 73 20 69 73 20  61 20 6d 65 64 69 75 6d  |This is a medium|</span><br><span class="line">00000340  20 66 69 6c 65 0a 54 68  69 73 20 69 73 20 61 20  | file.This is a |</span><br><span class="line">00000350  6d 65 64 69 75 6d 20 66  69 6c 65 0a 54 68 69 73  |medium file.This|</span><br><span class="line">00000360  20 69 73 20 61 20 6d 65  64 69 75 6d 20 66 69 6c  | is a medium fil|</span><br><span class="line">00000370  65 0a 2a 2a 2a 65 6e 64  20 6f 66 20 66 69 6c 65  |e.***end of file|</span><br><span class="line">00000380  2a 2a 2a 0a c2 01 00 00  04 00 00 00 08 00 00 00  |***.............|</span><br><span class="line">00000390  09 00 00 00 0a 00 00 00  0b 00 00 00 00 00 00 00  |................|</span><br><span class="line">000003a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000400  00 00 00 00 54 68 69 73  20 69 73 20 61 20 62 69  |....This is a bi|</span><br><span class="line">00000410  67 20 66 69 6c 65 0a 54  68 69 73 20 69 73 20 61  |g file.This is a|</span><br><span class="line">00000420  20 62 69 67 20 66 69 6c  65 0a 54 68 69 73 20 69  | big file.This i|</span><br><span class="line">00000430  73 20 61 20 62 69 67 20  66 69 6c 65 0a 54 68 69  |s a big file.Thi|</span><br><span class="line">00000440  73 20 69 73 20 61 20 62  69 67 20 66 69 6c 65 0a  |s is a big file.|</span><br><span class="line">00000450  54 68 69 73 20 69 73 20  61 20 62 69 67 20 66 69  |This is a big fi|</span><br><span class="line">00000460  6c 65 0a 54 68 69 73 20  69 73 20 61 20 62 69 67  |le.This is a big|</span><br><span class="line">00000470  20 66 69 6c 65 0a 54 68  69 73 20 69 73 20 61 20  | file.This is a |</span><br><span class="line">00000480  62 69 67 20 66 69 6c 65  0a 54 68 69 73 20 69 73  |big file.This is|</span><br><span class="line">00000490  20 61 20 62 69 67 20 66  69 6c 65 0a 54 68 69 73  | a big file.This|</span><br><span class="line">000004a0  20 69 73 20 61 20 62 69  67 20 66 69 6c 65 0a 54  | is a big file.T|</span><br><span class="line">000004b0  68 69 73 20 69 73 20 61  20 62 69 67 20 66 69 6c  |his is a big fil|</span><br><span class="line">000004c0  65 0a 54 68 69 73 20 69  73 20 61 20 62 69 67 20  |e.This is a big |</span><br><span class="line">000004d0  66 69 6c 65 0a 54 68 69  73 20 69 73 20 61 20 62  |file.This is a b|</span><br><span class="line">000004e0  69 67 20 66 69 6c 65 0a  54 68 69 73 20 69 73 20  |ig file.This is |</span><br><span class="line">000004f0  61 20 62 69 67 20 66 69  6c 65 0a 54 68 69 73 20  |a big file.This |</span><br><span class="line">00000500  69 73 20 61 20 62 69 67  20 66 69 6c 65 0a 54 68  |is a big file.Th|</span><br><span class="line">00000510  69 73 20 69 73 20 61 20  62 69 67 20 66 69 6c 65  |is is a big file|</span><br><span class="line">00000520  0a 54 68 69 73 20 69 73  20 61 20 62 69 67 20 66  |.This is a big f|</span><br><span class="line">00000530  69 6c 65 0a 2a 2a 2a 65  6e 64 20 6f 66 20 66 69  |ile.***end of fi|</span><br><span class="line">00000540  6c 65 2a 2a 2a 0a 54 68  69 73 20 69 73 20 61 20  |le***.This is a |</span><br><span class="line">00000550  6d 65 64 69 75 6d 20 66  69 6c 65 0a 54 68 69 73  |medium file.This|</span><br><span class="line">00000560  20 69 73 20 61 20 6d 65  64 69 75 6d 20 66 69 6c  | is a medium fil|</span><br><span class="line">00000570  65 0a 54 68 69 73 20 69  73 20 61 20 6d 65 64 69  |e.This is a medi|</span><br><span class="line">00000580  75 6d 20 66 69 6c 65 0a  54 68 69 73 20 69 73 20  |um file.This is |</span><br><span class="line">00000590  61 20 6d 65 64 69 75 6d  20 66 69 6c 65 0a 54 68  |a medium file.Th|</span><br><span class="line">000005a0  69 73 20 69 73 20 61 20  6d 65 64 69 75 6d 20 66  |is is a medium f|</span><br><span class="line">000005b0  69 6c 65 0a 2a 2a 2a 65  6e 64 20 6f 66 20 66 69  |ile.***end of fi|</span><br><span class="line">000005c0  6c 65 2a 2a 2a 0a 00 00  00 00 00 00 00 00 00 00  |le***...........|</span><br><span class="line">000005d0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00020004</span><br><span class="line">Bit map file header:</span><br><span class="line">FileHeader contents.  File size: 128.  File blocks:</span><br><span class="line">2 </span><br><span class="line">File contents:</span><br><span class="line">\ff\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><br><span class="line">Directory file header:</span><br><span class="line">FileHeader contents.  File size: 200.  File blocks:</span><br><span class="line">3 4 </span><br><span class="line">File contents:</span><br><span class="line">\1\0\0\0\5\0\0\0medium\0\0\0\0\0\0\1\0\0\0\7\0\0\0big\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><br><span class="line">\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><br><span class="line">Bitmap set:</span><br><span class="line">0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, </span><br><span class="line">Directory contents:</span><br><span class="line">Name: medium, Sector: 5</span><br><span class="line">FileHeader contents.  File size: 128.  File blocks:</span><br><span class="line">6 </span><br><span class="line">File contents:</span><br><span class="line">This is a medium file\aThis is a medium file\aThis is a medium file\aThis is a medium file\aThis is a medium file\a***end of file***\a</span><br><span class="line">Name: big, Sector: 7</span><br><span class="line">FileHeader contents.  File size: 450.  File blocks:</span><br><span class="line">8 9 10 11 </span><br><span class="line">File contents:</span><br><span class="line">This is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big </span><br><span class="line">file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a</span><br><span class="line"> big file\aThis is a big file\aThis is a big file\a***end of file***\aThis is a medium file\aThis is a medium file\aThis is a medium f</span><br><span class="line">ile\aThis is a medium file\aThis is a medium file\a***end of file***\a</span><br><span class="line"></span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 9020, idle 8500, system 520, user 0</span><br><span class="line">Disk I/O: reads 17, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure><p>Also fine.</p><h3 id="half-nachos-append"><a href="#half-nachos-append" class="headerlink" title="half-nachos-append"></a><code>half-nachos-append</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~&#x2F;OS&#x2F;lab5# .&#x2F;004.sh</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">.....................................</span><br><span class="line">Cleaning up...</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 597520, idle 595020, system 2500, user 0</span><br><span class="line">Disk I&#x2F;O: reads 44, writes 39</span><br><span class="line">Console I&#x2F;O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I&#x2F;O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line">00000000  ab 89 67 45 80 00 00 00  01 00 00 00 02 00 00 00  |..gE............|</span><br><span class="line">00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000080  00 00 00 00 c8 00 00 00  02 00 00 00 03 00 00 00  |................|</span><br><span class="line">00000090  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000100  00 00 00 00 ff 07 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000180  00 00 00 00 01 00 00 00  05 00 00 00 6d 65 64 69  |............medi|</span><br><span class="line">00000190  75 6d 00 00 00 00 00 00  01 00 00 00 07 00 00 00  |um..............|</span><br><span class="line">000001a0  62 69 67 00 00 00 00 00  00 00 00 00 00 00 00 00  |big.............|</span><br><span class="line">000001b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000280  00 00 00 00 80 00 00 00  01 00 00 00 06 00 00 00  |................|</span><br><span class="line">00000290  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000300  00 00 00 00 54 68 69 73  20 69 73 20 61 20 6d 65  |....This is a me|</span><br><span class="line">00000310  64 69 75 6d 20 66 69 6c  65 0a 54 68 69 73 20 69  |dium file.This i|</span><br><span class="line">00000320  73 20 61 20 6d 65 64 69  75 6d 20 66 69 6c 65 0a  |s a medium file.|</span><br><span class="line">00000330  54 68 69 73 20 69 73 20  61 20 6d 65 64 69 75 6d  |This is a medium|</span><br><span class="line">00000340  20 66 69 6c 65 0a 54 68  69 73 20 69 73 20 61 20  | file.This is a |</span><br><span class="line">00000350  6d 65 64 69 75 6d 20 66  69 6c 65 0a 54 68 69 73  |medium file.This|</span><br><span class="line">00000360  20 69 73 20 61 20 6d 65  64 69 75 6d 20 66 69 6c  | is a medium fil|</span><br><span class="line">00000370  65 0a 2a 2a 2a 65 6e 64  20 6f 66 20 66 69 6c 65  |e.***end of file|</span><br><span class="line">00000380  2a 2a 2a 0a 42 01 00 00  03 00 00 00 08 00 00 00  |***.B...........|</span><br><span class="line">00000390  09 00 00 00 0a 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000003a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000400  00 00 00 00 54 68 69 73  20 69 73 20 61 20 62 69  |....This is a bi|</span><br><span class="line">00000410  67 20 66 69 6c 65 0a 54  68 69 73 20 69 73 20 61  |g file.This is a|</span><br><span class="line">00000420  20 62 69 67 20 66 69 6c  65 0a 54 68 69 73 20 69  | big file.This i|</span><br><span class="line">00000430  73 20 61 20 62 69 67 20  66 69 6c 65 0a 54 68 69  |s a big file.Thi|</span><br><span class="line">00000440  73 20 69 73 20 61 20 62  69 67 20 66 69 6c 65 0a  |s is a big file.|</span><br><span class="line">00000450  54 68 69 73 20 69 73 20  61 20 62 69 67 20 66 69  |This is a big fi|</span><br><span class="line">00000460  6c 65 0a 54 68 69 73 20  69 73 20 61 20 62 69 67  |le.This is a big|</span><br><span class="line">00000470  20 66 69 6c 65 0a 54 68  69 73 20 69 73 20 61 20  | file.This is a |</span><br><span class="line">00000480  62 69 67 20 66 69 6c 65  0a 54 68 69 73 20 69 73  |big file.This is|</span><br><span class="line">00000490  20 61 20 62 69 67 20 66  69 6c 65 0a 54 68 69 73  | a big file.This|</span><br><span class="line">000004a0  20 69 73 20 61 20 62 69  67 20 66 69 6c 65 0a 54  | is a big file.T|</span><br><span class="line">000004b0  68 69 73 20 69 73 20 61  20 62 69 67 20 66 69 6c  |his is a big fil|</span><br><span class="line">000004c0  65 0a 54 68 69 73 20 69  73 20 61 20 62 69 67 20  |e.This is a big |</span><br><span class="line">000004d0  66 69 6c 65 0a 54 68 69  73 20 69 73 20 61 20 62  |file.This is a b|</span><br><span class="line">000004e0  69 67 20 66 69 6c 65 0a  54 68 69 73 20 69 73 20  |ig file.This is |</span><br><span class="line">000004f0  61 20 62 69 67 20 66 69  6c 65 0a 54 68 69 73 20  |a big file.This |</span><br><span class="line">00000500  69 73 20 61 20 62 69 67  20 66 69 6c 65 0a 54 68  |is a big file.Th|</span><br><span class="line">00000510  69 73 20 69 73 20 61 20  62 69 67 20 66 69 6c 65  |is is a big file|</span><br><span class="line">00000520  0a 54 68 69 73 20 69 73  20 61 20 62 69 67 20 66  |.This is a big f|</span><br><span class="line">00000530  69 6c 65 0a 2a 2a 2a 65  6e 64 20 6f 66 20 66 69  |ile.***end of fi|</span><br><span class="line">00000540  6c 65 2a 2a 2a 0a 00 00  00 00 00 00 00 00 00 00  |le***...........|</span><br><span class="line">00000550  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00020004</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 244020, idle 242510, system 1510, user 0</span><br><span class="line">Disk I&#x2F;O: reads 35, writes 15</span><br><span class="line">Console I&#x2F;O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I&#x2F;O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line">00000000  ab 89 67 45 80 00 00 00  01 00 00 00 02 00 00 00  |..gE............|</span><br><span class="line">00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000080  00 00 00 00 c8 00 00 00  02 00 00 00 03 00 00 00  |................|</span><br><span class="line">00000090  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000100  00 00 00 00 ff 07 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000180  00 00 00 00 01 00 00 00  05 00 00 00 6d 65 64 69  |............medi|</span><br><span class="line">00000190  75 6d 00 00 00 00 00 00  01 00 00 00 07 00 00 00  |um..............|</span><br><span class="line">000001a0  62 69 67 00 00 00 00 00  00 00 00 00 00 00 00 00  |big.............|</span><br><span class="line">000001b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000280  00 00 00 00 80 00 00 00  01 00 00 00 06 00 00 00  |................|</span><br><span class="line">00000290  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000300  00 00 00 00 54 68 69 73  20 69 73 20 61 20 6d 65  |....This is a me|</span><br><span class="line">00000310  64 69 75 6d 20 66 69 6c  65 0a 54 68 69 73 20 69  |dium file.This i|</span><br><span class="line">00000320  73 20 61 20 6d 65 64 69  75 6d 20 66 69 6c 65 0a  |s a medium file.|</span><br><span class="line">00000330  54 68 69 73 20 69 73 20  61 20 6d 65 64 69 75 6d  |This is a medium|</span><br><span class="line">00000340  20 66 69 6c 65 0a 54 68  69 73 20 69 73 20 61 20  | file.This is a |</span><br><span class="line">00000350  6d 65 64 69 75 6d 20 66  69 6c 65 0a 54 68 69 73  |medium file.This|</span><br><span class="line">00000360  20 69 73 20 61 20 6d 65  64 69 75 6d 20 66 69 6c  | is a medium fil|</span><br><span class="line">00000370  65 0a 2a 2a 2a 65 6e 64  20 6f 66 20 66 69 6c 65  |e.***end of file|</span><br><span class="line">00000380  2a 2a 2a 0a 42 01 00 00  03 00 00 00 08 00 00 00  |***.B...........|</span><br><span class="line">00000390  09 00 00 00 0a 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000003a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000400  00 00 00 00 54 68 69 73  20 69 73 20 61 20 62 69  |....This is a bi|</span><br><span class="line">00000410  67 20 66 69 6c 65 0a 54  68 69 73 20 69 73 20 61  |g file.This is a|</span><br><span class="line">00000420  20 62 69 67 20 66 69 6c  65 0a 54 68 69 73 20 69  | big file.This i|</span><br><span class="line">00000430  73 20 61 20 62 69 67 20  66 69 6c 65 0a 54 68 69  |s a big file.Thi|</span><br><span class="line">00000440  73 20 69 73 20 61 20 62  69 67 20 66 69 6c 65 0a  |s is a big file.|</span><br><span class="line">00000450  54 68 69 73 20 69 73 20  61 20 62 69 67 20 66 69  |This is a big fi|</span><br><span class="line">00000460  6c 65 0a 54 68 69 73 20  69 73 20 61 20 62 69 67  |le.This is a big|</span><br><span class="line">00000470  20 66 69 6c 65 0a 54 68  69 73 20 69 73 20 61 20  | file.This is a |</span><br><span class="line">00000480  62 69 67 20 66 69 6c 65  0a 54 68 69 73 20 69 73  |big file.This is|</span><br><span class="line">00000490  20 61 20 62 69 67 20 66  69 6c 65 0a 54 68 69 73  | a big file.This|</span><br><span class="line">000004a0  20 69 73 20 61 54 68 69  73 20 69 73 20 61 20 6d  | is aThis is a m|</span><br><span class="line">000004b0  65 64 69 75 6d 20 66 69  6c 65 0a 54 68 69 73 20  |edium file.This |</span><br><span class="line">000004c0  69 73 20 61 20 6d 65 64  69 75 6d 20 66 69 6c 65  |is a medium file|</span><br><span class="line">000004d0  0a 54 68 69 73 20 69 73  20 61 20 6d 65 64 69 75  |.This is a mediu|</span><br><span class="line">000004e0  6d 20 66 69 6c 65 0a 54  68 69 73 20 69 73 20 61  |m file.This is a|</span><br><span class="line">000004f0  20 6d 65 64 69 75 6d 20  66 69 6c 65 0a 54 68 69  | medium file.Thi|</span><br><span class="line">00000500  73 20 69 73 20 61 20 6d  65 64 69 75 6d 20 66 69  |s is a medium fi|</span><br><span class="line">00000510  6c 65 0a 2a 2a 2a 65 6e  64 20 6f 66 20 66 69 6c  |le.***end of fil|</span><br><span class="line">00000520  65 2a 2a 2a 0a 20 69 73  20 61 20 62 69 67 20 66  |e***. is a big f|</span><br><span class="line">00000530  69 6c 65 0a 2a 2a 2a 65  6e 64 20 6f 66 20 66 69  |ile.***end of fi|</span><br><span class="line">00000540  6c 65 2a 2a 2a 0a 54 68  69 73 20 69 73 20 61 20  |le***.This is a |</span><br><span class="line">00000550  6d 65 64 69 75 6d 20 66  69 6c 65 0a 54 68 69 73  |medium file.This|</span><br><span class="line">00000560  20 69 73 20 61 20 6d 65  64 69 75 6d 20 66 69 6c  | is a medium fil|</span><br><span class="line">00000570  65 0a 2a 2a 2a 65 6e 64  20 6f 66 20 66 69 6c 65  |e.***end of file|</span><br><span class="line">00000580  2a 2a 2a 0a 00 00 00 00  00 00 00 00 00 00 00 00  |***.............|</span><br><span class="line">00000590  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00020004</span><br><span class="line">Bit map file header:</span><br><span class="line">FileHeader contents.  File size: 128.  File blocks:</span><br><span class="line">2 </span><br><span class="line">File contents:</span><br><span class="line">\ff\7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><br><span class="line">Directory file header:</span><br><span class="line">FileHeader contents.  File size: 200.  File blocks:</span><br><span class="line">3 4 </span><br><span class="line">File contents:</span><br><span class="line">\1\0\0\0\5\0\0\0medium\0\0\0\0\0\0\1\0\0\0\7\0\0\0big\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><br><span class="line">\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><br><span class="line">Bitmap set:</span><br><span class="line">0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, </span><br><span class="line">Directory contents:</span><br><span class="line">Name: medium, Sector: 5</span><br><span class="line">FileHeader contents.  File size: 128.  File blocks:</span><br><span class="line">6 </span><br><span class="line">File contents:</span><br><span class="line">This is a medium file\aThis is a medium file\aThis is a medium file\aThis is a medium file\aThis is a medium file\a***end of file***\a</span><br><span class="line">Name: big, Sector: 7</span><br><span class="line">FileHeader contents.  File size: 322.  File blocks:</span><br><span class="line">8 9 10 </span><br><span class="line">File contents:</span><br><span class="line">This is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big file\aThis is a big </span><br><span class="line">file\aThis is a big file\aThis is aThis is a medium file\aThis is a medium file\aThis is a medium file\aThis is a medium file\aThis is</span><br><span class="line"> a medium file\a***end of file***\a is a big file\a***end of file***\a</span><br><span class="line"></span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 8490, idle 8000, system 490, user 0</span><br><span class="line">Disk I&#x2F;O: reads 16, writes 0</span><br><span class="line">Console I&#x2F;O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I&#x2F;O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure><p>Fine.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One of the flaws in Nachos is that you cannot expand a file in the Nachos File System. So this is what experiment 5 does. &lt;/p&gt;
&lt;p&gt;We need to do the append and half append, both from UNIX file to Nachos file and from Nachos file to Nachos file. &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="co10.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>A simple file system in Nachos</title>
    <link href="co10.github.io/2021/04/16/A-simple-file-system-in-Nachos/"/>
    <id>co10.github.io/2021/04/16/A-simple-file-system-in-Nachos/</id>
    <published>2021-04-16T01:40:52.000Z</published>
    <updated>2021-04-18T11:45:51.476Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>We define two separate implementations of the file system. </p><p>The “STUB” version just re-defines the Nachos file system operations as operations on the native UNIX file system on the machine running the Nachos simulation.  This is provided in case the multiprogramming and virtual memory assignments (which make use of the file system) are done before the file system assignment.</p><p>The other version is a “real” file system, built on top of a disk simulator.  The disk is simulated using the native UNIX file system (in a file named “DISK”). </p><p>In the “real” implementation, there are two key data structures used in the file system. There is a single “root” directory, listing all of the files in the file system; unlike UNIX, the baseline system does not provide a hierarchical directory structure. In addition, there is a bitmap for allocating disk sectors. Both the root directory and the bitmap are themselves stored as files in the Nachos file system — this causes an interesting bootstrap problem when the simulated disk is initialized. </p></blockquote><a id="more"></a><p>In <code>filesys.h</code> in <code>filesys</code> directory, we see:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FILESYS_STUB <span class="comment">// Temporarily implement file system calls as </span></span></span><br><span class="line"><span class="comment">// calls to UNIX, until the real file system implementation is available</span></span><br><span class="line"><span class="comment">// ...............................</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">// FILESYS</span></span></span><br><span class="line"><span class="comment">// ...............................</span></span><br></pre></td></tr></table></figure><p>Grep to see: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/OS/filesys# grep FILESYS_STUB *</span><br><span class="line">grep: arch: Is a directory</span><br><span class="line">filesys.h:#ifdef FILESYS_STUB           // Temporarily implement file system calls as </span><br><span class="line">Makefile.local:DEFINES := $(DEFINES:FILESYS_STUB=FILESYS)</span><br><span class="line">openfile.h:#ifdef FILESYS_STUB                  // Temporarily implement calls to </span><br><span class="line">grep: test: Is a directory</span><br></pre></td></tr></table></figure><p><code>FILESYS_STUB</code> is not defined, so it uses <code>FILESYS</code> . </p><h2 id="Reading-Code"><a href="#Reading-Code" class="headerlink" title="Reading Code"></a>Reading Code</h2><h3 id="Disk-Manager"><a href="#Disk-Manager" class="headerlink" title="Disk Manager"></a>Disk Manager</h3><p>Code in <code>machine</code> directory.</p><h4 id="disk-cc"><a href="#disk-cc" class="headerlink" title="disk.cc"></a><code>disk.cc</code></h4><p>In first few lines we see:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MagicNumber0x456789ab</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MagicSizesizeof(int)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DiskSize(MagicSize + (NumSectors * SectorSize))</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Disk::Disk(<span class="keyword">char</span>* name, VoidFunctionPtr callWhenDone, _int callArg) &#123;</span><br><span class="line">    <span class="keyword">int</span> magicNum;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    DEBUG(<span class="string">'d'</span>, <span class="string">"Initializing the disk, 0x%x 0x%x\n"</span>, callWhenDone, callArg);</span><br><span class="line">    handler = callWhenDone;</span><br><span class="line">    handlerArg = callArg;</span><br><span class="line">    lastSector = <span class="number">0</span>;</span><br><span class="line">    bufferInit = <span class="number">0</span>;</span><br><span class="line">    fileno = OpenForReadWrite(name, FALSE);</span><br><span class="line">    <span class="keyword">if</span> (fileno &gt;= <span class="number">0</span>) &#123;<span class="comment">// file exists, check magic number </span></span><br><span class="line">        Read(fileno, (<span class="keyword">char</span> *) &amp;magicNum, MagicSize);</span><br><span class="line">ASSERT(magicNum == MagicNumber);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">// file doesn't exist, create it</span></span><br><span class="line">        fileno = OpenForWrite(name);</span><br><span class="line">magicNum = MagicNumber;  </span><br><span class="line">WriteFile(fileno, (<span class="keyword">char</span> *) &amp;magicNum, MagicSize); <span class="comment">// write magic number</span></span><br><span class="line"><span class="comment">// need to write at end of file, so that reads will not return EOF</span></span><br><span class="line">        Lseek(fileno, DiskSize - <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">0</span>);</span><br><span class="line">WriteFile(fileno, (<span class="keyword">char</span> *)&amp;tmp, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));  </span><br><span class="line">    &#125;</span><br><span class="line">    active = FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And also see define in <code>disk.h</code> :</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define SectorSize 128&#x2F;&#x2F; number of bytes per disk sector</span><br><span class="line">#define SectorsPerTrack 32&#x2F;&#x2F; number of sectors per disk track </span><br><span class="line">#define NumTracks 32&#x2F;&#x2F; number of tracks per disk</span><br><span class="line">#define NumSectors (SectorsPerTrack * NumTracks)</span><br></pre></td></tr></table></figure><p>The first 4 bytes is <code>MagicNumber</code> (<code>sizeof (int)</code> , which is 4 bytes in both 32-bit and 64-bit systems) , implying that this is a Nachos Disk. The <code>NumSectors * SectorSize</code> is $(32\times32)\times128$ , every sector is 128 bytes. So the No. 0 Sector starts from 4, ends with 131.</p><p>And the Disk size is $4+1024\times128=128{\rm KB}={\rm 0x80KB}$ .</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Disk::ReadRequest</span><span class="params">(<span class="keyword">int</span> sectorNumber, <span class="keyword">char</span>* data)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Disk::WriteRequest</span><span class="params">(<span class="keyword">int</span> sectorNumber, <span class="keyword">char</span>* data)</span></span></span><br></pre></td></tr></table></figure><p>The two operations are similar: calculate how long it takes by its size, check if it’s ready then seek its sector and then read/write, update the sector position, report status and then open interrupt.</p><h3 id="File-System"><a href="#File-System" class="headerlink" title="File System"></a>File System</h3><p>The code is in <code>filesys</code> directory.</p><h4 id="filehdr-h"><a href="#filehdr-h" class="headerlink" title="filehdr.h"></a><code>filehdr.h</code></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHeader</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> numBytes;<span class="comment">// Number of bytes in the file</span></span><br><span class="line"><span class="keyword">int</span> numSectors;<span class="comment">// Number of data sectors in the file</span></span><br><span class="line"><span class="keyword">int</span> dataSectors[NumDirect];<span class="comment">// Disk sector numbers for each data block in the file</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>We see three things in file header: the size of the file in bytes, how many sectors the file locates, and which sector each block of the file locates.</p><h4 id="filesys-cc"><a href="#filesys-cc" class="headerlink" title="filesys.cc"></a><code>filesys.cc</code></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">FileSystem</span>::<span class="built_in">FileSystem</span>(<span class="keyword">bool</span> format)</span><br></pre></td></tr></table></figure><p>If <code>format</code> is true, it means the file system needs to be formatted: new <code>BitMap</code>, new <code>Directory</code>, associated with the file header. If not, just open the files representing the bitmap and directory. </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FileSystem::Create</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">int</span> initialSize)</span></span></span><br></pre></td></tr></table></figure><p>It creates a new file with a new sector and some space with a filename, failed if filename already exists or no free entry or no free space. The default directory entry is 10.</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">OpenFile * <span class="title">FileSystem::Open</span><span class="params">(<span class="keyword">char</span> *name)</span></span></span><br></pre></td></tr></table></figure><p>It first finds the file from directory, the result returns its sector. If not found, return null.</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">FileSystem</span>::Remove(<span class="keyword">char</span> *name)</span><br></pre></td></tr></table></figure><p>It deletes the space for its header, along with the space. And write back the change to directory, bitmap. Return TRUE if the file was deleted, FALSE if the file wasn’t in the file system.</p><h4 id="directory-h"><a href="#directory-h" class="headerlink" title="directory.h"></a><code>directory.h</code></h4><blockquote><p>The directory is a table of fixed length entries. Each entry represents a single file, and contains the file name, and the location of the file header on disk.</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DirectoryEntry</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">bool</span> inUse;<span class="comment">// Is this directory entry in use?</span></span><br><span class="line"><span class="keyword">int</span> sector;<span class="comment">// Location on disk to find the FileHeader for this file </span></span><br><span class="line"><span class="keyword">char</span> name[FileNameMaxLen + <span class="number">1</span>];<span class="comment">// Text name for file, with +1 for the trailing '\0'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Directory</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> tableSize;<span class="comment">// Number of directory entries</span></span><br><span class="line">DirectoryEntry *table;<span class="comment">// Table of pairs:  &lt;file name, file header location&gt; </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindIndex</span><span class="params">(<span class="keyword">char</span> *name)</span></span>;<span class="comment">// Find the index into the directory table corresponding to "name"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>So the directory is a 1-D array which contains the entries representing a file. </p><h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><p>In <code>main.cc</code> in <code>threads</code> directory : </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FILESYS</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(*argv, <span class="string">"-cp"</span>)) &#123; <span class="comment">// copy from UNIX to Nachos</span></span><br><span class="line">    ASSERT(argc &gt; <span class="number">2</span>);</span><br><span class="line">    Copy(*(argv + <span class="number">1</span>), *(argv + <span class="number">2</span>));</span><br><span class="line">    argCount = <span class="number">3</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(*argv, <span class="string">"-p"</span>)) &#123;<span class="comment">// print a Nachos file</span></span><br><span class="line">    ASSERT(argc &gt; <span class="number">1</span>);</span><br><span class="line">    Print(*(argv + <span class="number">1</span>));</span><br><span class="line">    argCount = <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(*argv, <span class="string">"-r"</span>)) &#123;<span class="comment">// remove Nachos file</span></span><br><span class="line">    ASSERT(argc &gt; <span class="number">1</span>);</span><br><span class="line">    fileSystem-&gt;Remove(*(argv + <span class="number">1</span>));</span><br><span class="line">    argCount = <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(*argv, <span class="string">"-l"</span>)) &#123;<span class="comment">// list Nachos directory</span></span><br><span class="line">            fileSystem-&gt;List();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(*argv, <span class="string">"-D"</span>)) &#123;<span class="comment">// print entire filesystem</span></span><br><span class="line">            fileSystem-&gt;Print();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(*argv, <span class="string">"-t"</span>)) &#123;<span class="comment">// performance test</span></span><br><span class="line">            PerformanceTest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// FILESYS</span></span></span><br></pre></td></tr></table></figure><p><code>-cp</code> : copy a file to Nachos, similar to <code>cp</code> . <code>-cp (from) (to)</code> , copy a file in the host system, to somewhere in Nachos file system, also rename it.</p><p><code>-p</code> : print the contents of a file, similar to <code>cat</code> . <code>-p filename</code> .</p><p><code>-r</code> : remove a file by filename, similar to <code>rm</code> . <code>-r filename</code> .</p><p><code>-l</code> : list all the filenames in the current directory, similar to <code>ls</code> . </p><p><code>-D</code> : print the entire file system info. </p><p><code>-t</code> : performance test.</p><p>and also -f , which I can’t find where it is: </p><p><code>-f</code> : causes the physical disk to be formatted. </p><h3 id="The-Unix-commands"><a href="#The-Unix-commands" class="headerlink" title="The Unix commands"></a>The Unix commands</h3><p><code>od</code> : Octal Dump. Displays a file in <strong>octal</strong> (<strong>base 8</strong>) format by default.</p><p><code>hexdump</code> : Hexadecimal Dump. Displays the contents of binary files in hexadecimal, decimal, octal, or ASCII.</p><h2 id="The-experiment"><a href="#The-experiment" class="headerlink" title="The experiment"></a>The experiment</h2><h3 id="Test-file"><a href="#Test-file" class="headerlink" title="Test file"></a>Test file</h3><p>In <code>filesys/test</code> , there are three test files, test them: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/OS/filesys# od test/small</span><br><span class="line">0000000 064124 071551 064440 020163 064164 020145 070163 064562</span><br><span class="line">0000020 063556 067440 020146 072557 020162 064544 061563 067157</span><br><span class="line">0000040 062564 072156 005056</span><br><span class="line">0000046</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/OS/filesys# hexdump -c test/small</span><br><span class="line">0000000   T   h   i   s       i   s       t   h   e       s   p   r   i</span><br><span class="line">0000010   n   g       o   f       o   u   r       d   i   s   c   o   n</span><br><span class="line">0000020   t   e   n   t   .  \n                                        </span><br><span class="line">0000026</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/OS/filesys# hexdump -C test/small</span><br><span class="line">00000000  54 68 69 73 20 69 73 20  74 68 65 20 73 70 72 69  |This is the spri|</span><br><span class="line">00000010  6e 67 20 6f 66 20 6f 75  72 20 64 69 73 63 6f 6e  |ng of our discon|</span><br><span class="line">00000020  74 65 6e 74 2e 0a                                 |tent..|</span><br><span class="line">00000026</span><br></pre></td></tr></table></figure><p>Also do the same to <code>medium</code> and <code>big</code> if you interest.</p><h3 id="The-Nachos-file-system"><a href="#The-Nachos-file-system" class="headerlink" title="The Nachos file system"></a>The Nachos file system</h3><p>In <code>filesys</code> directory, <code>make</code> . Then do the follow: </p><ol><li><p>Initialize the Disk. </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/OS/filesys# ./nachos -f</span><br></pre></td></tr></table></figure></li><li><p>Show the disk info.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nachos -D</span><br><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br><span class="line">Bit map file header:</span><br><span class="line">FileHeader contents.  File size: 128.  File blocks:</span><br><span class="line">2 </span><br><span class="line">File contents:</span><br><span class="line">\1f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><br><span class="line">Directory file header:</span><br><span class="line">FileHeader contents.  File size: 200.  File blocks:</span><br><span class="line">3 4 </span><br><span class="line">File contents:</span><br><span class="line">\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><br><span class="line">\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0</span><br><span class="line">Bitmap set:</span><br><span class="line">0, 1, 2, 3, 4, </span><br><span class="line">Directory contents:</span><br><span class="line"></span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 5420, idle 4990, system 430, user 0</span><br><span class="line">Disk I/O: reads 10, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure></li><li><p>Run <code>OD</code> : </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/OS/filesys# od DISK</span><br><span class="line">0000000 104653 042547 000200 000000 000001 000000 000002 000000</span><br><span class="line">0000020 000000 000000 000000 000000 000000 000000 000000 000000</span><br><span class="line">*</span><br><span class="line">0000200 000000 000000 000310 000000 000002 000000 000003 000000</span><br><span class="line">0000220 000004 000000 000000 000000 000000 000000 000000 000000</span><br><span class="line">0000240 000000 000000 000000 000000 000000 000000 000000 000000</span><br><span class="line">*</span><br><span class="line">0000400 000000 000000 000037 000000 000000 000000 000000 000000</span><br><span class="line">0000420 000000 000000 000000 000000 000000 000000 000000 000000</span><br><span class="line">*</span><br><span class="line">0400000 000000 000000</span><br><span class="line">0400004</span><br></pre></td></tr></table></figure></li><li><p>Run <code>hexdump</code> :</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/OS/filesys# hexdump -c DISK</span><br><span class="line">0000000   � 211   g   E 200  \0  \0  \0 001  \0  \0  \0 002  \0  \0  \0</span><br><span class="line">0000010  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0</span><br><span class="line">*</span><br><span class="line">0000080  \0  \0  \0  \0   �  \0  \0  \0 002  \0  \0  \0 003  \0  \0  \0</span><br><span class="line">0000090 004  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0</span><br><span class="line">00000a0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0</span><br><span class="line">*</span><br><span class="line">0000100  \0  \0  \0  \0 037  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0</span><br><span class="line">0000110  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0</span><br><span class="line">*</span><br><span class="line">0020004</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/OS/filesys# hexdump -C DISK</span><br><span class="line">00000000  ab 89 67 45 80 00 00 00  01 00 00 00 02 00 00 00  |..gE............|</span><br><span class="line">00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000080  00 00 00 00 c8 00 00 00  02 00 00 00 03 00 00 00  |................|</span><br><span class="line">00000090  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000100  00 00 00 00 1f 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00020004</span><br></pre></td></tr></table></figure><p>Clearly we see nothing but the initial info.</p></li><li><p>Copy <code>small</code> : </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/OS/filesys# ./nachos -cp test/small small</span><br></pre></td></tr></table></figure><p>Check it by <code>list</code> : </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/OS/filesys# ./nachos -l</span><br><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br><span class="line">small</span><br></pre></td></tr></table></figure><p>We see the filename: small. </p></li><li><p>Check the <code>DISK</code> : </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/OS/filesys# hexdump -C DISK</span><br><span class="line">00000000  ab 89 67 45 80 00 00 00  01 00 00 00 02 00 00 00  |..gE............|</span><br><span class="line">00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000080  00 00 00 00 c8 00 00 00  02 00 00 00 03 00 00 00  |................|</span><br><span class="line">00000090  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000100  00 00 00 00 7f 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000180  00 00 00 00 01 00 00 00  05 00 00 00 73 6d 61 6c  |............smal|</span><br><span class="line">00000190  6c 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |l...............|</span><br><span class="line">000001a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000280  00 00 00 00 26 00 00 00  01 00 00 00 06 00 00 00  |....&amp;...........|</span><br><span class="line">00000290  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000300  00 00 00 00 54 68 69 73  20 69 73 20 74 68 65 20  |....This is the |</span><br><span class="line">00000310  73 70 72 69 6e 67 20 6f  66 20 6f 75 72 20 64 69  |spring of our di|</span><br><span class="line">00000320  73 63 6f 6e 74 65 6e 74  2e 0a 00 00 00 00 00 00  |scontent........|</span><br><span class="line">00000330  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00020004</span><br></pre></td></tr></table></figure><p>from <code>0x184</code>: <code>01 00 00 00  05 00 00 00 73 6d 61 6c 6c</code><br><code>0x01</code> stands for the sector is in use, <code>0x05</code> stands for the contents is in Sector 5, <code>0x736d616c6c</code> is the ASCII code for its file name. </p></li><li><p>Remove <code>small</code> :</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/OS/filesys# ./nachos -r small</span><br></pre></td></tr></table></figure><p>Check it by <code>list</code> : </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nachos -l</span><br><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br></pre></td></tr></table></figure><p>Removed.</p></li><li><p>Check the <code>DISK</code> : </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/OS/filesys# hexdump -C DISK</span><br><span class="line">00000000  ab 89 67 45 80 00 00 00  01 00 00 00 02 00 00 00  |..gE............|</span><br><span class="line">00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000080  00 00 00 00 c8 00 00 00  02 00 00 00 03 00 00 00  |................|</span><br><span class="line">00000090  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000100  00 00 00 00 1f 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000180  00 00 00 00 00 00 00 00  05 00 00 00 73 6d 61 6c  |............smal|</span><br><span class="line">00000190  6c 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |l...............|</span><br><span class="line">000001a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000280  00 00 00 00 26 00 00 00  01 00 00 00 06 00 00 00  |....&amp;...........|</span><br><span class="line">00000290  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000300  00 00 00 00 54 68 69 73  20 69 73 20 74 68 65 20  |....This is the |</span><br><span class="line">00000310  73 70 72 69 6e 67 20 6f  66 20 6f 75 72 20 64 69  |spring of our di|</span><br><span class="line">00000320  73 63 6f 6e 74 65 6e 74  2e 0a 00 00 00 00 00 00  |scontent........|</span><br><span class="line">00000330  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00020004</span><br></pre></td></tr></table></figure><p>We see <code>inuse</code> is set to 0, but the contents remain. </p></li><li><p>Do the same for <code>medium</code> : </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/OS/filesys# ./nachos -cp test/medium medium</span><br><span class="line">~/OS/filesys# hexdump -C DISK</span><br><span class="line">00000000  ab 89 67 45 80 00 00 00  01 00 00 00 02 00 00 00  |..gE............|</span><br><span class="line">00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000080  00 00 00 00 c8 00 00 00  02 00 00 00 03 00 00 00  |................|</span><br><span class="line">00000090  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000100  00 00 00 00 ff 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000180  00 00 00 00 01 00 00 00  05 00 00 00 6d 65 64 69  |............medi|</span><br><span class="line">00000190  75 6d 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |um..............|</span><br><span class="line">000001a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000280  00 00 00 00 98 00 00 00  02 00 00 00 06 00 00 00  |................|</span><br><span class="line">00000290  07 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">000002a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000300  00 00 00 00 54 68 69 73  20 69 73 20 74 68 65 20  |....This is the |</span><br><span class="line">00000310  73 70 72 69 6e 67 20 6f  66 20 6f 75 72 20 64 69  |spring of our di|</span><br><span class="line">00000320  73 63 6f 6e 74 65 6e 74  2e 0a 54 68 69 73 20 69  |scontent..This i|</span><br><span class="line">00000330  73 20 74 68 65 20 73 70  72 69 6e 67 20 6f 66 20  |s the spring of |</span><br><span class="line">00000340  6f 75 72 20 64 69 73 63  6f 6e 74 65 6e 74 2e 0a  |our discontent..|</span><br><span class="line">00000350  54 68 69 73 20 69 73 20  74 68 65 20 73 70 72 69  |This is the spri|</span><br><span class="line">00000360  6e 67 20 6f 66 20 6f 75  72 20 64 69 73 63 6f 6e  |ng of our discon|</span><br><span class="line">00000370  74 65 6e 74 2e 0a 54 68  69 73 20 69 73 20 74 68  |tent..This is th|</span><br><span class="line">00000380  65 20 73 70 72 69 6e 67  20 6f 66 20 6f 75 72 20  |e spring of our |</span><br><span class="line">00000390  64 69 73 63 6f 6e 74 65  6e 74 2e 0a 00 00 00 00  |discontent......|</span><br><span class="line">000003a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00020004</span><br></pre></td></tr></table></figure><p>It covers the sector not used by <code>small</code>. </p></li></ol><p>Also big can be tested, but I don’t list the code because it just does the same thing. The result leading to thinking matters.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;We define two separate implementations of the file system. &lt;/p&gt;
&lt;p&gt;The “STUB” version just re-defines the Nachos file system operations as operations on the native UNIX file system on the machine running the Nachos simulation.  This is provided in case the multiprogramming and virtual memory assignments (which make use of the file system) are done before the file system assignment.&lt;/p&gt;
&lt;p&gt;The other version is a “real” file system, built on top of a disk simulator.  The disk is simulated using the native UNIX file system (in a file named “DISK”). &lt;/p&gt;
&lt;p&gt;In the “real” implementation, there are two key data structures used in the file system. There is a single “root” directory, listing all of the files in the file system; unlike UNIX, the baseline system does not provide a hierarchical directory structure. In addition, there is a bitmap for allocating disk sectors. Both the root directory and the bitmap are themselves stored as files in the Nachos file system — this causes an interesting bootstrap problem when the simulated disk is initialized. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="co10.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Sync in Nachos</title>
    <link href="co10.github.io/2021/04/06/Sync-in-Nachos/"/>
    <id>co10.github.io/2021/04/06/Sync-in-Nachos/</id>
    <published>2021-04-06T00:17:16.000Z</published>
    <updated>2021-04-11T11:38:13.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>Before I begin <code>lab3</code>, I should read some codes.</p><a id="more"></a><h3 id="synch-cc-in-threads"><a href="#synch-cc-in-threads" class="headerlink" title="synch.cc in threads"></a><code>synch.cc</code> in <code>threads</code></h3><blockquote><p>Three kinds of synchronization routines are defined here: semaphores, locks and condition variables (<em>the implementation of the last two are left to the reader</em>).</p></blockquote><h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Semaphore::Semaphore(<span class="keyword">char</span>* debugName, <span class="keyword">int</span> initialValue) &#123;</span><br><span class="line">    name = debugName;</span><br><span class="line">    value = initialValue;</span><br><span class="line">    <span class="built_in">queue</span> = <span class="keyword">new</span> List;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Semaphore::P</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);<span class="comment">// disable interrupts</span></span><br><span class="line">    <span class="keyword">while</span> (value == <span class="number">0</span>) &#123; <span class="comment">// semaphore not available</span></span><br><span class="line"><span class="built_in">queue</span>-&gt;Append((<span class="keyword">void</span> *)currentThread);<span class="comment">// so go to sleep</span></span><br><span class="line">currentThread-&gt;Sleep();</span><br><span class="line">    &#125; </span><br><span class="line">    value--; <span class="comment">// semaphore available, consume its value</span></span><br><span class="line">    (<span class="keyword">void</span>) interrupt-&gt;SetLevel(oldLevel);<span class="comment">// re-enable interrupts</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Semaphore::V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread *thread;</span><br><span class="line">    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);</span><br><span class="line">    thread = (Thread *)<span class="built_in">queue</span>-&gt;Remove();</span><br><span class="line">    <span class="keyword">if</span> (thread != <span class="literal">NULL</span>)   <span class="comment">// make thread ready, consuming the V immediately</span></span><br><span class="line">scheduler-&gt;ReadyToRun(thread);</span><br><span class="line">    value++;</span><br><span class="line">    (<span class="keyword">void</span>) interrupt-&gt;SetLevel(oldLevel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It uses queue to achieve Semaphore, making it in order. When <code>value = 0</code> , that is, no resource available, it’s put in the pending queue and the thread sleeps; When <code>value &gt; 0</code> , it breaks the while loop and consume the resource (<code>value--</code>), but not removed from pending queue immediately until the <code>V()</code> operates , after which it will be put in <code>ReadyToRun</code>, making <code>value++</code> .</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Scheduler::ReadyToRun</span> <span class="params">(Thread *thread)</span> </span>&#123;</span><br><span class="line">    DEBUG(<span class="string">'t'</span>, <span class="string">"Putting thread %s on ready list.\n"</span>, thread-&gt;getName());</span><br><span class="line">    thread-&gt;setStatus(READY);</span><br><span class="line">    readyList-&gt;Append((<span class="keyword">void</span> *)thread);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Scheduler::Run</span> <span class="params">(Thread *nextThread)</span> </span>&#123;</span><br><span class="line">    Thread *oldThread = currentThread;</span><br><span class="line">    <span class="comment">// ............................</span></span><br><span class="line">    oldThread-&gt;CheckOverflow();    <span class="comment">// check if the old thread had an undetected stack overflow</span></span><br><span class="line">    currentThread = nextThread;    <span class="comment">// switch to the next thread</span></span><br><span class="line">    currentThread-&gt;setStatus(RUNNING);      <span class="comment">// nextThread is now running</span></span><br><span class="line">    <span class="comment">//.............................</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And in <code>ReadyToRun</code>, we see that it’s put in <code>readyList</code>, not running immediately until <code>Run()</code> by switching context .</p><h4 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h4><p>In <code>thread.cc</code>, we see how it’s scheduled: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Thread::Fork</span><span class="params">(VoidFunctionPtr func, _int arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...............................</span></span><br><span class="line">    StackAllocate(func, arg);</span><br><span class="line">    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);</span><br><span class="line">    scheduler-&gt;ReadyToRun(<span class="keyword">this</span>);<span class="comment">// ReadyToRun assumes that interrupts are disabled!</span></span><br><span class="line">    (<span class="keyword">void</span>) interrupt-&gt;SetLevel(oldLevel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Thread::Yield</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread *nextThread;</span><br><span class="line">    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);</span><br><span class="line">    ASSERT(<span class="keyword">this</span> == currentThread);</span><br><span class="line">    DEBUG(<span class="string">'t'</span>, <span class="string">"Yielding thread \"%s\"\n"</span>, getName());</span><br><span class="line">    nextThread = scheduler-&gt;FindNextToRun();</span><br><span class="line">    <span class="keyword">if</span> (nextThread != <span class="literal">NULL</span>) &#123;</span><br><span class="line">scheduler-&gt;ReadyToRun(<span class="keyword">this</span>);</span><br><span class="line">scheduler-&gt;Run(nextThread);</span><br><span class="line">    &#125;</span><br><span class="line">    (<span class="keyword">void</span>) interrupt-&gt;SetLevel(oldLevel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Thread::Sleep</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread *nextThread;</span><br><span class="line">    ASSERT(<span class="keyword">this</span> == currentThread);</span><br><span class="line">    ASSERT(interrupt-&gt;getLevel() == IntOff);</span><br><span class="line">    DEBUG(<span class="string">'t'</span>, <span class="string">"Sleeping thread \"%s\"\n"</span>, getName());</span><br><span class="line">    status = BLOCKED;</span><br><span class="line">    <span class="keyword">while</span> ((nextThread = scheduler-&gt;FindNextToRun()) == <span class="literal">NULL</span>)</span><br><span class="line">interrupt-&gt;Idle();<span class="comment">// no one to run, wait for an interrupt</span></span><br><span class="line">    scheduler-&gt;Run(nextThread); <span class="comment">// returns when we've been signalled</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When <code>Fork()</code>, put in <code>ReadyToRun</code> ; When <code>Yield()</code> , find next to <code>Run()</code> and put the current thread in <code>ReadyToRun</code> ; When <code>Sleep()</code>, set its status to <code>BLOCKED</code> then find one to <code>Run()</code> . </p><p>So the whole process is: </p><p><img src="https://i.loli.net/2021/04/08/uo1fSeTORaphFGr.png" alt="OS_Picture1.png"></p><h4 id="Locks"><a href="#Locks" class="headerlink" title="Locks"></a>Locks</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Lock::Acquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);  <span class="comment">// disable interrupts</span></span><br><span class="line">    lock-&gt;P();                            <span class="comment">// procure the semaphore</span></span><br><span class="line">    owner = currentThread;                <span class="comment">// record the new owner of the lock</span></span><br><span class="line">    (<span class="keyword">void</span>) interrupt-&gt;SetLevel(oldLevel); <span class="comment">// re-enable interrupts</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Lock::Release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);  <span class="comment">// disable interrupts</span></span><br><span class="line">    <span class="comment">// Ensure: a) lock is BUSY  b) this thread is the same one that acquired it.</span></span><br><span class="line">    ASSERT(currentThread == owner);        </span><br><span class="line">    owner = <span class="literal">NULL</span>;                          <span class="comment">// clear the owner</span></span><br><span class="line">    lock-&gt;V();                             <span class="comment">// vanquish the semaphore</span></span><br><span class="line">    (<span class="keyword">void</span>) interrupt-&gt;SetLevel(oldLevel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When a thread acquires a lock, the lock operates <code>P()</code> (If no resource available, it blocks). If successful, it’ll be the lock owner. When it releases the lock (it will check if the owner is the current thread at first), it removes owner property, then the lock operators <code>V()</code> , which means some resources are free currently for some threads to be ready to run.</p><h4 id="Condition-Variables"><a href="#Condition-Variables" class="headerlink" title="Condition Variables"></a>Condition Variables</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Condition::Wait</span><span class="params">(Lock* conditionLock)</span> </span>&#123; </span><br><span class="line">    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);</span><br><span class="line">    ASSERT(conditionLock-&gt;isHeldByCurrentThread());  <span class="comment">// check pre-condition</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span>-&gt;IsEmpty()) &#123;</span><br><span class="line">lock = conditionLock;  <span class="comment">// helps to enforce pre-condition</span></span><br><span class="line">    &#125; </span><br><span class="line">    ASSERT(lock == conditionLock); <span class="comment">// another pre-condition</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;Append(currentThread);  <span class="comment">// add this thread to the waiting list</span></span><br><span class="line">    conditionLock-&gt;Release();      <span class="comment">// release the lock</span></span><br><span class="line">    currentThread-&gt;Sleep();        <span class="comment">// goto sleep</span></span><br><span class="line">    conditionLock-&gt;Acquire();      <span class="comment">// awaken: re-acquire the lock</span></span><br><span class="line">    (<span class="keyword">void</span>) interrupt-&gt;SetLevel(oldLevel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Condition::Signal</span><span class="params">(Lock* conditionLock)</span> </span>&#123; </span><br><span class="line">    Thread *nextThread;</span><br><span class="line">    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);</span><br><span class="line">    ASSERT(conditionLock-&gt;isHeldByCurrentThread());</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">queue</span>-&gt;IsEmpty()) &#123;</span><br><span class="line">ASSERT(lock == conditionLock);</span><br><span class="line">nextThread = (Thread *)<span class="built_in">queue</span>-&gt;Remove();</span><br><span class="line">scheduler-&gt;ReadyToRun(nextThread);      <span class="comment">// wake up the thread</span></span><br><span class="line">    &#125; </span><br><span class="line">    (<span class="keyword">void</span>) interrupt-&gt;SetLevel(oldLevel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Condition::Broadcast</span><span class="params">(Lock* conditionLock)</span>  </span>&#123; </span><br><span class="line">    Thread *nextThread;</span><br><span class="line">    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);</span><br><span class="line">    ASSERT(conditionLock-&gt;isHeldByCurrentThread());</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">queue</span>-&gt;IsEmpty()) &#123;</span><br><span class="line">ASSERT(lock == conditionLock);</span><br><span class="line"><span class="keyword">while</span> (nextThread = (Thread *)<span class="built_in">queue</span>-&gt;Remove()) &#123;</span><br><span class="line">    scheduler-&gt;ReadyToRun(nextThread);  <span class="comment">// wake up the thread</span></span><br><span class="line">&#125;</span><br><span class="line">    &#125; </span><br><span class="line">    (<span class="keyword">void</span>) interrupt-&gt;SetLevel(oldLevel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It uses conditional lock to schedule threads. The <code>Wait()</code> makes the thread waiting in conditional queue, then release lock to make the lock available for others, then go to sleep. When waken up, it acquires the lock so it’s ready to run. The <code>Signal()</code> pops up a thread from the conditional queue, make it ready to run. The <code>Broadcast()</code> empties the conditional queue and make them all ready to run.</p><h3 id="ring-cc-in-lab3"><a href="#ring-cc-in-lab3" class="headerlink" title="ring.cc in lab3"></a><code>ring.cc</code> in <code>lab3</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ring::Put</span><span class="params">(slot *message)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">buffer</span>[in].thread_id = message-&gt;thread_id;</span><br><span class="line">    <span class="built_in">buffer</span>[in].value = message-&gt;value;</span><br><span class="line">    in = (in + <span class="number">1</span>) % <span class="built_in">size</span>;</span><br><span class="line">    current++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ring::Get</span><span class="params">(slot *message)</span> </span>&#123;</span><br><span class="line">    message-&gt;thread_id = <span class="built_in">buffer</span>[out].thread_id;</span><br><span class="line">    message-&gt;value = <span class="built_in">buffer</span>[out].value;</span><br><span class="line">    out = (out + <span class="number">1</span>) % <span class="built_in">size</span>;</span><br><span class="line">    current--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Put()</code> puts the message in ring with index <code>in</code>, which points to the current empty slot, the next one of the last non-empty slot if the ring’s not empty, then <code>in</code> goes to next. <code>Get()</code> fetches the message from ring by index <code>out</code>, which points to the first non-empty slot, then <code>out</code> goes to next for the next fetching operator. The two don’t check if the ring is empty or full. </p><p>So I add a variable <code>current</code> to get the current size of the ring, to achieve <code>Full()</code> and <code>Empty()</code> function. </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Ring::Empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (current == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Ring::Full</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (current == <span class="built_in">size</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="prodcons-cc-in-lab3"><a href="#prodcons-cc-in-lab3" class="headerlink" title="prodcons.cc in lab3"></a><code>prodcons.cc</code> in <code>lab3</code></h3><p>The original code requires to be implemented, so below is what I implement. </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Thread *producers[N_PROD]; <span class="comment">//array of pointers to the producer</span></span><br><span class="line">Thread *consumers[N_CONS];  <span class="comment">// and consumer threads;</span></span><br><span class="line"><span class="keyword">char</span> prod_names[N_PROD][MAX_NAME];  <span class="comment">//array of charater string for prod names</span></span><br><span class="line"><span class="keyword">char</span> cons_names[N_CONS][MAX_NAME];  <span class="comment">//array of charater string for cons names</span></span><br><span class="line">Semaphore *nempty, *nfull; <span class="comment">//two semaphores for empty and full slots</span></span><br><span class="line">Semaphore *mutex;          <span class="comment">//semaphore for the mutual exclusion</span></span><br><span class="line">Ring *ring;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Producer</span><span class="params">(_int which)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    slot *message = <span class="keyword">new</span> slot(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (num = <span class="number">0</span>; num &lt; N_MESSG ; num++) &#123;</span><br><span class="line">      message-&gt;value = num;</span><br><span class="line">      message-&gt;thread_id = which;</span><br><span class="line">      nfull-&gt;P();</span><br><span class="line">      mutex-&gt;P();</span><br><span class="line">      ring-&gt;Put(message);</span><br><span class="line">      mutex-&gt;V();</span><br><span class="line">      nempty-&gt;V();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Consumer</span><span class="params">(_int which)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[MAXLEN];</span><br><span class="line">    <span class="keyword">char</span> fname[LINELEN];</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    slot *message = <span class="keyword">new</span> slot(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(fname, <span class="string">"tmp_%d"</span>, which);</span><br><span class="line">    <span class="keyword">if</span> ( (fd = creat(fname, <span class="number">0600</span>) ) == <span class="number">-1</span>) &#123;</span><br><span class="line">      perror(<span class="string">"creat: file create failed"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">      nempty-&gt;P();</span><br><span class="line">      mutex-&gt;P();</span><br><span class="line">      ring-&gt;Get(message);</span><br><span class="line">      mutex-&gt;V();</span><br><span class="line">      nfull-&gt;V();</span><br><span class="line">      <span class="keyword">time_t</span> my_time = time(<span class="literal">NULL</span>);</span><br><span class="line">      <span class="built_in">sprintf</span>(str,<span class="string">"### %s    producer id --&gt; %d; Message number --&gt; %d;\n"</span>, ctime(&amp;my_time), message-&gt;thread_id, message-&gt;value);</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">write</span>(fd, str, <span class="built_in">strlen</span>(str)) == <span class="number">-1</span> ) &#123;</span><br><span class="line">        perror(<span class="string">"write: write failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ProdCons</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    DEBUG(<span class="string">'t'</span>, <span class="string">"Entering ProdCons"</span>);</span><br><span class="line">    nempty = <span class="keyword">new</span> Semaphore(<span class="string">"nempty"</span>, BUFF_SIZE);</span><br><span class="line">    nfull = <span class="keyword">new</span> Semaphore(<span class="string">"nfull"</span>, <span class="number">0</span>);</span><br><span class="line">    mutex = <span class="keyword">new</span> Semaphore(<span class="string">"mutex"</span>, <span class="number">1</span>);</span><br><span class="line">    ring = <span class="keyword">new</span> Ring(BUFF_SIZE);   </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N_PROD; i++)  &#123;</span><br><span class="line">      <span class="built_in">sprintf</span>(prod_names[i], <span class="string">"producer_%d"</span>, i);</span><br><span class="line">      producers[i] = <span class="keyword">new</span> Thread(prod_names[i]);</span><br><span class="line">      producers[i]-&gt;Fork(Producer, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N_CONS; i++)  &#123;</span><br><span class="line">      <span class="built_in">sprintf</span>(cons_names[i], <span class="string">"consumer_%d"</span>, i);</span><br><span class="line">      consumers[i] = <span class="keyword">new</span> Thread(cons_names[i]);</span><br><span class="line">      consumers[i]-&gt;Fork(Consumer, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Semaphore-and-Buffer"><a href="#Semaphore-and-Buffer" class="headerlink" title="Semaphore and Buffer"></a>Semaphore and Buffer</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">nempty = <span class="keyword">new</span> Semaphore(<span class="string">"nempty"</span>, BUFF_SIZE);</span><br><span class="line">nfull = <span class="keyword">new</span> Semaphore(<span class="string">"nfull"</span>, <span class="number">0</span>);</span><br><span class="line">mutex = <span class="keyword">new</span> Semaphore(<span class="string">"mutex"</span>, <span class="number">1</span>);</span><br><span class="line">ring = <span class="keyword">new</span> Ring(BUFF_SIZE);</span><br></pre></td></tr></table></figure><p><code>nempty</code> and <code>nfull</code> are the semaphores for critical resources. When <code>nempty = 0</code> , it means the buffer is empty, and when a resource is generated, <code>nempty--</code> , when consumed, <code>nempty++</code> , maximum of which is <code>BUFF_SIZE</code> ; When <code>nfull = 0</code> , it’s empty. When generated, <code>nfull++</code>, and when consumed, <code>nfull--</code> . </p><h4 id="The-Fork-of-producer-and-consumer-threads"><a href="#The-Fork-of-producer-and-consumer-threads" class="headerlink" title="The Fork() of producer and consumer threads"></a>The <code>Fork()</code> of producer and consumer threads</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N_PROD; i++)  &#123;</span><br><span class="line"><span class="built_in">sprintf</span>(prod_names[i], <span class="string">"producer_%d"</span>, i);</span><br><span class="line">producers[i] = <span class="keyword">new</span> Thread(prod_names[i]);</span><br><span class="line">producers[i]-&gt;Fork(Producer, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N_CONS; i++)  &#123;</span><br><span class="line"><span class="built_in">sprintf</span>(cons_names[i], <span class="string">"consumer_%d"</span>, i);</span><br><span class="line">consumers[i] = <span class="keyword">new</span> Thread(cons_names[i]);</span><br><span class="line">consumers[i]-&gt;Fork(Consumer, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>N_PROD</code> producers and <code>N_CONS</code> consumers forked with name generated by <code>i</code> . It uses <code>Fork(func, arg)</code> .</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Thread::Fork</span><span class="params">(VoidFunctionPtr func, _int arg)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HOST_ALPHA</span></span><br><span class="line">    DEBUG(<span class="string">'t'</span>, <span class="string">"Forking thread \"%s\" with func = 0x%lx, arg = %ld\n"</span>, name, (<span class="keyword">long</span>) func, arg);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    DEBUG(<span class="string">'t'</span>, <span class="string">"Forking thread \"%s\" with func = 0x%x, arg = %d\n"</span>, name, (<span class="keyword">int</span>) func, arg);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    StackAllocate(func, arg);</span><br><span class="line">    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);</span><br><span class="line">    scheduler-&gt;ReadyToRun(<span class="keyword">this</span>);<span class="comment">// ReadyToRun assumes that interrupts are disabled!</span></span><br><span class="line">    (<span class="keyword">void</span>) interrupt-&gt;SetLevel(oldLevel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Different from the original <code>Fork()</code> in Linux System Call, it doesn’t copy all the variables and status from the current thread, it just create a new thread without any variables but pass it a function and an argument, and just append it to <code>ReadyToRun()</code> . </p><h2 id="lab3"><a href="#lab3" class="headerlink" title="lab3"></a>lab3</h2><p>Codes changed are listed above. Then just make and run.</p><p>We see it generates two files, <code>tmp_0</code> and <code>tmp_1</code> , which are generated by consumer 0 and consumer 1 . But there are 8 messages in <code>tmp_0</code>, 0 message in <code>tmp_1</code> . Only the consumer 0 get the resource.</p><p>But if I run <code>./nachos -rs 5</code> , things are different:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">------------------- tmp_0 -------------------</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Sun Apr 11 10:23:53 2021</span></span></span><br><span class="line">    producer id --&gt; 0; Message number --&gt; 0;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Sun Apr 11 10:23:53 2021</span></span></span><br><span class="line">    producer id --&gt; 1; Message number --&gt; 0;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Sun Apr 11 10:23:53 2021</span></span></span><br><span class="line">    producer id --&gt; 0; Message number --&gt; 2;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Sun Apr 11 10:23:53 2021</span></span></span><br><span class="line">    producer id --&gt; 1; Message number --&gt; 1;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Sun Apr 11 10:23:53 2021</span></span></span><br><span class="line">    producer id --&gt; 0; Message number --&gt; 3;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Sun Apr 11 10:23:53 2021</span></span></span><br><span class="line">    producer id --&gt; 1; Message number --&gt; 3;</span><br><span class="line">------------------- tmp_1 -------------------</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Sun Apr 11 10:23:53 2021</span></span></span><br><span class="line">    producer id --&gt; 0; Message number --&gt; 1;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Sun Apr 11 10:23:53 2021</span></span></span><br><span class="line">    producer id --&gt; 1; Message number --&gt; 2;</span><br></pre></td></tr></table></figure><p>So what does <code>rs</code> do?</p><p>In the <code>main.cc</code> of <code>lab3</code>, we see function <code>initialize()</code>, which located in <code>system.cc</code> in <code>threads</code> : </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(*argv, <span class="string">"-rs"</span>)) &#123;</span><br><span class="line">ASSERT(argc &gt; <span class="number">1</span>);</span><br><span class="line">RandomInit(atoi(*(argv + <span class="number">1</span>)));<span class="comment">// initialize pseudo-random number generator</span></span><br><span class="line">randomYield = TRUE;</span><br><span class="line">argCount = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------</span><br><span class="line"><span class="keyword">if</span> (randomYield)<span class="comment">// start the timer (if needed)</span></span><br><span class="line">timer = <span class="keyword">new</span> Timer(TimerInterruptHandler, <span class="number">0</span>, randomYield);</span><br><span class="line">-----------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TimerInterruptHandler</span><span class="params">(_int dummy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (interrupt-&gt;getStatus() != IdleMode)</span><br><span class="line">interrupt-&gt;YieldOnReturn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We see <code>randomYield = TRUE</code> and if true it sets a new timer with <code>TimerInterruptHandler()</code> . In <code>machine</code> , it does many things: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// -------- in stats.h ------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UserTick 1<span class="comment">// advance for each user-level instruction </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SystemTick 10 <span class="comment">// advance each time interrupts are enabled</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TimerTicks 100    <span class="comment">// (average) time between timer interrupts</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------ timer.cc -------------</span></span><br><span class="line">Timer::Timer(VoidFunctionPtr timerHandler, _int callArg, <span class="keyword">bool</span> doRandom) &#123;</span><br><span class="line">    randomize = doRandom;</span><br><span class="line">    handler = timerHandler;</span><br><span class="line">    arg = callArg; </span><br><span class="line">    <span class="comment">// schedule the first interrupt from the timer device</span></span><br><span class="line">    interrupt-&gt;Schedule(TimerHandler, (_int) <span class="keyword">this</span>, TimeOfNextInterrupt(), TimerInt); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Timer::TimeOfNextInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (randomize)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + (Random() % (TimerTicks * <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> TimerTicks; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------ interrupt.cc -------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Interrupt::Schedule</span><span class="params">(VoidFunctionPtr handler, _int arg, <span class="keyword">int</span> fromNow, IntType type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> when = stats-&gt;totalTicks + fromNow;</span><br><span class="line">    PendingInterrupt *toOccur = <span class="keyword">new</span> PendingInterrupt(handler, arg, when, type);</span><br><span class="line">    DEBUG(<span class="string">'i'</span>, <span class="string">"Scheduling interrupt handler the %s at time = %d\n"</span>, intTypeNames[type], when);</span><br><span class="line">    ASSERT(fromNow &gt; <span class="number">0</span>);</span><br><span class="line">    pending-&gt;SortedInsert(toOccur, when);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -------------- OneTick() -----------------</span></span><br><span class="line">    <span class="keyword">while</span> (CheckIfDue(FALSE))<span class="comment">// check for pending interrupts</span></span><br><span class="line">;</span><br><span class="line">    ChangeLevel(IntOff, IntOn);<span class="comment">// re-enable interrupts</span></span><br><span class="line">    <span class="keyword">if</span> (yieldOnReturn) &#123;<span class="comment">// if the timer device handler asked </span></span><br><span class="line"><span class="comment">// for a context switch, ok to do it now</span></span><br><span class="line">yieldOnReturn = FALSE;</span><br><span class="line"> status = SystemMode;<span class="comment">// yield is a kernel routine</span></span><br><span class="line">currentThread-&gt;Yield();</span><br><span class="line">status = old;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>If randomized, it will generated a random number range in <code>[1, 200]</code> , which will be passed to <code>Schedule()</code> and appended in pending queue, telling system when to interrupt. So that’s why the context switch will occur when argument <code>-rs</code> is used, otherwise the consumer 0 will never yield so the consumer 1 gets nothing.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Preparation&quot;&gt;&lt;a href=&quot;#Preparation&quot; class=&quot;headerlink&quot; title=&quot;Preparation&quot;&gt;&lt;/a&gt;Preparation&lt;/h2&gt;&lt;p&gt;Before I begin &lt;code&gt;lab3&lt;/code&gt;, I should read some codes.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="co10.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>外部打开链接默认使用Chrome Incognito Mode</title>
    <link href="co10.github.io/2021/03/31/%E5%A4%96%E9%83%A8%E6%89%93%E5%BC%80%E9%93%BE%E6%8E%A5%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8Chrome-Incognito-Mode/"/>
    <id>co10.github.io/2021/03/31/%E5%A4%96%E9%83%A8%E6%89%93%E5%BC%80%E9%93%BE%E6%8E%A5%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8Chrome-Incognito-Mode/</id>
    <published>2021-03-31T09:12:28.000Z</published>
    <updated>2021-04-01T11:45:28.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快捷图标"><a href="#快捷图标" class="headerlink" title="快捷图标"></a>快捷图标</h2><p>可以在快捷方式链接使用以下参数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files\Google\Chrome\Application\chrome.exe&quot; -incognito</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files\Google\Chrome\Application\chrome.exe&quot; --incognito</span><br></pre></td></tr></table></figure><a id="more"></a><p>但是不适用点击链接打开Chrome 。</p><h2 id="打开链接"><a href="#打开链接" class="headerlink" title="打开链接"></a>打开链接</h2><p>修改注册表，找到路经：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HKEY_CLASSES_ROOT\ChromeHTML\Shell\open\command</span><br></pre></td></tr></table></figure><p>修改 <code>(Default)</code> ，把 <code>--single-argument</code> 改成 <code>--incognito --single-argument</code> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快捷图标&quot;&gt;&lt;a href=&quot;#快捷图标&quot; class=&quot;headerlink&quot; title=&quot;快捷图标&quot;&gt;&lt;/a&gt;快捷图标&lt;/h2&gt;&lt;p&gt;可以在快捷方式链接使用以下参数：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;C:\Program Files\Google\Chrome\Application\chrome.exe&amp;quot; -incognito&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;C:\Program Files\Google\Chrome\Application\chrome.exe&amp;quot; --incognito&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="chrome" scheme="co10.github.io/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>Makefile in Nachos</title>
    <link href="co10.github.io/2021/03/31/Makefile-in-Nachos/"/>
    <id>co10.github.io/2021/03/31/Makefile-in-Nachos/</id>
    <published>2021-03-31T00:07:36.000Z</published>
    <updated>2021-04-03T15:07:07.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><a id="more"></a><p>In <code>code</code> directory, there are <code>Makefile.common</code> and <code>Makefile.dep</code>, and in code’s sub directory, there are usually <code>Makefile</code> and <code>Makefile.local</code>. </p><h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a><code>Makefile</code></h3><p>In <code>Makefile</code>, it simply includes: </p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> Makefile.local</span><br><span class="line"><span class="keyword">include</span> ../Makefile.common</span><br></pre></td></tr></table></figure><h3 id="Makefile-local"><a href="#Makefile-local" class="headerlink" title="Makefile.local"></a><code>Makefile.local</code></h3><p>In <code>Makefile.local</code>, there are <code>SFILES</code>, <code>CCFILES</code>, <code>INCPATH</code> and <code>DEFINES</code>. </p><ul><li><code>CCFILES</code> : CC files generating Nachos in the current directory.</li><li><code>INCPATH</code> : The directory of header files.</li><li><code>DEFINES</code> : Macro Define, use <code>+=</code> because it’s a string.</li></ul><h3 id="Makefile-dep"><a href="#Makefile-dep" class="headerlink" title="Makefile.dep"></a><code>Makefile.dep</code></h3><p> <code>Makefile.dep</code> defines the environment using Nachos. I’m using Linux, so just look at below: </p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 386, 386BSD Unix, or NetBSD Unix (available via anon ftp from agate.berkeley.edu)</span></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(uname)</span>,Linux)</span><br><span class="line">HOST_LINUX=-linux</span><br><span class="line">HOST = -DHOST_i386 -DHOST_LINUX</span><br><span class="line">CPP=/lib/cpp</span><br><span class="line">CPPFLAGS = <span class="variable">$(INCDIR)</span> -D HOST_i386 -D HOST_LINUX</span><br><span class="line">arch = unknown-i386-linux</span><br><span class="line"><span class="keyword">ifdef</span> MAKEFILE_TEST</span><br><span class="line">GCCDIR = /usr/local/mips/bin/decstation-ultrix-</span><br><span class="line">LDFLAGS = -T script -N</span><br><span class="line">ASFLAGS = -mips2</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p><code>GCCDIR</code> is the directory of <code>gcc MIPS</code> compiler.</p><p>And in the last few lines: </p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">arch_dir = arch/<span class="variable">$(arch)</span></span><br><span class="line">obj_dir = <span class="variable">$(arch_dir)</span>/objects</span><br><span class="line">bin_dir = <span class="variable">$(arch_dir)</span>/bin</span><br><span class="line">depends_dir = <span class="variable">$(arch_dir)</span>/depends</span><br></pre></td></tr></table></figure><p>Taking <code>threads</code> directory for example, there is a directory called <code>arch</code>, within which there are <code>dec-alpha-osf</code> , <code>dec-mips-ultrix</code> , <code>sun-sparc-sunos</code> , <code>unknown-i386-linux</code> . I’m using Linux, so just look at <code>unknown-i386-linux</code> . The <code>bin</code> stores the executable file (<code>nachos</code>), the <code>depends</code> stores dependence files (like <code>xxxx.d</code>), and the <code>objects</code> stores object files (like <code>xxxx.o</code>). </p><p>In <code>threads</code> directory, when <code>make</code>, there will be a link file named nachos linked to <code>arch/unknown-i386-linux/bin/nachos</code> .</p><h3 id="Makefile-common"><a href="#Makefile-common" class="headerlink" title="Makefile.common"></a><code>Makefile.common</code></h3><p>The most complex file. First it includes <code>Makefile.dep</code>, then <code>vpath</code> tells gnu make where to look for certain files.</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vpath</span> %.cc  ../network:../filesys:../vm:../userprog:../threads:../machine</span><br><span class="line"><span class="keyword">vpath</span> %.h   ../network:../filesys:../vm:../userprog:../threads:../machine</span><br><span class="line"><span class="keyword">vpath</span> %.s   ../network:../filesys:../vm:../userprog:../threads:../machine</span><br></pre></td></tr></table></figure><p>It means if some files are not found in the current directory when compiling, it will look into these directories.</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">s_ofiles = $(SFILES:%.s=<span class="variable">$(obj_dir)</span>/%.o)</span><br><span class="line">c_ofiles = $(CFILES:%.c=<span class="variable">$(obj_dir)</span>/%.o)</span><br><span class="line">cc_ofiles = $(CCFILES:%.cc=<span class="variable">$(obj_dir)</span>/%.o)</span><br></pre></td></tr></table></figure><p>The three tells where <code>.o</code> files generated by <code>.s</code>, <code>.cc</code> and <code>.c</code> are. </p><p>And below is how the executable files are generated: </p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="variable">$(program)</span>: <span class="variable">$(ofiles)</span></span><br><span class="line"><span class="variable">$(bin_dir)</span>/% :</span><br><span class="line">@echo <span class="string">"&gt;&gt;&gt; Linking"</span> <span class="variable">$@</span> <span class="string">"&lt;&lt;&lt;"</span></span><br><span class="line"><span class="variable">$(LD)</span> <span class="variable">$^</span> <span class="variable">$(LDFLAGS)</span> -o <span class="variable">$@</span></span><br><span class="line">ln -sf <span class="variable">$@</span> <span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$@</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(obj_dir)</span>/%.o: %.cc</span><br><span class="line">@echo <span class="string">"&gt;&gt;&gt; Compiling"</span> <span class="variable">$&lt;</span> <span class="string">"&lt;&lt;&lt;"</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(obj_dir)</span>/%.o: %.c</span><br><span class="line">@echo <span class="string">"&gt;&gt;&gt; Compiling"</span> <span class="variable">$&lt;</span> <span class="string">"&lt;&lt;&lt;"</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(obj_dir)</span>/%.o: %.s</span><br><span class="line">@echo <span class="string">"&gt;&gt;&gt; Assembling"</span> <span class="variable">$&lt;</span> <span class="string">"&lt;&lt;&lt;"</span></span><br><span class="line"><span class="variable">$(CPP)</span> <span class="variable">$(CPPFLAGS)</span> <span class="variable">$&lt;</span> &gt; <span class="variable">$(obj_dir)</span>/tmp.s</span><br><span class="line"><span class="variable">$(AS)</span> -o <span class="variable">$@</span> <span class="variable">$(obj_dir)</span>/tmp.s</span><br><span class="line">rm <span class="variable">$(obj_dir)</span>/tmp.s</span><br></pre></td></tr></table></figure><p>Below is the dependence files, </p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">s_dfiles = $(SFILES:%.s=<span class="variable">$(depends_dir)</span>/%.d)</span><br><span class="line">c_dfiles = $(CFILES:%.c=<span class="variable">$(depends_dir)</span>/%.d)</span><br><span class="line">cc_dfiles = $(CCFILES:%.cc=<span class="variable">$(depends_dir)</span>/%.d)</span><br><span class="line"></span><br><span class="line">dfiles = <span class="variable">$(cc_dfiles)</span> <span class="variable">$(c_dfiles)</span> <span class="variable">$(s_dfiles)</span> </span><br><span class="line"></span><br><span class="line"><span class="variable">$(depends_dir)</span>/%.d: %.cc</span><br><span class="line">@echo <span class="string">"&gt;&gt;&gt; Building dependency file for "</span> <span class="variable">$&lt;</span> <span class="string">"&lt;&lt;&lt;"</span></span><br><span class="line">@<span class="variable">$(SHELL)</span> -ec '<span class="variable">$(CC)</span> -MM <span class="variable">$(CFLAGS)</span> <span class="variable">$&lt;</span> \</span><br><span class="line">| sed '\''s@<span class="variable">$*</span>.o[ ]*:@<span class="variable">$(depends_dir)</span>/<span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$@</span>)</span> <span class="variable">$(obj_dir)</span>/&amp;@g'\'' &gt; <span class="variable">$@</span>'</span><br><span class="line"></span><br><span class="line"><span class="variable">$(depends_dir)</span>/%.d: %.c</span><br><span class="line">@echo <span class="string">"&gt;&gt;&gt; Building dependency file for"</span> <span class="variable">$&lt;</span> <span class="string">"&lt;&lt;&lt;"</span></span><br><span class="line">@<span class="variable">$(SHELL)</span> -ec '<span class="variable">$(CC)</span> -MM <span class="variable">$(CFLAGS)</span> <span class="variable">$&lt;</span> \</span><br><span class="line">| sed '\''s@<span class="variable">$*</span>.o[ ]*:@<span class="variable">$(depends_dir)</span>/<span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$@</span>)</span> <span class="variable">$(obj_dir)</span>/&amp;@g'\'' &gt; <span class="variable">$@</span>'</span><br><span class="line"></span><br><span class="line"><span class="variable">$(depends_dir)</span>/%.d: %.s</span><br><span class="line">@echo <span class="string">"&gt;&gt;&gt; Building dependency file for"</span> <span class="variable">$&lt;</span> <span class="string">"&lt;&lt;&lt;"</span></span><br><span class="line">@<span class="variable">$(SHELL)</span> -ec '<span class="variable">$(CPP)</span> -MM <span class="variable">$(CPPFLAGS)</span> <span class="variable">$&lt;</span> \</span><br><span class="line">| sed '\''s@<span class="variable">$*</span>.o[ ]*:@<span class="variable">$(depends_dir)</span>/<span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$@</span>)</span> <span class="variable">$(obj_dir)</span>/&amp;@g'\'' &gt; <span class="variable">$@</span>'</span><br></pre></td></tr></table></figure><h2 id="lab2"><a href="#lab2" class="headerlink" title="lab2"></a>lab2</h2><h3 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h3><p>If you want to modify some files, you’d better do it in other directory with the files associated with <code>Makefile</code> and <code>Makefile.local</code> copied, then it will compile the file you modified dependently first. </p><p>So copy <code>Makefile</code> , <code>Makefile.local</code> <code>scheduler.cc</code> , <code>scheduler.h</code> and <code>arch</code> in <code>threads</code> to <code>lab2</code>, and in <code>arch</code> just keep the <code>unknown-i386-linux</code> and within make the three folders empty. </p><h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h3><p>Change <code>Makefile.local</code> to make sure the changed or to be changed .h files will found when compiling: </p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">INCPATH += -I../lab2 -I../threads -I../machine</span><br></pre></td></tr></table></figure><p>Because I put <code>lab2</code> in front of threads, so it will go to <code>lab2</code> first then to the <code>threads</code> directory.</p><p>Then <code>make</code>. It compiles successfully: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Linking arch/unknown-i386-linux/bin/nachos &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 arch/unknown-i386-linux/objects/main.o arch/unknown-i386-linux/objects/list.o arch/unknown-i386-linux/objects/scheduler.o arch/unknown-i386-linux/objects/synch.o arch/unknown-i386-linux/objects/synchlist.o arch/unknown-i386-linux/objects/system.o arch/unknown-i386-linux/objects/thread.o arch/unknown-i386-linux/objects/utility.o arch/unknown-i386-linux/objects/threadtest.o arch/unknown-i386-linux/objects/synchtest.o arch/unknown-i386-linux/objects/interrupt.o arch/unknown-i386-linux/objects/sysdep.o arch/unknown-i386-linux/objects/stats.o arch/unknown-i386-linux/objects/timer.o arch/unknown-i386-linux/objects/switch-linux.o  -o arch/unknown-i386-linux/bin/nachos</span><br><span class="line">ln -sf arch/unknown-i386-linux/bin/nachos nachos</span><br></pre></td></tr></table></figure><p>Use <code>touch</code> to change the modification time of file <code>scheduler.h</code> (It won’t change the contents), then <code>make</code> : </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  scheduler.cc &lt;&lt;&lt;</span></span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling scheduler.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/scheduler.o scheduler.cc</span><br></pre></td></tr></table></figure><p>Only <code>scheduler.cc</code> is recompiled, while others not associated with <code>scheduler.h</code> are not recompiled.</p><p>If touch <code>scheduler.h</code> in threads?</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# touch ../threads/scheduler.h</span><br><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# make</span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../machine/timer.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../machine/sysdep.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../machine/interrupt.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../threads/synchtest.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../threads/threadtest.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../threads/thread.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../threads/system.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../threads/synch.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  scheduler.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../threads/main.cc &lt;&lt;&lt;</span></span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling ../threads/main.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/main.o ../threads/main.cc</span><br></pre></td></tr></table></figure><p>We see that all source files associated with <code>scheduler.h</code> in directory <code>machine</code> and <code>threads</code> are all recompiled.</p><p>If a file doesn’t include <code>scheduler.h</code> , but it includes a file that includes <code>scheduler.h</code> , it will be recompiled too. So we can use <code>grep</code> to find them, and copy them to <code>lab2</code>.</p><p>In threads directory, type <code>grep scheduler.h *</code> , and get: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep: arch: Is a directory</span><br><span class="line">Binary file nachos matches</span><br><span class="line">scheduler.cc:#include "scheduler.h"</span><br><span class="line">scheduler.h:// scheduler.h </span><br><span class="line">system.h:#include "scheduler.h"</span><br></pre></td></tr></table></figure><p>We see <code>system.h</code> includes <code>scheduler.h</code> , so we look into <code>system.h</code> by <code>grep system.h *</code> :</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep: arch: Is a directory</span><br><span class="line">main.cc:#include "system.h"</span><br><span class="line">Binary file nachos matches</span><br><span class="line">scheduler.cc:#include "system.h"</span><br><span class="line">synch.cc:#include "system.h"</span><br><span class="line">synchtest.cc:#include "system.h"</span><br><span class="line">system.cc:#include "system.h"</span><br><span class="line">system.h:// system.h </span><br><span class="line">thread.cc:#include "system.h"</span><br><span class="line">threadtest.cc:#include "system.h"</span><br></pre></td></tr></table></figure><p>So we only need to copy: <code>system.h</code> , <code>main.cc</code> , <code>synch.cc</code> , <code>synchtest.cc</code> , <code>system.cc</code> , <code>thread.cc</code> and <code>threadtest.cc</code> .</p><p>Now <code>lab2</code> has: </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arch      Makefile.local  scheduler.h   system.cc  threadtest.cc</span><br><span class="line">main.cc   nachos          synch.cc      system.h</span><br><span class="line">Makefile  scheduler.cc    synchtest.cc  thread.cc</span><br></pre></td></tr></table></figure><p>Firstly, we update the time of <code>scheduler.h</code> , then <code>make</code> : </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# touch scheduler.h</span><br><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# make</span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  synchtest.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  threadtest.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  thread.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  system.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  synch.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  scheduler.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  main.cc &lt;&lt;&lt;</span></span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling main.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/main.o main.cc</span><br><span class="line">..........................................</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling scheduler.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/scheduler.o scheduler.cc</span><br><span class="line">..........................................</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling synch.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/synch.o synch.cc</span><br><span class="line">..........................................</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling system.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/system.o system.cc</span><br><span class="line">....</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling thread.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/thread.o thread.cc</span><br><span class="line">..........................................</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling threadtest.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/threadtest.o threadtest.cc</span><br><span class="line">..........................................</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling synchtest.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/synchtest.o synchtest.cc</span><br><span class="line">..........................................</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Linking arch/unknown-i386-linux/bin/nachos &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 arch/unknown-i386-linux/objects/main.o arch/unknown-i386-linux/objects/list.o arch/unknown-i386-linux/objects/scheduler.o arch/unknown-i386-linux/objects/synch.o arch/unknown-i386-linux/objects/synchlist.o arch/unknown-i386-linux/objects/system.o arch/unknown-i386-linux/objects/thread.o arch/unknown-i386-linux/objects/utility.o arch/unknown-i386-linux/objects/threadtest.o arch/unknown-i386-linux/objects/synchtest.o arch/unknown-i386-linux/objects/interrupt.o arch/unknown-i386-linux/objects/sysdep.o arch/unknown-i386-linux/objects/stats.o arch/unknown-i386-linux/objects/timer.o arch/unknown-i386-linux/objects/switch-linux.o  -o arch/unknown-i386-linux/bin/nachos</span><br><span class="line">ln -sf arch/unknown-i386-linux/bin/nachos nachos</span><br></pre></td></tr></table></figure><p>Then touch <code>scheduler.h</code> in <code>threads</code> directory, then <code>make</code> to see if anything changes: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# touch ../threads/scheduler.h</span><br><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# make</span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../machine/timer.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../machine/sysdep.cc &lt;&lt;&lt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Building dependency file <span class="keyword">for</span>  ../machine/interrupt.cc &lt;&lt;&lt;</span></span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling ../machine/interrupt.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/interrupt.o ../machine/interrupt.cc</span><br><span class="line">...........................</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling ../machine/sysdep.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/sysdep.o ../machine/sysdep.cc</span><br><span class="line">.......</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Compiling ../machine/timer.cc &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 -g -Wall -Wshadow -m32 -I../lab2 -I../threads -I../machine -DTHREADS -DHOST_i386 -DHOST_LINUX -DCHANGED -c -o arch/unknown-i386-linux/objects/timer.o ../machine/timer.cc</span><br><span class="line">.........</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Linking arch/unknown-i386-linux/bin/nachos &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 arch/unknown-i386-linux/objects/main.o arch/unknown-i386-linux/objects/list.o arch/unknown-i386-linux/objects/scheduler.o arch/unknown-i386-linux/objects/synch.o arch/unknown-i386-linux/objects/synchlist.o arch/unknown-i386-linux/objects/system.o arch/unknown-i386-linux/objects/thread.o arch/unknown-i386-linux/objects/utility.o arch/unknown-i386-linux/objects/threadtest.o arch/unknown-i386-linux/objects/synchtest.o arch/unknown-i386-linux/objects/interrupt.o arch/unknown-i386-linux/objects/sysdep.o arch/unknown-i386-linux/objects/stats.o arch/unknown-i386-linux/objects/timer.o arch/unknown-i386-linux/objects/switch-linux.o  -o arch/unknown-i386-linux/bin/nachos</span><br><span class="line">ln -sf arch/unknown-i386-linux/bin/nachos nachos</span><br></pre></td></tr></table></figure><p>Well I get this result, because I didn’t compile it first after I copy all these files, but if I do it a second time:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# touch ../threads/scheduler.h</span><br><span class="line">root@iZbp1iqmvkj69470qn1vpvZ:~/OS/lab2# make</span><br><span class="line">../Makefile.dep:29: Linux</span><br><span class="line">make: 'arch/unknown-i386-linux/bin/nachos' is up to date.</span><br></pre></td></tr></table></figure><p>It shows that it has nothing to do with the file in <code>scheduler.h</code> in <code>threads</code> directory if we change anything in <code>scheduler.h</code> in the current directory, <code>lab2</code> .</p><h3 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2"></a>Method 2</h3><p>Change <code>Makefile.local</code> : </p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">INCPATH += -I- -I../lab2 -I../threads -I../machine</span><br></pre></td></tr></table></figure><p>Just <code>make</code> . Needn’t copy a bunch of files associated with <code>scheduler.h</code> .</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Structure&quot;&gt;&lt;a href=&quot;#Structure&quot; class=&quot;headerlink&quot; title=&quot;Structure&quot;&gt;&lt;/a&gt;Structure&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="co10.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Debug threads using GDB</title>
    <link href="co10.github.io/2021/03/26/Debug-threads-using-GDB/"/>
    <id>co10.github.io/2021/03/26/Debug-threads-using-GDB/</id>
    <published>2021-03-25T23:59:45.000Z</published>
    <updated>2021-04-01T11:45:43.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h2><p><code>gdb ./program_name</code> . Start the debugger.</p><p><code>disass Function</code> . Show the disassemble code of Function.</p><p><code>b x</code> . Set a breakpoint at line x.</p><a id="more"></a><p><code>b Function</code> . Set a breakpoint at the beginning of function.</p><p><code>info b</code> . List the information of breakpoints.</p><p><code>info r</code> . List all values of registers.</p><p><code>list Function</code> . Show the source code of function.</p><p><code>p currentThread</code> . Show the address of the main thread.</p><p><code>run</code> . Run from the beginning.</p><p><code>c</code> . Continue running.</p><p><code>ni/si</code> . Run a step. </p><p><code>x *address</code> . Show the function in address.</p><h2 id="Get-started"><a href="#Get-started" class="headerlink" title="Get started"></a>Get started</h2><p>In threads directory: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb ./nachos</span><br></pre></td></tr></table></figure><p>Then, show the disassemble code of main function: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">disass main</span><br></pre></td></tr></table></figure><p>We can see a few addresses of functions: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0x00001404 &lt;+23&gt;:    call   0x12f0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">0x0000142d &lt;+64&gt;:    call   0x2727 &lt;Initialize(int, char**)&gt;</span><br><span class="line">0x00001435 &lt;+72&gt;:    call   0x32ce &lt;ThreadTest()&gt;</span><br><span class="line">0x0000143a &lt;+77&gt;:    call   0x3730 &lt;SynchTest()&gt;</span><br><span class="line">0x00001449 &lt;+92&gt;:    jle    0x1490 &lt;main(int, char**)+163&gt;</span><br><span class="line">0x00001462 &lt;+117&gt;:   call   0x10e0 &lt;strcmp@plt&gt;</span><br><span class="line">0x0000146c &lt;+127&gt;:   jne    0x1480 &lt;main(int, char**)+147&gt;</span><br><span class="line">0x00001478 &lt;+139&gt;:   call   0x11c0 &lt;printf@plt&gt;</span><br><span class="line">0x0000148e &lt;+161&gt;:   jmp    0x1446 &lt;main(int, char**)+89&gt;</span><br><span class="line">0x0000149c &lt;+175&gt;:   call   0x2cfc &lt;Thread::Finish()&gt;</span><br></pre></td></tr></table></figure><p>Start from initialize . <code>disass Initialize</code> but nothing we are looking for.</p><p>In <code>ThreadTest()</code> :</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0x00003343 &lt;+117&gt;:   call   0x3273 &lt;SimpleThread(int)&gt;</span><br></pre></td></tr></table></figure><p>The address of <code>SimpleThread(int)</code> is <code>0x3273</code> .</p><p>In <code>SynchTest()</code> , nothing. </p><p>Oh, just get started… Now dig into the questions.</p><h2 id="Find-the-address-of-Funtion"><a href="#Find-the-address-of-Funtion" class="headerlink" title="Find the address of Funtion"></a>Find the address of Funtion</h2><p>Use <code>b function</code> to set breakpoint, then it returns the address.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) b InterruptEnable</span><br><span class="line">Breakpoint 4 at 0x56558025: file thread.cc, line 242.</span><br><span class="line">(gdb) b SimpleThread</span><br><span class="line">Breakpoint 5 at 0x56558273: file threadtest.cc, line 26.</span><br><span class="line">(gdb) b ThreadFinish</span><br><span class="line">Breakpoint 6 at 0x56557ffa: file thread.cc, line 241.</span><br><span class="line">(gdb) b ThreadRoot</span><br><span class="line">Breakpoint 7 at 0x56559e7a</span><br></pre></td></tr></table></figure><h2 id="Find-the-address-of-threads-both-main-and-forked"><a href="#Find-the-address-of-threads-both-main-and-forked" class="headerlink" title="Find the address of threads (both main and forked)"></a>Find the address of threads (both main and forked)</h2><p>Let’s look into the main function, in the first few lines, we can see there is a Initialize function call. Look into it, there seems to be nothing major. Then look down, we see <code>ThreadTest()</code>, then look into it. It calls <code>SimpleThread()</code> in <code>threadtest.cc</code> :</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SimpleThread</span><span class="params">(_int which)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">for</span> (num = <span class="number">0</span>; num &lt; <span class="number">5</span>; num++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*** thread %d looped %d times\n"</span>, (<span class="keyword">int</span>) which, num);</span><br><span class="line">        currentThread-&gt;Yield();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can see a <code>Yield()</code> function, which makes the current thread to give up CPU to another thread, so we make a breakpoint here. When it yields, it’s obviously another thread running, so we can see the address of thread.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) list SimpleThread</span><br><span class="line">(gdb) b 31</span><br><span class="line">Breakpoint 1 at 0x32ae: file threadtest.cc, line 31.</span><br><span class="line">run</span><br><span class="line">Starting program: /root/OS/threads/nachos </span><br><span class="line">*** thread 0 looped 0 times</span><br><span class="line"></span><br><span class="line">Breakpoint 1, SimpleThread (which=0) at threadtest.cc:31</span><br><span class="line">31              currentThread-&gt;Yield();</span><br><span class="line">(gdb) p currentThread</span><br><span class="line"><span class="meta">$</span><span class="bash">1 = (Thread *) 0x56563ca0</span></span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line"></span><br><span class="line">Breakpoint 1, SimpleThread (which=1) at threadtest.cc:31</span><br><span class="line">31              currentThread-&gt;Yield();</span><br><span class="line">(gdb) p currentThread</span><br><span class="line"><span class="meta">$</span><span class="bash">2 = (Thread *) 0x56563d00</span></span><br></pre></td></tr></table></figure><p>We can see the thread switch and also the address of threads using <code>p currentThread</code></p><p>So the main thread of the Nachos is <code>0x56563ca0</code> , and the forked thread created by the main thread is <code>0x56563d00</code> .</p><h2 id="Digging-into-SWITCH"><a href="#Digging-into-SWITCH" class="headerlink" title="Digging into SWITCH()"></a>Digging into <code>SWITCH()</code></h2><blockquote><p>When the main thread executes <code>SWITCH()</code> function for the first time, to what address  the CPU returns when it executes the last instruction <code>ret</code> of <code>SWITCH()</code>? What location in the  program that address is referred to? </p><p>When the forked thread executes <code>SWITCH()</code> function for the first time, to what  address the CPU returns when it executes the last instruction <code>ret</code> of <code>SWITCH()</code>? What  location in the program that address is referred to?</p></blockquote><p>Looking through all files in the directory, one thing is sure that the <code>SWITCH()</code> function is written in disassemble language.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) disass SWITCH</span><br><span class="line">Dump of assembler code for function SWITCH:</span><br><span class="line">   0x56559e84 &lt;+0&gt;:     mov    %eax,0x5655e054</span><br><span class="line">   0x56559e89 &lt;+5&gt;:     mov    0x4(%esp),%eax</span><br><span class="line">   0x56559e8d &lt;+9&gt;:     mov    %ebx,0x8(%eax)</span><br><span class="line">   0x56559e90 &lt;+12&gt;:    mov    %ecx,0xc(%eax)</span><br><span class="line">   0x56559e93 &lt;+15&gt;:    mov    %edx,0x10(%eax)</span><br><span class="line">   0x56559e96 &lt;+18&gt;:    mov    %esi,0x18(%eax)</span><br><span class="line">   0x56559e99 &lt;+21&gt;:    mov    %edi,0x1c(%eax)</span><br><span class="line">   0x56559e9c &lt;+24&gt;:    mov    %ebp,0x14(%eax)</span><br><span class="line">   0x56559e9f &lt;+27&gt;:    mov    %esp,(%eax)</span><br><span class="line">   0x56559ea1 &lt;+29&gt;:    mov    0x5655e054,%ebx</span><br><span class="line">   0x56559ea7 &lt;+35&gt;:    mov    %ebx,0x4(%eax)</span><br><span class="line">   0x56559eaa &lt;+38&gt;:    mov    (%esp),%ebx</span><br><span class="line">   0x56559ead &lt;+41&gt;:    mov    %ebx,0x20(%eax)</span><br><span class="line">   0x56559eb0 &lt;+44&gt;:    mov    0x8(%esp),%eax</span><br><span class="line">   0x56559eb4 &lt;+48&gt;:    mov    0x4(%eax),%ebx</span><br><span class="line">   0x56559eb7 &lt;+51&gt;:    mov    %ebx,0x5655e054</span><br><span class="line">   0x56559ebd &lt;+57&gt;:    mov    0x8(%eax),%ebx</span><br><span class="line">   0x56559ec0 &lt;+60&gt;:    mov    0xc(%eax),%ecx</span><br><span class="line">   0x56559ec3 &lt;+63&gt;:    mov    0x10(%eax),%edx</span><br><span class="line">   0x56559ec6 &lt;+66&gt;:    mov    0x18(%eax),%esi</span><br><span class="line">   0x56559ec9 &lt;+69&gt;:    mov    0x1c(%eax),%edi</span><br><span class="line">   0x56559ecc &lt;+72&gt;:    mov    0x14(%eax),%ebp</span><br><span class="line">   0x56559ecf &lt;+75&gt;:    mov    (%eax),%esp</span><br><span class="line">   0x56559ed1 &lt;+77&gt;:    mov    0x20(%eax),%eax</span><br><span class="line">   0x56559ed4 &lt;+80&gt;:    mov    %eax,(%esp)</span><br><span class="line">   0x56559ed7 &lt;+83&gt;:    mov    0x5655e054,%eax</span><br><span class="line">   0x56559edc &lt;+88&gt;:    ret    </span><br><span class="line">   0x56559edd &lt;+89&gt;:    xchg   %ax,%ax</span><br><span class="line">   0x56559edf &lt;+91&gt;:    nop</span><br></pre></td></tr></table></figure><p>In line &lt;+80&gt;, make a breakpoint, <code>run</code>, and look into registers using <code>info r</code> , then show the location by <code>x address</code> .</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) b *0x56559ed4</span><br><span class="line">Breakpoint 2 at 0x56559ed4</span><br><span class="line">(gdb) run</span><br><span class="line">Starting program: /root/OS/threads/nachos </span><br><span class="line">*** thread 0 looped 0 times</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x56559ed4 in SWITCH ()</span><br><span class="line"></span><br><span class="line">(gdb) info r</span><br><span class="line">eax            0x56559e76          1448451702</span><br><span class="line">.............................................</span><br><span class="line">(gdb) x 0x56559e76</span><br><span class="line">0x56559e76 &lt;ThreadRoot&gt;:        0x52e58955</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x56559ed4 in SWITCH ()</span><br><span class="line">(gdb) info r</span><br><span class="line">eax            0x56556a24          1448438308</span><br><span class="line">.............................................</span><br><span class="line">(gdb) x 0x56556a24</span><br><span class="line">0x56556a24 &lt;Scheduler::Run(Thread*)+144&gt;:       0x8d10c483</span><br></pre></td></tr></table></figure><p>The CPU returns to address <code>0x56559e76</code> , which located to <code>&lt;ThreadRoot&gt;</code> when it executes the last instruction <code>ret</code> of <code>SWITCH()</code> for the first time when the main thread executes <code>SWITCH()</code> function, and the second time it returns to <code>0x56556a24</code> locating to <code>&lt;Scheduler::Run(Thread*)+144&gt;</code> .</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Instructions&quot;&gt;&lt;a href=&quot;#Instructions&quot; class=&quot;headerlink&quot; title=&quot;Instructions&quot;&gt;&lt;/a&gt;Instructions&lt;/h2&gt;&lt;p&gt;&lt;code&gt;gdb ./program_name&lt;/code&gt; . Start the debugger.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;disass Function&lt;/code&gt; . Show the disassemble code of Function.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;b x&lt;/code&gt; . Set a breakpoint at line x.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="co10.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>小测试</title>
    <link href="co10.github.io/2021/03/14/%E5%B0%8F%E6%B5%8B%E8%AF%95/"/>
    <id>co10.github.io/2021/03/14/%E5%B0%8F%E6%B5%8B%E8%AF%95/</id>
    <published>2021-03-14T15:38:38.000Z</published>
    <updated>2021-03-17T01:10:04.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>发现了游戏里一个有意思的机制：</p><blockquote><p>血量低于80%时，减伤（80%-当前血量%）</p></blockquote><p>无聊就打算建模一下，看看残血减伤有多可怕。</p><a id="more"></a><h2 id="数学分析"><a href="#数学分析" class="headerlink" title="数学分析"></a>数学分析</h2><p>假设对方每次伤害都打你 $x\%$ 的血量，且 $x\ge20$ （因为如果打没有20%，绝对是刮痧，不用分析了）</p><p>那么：</p><h3 id="第一回合"><a href="#第一回合" class="headerlink" title="第一回合"></a>第一回合</h3><p>当前血量 $(1-x\%)$</p><h3 id="第二回合"><a href="#第二回合" class="headerlink" title="第二回合"></a>第二回合</h3><p>当前血量 $(1-x\%-(80\%-(1-x\%))\times x\%) = 1-0.8x\%-(x\%)^2$</p><p>​     即    上回合剩的血  -     减伤比例            × 伤害  </p><hr><p>看起来有点难看，设 $y = x\%$ ，则 第二回合当前血量 = $1-0.8y-y^2, (0.2\le y &lt;1 )$<br>要想活下来，上式结果大于零，解得：</p><script type="math/tex; mode=display">0.2 \le y < 0.677 = \frac{2}{3}</script><p>也就是说，第二下不死，且对面伤害不太刮痧，第一下打的血在以上区间内。</p><h3 id="第-n-回合"><a href="#第-n-回合" class="headerlink" title="第 $n$ 回合"></a>第 $n$ 回合</h3><p>归纳可得每回合的血量百分比：</p><script type="math/tex; mode=display">f(1)=1-y \\ f(2) = f(1)-(0.8-f(1)) \times y \\ ... \\f(n) = f(n-1) - (0.8-f(n-1)) \times y = (1+y) \times f(n-1) - 0.8y</script><hr><p>好像……不是很好算，那就，跑个代码算吧。</p><h2 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">current_hp</span>(<span class="params">n, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cur_hp = [<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur_hp[i<span class="number">-1</span>] &gt;= <span class="number">0.8</span>) &#123;</span><br><span class="line">        cur_hp.push(cur_hp[i<span class="number">-1</span>] - y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cur_hp.push((<span class="number">1</span>+y) * cur_hp[i<span class="number">-1</span>] - <span class="number">0.8</span> * y);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur_hp[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 二分法暴力解方程区间 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solve_y</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> l, r, y;</span><br><span class="line">    l = <span class="number">0.2</span>, r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> pre = <span class="number">0.01</span>;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; pre) &#123;</span><br><span class="line">        y = (l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (current_hp(n, y) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            l = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            r = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 算5个回合的好了 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"[round "</span>+i+<span class="string">"] :"</span> + <span class="string">"0.2&lt;=y&lt;"</span>+solve_y(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[round 1] :0.2&lt;=y&lt;0.99375</span><br><span class="line">[round 2] :0.2&lt;=y&lt;0.6812499999999999</span><br><span class="line">[round 3] :0.2&lt;=y&lt;0.5437500000000001</span><br><span class="line">[round 4] :0.2&lt;=y&lt;0.45625000000000004</span><br><span class="line">[round 5] :0.2&lt;=y&lt;0.40625</span><br></pre></td></tr></table></figure><p>所以，如果，对面第一下打你 40%，你可以撑到第五回合且不回血（不考虑伤害浮动和暴击）</p><p>更极端一点，比如第 8 回合？</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[round 1] :0.2&lt;=y&lt;0.99375</span><br><span class="line">[round 2] :0.2&lt;=y&lt;0.6812499999999999</span><br><span class="line">[round 3] :0.2&lt;=y&lt;0.5437500000000001</span><br><span class="line">[round 4] :0.2&lt;=y&lt;0.45625000000000004</span><br><span class="line">[round 5] :0.2&lt;=y&lt;0.40625</span><br><span class="line">[round 6] :0.2&lt;=y&lt;0.36875</span><br><span class="line">[round 7] :0.2&lt;=y&lt;0.34375</span><br><span class="line">[round 8] :0.2&lt;=y&lt;0.3187500000000001</span><br></pre></td></tr></table></figure><p>31% ！ 生命力非常顽强啊，第一下被打1/3，不回血可以撑 7、8 个回合</p><p>假设第一下打 50%，也就是不回血能撑 3 回合，设总血量 22000 ，看看每回合的血量？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> res = current_hp(i,<span class="number">0.5</span>);</span><br><span class="line">    <span class="keyword">if</span> (res &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"[round"</span>+i+<span class="string">"]: "</span>+<span class="built_in">Math</span>.floor(current_hp(i,<span class="number">0.5</span>)*<span class="number">22000</span>)+<span class="string">"/22000"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"[round"</span>+i+<span class="string">"]: "</span>+<span class="string">"0"</span>+<span class="string">"/22000"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[round1]: 11000&#x2F;22000</span><br><span class="line">[round2]: 7699&#x2F;22000</span><br><span class="line">[round3]: 2749&#x2F;22000</span><br><span class="line">[round4]: 0&#x2F;22000</span><br></pre></td></tr></table></figure><p>好像不够明显，看看 40%？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[round1]: 13200&#x2F;22000</span><br><span class="line">[round2]: 11439&#x2F;22000</span><br><span class="line">[round3]: 8975&#x2F;22000</span><br><span class="line">[round4]: 5526&#x2F;22000</span><br><span class="line">[round5]: 696&#x2F;22000</span><br><span class="line">[round6]: 0&#x2F;22000</span><br></pre></td></tr></table></figure><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://d3js.org/d3.v4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"input_group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"maxhp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>血量上限：<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span> = <span class="string">"maxhp_text"</span>&gt;</span>22000<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span> = <span class="string">"maxhp_slider"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"12000"</span> <span class="attr">max</span>=<span class="string">"25000"</span> <span class="attr">value</span>=<span class="string">"22000"</span> <span class="attr">onchange</span>=<span class="string">"onChange()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"bhp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>初始血量：<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span> = <span class="string">"bhp_text"</span>&gt;</span>22000<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span> = <span class="string">"bhp_slider"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"25000"</span> <span class="attr">value</span>=<span class="string">"22000"</span> <span class="attr">onchange</span>=<span class="string">"onChange()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"damage"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>对手伤害：<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span> = <span class="string">"damage_text"</span>&gt;</span>11000<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span> = <span class="string">"damage_slider"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"1000"</span> <span class="attr">max</span>=<span class="string">"25000"</span> <span class="attr">value</span>=<span class="string">"11000"</span> <span class="attr">onchange</span>=<span class="string">"onChange()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"ro"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>预览回合：<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span> = <span class="string">"ro_text"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span> = <span class="string">"ro_slider"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"15"</span> <span class="attr">value</span>=<span class="string">"5"</span> <span class="attr">onchange</span>=<span class="string">"onChange()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bar_hp"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> t_r = <span class="built_in">document</span>.getElementById(<span class="string">"ro_text"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> t_m = <span class="built_in">document</span>.getElementById(<span class="string">"maxhp_text"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> t_b = <span class="built_in">document</span>.getElementById(<span class="string">"bhp_text"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> t_d = <span class="built_in">document</span>.getElementById(<span class="string">"damage_text"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> round = +<span class="built_in">document</span>.getElementById(<span class="string">"ro_slider"</span>).value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> max_hp = +<span class="built_in">document</span>.getElementById(<span class="string">"maxhp_slider"</span>).value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> damage0 = +<span class="built_in">document</span>.getElementById(<span class="string">"damage_slider"</span>).value;</span></span><br><span class="line">if (damage0 &gt; max_hp) &#123;</span><br><span class="line">    damage0 = max_hp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> damage = damage0/max_hp;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> begin_hp = +<span class="built_in">document</span>.getElementById(<span class="string">"bhp_slider"</span>).value;</span></span><br><span class="line">t_r.innerText = round;</span><br><span class="line">t_m.innerText = max_hp;</span><br><span class="line">t_b.innerText = begin_hp;</span><br><span class="line">t_d.innerText = damage0;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">onChange</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    round = +<span class="built_in">document</span>.getElementById(<span class="string">"ro_slider"</span>).value;</span></span><br><span class="line"><span class="javascript">    max_hp = +<span class="built_in">document</span>.getElementById(<span class="string">"maxhp_slider"</span>).value;</span></span><br><span class="line"><span class="javascript">    damage0 = +<span class="built_in">document</span>.getElementById(<span class="string">"damage_slider"</span>).value;</span></span><br><span class="line">    if (damage0 &gt; max_hp) &#123;</span><br><span class="line">        damage0 = max_hp;</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"damage_slider"</span>).value = max_hp;</span></span><br><span class="line">    &#125;</span><br><span class="line">    damage = damage0/max_hp;</span><br><span class="line"><span class="javascript">    begin_hp = +<span class="built_in">document</span>.getElementById(<span class="string">"bhp_slider"</span>).value;</span></span><br><span class="line">    t_r.innerText = round;</span><br><span class="line">    t_m.innerText = max_hp;</span><br><span class="line">    t_b.innerText = begin_hp;</span><br><span class="line">    t_d.innerText = damage0;</span><br><span class="line"><span class="actionscript">    d3.select(<span class="string">"svg"</span>).remove();</span></span><br><span class="line">    applyAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> margin = &#123;top: <span class="number">20</span>, right: <span class="number">30</span>, bottom: <span class="number">40</span>, left: <span class="number">90</span>&#125;,</span></span><br><span class="line">    width = 460 - margin.left - margin.right,</span><br><span class="line">    height = 400 - margin.top - margin.bottom;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">applyAll</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">current_hp</span><span class="params">(n, y)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> cur_hp = [begin_hp/max_hp];</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;=n;i++) &#123;</span></span><br><span class="line">        if (cur_hp[i-1] &gt;= 0.8) &#123;</span><br><span class="line">        cur_hp.push(cur_hp[i-1] - y);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">else</span> &#123;</span></span><br><span class="line">        cur_hp.push((1+y) * cur_hp[i-1] - 0.8 * y);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> cur_hp;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">/* if you want to survive to round n, y max is */</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">survive_y</span><span class="params">(n)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> l, r, y;</span></span><br><span class="line">    l = 0.2, r = 1;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> pre = <span class="number">0.01</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">while</span> (r - l &gt; pre) &#123;</span></span><br><span class="line">        y = (l+r)/2;</span><br><span class="line">        if (current_hp(n, y)[n] &gt; 0) &#123;</span><br><span class="line">            l = y;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">else</span> &#123;</span></span><br><span class="line">            r = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> y;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">/* the survive of maximum hp data */</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> data1 = [];</span></span><br><span class="line"><span class="actionscript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= round; i++)&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> temp = &#123;<span class="string">"round"</span>: i, <span class="string">"hp"</span>: survive_y(i)&#125;;</span></span><br><span class="line">    data1.push(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">/* for damage, survive to when? */</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> data2 = [];</span></span><br><span class="line"><span class="actionscript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> res = current_hp(i, damage)[i];</span></span><br><span class="line">    if (res &gt;= 0) &#123;</span><br><span class="line"><span class="actionscript">        data2.push(&#123;<span class="string">"round"</span>: i, <span class="string">"hp"</span>: res&#125;);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">        data2.push(&#123;<span class="string">"round"</span>: i, <span class="string">"hp"</span>: <span class="number">0</span>&#125;);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">break</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> svg = d3.select(<span class="string">"#bar_hp"</span>)</span></span><br><span class="line"><span class="actionscript">  .append(<span class="string">"svg"</span>)</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"width"</span>, width + margin.left + margin.right)</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"height"</span>, height + margin.top + margin.bottom)</span></span><br><span class="line"><span class="actionscript">  .append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// Add X axis</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> x = d3.scaleLinear()</span></span><br><span class="line">    .domain([0, max_hp])</span><br><span class="line">    .range([ 0, width]);</span><br><span class="line"><span class="actionscript">  svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>)</span></span><br><span class="line">    .call(d3.axisBottom(x))</span><br><span class="line"><span class="actionscript">    .selectAll(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">      .attr(<span class="string">"transform"</span>, <span class="string">"translate(-10,0)rotate(-45)"</span>)</span></span><br><span class="line"><span class="actionscript">      .style(<span class="string">"text-anchor"</span>, <span class="string">"end"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// Y axis</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> y = d3.scaleBand()</span></span><br><span class="line">    .range([ 0, height])</span><br><span class="line"><span class="actionscript">    .domain(data1.map(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> d.round; &#125;))</span></span><br><span class="line">    .padding(.1);</span><br><span class="line"><span class="actionscript">  svg.append(<span class="string">"g"</span>)</span></span><br><span class="line">    .call(d3.axisLeft(y))</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">//Bars</span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> u = svg.selectAll(<span class="string">"myRect"</span>)</span></span><br><span class="line">    .data(data1);</span><br><span class="line">    u.enter()</span><br><span class="line"><span class="actionscript">    .append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"x"</span>, x(<span class="number">0</span>) )</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> y(d.round); &#125;)</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"width"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> x(d.hp)*max_hp; &#125;)</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"height"</span>, y.bandwidth() )</span></span><br><span class="line"><span class="actionscript">    .attr(<span class="string">"fill"</span>, <span class="string">"#69b3a2"</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line">  update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applyAll();</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;发现了游戏里一个有意思的机制：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;血量低于80%时，减伤（80%-当前血量%）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;无聊就打算建模一下，看看残血减伤有多可怕。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Connecting to VPS in VS Code</title>
    <link href="co10.github.io/2021/03/13/Connecting-to-VPS-in-VS-Code/"/>
    <id>co10.github.io/2021/03/13/Connecting-to-VPS-in-VS-Code/</id>
    <published>2021-03-13T07:45:46.000Z</published>
    <updated>2021-03-13T08:09:10.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Connecting-to-VPS-in-VS-Code"><a href="#Connecting-to-VPS-in-VS-Code" class="headerlink" title="Connecting to VPS in VS Code"></a>Connecting to VPS in VS Code</h1><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="In-Windows"><a href="#In-Windows" class="headerlink" title="In Windows"></a>In Windows</h3><p>Install VS Code. Install Remote - SSH in VS Code.</p><p>Press F1, edit the configuration. Then Connect.</p><p>In Explorer, you can open the remote directory.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Connecting-to-VPS-in-VS-Code&quot;&gt;&lt;a href=&quot;#Connecting-to-VPS-in-VS-Code&quot; class=&quot;headerlink&quot; title=&quot;Connecting to VPS in VS Code&quot;&gt;&lt;/a&gt;Co
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="co10.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Using FTP in Linux</title>
    <link href="co10.github.io/2021/03/13/Using-FTP-in-Linux/"/>
    <id>co10.github.io/2021/03/13/Using-FTP-in-Linux/</id>
    <published>2021-03-13T05:33:18.000Z</published>
    <updated>2021-03-13T05:33:50.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Using-FTP-in-VPS"><a href="#Using-FTP-in-VPS" class="headerlink" title="Using FTP in VPS"></a>Using FTP in VPS</h1><h2 id="Install-vsftpd"><a href="#Install-vsftpd" class="headerlink" title="Install vsftpd"></a>Install vsftpd</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure><p>check vsftpd version</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vsftpd -v</span><br></pre></td></tr></table></figure><p>Change FTP password</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo passwd ftp</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>The configuration file locates in <code>/etc/vsftpd.conf</code> . Change Below: </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">listen=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=<span class="number">022</span></span><br></pre></td></tr></table></figure><p>Go to file <code>/etc/pam.d/vsftpd</code> , change below: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">auth    required        pam_shells.so</span></span><br></pre></td></tr></table></figure><h2 id="Install-WinSCP"><a href="#Install-WinSCP" class="headerlink" title="Install WinSCP"></a>Install WinSCP</h2><p>In Windows, install WinSCP .</p><p>Choose SFTP. Login to VPS.</p><p>Done. Enjoy.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Using-FTP-in-VPS&quot;&gt;&lt;a href=&quot;#Using-FTP-in-VPS&quot; class=&quot;headerlink&quot; title=&quot;Using FTP in VPS&quot;&gt;&lt;/a&gt;Using FTP in VPS&lt;/h1&gt;&lt;h2 id=&quot;Install-v
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="co10.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Using Nachos in Linux</title>
    <link href="co10.github.io/2021/03/05/Using-Nachos-in-Linux/"/>
    <id>co10.github.io/2021/03/05/Using-Nachos-in-Linux/</id>
    <published>2021-03-05T02:08:37.000Z</published>
    <updated>2021-04-01T11:45:58.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Make sure the Linux is 32-bit!</p><p>Go to <a href="https://homes.cs.washington.edu/~tom/nachos/" target="_blank" rel="noopener">https://homes.cs.washington.edu/~tom/nachos/</a>, download <code>nachos-4.0.tar</code>, and download <code>mips-x86.linux-xgcc</code> .</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://www.cs.washington.edu/homes/tom/nachos/nachos-4.0.tar</span><br><span class="line">wget https://inst.eecs.berkeley.edu//~cs162/fa13/Nachos/xgcc/mips-x86_64.linux-xgcc.tar.gz</span><br></pre></td></tr></table></figure><a id="more"></a><p>Place it to somewhere.</p><p>（Well, that’s the original one. But my Experiment uses 3.4 version modified by my teacher.）</p><p>Before anything, make sure you have install GNU/GCC, and csh.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install gcc-multilib g++-multilib</span><br><span class="line">sudo apt-get install manpages-dev</span><br><span class="line">sudo apt-get install csh</span><br></pre></td></tr></table></figure><p>Unzip it.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf nachos-4.0.tar</span><br></pre></td></tr></table></figure><p>Use <code>cp -r</code> to copy <strong>Code</strong> directory to somewhere.</p><p>Copy <code>gcc-2.8.1-mips.tar.gz</code> to <code>usr/local</code> directory, and unzip it.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp gcc-2.8.1-mips.tar.gz &#x2F;usr&#x2F;local</span><br><span class="line">cd usr&#x2F;local</span><br><span class="line">tar -xvf gcc-2.8.1-mips.tar.gz</span><br></pre></td></tr></table></figure><p>Add permission by <code>chmod +rwx filename</code> .</p><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>Go back to the <code>Code</code> folder. Here is what we have in <code>Code</code> directory.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ass3  bin      lab2  lab5    machine          Makefile.dep  network  threads   vm</span><br><span class="line">ass4  filesys  lab3  lab7-8  Makefile.common  monitor       test     userprog</span><br></pre></td></tr></table></figure><p>Go to <code>/test/arch/unknown-i386-linux</code> folder, delete files in folders <code>depends</code> and <code>objects</code> (don’t remove the two folders), and in <code>test</code>, delete all files end in <code>.noff</code>.</p><h3 id="Test-test"><a href="#Test-test" class="headerlink" title="Test test"></a>Test test</h3><p>Makefile.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>If failed, remember to add permission to certain files (<code>_the_directory_name_/bin/arch/unknown-i386-linux/bin/coff2noff</code> &amp; <code>coff2flat</code>) suggested. If success, we got some <code>.noff</code> files in test: </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arch    halt.flat  Makefile       matmult.c     matmult.noff  shell.c     shell.noff  sort.flat  start.s halt.c  halt.noff  Makefile.orig  matmult.flat  script        shell.flat  sort.c      sort.noff</span><br></pre></td></tr></table></figure><p>And something like:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Converting to flat file: arch/unknown-i386-linux/bin/sort.flat &lt;&lt;&lt;</span></span><br><span class="line">../bin/arch/unknown-i386-linux/bin/coff2flat arch/unknown-i386-linux/objects/sort.coff arch/unknown-i386-linux/bin/sort.flat</span><br><span class="line">Loading 3 sections:</span><br><span class="line">        ".text", filepos 0xd0, mempos 0x0, size 0x2c0</span><br><span class="line">        ".data", filepos 0x390, mempos 0x2c0, size 0x0</span><br><span class="line">        ".bss", filepos 0x0, mempos 0x2c0, size 0x1000</span><br><span class="line">Adding stack of size: 1024</span><br></pre></td></tr></table></figure><h3 id="Test-threads"><a href="#Test-threads" class="headerlink" title="Test threads"></a>Test threads</h3><p>Make. Ignore Warnings. Then we get something like this: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Assembling switch-linux.s &lt;&lt;&lt;</span></span><br><span class="line">/lib/cpp  -D HOST_i386 -D HOST_LINUX switch-linux.s &gt; arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line">as -o arch/unknown-i386-linux/objects/switch-linux.o arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line">switch-linux.s: Assembler messages:</span><br><span class="line">switch-linux.s:61: Warning: indirect call without `*'</span><br><span class="line">switch-linux.s:62: Warning: indirect call without `*'</span><br><span class="line">switch-linux.s:63: Warning: indirect call without `*'</span><br><span class="line">rm arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Linking arch/unknown-i386-linux/bin/nachos &lt;&lt;&lt;</span></span><br><span class="line">g++ arch/unknown-i386-linux/objects/main.o arch/unknown-i386-linux/objects/list.o arch/unknown-i386-linux/objects/scheduler.o arch/unknown-i386-linux/objects/synch.o arch/unknown-i386-linux/objects/synchlist.o arch/unknown-i386-linux/objects/system.o arch/unknown-i386-linux/objects/thread.o arch/unknown-i386-linux/objects/utility.o arch/unknown-i386-linux/objects/threadtest.o arch/unknown-i386-linux/objects/synchtest.o arch/unknown-i386-linux/objects/interrupt.o arch/unknown-i386-linux/objects/sysdep.o arch/unknown-i386-linux/objects/stats.o arch/unknown-i386-linux/objects/timer.o arch/unknown-i386-linux/objects/switch-linux.o  -o arch/unknown-i386-linux/bin/nachos</span><br><span class="line">ln -sf arch/unknown-i386-linux/bin/nachos nachos</span><br></pre></td></tr></table></figure><p>If successful, a link-file named <code>nachos</code> will be generated.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">arch         dump     main.cc         nachos        switch.h        synch.cc      synchlist.h   system.h   threadtest.cc</span><br><span class="line">bool.h       list.cc  Makefile        scheduler.cc  switch-linux.s  synch.h       synchtest.cc  thread.cc  utility.cc</span><br><span class="line">copyright.h  list.h   Makefile.local  scheduler.h   switch.s        synchlist.cc  system.cc     thread.h   utility.h</span><br></pre></td></tr></table></figure><p>Run <code>./nachos</code>, then got:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 130, idle 0, system 130, user 0</span><br><span class="line">Disk I/O: reads 0, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure><h3 id="Test-filesys"><a href="#Test-filesys" class="headerlink" title="Test filesys"></a>Test filesys</h3><p>Make, and got: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Assembling ../threads/switch-linux.s &lt;&lt;&lt;</span></span><br><span class="line">/lib/cpp  -D HOST_i386 -D HOST_LINUX ../threads/switch-linux.s &gt; arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line">as -o arch/unknown-i386-linux/objects/switch-linux.o arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line">../threads/switch-linux.s: Assembler messages:</span><br><span class="line">../threads/switch-linux.s:61: Warning: indirect call without `*'</span><br><span class="line">../threads/switch-linux.s:62: Warning: indirect call without `*'</span><br><span class="line">../threads/switch-linux.s:63: Warning: indirect call without `*'</span><br><span class="line">rm arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Linking arch/unknown-i386-linux/bin/nachos &lt;&lt;&lt;</span></span><br><span class="line">g++ arch/unknown-i386-linux/objects/main.o arch/unknown-i386-linux/objects/list.o arch/unknown-i386-linux/objects/scheduler.o arch/unknown-i386-linux/objects/synch.o arch/unknown-i386-linux/objects/synchlist.o arch/unknown-i386-linux/objects/system.o arch/unknown-i386-linux/objects/thread.o arch/unknown-i386-linux/objects/utility.o arch/unknown-i386-linux/objects/threadtest.o arch/unknown-i386-linux/objects/synchtest.o arch/unknown-i386-linux/objects/interrupt.o arch/unknown-i386-linux/objects/sysdep.o arch/unknown-i386-linux/objects/stats.o arch/unknown-i386-linux/objects/timer.o arch/unknown-i386-linux/objects/bitmap.o arch/unknown-i386-linux/objects/directory.o arch/unknown-i386-linux/objects/filehdr.o arch/unknown-i386-linux/objects/filesys.o arch/unknown-i386-linux/objects/fstest.o arch/unknown-i386-linux/objects/openfile.o arch/unknown-i386-linux/objects/synchdisk.o arch/unknown-i386-linux/objects/disk.o arch/unknown-i386-linux/objects/switch-linux.o  -o arch/unknown-i386-linux/bin/nachos</span><br><span class="line">ln -sf arch/unknown-i386-linux/bin/nachos nachos</span><br></pre></td></tr></table></figure><p>Run <code>./nachos</code>, then got:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 1190, idle 1000, system 190, user 0</span><br><span class="line">Disk I/O: reads 2, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure><h3 id="Test-vm"><a href="#Test-vm" class="headerlink" title="Test vm"></a>Test vm</h3><p>Make then run: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 130, idle 0, system 130, user 0</span><br><span class="line">Disk I/O: reads 0, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure><h3 id="Test-monitor"><a href="#Test-monitor" class="headerlink" title="Test monitor"></a>Test monitor</h3><p>Make then run: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 590, idle 0, system 590, user 0</span><br><span class="line">Disk I/O: reads 0, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure><h3 id="Test-network"><a href="#Test-network" class="headerlink" title="Test network"></a>Test network</h3><p>Make then run: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br></pre></td></tr></table></figure><h3 id="Test-userprog"><a href="#Test-userprog" class="headerlink" title="Test userprog"></a>Test userprog</h3><p>Make but I got: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">../Makefile.common:92: recipe for target 'arch/unknown-i386-linux/bin/nachos' failed</span><br><span class="line">make: *** [arch/unknown-i386-linux/bin/nachos] Error 1</span><br></pre></td></tr></table></figure><p>Well, forget it.</p><h3 id="Test-lab3"><a href="#Test-lab3" class="headerlink" title="Test lab3"></a>Test lab3</h3><p>In <code>prodcons++.cc</code>, add below to use <code>create</code> and <code>write</code> system call</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt; /* create */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;  /* create */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;     /* create */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;    /* write */</span></span></span><br></pre></td></tr></table></figure><p>Then make, it should be OK: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Linking arch/unknown-i386-linux/bin/nachos &lt;&lt;&lt;</span></span><br><span class="line">g++ -m32 arch/unknown-i386-linux/objects/main.o arch/unknown-i386-linux/objects/list.o arch/unknown-i386-linux/objects/scheduler.o arch/unknown-i386-linux/objects/synch.o arch/unknown-i386-linux/objects/synchlist.o arch/unknown-i386-linux/objects/system.o arch/unknown-i386-linux/objects/thread.o arch/unknown-i386-linux/objects/utility.o arch/unknown-i386-linux/objects/threadtest.o arch/unknown-i386-linux/objects/synchtest.o arch/unknown-i386-linux/objects/interrupt.o arch/unknown-i386-linux/objects/sysdep.o arch/unknown-i386-linux/objects/stats.o arch/unknown-i386-linux/objects/timer.o arch/unknown-i386-linux/objects/prodcons++.o arch/unknown-i386-linux/objects/ring.o arch/unknown-i386-linux/objects/switch-linux.o  -o arch/unknown-i386-linux/bin/nachos</span><br><span class="line">ln -sf arch/unknown-i386-linux/bin/nachos nachos</span><br></pre></td></tr></table></figure><p>Run <code>./nachos</code> .</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 10, idle 0, system 10, user 0</span><br><span class="line">Disk I/O: reads 0, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure><h3 id="Test-lab5"><a href="#Test-lab5" class="headerlink" title="Test lab5"></a>Test lab5</h3><p>First add a <code>Makefile</code> (copied from lab3), well, forget it…</p><h3 id="Test-lab7-8"><a href="#Test-lab7-8" class="headerlink" title="Test lab7-8"></a>Test lab7-8</h3><p>Edit <code>Makefile.local</code> :</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># include ../ass2/Makefile.local</span></span><br></pre></td></tr></table></figure><p>Then Make and Run: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 130, idle 0, system 130, user 0</span><br><span class="line">Disk I/O: reads 0, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure><h2 id="If-using-x64-Ubuntu"><a href="#If-using-x64-Ubuntu" class="headerlink" title="If using x64 Ubuntu"></a>If using x64 Ubuntu</h2><p>Install <code>libc6-dev-i386</code>: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libc6-dev-i386</span><br></pre></td></tr></table></figure><p>In <code>code</code> directory, edit <code>Makefile.common</code> :</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CFLAGS = -g -Wall -Wshadow $(INCPATH) $(DEFINES) $(HOST) -DCHANGED</span></span><br><span class="line">CFLAGS = -g -Wall -Wshadow -m32 <span class="variable">$(INCPATH)</span> <span class="variable">$(DEFINES)</span> <span class="variable">$(HOST)</span> -DCHANGED</span><br></pre></td></tr></table></figure><p>Also edit <code>Makefile.dep</code> :</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#CPP=/lib/cpp</span></span><br><span class="line"><span class="comment">#CC = g++</span></span><br><span class="line"><span class="comment">#LD = g++</span></span><br><span class="line"><span class="comment">#AS = as</span></span><br><span class="line">CPP= gcc -E -m32</span><br><span class="line">CC = g++ -m32</span><br><span class="line">LD = g++ -m32</span><br><span class="line">AS = as --32</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;&lt;p&gt;Make sure the Linux is 32-bit!&lt;/p&gt;
&lt;p&gt;Go to &lt;a href=&quot;https://homes.cs.washington.edu/~tom/nachos/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://homes.cs.washington.edu/~tom/nachos/&lt;/a&gt;, download &lt;code&gt;nachos-4.0.tar&lt;/code&gt;, and download &lt;code&gt;mips-x86.linux-xgcc&lt;/code&gt; .&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget http://www.cs.washington.edu/homes/tom/nachos/nachos-4.0.tar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget https://inst.eecs.berkeley.edu//~cs162/fa13/Nachos/xgcc/mips-x86_64.linux-xgcc.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="co10.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux Commands</title>
    <link href="co10.github.io/2021/03/05/Linux-Commands/"/>
    <id>co10.github.io/2021/03/05/Linux-Commands/</id>
    <published>2021-03-05T00:45:19.000Z</published>
    <updated>2021-03-07T11:30:20.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="File-Commands"><a href="#File-Commands" class="headerlink" title="File Commands"></a>File Commands</h2><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a><code>pwd</code></h3><p><strong>P</strong>rint <strong>W</strong>orking <strong>D</strong>irectory. Find out the <em>path</em> of the current working directory.</p><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a><code>cd</code></h3><p><strong>C</strong>hange <strong>D</strong>irectory. Change the current working directory</p><ul><li><strong>cd <em>somewhere</em></strong> to go to that directory.</li><li><strong>cd ..</strong> (with two dots) to move one directory up.</li><li><strong>cd</strong> to go straight to the home folder.</li><li><strong>cd-</strong> (with a hyphen) to move to your previous directory.</li></ul><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a><code>ls</code></h3><p>List. View the contents of a directory.</p><ul><li><strong>ls</strong> will list current directory.</li><li><strong>ls <em>somewhere</em></strong> will list the directory named.</li><li><strong>ls -R</strong> will list all the files in the sub-directories as well.</li><li><strong>ls -a</strong> will show the hidden files.</li><li><strong>ls -al</strong> will list the files and directories with detailed information like the permissions, size, owner, etc.</li></ul><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a><code>cat</code></h3><p>Concatenate. List the contents of a file on the standard output (<code>stdout</code>).</p><ul><li><strong>cat filename (or filename1 filename2 filename3 …)</strong> will show content of given filename(s).</li><li><strong>cat -n filename</strong> will show contents with line numbers.</li><li><strong>cat &gt; filename</strong> creates a new file</li><li><strong>cat filename1 filename2 &gt; filename3</strong> joins two files (1 and 2) and stores the output of them in a new file (3)</li><li>to convert a file to upper or lower case use, <strong>cat filename | tr a-z A-Z &gt; output.txt</strong></li></ul><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a><code>cp</code></h3><p>Copy. <strong>cp <em>filename</em> <em>somewhere</em></strong> will copy file to the directory.</p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a><code>mv</code></h3><p>Move files, and also can be used to rename files. </p><ul><li><strong>mv <em>filename</em> <em>somewhere</em></strong> will move the file to the directory.</li><li><strong>mv <em>old_filename</em> <em>new_filename</em></strong> will rename the file with a new name.</li></ul><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><code>mkdir</code></h3><p>Make Directory. </p><ul><li><strong>mkdir <em>somewhere</em></strong></li><li><strong>mkdir <em>somewhere1/somewhere2/…/destination</em></strong></li><li><strong>mkdir <em>somewhere1/destination/somewhere2</em></strong></li></ul><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a><code>rmdir</code></h3><p>Remove Directory. Only allows you to delete empty directories.</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h3><p>Remove Files. <code>rm -r</code> alternative to <code>rmdir</code>. </p><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a><code>touch</code></h3><p>Create a blank new file.</p><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a><code>locate</code></h3><p>Locate a file. Use <code>locate -i</code> to be case-insensitive. <code>locate A*B</code> search files contain <code>A</code> and <code>B</code>.</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a><code>find</code></h3><p>Similar to locate. But you need to give it a directory.</p><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a><code>grep</code></h3><p>Search through all the text in a given file.</p><h2 id="Higher"><a href="#Higher" class="headerlink" title="Higher"></a>Higher</h2><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a><code>sudo</code></h3><p><strong>S</strong>uper<strong>U</strong>ser <strong>Do</strong>.</p><h3 id="df"><a href="#df" class="headerlink" title="df"></a><code>df</code></h3><p>Get a report on the system’s disk space usage, shown in percentage and KBs.</p><p><code>df -m</code> to show in megabytes.</p><h3 id="du"><a href="#du" class="headerlink" title="du"></a><code>du</code></h3><p><strong>D</strong>isk <strong>U</strong>sage. type <code>-h</code> to get human readable statics.</p><h3 id="head"><a href="#head" class="headerlink" title="head"></a><code>head</code></h3><p>View the first lines of any text file.</p><p><strong>head -n somenumber filename.txt</strong>. View fist somenumber lines of file.</p><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a><code>tail</code></h3><p>View last lines.</p><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a><code>diff</code></h3><p>Difference. Compares the contents of two files <em>line by line</em>. After analyzing the files, it will <em>output the lines that do not match</em>.</p><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a><code>tar</code></h3><p>Archive multiple files into a <strong>tarball</strong>.</p><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a><code>chmod</code></h3><p>Change the read, write, and execute permissions of files and directories.</p><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a><code>chown</code></h3><p>Change or transfer the ownership of a file to the specified username.</p><h3 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a><code>jobs</code></h3><p>Display all current jobs along with their statuses.</p><h3 id="Kill"><a href="#Kill" class="headerlink" title="Kill"></a><code>Kill</code></h3><p>Send a certain signal to an app and instructs the app to terminate itself. Kill by its PID. </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.hostinger.com/tutorials/linux-commands" target="_blank" rel="noopener">https://www.hostinger.com/tutorials/linux-commands</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;File-Commands&quot;&gt;&lt;a href=&quot;#File-Commands&quot; class=&quot;headerlink&quot; title=&quot;File Commands&quot;&gt;&lt;/a&gt;File Commands&lt;/h2&gt;&lt;h3 id=&quot;pwd&quot;&gt;&lt;a href=&quot;#pwd&quot; c
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="co10.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Sparkclouds</title>
    <link href="co10.github.io/2020/12/11/Sparkclouds/"/>
    <id>co10.github.io/2020/12/11/Sparkclouds/</id>
    <published>2020-12-11T07:52:23.000Z</published>
    <updated>2021-01-14T07:53:28.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sparkclouds"><a href="#Sparkclouds" class="headerlink" title="Sparkclouds"></a>Sparkclouds</h1><a id="more"></a><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>找出 Shakespeares’s Sonnet 1-20, 存为 <code>.txt</code> 文件，但后进行以下操作：</p><h3 id="统计词频"><a href="#统计词频" class="headerlink" title="统计词频"></a>统计词频</h3><p>用 C++ 写个程序，统计词频，能处理大小写、标点符号、’s 后缀等，代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span>&gt; StrIntMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> marks[] = &#123; <span class="string">','</span>, <span class="string">'.'</span>, <span class="string">':'</span>, <span class="string">'?'</span>, <span class="string">'!'</span>, <span class="string">';'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wordCnt</span><span class="params">(<span class="built_in">std</span>::istream&amp; in, StrIntMap&amp; words)</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">while</span> (in &gt;&gt; s) &#123;</span><br><span class="line"><span class="keyword">if</span> (s.back() == <span class="string">'\0'</span> || s.back() == <span class="string">'\n'</span>)</span><br><span class="line">s.erase(s.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s.back() == marks[i]) &#123;</span><br><span class="line">s.erase(s.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] &gt;= <span class="string">'A'</span> &amp;&amp; s[<span class="number">0</span>] &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line"><span class="keyword">bool</span> changed = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'I'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">changed = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">1</span>] &lt; <span class="string">'a'</span> || s[<span class="number">1</span>] &gt; <span class="string">'z'</span>)</span><br><span class="line">changed = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] &lt; <span class="string">'A'</span> || s[i]&gt;<span class="string">'Z'</span>) &#123;</span><br><span class="line">changed = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">changed = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (changed)</span><br><span class="line">s[<span class="number">0</span>] += (<span class="string">'a'</span> - <span class="string">'A'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s.back() == <span class="string">'s'</span> &amp;&amp; s.<span class="built_in">size</span>() &gt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[s.<span class="built_in">size</span>() - <span class="number">2</span>] == <span class="string">'\''</span>) &#123;</span><br><span class="line">s.erase(s.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line">s.erase(s.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; s &lt;&lt; "\t";</span></span><br><span class="line">++words[s];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span>(EXIT_FAILURE);</span><br><span class="line"><span class="function"><span class="built_in">std</span>::ifstream <span class="title">in</span><span class="params">(argv[<span class="number">1</span>])</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!in) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"open error\n"</span>;</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> outname = argv[<span class="number">1</span>];</span><br><span class="line">outname += <span class="string">".csv"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::fstream opt;</span><br><span class="line">opt.<span class="built_in">open</span>(outname, <span class="built_in">std</span>::fstream::in | <span class="built_in">std</span>::fstream::out | <span class="built_in">std</span>::fstream::app);</span><br><span class="line"><span class="keyword">if</span> (!opt) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fail\n"</span>;</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrIntMap w;</span><br><span class="line">wordCnt(in, w);</span><br><span class="line"></span><br><span class="line">in.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (StrIntMap::iterator p = w.<span class="built_in">begin</span>(); p != w.<span class="built_in">end</span>(); ++p) &#123;</span><br><span class="line">opt &lt;&lt; p-&gt;first &lt;&lt; <span class="string">","</span> &lt;&lt; p-&gt;second &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">opt.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后处理那 20 个 <code>.txt</code> 文档：</p><p><img src="https://i.loli.net/2020/12/18/hEnUSGYgvofrFNu.png" alt="image.png"></p><p>当然还有一个 <code>all.txt</code> 用于统计所有词频。</p><h3 id="整理数据"><a href="#整理数据" class="headerlink" title="整理数据"></a>整理数据</h3><p>先手动处理了古英语的 <code>&#39;</code> 前缀缩写。</p><p>用 Excel 的 <code>VLOOKUP</code> 函数整合统计所有 <code>.csv</code> 文件，最终生成一个：</p><p><img src="https://i.loli.net/2020/12/18/epAkbnNBLPSiQfq.png" alt="image.png"></p><h3 id="D3-实现"><a href="#D3-实现" class="headerlink" title="D3 实现"></a>D3 实现</h3><p>对于总词频低的单词，统一用小字号；词频高的，根据词频调整字号，并在下方根据 20 个 Sonnets 各自出现频率画出 sparkline 。</p><p>根据字号、单词长度，初略计算下一个单词应该出现的坐标。对于词频高的预留大空间。每个新加的单词根据占用空间进行判断位置。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://i.loli.net/2020/12/18/CnTXEZc6F8Wafho.png" alt="image.png"></p><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;meta charset = <span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;script src = <span class="string">"https://d3js.org/d3.v4.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id = "word_cloud"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> margin = &#123;<span class="attr">top</span>: <span class="number">20</span>, <span class="attr">right</span>: <span class="number">20</span>, <span class="attr">bottom</span>: <span class="number">20</span>, <span class="attr">left</span>: <span class="number">20</span>&#125;;</span><br><span class="line">        <span class="keyword">var</span> width = <span class="number">800</span> - margin.left - margin.right,</span><br><span class="line">            height = <span class="number">600</span> - margin.top - margin.bottom;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> svg = d3.select(<span class="string">"#word_cloud"</span>).append(<span class="string">"svg"</span>)</span><br><span class="line">            .attr(<span class="string">"width"</span>, width + margin.left + margin.right)</span><br><span class="line">            .attr(<span class="string">"height"</span>, height + margin.top + margin.bottom)</span><br><span class="line">            .append(<span class="string">"g"</span>)</span><br><span class="line">            .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> positionTaken = <span class="keyword">new</span> <span class="built_in">Array</span>(width + <span class="number">101</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; positionTaken.length; i++)</span><br><span class="line">            positionTaken[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(height + <span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; positionTaken.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; positionTaken[i].length; j++) &#123;</span><br><span class="line">                positionTaken[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(positionTaken);</span><br><span class="line"></span><br><span class="line">        d3.csv(<span class="string">"https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/04/0/20_sonets_wordcount.csv"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"data"</span>, data);</span><br><span class="line">            <span class="keyword">var</span> x0 = margin.left, y0 = margin.top;</span><br><span class="line">            <span class="keyword">var</span> thisline = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> lineFunc = d3.line()</span><br><span class="line">                .x(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> x0 + d.x; &#125;)</span><br><span class="line">                .y(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> y0 + d.y; &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> wordsize = <span class="string">"6px"</span>, wordcolor = <span class="string">"#ACAEE3"</span>, bigword = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">var</span> tempsize = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (data[i][<span class="string">"SUM"</span>] &gt; <span class="number">6</span>) &#123;</span><br><span class="line">                    tempsize = data[i][<span class="string">"SUM"</span>];</span><br><span class="line">                    wordsize = tempsize + <span class="string">"px"</span>;</span><br><span class="line">                    wordcolor = <span class="string">"#254170"</span>;</span><br><span class="line">                    bigword = <span class="number">1</span>;</span><br><span class="line">                    thisline = <span class="built_in">Math</span>.max(thisline, tempsize);</span><br><span class="line">                    <span class="keyword">var</span> iii = <span class="number">0</span>, jjj = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (iii = x0; iii &lt;= x0 + data[i][<span class="string">"word"</span>].length*<span class="number">0.5</span>*(+data[i][<span class="string">"SUM"</span>]); iii++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (jjj = y0; jjj &lt;= y0 + data[i][<span class="string">"word"</span>].length*(+data[i][<span class="string">"SUM"</span>]/<span class="number">5</span>); jjj++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((iii &lt;= width + <span class="number">10</span>) &amp;&amp; (jjj &lt;= height + <span class="number">10</span>))</span><br><span class="line">                                positionTaken[iii][jjj] = <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (iii = x0; iii &lt;= x0 + <span class="number">3</span>*(data[i][<span class="string">"word"</span>].length); iii++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (jjj = y0; jjj &lt;= y0 + <span class="number">8</span>; jjj++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((iii &lt;= width + <span class="number">10</span>) &amp;&amp; (jjj &lt;= height + <span class="number">10</span>))</span><br><span class="line">                                positionTaken[iii][jjj] = <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                svg.append(<span class="string">"text"</span>)</span><br><span class="line">                    .attr(<span class="string">"x"</span>, x0).attr(<span class="string">"y"</span>, y0)</span><br><span class="line">                    .text(data[i][<span class="string">"word"</span>])</span><br><span class="line">                    .style(<span class="string">"font-size"</span>, wordsize)</span><br><span class="line">                    .style(<span class="string">"fill"</span>, wordcolor)</span><br><span class="line">                    <span class="comment">//.attr("text-anchor", "start")</span></span><br><span class="line">                    .attr(<span class="string">"alignment-baseline"</span>, <span class="string">"central"</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (bigword == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> newdata = [];</span><br><span class="line">                    <span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; <span class="number">21</span>; j++) &#123;</span><br><span class="line">                        <span class="keyword">var</span> tempS = <span class="string">"S"</span>;</span><br><span class="line">                        tempS += j;</span><br><span class="line">                        <span class="keyword">if</span> (j &gt; <span class="number">1</span>)</span><br><span class="line">                            x += (tempsize*data[i][<span class="string">"word"</span>].length*<span class="number">0.5</span> / <span class="number">20</span>);</span><br><span class="line">                        <span class="keyword">var</span> y = tempsize/<span class="number">2</span> - (+data[i][tempS]);</span><br><span class="line">                        newdata.push(&#123;x, y&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//console.log(newdata);</span></span><br><span class="line">                    svg.append(<span class="string">"path"</span>)</span><br><span class="line">                        .attr(<span class="string">"d"</span>, lineFunc(newdata))</span><br><span class="line">                        .attr(<span class="string">"stroke"</span>, <span class="string">"#254170"</span>)</span><br><span class="line">                        .attr(<span class="string">"fill"</span>, <span class="string">"none"</span>);</span><br><span class="line"></span><br><span class="line">                    svg.append(<span class="string">"line"</span>)</span><br><span class="line">                        .attr(<span class="string">"x1"</span>, x0 + newdata[<span class="number">0</span>].x)</span><br><span class="line">                        .attr(<span class="string">"y1"</span>, y0 + tempsize/<span class="number">2</span>)</span><br><span class="line">                        .attr(<span class="string">"x2"</span>, x0 + newdata[<span class="number">19</span>].x)</span><br><span class="line">                        .attr(<span class="string">"y2"</span>, y0 + tempsize/<span class="number">2</span>)</span><br><span class="line">                        .attr(<span class="string">"stroke"</span>, <span class="string">"#254170"</span>)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> delta_x = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> ii = x0; ii &lt;= width; ii++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (positionTaken[ii][y0] == <span class="number">1</span>)</span><br><span class="line">                        delta_x++;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                x0 += delta_x;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (x0 &gt;= (width - margin.right)) &#123;</span><br><span class="line">                    x0 = margin.left;</span><br><span class="line">                    y0 += <span class="number">8</span>;</span><br><span class="line">                    <span class="comment">//if (thisline &gt; 0) &#123;</span></span><br><span class="line">                        <span class="comment">//y0 += (thisline/2 - 8);</span></span><br><span class="line">                        <span class="comment">//thisline = 0;</span></span><br><span class="line">                    <span class="comment">//&#125;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Sparkclouds&quot;&gt;&lt;a href=&quot;#Sparkclouds&quot; class=&quot;headerlink&quot; title=&quot;Sparkclouds&quot;&gt;&lt;/a&gt;Sparkclouds&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Visualization" scheme="co10.github.io/categories/Visualization/"/>
    
    
      <category term="HTML" scheme="co10.github.io/tags/HTML/"/>
    
      <category term="D3" scheme="co10.github.io/tags/D3/"/>
    
  </entry>
  
  <entry>
    <title>Force Directed Graph Layout</title>
    <link href="co10.github.io/2020/11/20/Force-Directed-Graph-Layout/"/>
    <id>co10.github.io/2020/11/20/Force-Directed-Graph-Layout/</id>
    <published>2020-11-20T07:30:48.000Z</published>
    <updated>2021-01-14T07:51:59.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Force-Directed-Graph-Layout"><a href="#Force-Directed-Graph-Layout" class="headerlink" title="Force Directed Graph Layout"></a>Force Directed Graph Layout</h1><a id="more"></a><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><h2 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h2><p>对于所有连接起来的相邻点，可把其当成一个整体，计算弹簧弹力的时候，可以只计算一个整体和另一个整体之间的弹簧弹力，然后再把这个力附加到每一个个体中。</p><p>同理计算斥力的时候也可取一堆点的平均分布，代替计算两点间的斥力。</p><p>我大概就只会这样了，不过计算斥力的时候我并没有用整体算。</p><p>计算力的时候，我把引力和弹簧弹力一起算的，用 <code>if</code> 判断是否需要计算弹力。</p><p>不考虑随机生成数据所用时间，算法的时间复杂度是 $O(n^2)$ 。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>有两层图，颜色浅的那层是初始数据，颜色深的是计算后的数据。</p><p>随机生成 200 个节点：</p><p><img src="https://i.loli.net/2020/11/29/3bl2ezqfxiRVnsa.png" alt="image.png"></p><p>随机生成 800 个节点：</p><p><img src="https://i.loli.net/2020/11/29/tiq7W18bGHkPXIa.png" alt="image.png"></p><h2 id="Play-amp-Have-Fun"><a href="#Play-amp-Have-Fun" class="headerlink" title="Play &amp; Have Fun"></a>Play &amp; Have Fun</h2><html>    <meta charset="utf-8">    <header>force directed graph</header>    <style>        #svgHolder {            position: relative        }        .svg2 {            position: absolute;            top: 0px;            left: 0px;        }    </style>    <body>    <label for="n_cnt">Nodes Count:</label>    <input type="number" id="n_cnt" name="n_cnt" value="60" min="30" max="1000">    <button type="button" onclick="update()">Generate</button><br><br>    <div id="svgHolder">        <svg id="svgOne" width="590" height="290"/>        <svg id="svgTwo" class="svg2" width="590" height="290"/>    </div>    <script>        var margin = {top: 10, right: 10, bottom: 10, left: 10},          width = 600 - margin.left - margin.right,          height = 300 - margin.top - margin.bottom;        var svgns = "http://www.w3.org/2000/svg";        var colorset1 = ['#FFADAD', '#FFC2A9', '#FFD6A5', '#FDFFB6', '#CAFFBF', '#9BF6FF', '#A0C4FF', '#BDB2FF', '#FFC6FF', '#FFFFFC'];        var colorset2 = ['#F94144', '#F3722C', '#F8961E', '#F9C74F', '#90BE6D', '#52838F', '#577590', '#7209B7', '#B5179E', '#EDF2F4'];        let o_nodes = [], nodes = [];        var node_cnt = 60, maxNodeX = width - 2, maxNodeY = height - 2;        var connect = [], con_fsx = [], con_fsy = [], con_fs = [];        var L = 50, K_r = 6250, K_s = 1, delta_t = 0.04;        var MAX_DIS_SQR = 50;// ???        gen_d();        draw_old();        cal_force();        update_position();        draw_new()        function update() {            document.getElementById('svgOne').innerHTML = "";            document.getElementById('svgTwo').innerHTML = "";            o_nodes.length = 0, nodes.length = 0, node_cnt = document.getElementById("n_cnt").value;            connect.length = 0, con_fsx.length = 0, con_fsy.length = 0, con_fs.length = 0;            gen_d();            draw_old();            cal_force();            update_position();            draw_new();        }        function update2(_l, _kr, _ks, _dt, _msd) {            document.getElementById('svgTwo').innerHTML = "";            if (_l != -1)                L = _l;            if (_kr != -1)                K_r = _kr;            if (_ks != -1)                K_s = _ks;            if (_dt != -1)                delta_t = _dt;            if (_msd != -1)                MAX_DIS_SQR = _msd;            con_fs.length = 0;            for (var i = 0; i < con_fsx.length; i++) {                for (var j = 0; j < con_fsx[i].length; j++) {                    con_fsx[i][j] = 0;                    con_fsy[i][j] = 0;                }            }            nodes.length = 0;            nodes = deepClone(o_nodes);            cal_force();            update_position();            draw_new();        }        function deepClone (obj) {            if (typeof obj !== 'object')                return obj;            if (!obj) // obj null                return obj;            if (obj instanceof Date)                return new Date(obj);            if (obj instanceof RegExp)                return new RegExp(obj);            if (obj instanceof Function)                return obj;            let newObj;            if (obj instanceof Array) {                newObj = [];                for(let i = 0, len = obj.length; i < len; i++)                    newObj.push(deepClone(obj[i]));                return newObj;            }            newObj = {};            for (let key in obj) {                if (obj.hasOwnProperty(key)) {                    if (typeof obj[key] !== 'object')                        newObj[key] = obj[key];                    else                        newObj[key] = deepClone(obj[key]);                }            }            return newObj;        }        // generate data....        function gen_d() {            var temp_cnt = 0, group = 0;            while (temp_cnt < node_cnt) {//max-min+1 +min                // generate nodes                var x0 = Math.floor(Math.random() * (maxNodeX - 1 + 1) ) + 1;                var y0 = Math.floor(Math.random() * (maxNodeY - 1 + 1) ) + 1;                var cnt1 = Math.floor(Math.random() * (15 - 2 + 1) ) + 2;                if (temp_cnt + cnt1 > node_cnt)                    cnt1 = node_cnt - temp_cnt;                var range_g = 50;                var Fr_x = 0, Fr_y = 0, Fs_x = 0, Fs_y = 0;                var x = x0, y = y0;                o_nodes[group] = new Array;                nodes[group] = new Array;                o_nodes[group].push({x,y,Fr_x,Fr_y,Fs_x,Fs_y});                nodes[group].push({x,y,Fr_x,Fr_y,Fs_x,Fs_y});                for (var i = 1; i < cnt1; i++) { // generate group nodes                    var dx = Math.floor(Math.random() * (range_g - 1 + 1) ) + 1;                    var dy = Math.floor(Math.random() * (range_g - 1 + 1) ) + 1;                    var x1 = x0 + dx, y1 = y0 + dy;                    var x2 = x0 - dx, y2 = y0 - dy;                    var x, y;                    if (x1 > maxNodeX || x1 < 0)                        x = x2;                    else x = x1;                    if (y1 > maxNodeY || y1 < 0)                        y = y2;                    else y = y1;                    o_nodes[group].push({x,y,Fr_x,Fr_y,Fs_x,Fs_y});                    nodes[group].push({x,y,Fr_x,Fr_y,Fs_x,Fs_y});                }                // generate connection                var con0 = [];                for (var i = 0; i < cnt1; i++) {                    con0[i] = new Array(cnt1);                    con0[i].fill(0, 0, cnt1);                }                for (var i = 0; i < cnt1 - 1; i++) {                    for (var j = i + 1; j < cnt1; j++) {                        var isconnected = Math.floor(Math.random() * 10);                        if (isconnected >= 6) {                            con0[i][j] = 1;                            con0[j][i] = 1;                        }                    }                }                connect.push(con0);                group++;                temp_cnt += cnt1;            }            var con1 = [];            for (var i = 0; i < group; i++) {                con1[i] = new Array(group);                con1[i].fill(0, 0, group);                con_fsx[i] = new Array(group);                con_fsx[i].fill(0, 0, group);                con_fsy[i] = new Array(group);                con_fsy[i].fill(0, 0, group);            }            for (var i = 0; i < group - 1; i++) {                var newCon = Math.floor(Math.random() * group - i) + i;                con1[newCon][i] = 1;                con1[i][newCon] = 1;                for (var j = i + 1; j < group; j++) {                    var isconnected = Math.floor(Math.random() * 10);                    if (isconnected >= 6) {                        con1[i][j] = 1;                        con1[j][i] = 1;                    }                }            }            connect.push(con1);            console.log("connected? : ", connect);            console.log("now get data: ", o_nodes);            console.log("copy nodes: ", nodes);        }        function cal_force() {            // repulsion force between all pairs            // if they are connected, calculate spring force            for (var i1 = 0; i1 < nodes.length; i1++) {                for (var i2 = 0; i2 < nodes[i1].length - 1; i2++) {                    var node1 = nodes[i1][i2];                    for(var j1 = i1; j1 < nodes.length; j1++) {                        for (var j2 = 0; j2 < nodes[j1].length; j2++) {                            if (j1 == i1 && j2 <= i2)                                continue;                            var node2 = nodes[j1][j2];                            var dx = node2.x - node1.x;                            var dy = node2.y - node1.y;                            if (dx != 0 || dy != 0) {                                var disSqu = dx*dx + dy*dy;                                var dis = Math.sqrt(disSqu);                                var force = K_r / disSqu;                                var fx = force * dx / dis;                                var fy = force * dy / dis;                                node1.Fr_x = node1.Fr_x - fx;                                node1.Fr_y = node1.Fr_y - fy;                                node2.Fr_x = node2.Fr_x + fx;                                node2.Fr_y = node2.Fr_y + fy;                                if (i1 == j1 && connect[i1][i2][j2] == 1) {                                    var force2 = K_s * (dis - L);                                    var fx2 = force2 * dx / dis;                                    var fy2 = force2 * dy / dis;                                    node1.Fs_x = node1.Fs_x + fx2;                                    node1.Fs_y = node1.Fs_y + fy2;                                    node2.Fs_x = node2.Fs_x - fx2;                                    node2.Fs_y = node2.Fs_y - fy2;                                }                                if (i2 == 0 && j2 == 0 && i1 != j1) {                                    if (connect[nodes.length][i1][j1] == 1) {                                        var force3 = K_s * (dis - L);                                        var fx3 = force3 * dx / dis;                                        var fy3 = force3 * dy / dis;                                        con_fsx[i1][j1] += fx3;                                        con_fsy[i1][j1] += fy3;                                        con_fsx[j1][i1] -= fx3;                                        con_fsy[j1][i1] -= fy3;                                    }                                }                                nodes[i1][i2] = node1;                                nodes[j1][j2] = node2;                            }                        }                    }                }            }            for (var i = 0; i < con_fsx.length; i++) {                var x = 0, y = 0;                for (var j = 0; j < con_fsx.length; j++) {                    x = x + con_fsx[i][j];                    y = y + con_fsy[i][j];                }                con_fs.push({x,y});            }        }        function update_position() {            for (var i1 = 0; i1 < nodes.length; i1++) {                for (var i2  = 0; i2 < nodes[i1].length; i2++) {                    var _node = nodes[i1][i2];                    var dx = delta_t * (_node.Fr_x + _node.Fs_x + con_fs[i1].x);                    var dy = delta_t * (_node.Fr_y + _node.Fs_y + con_fs[i1].y);                    var displacement_Sqr = dx*dx + dy*dy;                    if (displacement_Sqr > MAX_DIS_SQR) {                        var disS = Math.sqrt(MAX_DIS_SQR / displacement_Sqr);                        dx = dx * disS;                        dy = dy * disS;                    }                    _node.x = _node.x + dx;                    _node.y = _node.y + dy;                    nodes[i1][i2] = _node;                }            }            console.log("old & new nodes are here: ", o_nodes, nodes);        }        function draw_old() {            // draw line            for (var i = 0; i < connect.length; i++) {                var temp_con = connect[i];                for (var j = 0; j < temp_con.length - 1; j++) {                    for (var k = j + 1; k < temp_con.length; k++) {                        if (temp_con[j][k] == 1) {                            var x1, x2, y1, y2;                            var lineStroke = '#ffdab9';                            var lineLen = 0.5;                            if (i == connect.length - 1) {                                x1 = o_nodes[j][0].x, y1 = o_nodes[j][0].y;                                x2 = o_nodes[k][0].x, y2 = o_nodes[k][0].y;                                lineStroke = '#f08080';                                lineLen = 1.0;                            }                            else{                                x1 = o_nodes[i][j].x, y1 = o_nodes[i][j].y;                                x2 = o_nodes[i][k].x, y2 = o_nodes[i][k].y;                            }                            var line = document.createElementNS(svgns, 'line');                            line.setAttributeNS(null, 'x1', x1);                            line.setAttributeNS(null, 'x2', x2);                            line.setAttributeNS(null, 'y1', y1);                            line.setAttributeNS(null, 'y2', y2);                            line.setAttributeNS(null, 'stroke', lineStroke);                            line.setAttributeNS(null, 'stroke-width', lineLen);                            document.getElementById('svgOne').appendChild(line);                        }                    }                }            }            // draw circle            for (var i = 0; i < o_nodes.length; i++) {                for (j = 0; j < o_nodes[i].length; j++) {                    var getx = o_nodes[i][j].x;                    var gety = o_nodes[i][j].y;                    var circle = document.createElementNS(svgns, 'circle');                    circle.setAttributeNS(null, "cx", getx);                    circle.setAttributeNS(null, "cy", gety);                    circle.setAttributeNS(null, "r", 3);                    circle.setAttributeNS(null, "fill", colorset1[i % colorset1.length]);                    circle.setAttributeNS(null, "stroke", "none");                    document.getElementById('svgOne').appendChild(circle);                }            }        }        function draw_new() {            // draw line            for (var i = 0; i < connect.length; i++) {                var temp_con = connect[i];                for (var j = 0; j < temp_con.length - 1; j++) {                    for (var k = j + 1; k < temp_con.length; k++) {                        if (temp_con[j][k] == 1) {                            var x1, x2, y1, y2;                            var lineStroke = '#ffcad4';                            var lineLen = 1.0;                            if (i == connect.length - 1) {                                x1 = nodes[j][0].x, y1 = nodes[j][0].y;                                x2 = nodes[k][0].x, y2 = nodes[k][0].y;                                lineStroke = '#9e2a2b';                                lineLen = 1.5;                            }                            else{                                x1 = nodes[i][j].x, y1 = nodes[i][j].y;                                x2 = nodes[i][k].x, y2 = nodes[i][k].y;                            }                            var line = document.createElementNS(svgns, 'line');                            line.setAttributeNS(null, 'x1', x1);                            line.setAttributeNS(null, 'x2', x2);                            line.setAttributeNS(null, 'y1', y1);                            line.setAttributeNS(null, 'y2', y2);                            line.setAttributeNS(null, 'stroke', lineStroke);                            line.setAttributeNS(null, 'stroke-width', lineLen);                            document.getElementById('svgTwo').appendChild(line);                        }                    }                }            }            // draw circle            for (var i = 0; i < nodes.length; i++) {                for (j = 0; j < nodes[i].length; j++) {                    var getx = nodes[i][j].x;                    var gety = nodes[i][j].y;                    var circle = document.createElementNS(svgns, 'circle');                    circle.setAttributeNS(null, "cx", getx);                    circle.setAttributeNS(null, "cy", gety);                    circle.setAttributeNS(null, "r", 4.5);                    circle.setAttributeNS(null, "fill", colorset2[i % colorset2.length]);                    circle.setAttributeNS(null, "stroke", "none");                    document.getElementById('svgTwo').appendChild(circle);                }            }        }    </script>    <div class="slidecontainer" id="slidecon">        <label>L: </label>        <input type="range" min="10" max="1000" value="50" class="slider" id="s_L" oninput="document.getElementById('l_L').innerHTML = this.value" onchange="update2(this.value, -1, -1, -1, -1)">        <label id="l_L">50</label>        <br>        <label>K_s: </label>        <input type="range" min="100" max="10000" value="6250" class="slider" id="s_S" oninput="document.getElementById('l_S').innerHTML = this.value" onchange="update2(-1, this.value, -1, -1, -1)">        <label id="l_S">6250</label>        <br>        <label>K_r: </label>        <input type="range" min="0.01" max="5" value="1" step="0.01" class="slider" id="s_R" oninput="document.getElementById('l_R').innerHTML = this.value" onchange="update2(-1, -1, this.value, -1, -1)">        <label id="l_R">1</label>        <br>        <label>Δt: </label>        <input type="range" min="0.005" max="5.000" value="0.04" step="0.001" class="slider" id="s_T" oninput="document.getElementById('l_T').innerHTML = this.value" onchange="update2(-1, -1, -1, this.value, -1)">        <label id="l_T">0.04</label>        <br>        <label>MAX_DIS_SQR: </label>        <input type="range" min="10" max="200" value="50" class="slider" id="s_M" oninput="document.getElementById('l_M').innerHTML = this.value" onchange="update2(-1, -1, -1, -1, this.value)">        <label id="l_M">50</label>        <br>    </div>    </body></html><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;header&gt;force directed graph&lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        #svgHolder &#123;</span></span><br><span class="line"><span class="regexp">            position: relative</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .svg2 &#123;</span></span><br><span class="line"><span class="regexp">            position: absolute;</span></span><br><span class="line"><span class="regexp">            top: 0px;</span></span><br><span class="line"><span class="regexp">            left: 0px;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span> = <span class="string">"n_cnt"</span>&gt;Nodes Count:&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type = "number" id = "n_cnt" name = "n_cnt" value = "60" min = "30" max = "1000"&gt;&lt;/i</span>nput&gt;</span><br><span class="line">    &lt;button type = <span class="string">"button"</span> onclick = <span class="string">"update()"</span>&gt;Generate&lt;<span class="regexp">/button&gt;&lt;br&gt;&lt;/</span>br&gt;</span><br><span class="line">    &lt;div id = <span class="string">"svgHolder"</span>&gt;</span><br><span class="line">        &lt;svg id = <span class="string">"svgOne"</span> width =<span class="string">"1190"</span> height = <span class="string">"590"</span>&gt;&lt;<span class="regexp">/svg&gt;</span></span><br><span class="line"><span class="regexp">        &lt;svg id = "svgTwo" class = "svg2" width ="1190" height = "590"&gt;&lt;/</span>svg&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var margin = &#123;top: 10, right: 10, bottom: 10, left: 10&#125;,</span></span><br><span class="line"><span class="regexp">          width = 1200 - margin.left - margin.right,</span></span><br><span class="line"><span class="regexp">          height = 600 - margin.top - margin.bottom;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        var svgns = "http:/</span><span class="regexp">/www.w3.org/</span><span class="number">2000</span>/svg<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var colorset1 = ['#FFADAD', '#FFC2A9', '#FFD6A5', '#FDFFB6', '#CAFFBF', '#9BF6FF', '#A0C4FF', '#BDB2FF', '#FFC6FF', '#FFFFFC'];</span></span><br><span class="line"><span class="string">        var colorset2 = ['#F94144', '#F3722C', '#F8961E', '#F9C74F', '#90BE6D', '#52838F', '#577590', '#7209B7', '#B5179E', '#EDF2F4'];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        let o_nodes = [], nodes = [];</span></span><br><span class="line"><span class="string">        var node_cnt = 60, maxNodeX = width - 2, maxNodeY = height - 2;</span></span><br><span class="line"><span class="string">        var connect = [], con_fsx = [], con_fsy = [], con_fs = [];</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        var L = 50, K_r = 6250, K_s = 1, delta_t = 0.04;</span></span><br><span class="line"><span class="string">        var MAX_DIS_SQR = 50;// ???</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        gen_d();</span></span><br><span class="line"><span class="string">        draw_old();</span></span><br><span class="line"><span class="string">        cal_force();</span></span><br><span class="line"><span class="string">        update_position();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        draw_new()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        function update() &#123;</span></span><br><span class="line"><span class="string">            document.getElementById('svgOne').innerHTML = "</span><span class="string">";</span></span><br><span class="line"><span class="string">            document.getElementById('svgTwo').innerHTML = "</span><span class="string">";</span></span><br><span class="line"><span class="string">            o_nodes.length = 0, nodes.length = 0, node_cnt = document.getElementById("</span>n_cnt<span class="string">").value;</span></span><br><span class="line"><span class="string">            connect.length = 0, con_fsx.length = 0, con_fsy.length = 0, con_fs.length = 0;</span></span><br><span class="line"><span class="string">            gen_d();</span></span><br><span class="line"><span class="string">            draw_old();</span></span><br><span class="line"><span class="string">            cal_force();</span></span><br><span class="line"><span class="string">            update_position();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            draw_new();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        function update2(_l, _kr, _ks, _dt, _msd) &#123;</span></span><br><span class="line"><span class="string">            document.getElementById('svgTwo').innerHTML = "</span><span class="string">";</span></span><br><span class="line"><span class="string">            if (_l != -1)</span></span><br><span class="line"><span class="string">                L = _l;</span></span><br><span class="line"><span class="string">            if (_kr != -1)</span></span><br><span class="line"><span class="string">                K_r = _kr;</span></span><br><span class="line"><span class="string">            if (_ks != -1)</span></span><br><span class="line"><span class="string">                K_s = _ks;</span></span><br><span class="line"><span class="string">            if (_dt != -1)</span></span><br><span class="line"><span class="string">                delta_t = _dt;</span></span><br><span class="line"><span class="string">            if (_msd != -1)</span></span><br><span class="line"><span class="string">                MAX_DIS_SQR = _msd;</span></span><br><span class="line"><span class="string">            con_fs.length = 0;</span></span><br><span class="line"><span class="string">            for (var i = 0; i &lt; con_fsx.length; i++) &#123;</span></span><br><span class="line"><span class="string">                for (var j = 0; j &lt; con_fsx[i].length; j++) &#123;</span></span><br><span class="line"><span class="string">                    con_fsx[i][j] = 0;</span></span><br><span class="line"><span class="string">                    con_fsy[i][j] = 0;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            nodes.length = 0;</span></span><br><span class="line"><span class="string">            nodes = deepClone(o_nodes);</span></span><br><span class="line"><span class="string">               </span></span><br><span class="line"><span class="string">            cal_force();</span></span><br><span class="line"><span class="string">            update_position();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            draw_new();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        function deepClone (obj) &#123;</span></span><br><span class="line"><span class="string">            if (typeof obj !== 'object')</span></span><br><span class="line"><span class="string">                return obj;</span></span><br><span class="line"><span class="string">            if (!obj) // obj null</span></span><br><span class="line"><span class="string">                return obj;</span></span><br><span class="line"><span class="string">            if (obj instanceof Date)</span></span><br><span class="line"><span class="string">                return new Date(obj);</span></span><br><span class="line"><span class="string">            if (obj instanceof RegExp)</span></span><br><span class="line"><span class="string">                return new RegExp(obj);</span></span><br><span class="line"><span class="string">            if (obj instanceof Function)</span></span><br><span class="line"><span class="string">                return obj;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            let newObj;</span></span><br><span class="line"><span class="string">            if (obj instanceof Array) &#123;</span></span><br><span class="line"><span class="string">                newObj = [];</span></span><br><span class="line"><span class="string">                for(let i = 0, len = obj.length; i &lt; len; i++)</span></span><br><span class="line"><span class="string">                    newObj.push(deepClone(obj[i]));</span></span><br><span class="line"><span class="string">                return newObj;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            newObj = &#123;&#125;;</span></span><br><span class="line"><span class="string">            for (let key in obj) &#123;</span></span><br><span class="line"><span class="string">                if (obj.hasOwnProperty(key)) &#123;</span></span><br><span class="line"><span class="string">                    if (typeof obj[key] !== 'object')</span></span><br><span class="line"><span class="string">                        newObj[key] = obj[key];</span></span><br><span class="line"><span class="string">                    else</span></span><br><span class="line"><span class="string">                        newObj[key] = deepClone(obj[key]);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            return newObj;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // generate data....</span></span><br><span class="line"><span class="string">        function gen_d() &#123;</span></span><br><span class="line"><span class="string">            var temp_cnt = 0, group = 0;</span></span><br><span class="line"><span class="string">            while (temp_cnt &lt; node_cnt) &#123;//max-min+1 +min</span></span><br><span class="line"><span class="string">                // generate nodes</span></span><br><span class="line"><span class="string">                var x0 = Math.floor(Math.random() * (maxNodeX - 1 + 1) ) + 1;</span></span><br><span class="line"><span class="string">                var y0 = Math.floor(Math.random() * (maxNodeY - 1 + 1) ) + 1;</span></span><br><span class="line"><span class="string">                var cnt1 = Math.floor(Math.random() * (15 - 2 + 1) ) + 2;</span></span><br><span class="line"><span class="string">                if (temp_cnt + cnt1 &gt; node_cnt)</span></span><br><span class="line"><span class="string">                    cnt1 = node_cnt - temp_cnt;</span></span><br><span class="line"><span class="string">                var range_g = 50;</span></span><br><span class="line"><span class="string">                var Fr_x = 0, Fr_y = 0, Fs_x = 0, Fs_y = 0;</span></span><br><span class="line"><span class="string">                var x = x0, y = y0;</span></span><br><span class="line"><span class="string">                o_nodes[group] = new Array;</span></span><br><span class="line"><span class="string">                nodes[group] = new Array;</span></span><br><span class="line"><span class="string">                o_nodes[group].push(&#123;x,y,Fr_x,Fr_y,Fs_x,Fs_y&#125;);</span></span><br><span class="line"><span class="string">                nodes[group].push(&#123;x,y,Fr_x,Fr_y,Fs_x,Fs_y&#125;);</span></span><br><span class="line"><span class="string">                for (var i = 1; i &lt; cnt1; i++) &#123; // generate group nodes</span></span><br><span class="line"><span class="string">                    var dx = Math.floor(Math.random() * (range_g - 1 + 1) ) + 1;</span></span><br><span class="line"><span class="string">                    var dy = Math.floor(Math.random() * (range_g - 1 + 1) ) + 1;</span></span><br><span class="line"><span class="string">                    var x1 = x0 + dx, y1 = y0 + dy;</span></span><br><span class="line"><span class="string">                    var x2 = x0 - dx, y2 = y0 - dy;</span></span><br><span class="line"><span class="string">                    var x, y;</span></span><br><span class="line"><span class="string">                    if (x1 &gt; maxNodeX || x1 &lt; 0)</span></span><br><span class="line"><span class="string">                        x = x2;</span></span><br><span class="line"><span class="string">                    else x = x1;</span></span><br><span class="line"><span class="string">                    if (y1 &gt; maxNodeY || y1 &lt; 0)</span></span><br><span class="line"><span class="string">                        y = y2;</span></span><br><span class="line"><span class="string">                    else y = y1;</span></span><br><span class="line"><span class="string">                    o_nodes[group].push(&#123;x,y,Fr_x,Fr_y,Fs_x,Fs_y&#125;);</span></span><br><span class="line"><span class="string">                    nodes[group].push(&#123;x,y,Fr_x,Fr_y,Fs_x,Fs_y&#125;);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                // generate connection</span></span><br><span class="line"><span class="string">                var con0 = [];</span></span><br><span class="line"><span class="string">                for (var i = 0; i &lt; cnt1; i++) &#123;</span></span><br><span class="line"><span class="string">                    con0[i] = new Array(cnt1);</span></span><br><span class="line"><span class="string">                    con0[i].fill(0, 0, cnt1);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                for (var i = 0; i &lt; cnt1 - 1; i++) &#123;</span></span><br><span class="line"><span class="string">                    for (var j = i + 1; j &lt; cnt1; j++) &#123;</span></span><br><span class="line"><span class="string">                        var isconnected = Math.floor(Math.random() * 10);</span></span><br><span class="line"><span class="string">                        if (isconnected &gt;= 6) &#123;</span></span><br><span class="line"><span class="string">                            con0[i][j] = 1;</span></span><br><span class="line"><span class="string">                            con0[j][i] = 1;</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                connect.push(con0);</span></span><br><span class="line"><span class="string">                group++;</span></span><br><span class="line"><span class="string">                temp_cnt += cnt1;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            var con1 = [];</span></span><br><span class="line"><span class="string">            for (var i = 0; i &lt; group; i++) &#123;</span></span><br><span class="line"><span class="string">                con1[i] = new Array(group);</span></span><br><span class="line"><span class="string">                con1[i].fill(0, 0, group);</span></span><br><span class="line"><span class="string">                con_fsx[i] = new Array(group);</span></span><br><span class="line"><span class="string">                con_fsx[i].fill(0, 0, group);</span></span><br><span class="line"><span class="string">                con_fsy[i] = new Array(group);</span></span><br><span class="line"><span class="string">                con_fsy[i].fill(0, 0, group);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            for (var i = 0; i &lt; group - 1; i++) &#123;</span></span><br><span class="line"><span class="string">                var newCon = Math.floor(Math.random() * group - i) + i;</span></span><br><span class="line"><span class="string">                con1[newCon][i] = 1;</span></span><br><span class="line"><span class="string">                con1[i][newCon] = 1;</span></span><br><span class="line"><span class="string">                for (var j = i + 1; j &lt; group; j++) &#123;</span></span><br><span class="line"><span class="string">                    var isconnected = Math.floor(Math.random() * 10);</span></span><br><span class="line"><span class="string">                    if (isconnected &gt;= 6) &#123;</span></span><br><span class="line"><span class="string">                        con1[i][j] = 1;</span></span><br><span class="line"><span class="string">                        con1[j][i] = 1;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            connect.push(con1);</span></span><br><span class="line"><span class="string">            console.log("</span>connected? : <span class="string">", connect);</span></span><br><span class="line"><span class="string">            console.log("</span>now <span class="keyword">get</span> data: ", o_nodes);</span><br><span class="line">            console.log("copy nodes: ", nodes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function cal_force() &#123;</span><br><span class="line">            <span class="comment">// repulsion force between all pairs</span></span><br><span class="line">            <span class="comment">// if they are connected, calculate spring force</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i1 = <span class="number">0</span>; i1 &lt; nodes.length; i1++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i2 = <span class="number">0</span>; i2 &lt; nodes[i1].length - <span class="number">1</span>; i2++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> node1 = nodes[i1][i2];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> j1 = i1; j1 &lt; nodes.length; j1++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> j2 = <span class="number">0</span>; j2 &lt; nodes[j1].length; j2++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (j1 == i1 &amp;&amp; j2 &lt;= i2)</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            <span class="keyword">var</span> node2 = nodes[j1][j2];</span><br><span class="line">                            <span class="keyword">var</span> dx = node2.x - node1.x;</span><br><span class="line">                            <span class="keyword">var</span> dy = node2.y - node1.y;</span><br><span class="line">                            <span class="keyword">if</span> (dx != <span class="number">0</span> || dy != <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">var</span> disSqu = dx*dx + dy*dy;</span><br><span class="line">                                <span class="keyword">var</span> dis = <span class="built_in">Math</span>.sqrt(disSqu);</span><br><span class="line">                                <span class="keyword">var</span> force = K_r / disSqu;</span><br><span class="line">                                <span class="keyword">var</span> fx = force * dx / dis;</span><br><span class="line">                                <span class="keyword">var</span> fy = force * dy / dis;</span><br><span class="line">                                node1.Fr_x = node1.Fr_x - fx;</span><br><span class="line">                                node1.Fr_y = node1.Fr_y - fy;</span><br><span class="line">                                node2.Fr_x = node2.Fr_x + fx;</span><br><span class="line">                                node2.Fr_y = node2.Fr_y + fy;</span><br><span class="line">                                <span class="keyword">if</span> (i1 == j1 &amp;&amp; connect[i1][i2][j2] == <span class="number">1</span>) &#123;</span><br><span class="line">                                    <span class="keyword">var</span> force2 = K_s * (dis - L);</span><br><span class="line">                                    <span class="keyword">var</span> fx2 = force2 * dx / dis;</span><br><span class="line">                                    <span class="keyword">var</span> fy2 = force2 * dy / dis;</span><br><span class="line">                                    node1.Fs_x = node1.Fs_x + fx2;</span><br><span class="line">                                    node1.Fs_y = node1.Fs_y + fy2;</span><br><span class="line">                                    node2.Fs_x = node2.Fs_x - fx2;</span><br><span class="line">                                    node2.Fs_y = node2.Fs_y - fy2;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (i2 == <span class="number">0</span> &amp;&amp; j2 == <span class="number">0</span> &amp;&amp; i1 != j1) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (connect[nodes.length][i1][j1] == <span class="number">1</span>) &#123;</span><br><span class="line">                                        <span class="keyword">var</span> force3 = K_s * (dis - L);</span><br><span class="line">                                        <span class="keyword">var</span> fx3 = force3 * dx / dis;</span><br><span class="line">                                        <span class="keyword">var</span> fy3 = force3 * dy / dis;</span><br><span class="line">                                        con_fsx[i1][j1] += fx3;</span><br><span class="line">                                        con_fsy[i1][j1] += fy3;</span><br><span class="line">                                        con_fsx[j1][i1] -= fx3;</span><br><span class="line">                                        con_fsy[j1][i1] -= fy3;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                nodes[i1][i2] = node1;</span><br><span class="line">                                nodes[j1][j2] = node2;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; con_fsx.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; con_fsx.length; j++) &#123;</span><br><span class="line">                    x = x + con_fsx[i][j];</span><br><span class="line">                    y = y + con_fsy[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">                con_fs.push(&#123;x,y&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">update_position</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i1 = <span class="number">0</span>; i1 &lt; nodes.length; i1++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i2  = <span class="number">0</span>; i2 &lt; nodes[i1].length; i2++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> _node = nodes[i1][i2];</span><br><span class="line">                    <span class="keyword">var</span> dx = delta_t * (_node.Fr_x + _node.Fs_x + con_fs[i1].x);</span><br><span class="line">                    <span class="keyword">var</span> dy = delta_t * (_node.Fr_y + _node.Fs_y + con_fs[i1].y);</span><br><span class="line">                    <span class="keyword">var</span> displacement_Sqr = dx*dx + dy*dy;</span><br><span class="line">                    <span class="keyword">if</span> (displacement_Sqr &gt; MAX_DIS_SQR) &#123;</span><br><span class="line">                        <span class="keyword">var</span> disS = <span class="built_in">Math</span>.sqrt(MAX_DIS_SQR / displacement_Sqr);</span><br><span class="line">                        dx = dx * disS;</span><br><span class="line">                        dy = dy * disS;</span><br><span class="line">                    &#125;</span><br><span class="line">                    _node.x = _node.x + dx;</span><br><span class="line">                    _node.y = _node.y + dy;</span><br><span class="line">                    nodes[i1][i2] = _node;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"old &amp; new nodes are here: "</span>, o_nodes, nodes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">draw_old</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// draw line</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; connect.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp_con = connect[i];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; temp_con.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> k = j + <span class="number">1</span>; k &lt; temp_con.length; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (temp_con[j][k] == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">var</span> x1, x2, y1, y2;</span><br><span class="line">                            <span class="keyword">var</span> lineStroke = <span class="string">'#ffdab9'</span>;</span><br><span class="line">                            <span class="keyword">var</span> lineLen = <span class="number">0.5</span>;</span><br><span class="line">                            <span class="keyword">if</span> (i == connect.length - <span class="number">1</span>) &#123;</span><br><span class="line">                                x1 = o_nodes[j][<span class="number">0</span>].x, y1 = o_nodes[j][<span class="number">0</span>].y;</span><br><span class="line">                                x2 = o_nodes[k][<span class="number">0</span>].x, y2 = o_nodes[k][<span class="number">0</span>].y;</span><br><span class="line">                                lineStroke = <span class="string">'#f08080'</span>;</span><br><span class="line">                                lineLen = <span class="number">1.0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span>&#123;</span><br><span class="line">                                x1 = o_nodes[i][j].x, y1 = o_nodes[i][j].y;</span><br><span class="line">                                x2 = o_nodes[i][k].x, y2 = o_nodes[i][k].y;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">var</span> line = <span class="built_in">document</span>.createElementNS(svgns, <span class="string">'line'</span>);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'x1'</span>, x1);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'x2'</span>, x2);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'y1'</span>, y1);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'y2'</span>, y2);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'stroke'</span>, lineStroke);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'stroke-width'</span>, lineLen);</span><br><span class="line">                            <span class="built_in">document</span>.getElementById(<span class="string">'svgOne'</span>).appendChild(line);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// draw circle</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; o_nodes.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; o_nodes[i].length; j++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> getx = o_nodes[i][j].x;</span><br><span class="line">                    <span class="keyword">var</span> gety = o_nodes[i][j].y;</span><br><span class="line">                    <span class="keyword">var</span> circle = <span class="built_in">document</span>.createElementNS(svgns, <span class="string">'circle'</span>);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"cx"</span>, getx);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"cy"</span>, gety);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"r"</span>, <span class="number">3</span>);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"fill"</span>, colorset1[i % colorset1.length]);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"stroke"</span>, <span class="string">"none"</span>);</span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">'svgOne'</span>).appendChild(circle);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">draw_new</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// draw line</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; connect.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp_con = connect[i];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; temp_con.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> k = j + <span class="number">1</span>; k &lt; temp_con.length; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (temp_con[j][k] == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">var</span> x1, x2, y1, y2;</span><br><span class="line">                            <span class="keyword">var</span> lineStroke = <span class="string">'#ffcad4'</span>;</span><br><span class="line">                            <span class="keyword">var</span> lineLen = <span class="number">1.0</span>;</span><br><span class="line">                            <span class="keyword">if</span> (i == connect.length - <span class="number">1</span>) &#123;</span><br><span class="line">                                x1 = nodes[j][<span class="number">0</span>].x, y1 = nodes[j][<span class="number">0</span>].y;</span><br><span class="line">                                x2 = nodes[k][<span class="number">0</span>].x, y2 = nodes[k][<span class="number">0</span>].y;</span><br><span class="line">                                lineStroke = <span class="string">'#9e2a2b'</span>;</span><br><span class="line">                                lineLen = <span class="number">1.5</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span>&#123;</span><br><span class="line">                                x1 = nodes[i][j].x, y1 = nodes[i][j].y;</span><br><span class="line">                                x2 = nodes[i][k].x, y2 = nodes[i][k].y;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">var</span> line = <span class="built_in">document</span>.createElementNS(svgns, <span class="string">'line'</span>);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'x1'</span>, x1);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'x2'</span>, x2);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'y1'</span>, y1);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'y2'</span>, y2);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'stroke'</span>, lineStroke);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'stroke-width'</span>, lineLen);</span><br><span class="line">                            <span class="built_in">document</span>.getElementById(<span class="string">'svgTwo'</span>).appendChild(line);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// draw circle</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; nodes[i].length; j++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> getx = nodes[i][j].x;</span><br><span class="line">                    <span class="keyword">var</span> gety = nodes[i][j].y;</span><br><span class="line">                    <span class="keyword">var</span> circle = <span class="built_in">document</span>.createElementNS(svgns, <span class="string">'circle'</span>);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"cx"</span>, getx);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"cy"</span>, gety);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"r"</span>, <span class="number">4.5</span>);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"fill"</span>, colorset2[i % colorset2.length]);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"stroke"</span>, <span class="string">"none"</span>);</span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">'svgTwo'</span>).appendChild(circle);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class = "slidecontainer" id = "slidecon"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;label&gt;L: &lt;/</span>label&gt;</span><br><span class="line">        &lt;input type = <span class="string">"range"</span> min = <span class="string">"10"</span> max=<span class="string">"1000"</span> value = <span class="string">"50"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"slider"</span></span><br><span class="line">            id = <span class="string">"s_L"</span> oninput = <span class="string">"document.getElementById('l_L').innerHTML = this.value"</span></span><br><span class="line">            onchange = <span class="string">"update2(this.value, -1, -1, -1, -1)"</span> /&gt;</span><br><span class="line">        &lt;label id = <span class="string">"l_L"</span>&gt;<span class="number">50</span>&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br&gt;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        &lt;label&gt;K_s: &lt;/</span>label&gt;</span><br><span class="line">        &lt;input type = <span class="string">"range"</span> min = <span class="string">"100"</span> max=<span class="string">"10000"</span> value = <span class="string">"6250"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"slider"</span></span><br><span class="line">            id = <span class="string">"s_S"</span> oninput = <span class="string">"document.getElementById('l_S').innerHTML = this.value"</span></span><br><span class="line">            onchange = <span class="string">"update2(-1, this.value, -1, -1, -1)"</span> /&gt;</span><br><span class="line">        &lt;label id = <span class="string">"l_S"</span>&gt;<span class="number">6250</span>&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;label&gt;K_r: &lt;/</span>label&gt;</span><br><span class="line">        &lt;input type = <span class="string">"range"</span> min = <span class="string">"0.01"</span> max=<span class="string">"5"</span> value = <span class="string">"1"</span> step = <span class="string">"0.01"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"slider"</span></span><br><span class="line">            id = <span class="string">"s_R"</span> oninput = <span class="string">"document.getElementById('l_R').innerHTML = this.value"</span></span><br><span class="line">            onchange = <span class="string">"update2(-1, -1, this.value, -1, -1)"</span> /&gt;</span><br><span class="line">        &lt;label id = <span class="string">"l_R"</span>&gt;<span class="number">1</span>&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;label&gt;Δt: &lt;/</span>label&gt;</span><br><span class="line">        &lt;input type = <span class="string">"range"</span> min = <span class="string">"0.005"</span> max=<span class="string">"5.000"</span> value = <span class="string">"0.04"</span> step = <span class="string">"0.001"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"slider"</span></span><br><span class="line">            id = <span class="string">"s_T"</span> oninput = <span class="string">"document.getElementById('l_T').innerHTML = this.value"</span></span><br><span class="line">            onchange = <span class="string">"update2(-1, -1, -1, this.value, -1)"</span> /&gt;</span><br><span class="line">        &lt;label id = <span class="string">"l_T"</span>&gt;<span class="number">0.04</span>&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;label&gt;MAX_DIS_SQR: &lt;/</span>label&gt;</span><br><span class="line">        &lt;input type = <span class="string">"range"</span> min = <span class="string">"10"</span> max=<span class="string">"200"</span> value = <span class="string">"50"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"slider"</span></span><br><span class="line">            id = <span class="string">"s_M"</span> oninput = <span class="string">"document.getElementById('l_M').innerHTML = this.value"</span></span><br><span class="line">            onchange = <span class="string">"update2(-1, -1, -1, -1, this.value)"</span> /&gt;</span><br><span class="line">        &lt;label id = <span class="string">"l_M"</span>&gt;<span class="number">50</span>&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Force-Directed-Graph-Layout&quot;&gt;&lt;a href=&quot;#Force-Directed-Graph-Layout&quot; class=&quot;headerlink&quot; title=&quot;Force Directed Graph Layout&quot;&gt;&lt;/a&gt;Force Directed Graph Layout&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Visualization" scheme="co10.github.io/categories/Visualization/"/>
    
    
      <category term="HTML" scheme="co10.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Squarified Treemap</title>
    <link href="co10.github.io/2020/11/13/Squarified-Treemap/"/>
    <id>co10.github.io/2020/11/13/Squarified-Treemap/</id>
    <published>2020-11-13T07:27:59.000Z</published>
    <updated>2021-01-14T07:30:14.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Squarified-Treemap"><a href="#Squarified-Treemap" class="headerlink" title="Squarified Treemap"></a>Squarified Treemap</h1><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">procedure squarify(list of real children, list of real row, real w)</span><br><span class="line">begin</span><br><span class="line">real c = head(children);</span><br><span class="line"><span class="keyword">if</span> worst(row, w)  worst(row++[c], w) then</span><br><span class="line">squarify(tail(children), row++[c], w)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">layoutrow(row);</span><br><span class="line">squarify(children, [], width());</span><br><span class="line">fi</span><br><span class="line">end</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><img src="https://www.researchgate.net/profile/Fernando_Marson3/publication/47696530/figure/fig13/AS:325701468213287@1454664689810/Example-of-squarified-treemap-process-6.png" alt="img-001"></p><p>如图所示，数据为 <code>[6, 6, 4, 3, 2, 2, 1]</code> , <code>sum = 24 = 6 * 4</code> 所以 treemap 可用 $6×4$ 的矩形表示。</p><ol><li>放入 6，优先靠着短边放，比例为 <code>4:1.5</code>， 标记灰色(表示可更改)。</li><li>放入 6，测试与原先放置的 6 堆叠，靠着短边放，所得 2 个 $2×3$ 的矩形，<code>长边:短边=3:2</code> ，小于 <code>4:1.5</code> 的放置方式。可取，同时加入灰色标记。</li><li>放入 4， 如 Step 3 所示，<code>max(长边:短边) in step3</code> &gt; <code>max(长边:短边) in step 4</code> ，故采取 Step 4 的放置方式，同时把原先标记灰色的部分画出来，标记白色(表示不可更改)。灰色清空，新加入的 4 标记灰色。</li><li>循环方式如前述，最后把剩余空间填满。</li></ol><p>代码采用递归，判断思路如上。</p><h2 id="Major-function-code-of-the-Algorithm"><a href="#Major-function-code-of-the-Algorithm" class="headerlink" title="Major function code of the Algorithm"></a>Major function code of the Algorithm</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">squarify</span>(<span class="params">children, modifiable, w, h, sum, m_area</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//console.log("current in: ",children[0], modifiable);</span></span><br><span class="line">            <span class="keyword">if</span>(children.length === <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"quit"</span>);</span><br><span class="line">                <span class="keyword">var</span> to_right = modifiable[<span class="number">0</span>].verti;</span><br><span class="line">                draw(modifiable, to_right);<span class="comment">// ..............</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> c = children.shift();</span><br><span class="line">            <span class="keyword">var</span> _area = c, _wid, _hei, verti;</span><br><span class="line">            <span class="keyword">if</span>(modifiable.length === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//console.log("case 0");</span></span><br><span class="line">                m_area += c;</span><br><span class="line">                <span class="keyword">if</span>(w &lt;= h) &#123;<span class="comment">// vertical set</span></span><br><span class="line">                    _wid = w;</span><br><span class="line">                    verti = <span class="literal">true</span>;</span><br><span class="line">                    _hei = c / _wid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="comment">// horizontal set</span></span><br><span class="line">                    _hei = h;</span><br><span class="line">                    _wid = c / _hei;</span><br><span class="line">                    verti = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                squarify(children,modifiable,w,h,sum, m_area);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//case 1</span></span><br><span class="line">                <span class="keyword">var</span> leftover = sum - m_area;</span><br><span class="line">                <span class="keyword">var</span> neww, newh;</span><br><span class="line">                <span class="keyword">if</span> (w &gt; h) &#123;</span><br><span class="line">                    neww = leftover / h;</span><br><span class="line">                    newh = h;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    neww = w;</span><br><span class="line">                    newh = leftover / w;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (neww &lt;= newh)&#123;<span class="comment">// vertical set</span></span><br><span class="line">                    _wid = neww;</span><br><span class="line">                    _hei = c / _wid;</span><br><span class="line">                    verti = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">// horizontal set</span></span><br><span class="line">                    _wid = c / newh;</span><br><span class="line">                    _hei = newh;</span><br><span class="line">                    verti= <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//console.log("w,h",_wid,_hei);</span></span><br><span class="line">                <span class="keyword">var</span> temp1 = <span class="built_in">Math</span>.max(_wid,_hei)/<span class="built_in">Math</span>.min(_wid,_hei);<span class="comment">// put in new area</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// case 2</span></span><br><span class="line">                <span class="keyword">var</span> temp_area = m_area + c;<span class="comment">// else include in old area</span></span><br><span class="line">                <span class="keyword">var</span> w1, h1, temp2;</span><br><span class="line">                <span class="keyword">if</span>(w &gt; h) &#123;</span><br><span class="line">                    w1 = temp_area / h;</span><br><span class="line">                    h1 = h;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    w1 = w;</span><br><span class="line">                    h1 = temp_area / w;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(w1 &lt;= h1)&#123;<span class="comment">// stack up, width is the same</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"current 1"</span>, w1, h1);</span><br><span class="line">                    temp2 = <span class="built_in">Math</span>.max(w1,c/w1)/<span class="built_in">Math</span>.min(w1,c/w1);<span class="comment">// put in old area, w1/(c/w1), wid:hei</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)</span><br><span class="line">                        temp2 = <span class="built_in">Math</span>.max(temp2, <span class="built_in">Math</span>.max(w1,modifiable[i]._area/w1)/<span class="built_in">Math</span>.min(w1,modifiable[i]._area/w1));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">//stack right, height is the same</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"current 2"</span>, w1, h1);</span><br><span class="line">                    temp2 = <span class="built_in">Math</span>.max(h1,c/h1)/<span class="built_in">Math</span>.min(h1,c/h1);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)</span><br><span class="line">                        temp2 = <span class="built_in">Math</span>.max(temp2, <span class="built_in">Math</span>.max(modifiable[i]._area/h1,h1)/<span class="built_in">Math</span>.min(modifiable[i]._area/h1,h1));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//console.log("t1,t2",temp1,temp2);</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// case 1</span></span><br><span class="line">                <span class="keyword">if</span> (temp1 &lt;= temp2)&#123;<span class="comment">// clear all modifiable, draw</span></span><br><span class="line">                    <span class="comment">//console.log("case 1");</span></span><br><span class="line">                    <span class="keyword">var</span> to_right = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(w &lt;= h)</span><br><span class="line">                        to_right = <span class="literal">false</span>;</span><br><span class="line">                    draw(modifiable, to_right);<span class="comment">// ..............</span></span><br><span class="line">                    </span><br><span class="line">                    modifiable = [];<span class="comment">//clear it</span></span><br><span class="line">                    modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                    squarify(children,modifiable,neww,newh,sum-m_area,_area);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//case 2</span></span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">// put in modifiable</span></span><br><span class="line">                    <span class="comment">//console.log("case 2");</span></span><br><span class="line">                    <span class="keyword">if</span>(w &gt; h)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)&#123;</span><br><span class="line">                            <span class="keyword">var</span> cur_area = modifiable[i]._area;</span><br><span class="line">                            <span class="keyword">var</span> h_tem = cur_area / w1;</span><br><span class="line">                            modifiable[i]._wid = w1;</span><br><span class="line">                            modifiable[i]._hei = h_tem;</span><br><span class="line">                            modifiable[i].verti = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        _wid = w1;</span><br><span class="line">                        _hei = c / _wid;</span><br><span class="line">                        verti = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)&#123;</span><br><span class="line">                            <span class="keyword">var</span> cur_area = modifiable[i]._area;</span><br><span class="line">                            <span class="keyword">var</span> w_tem = cur_area / h1;</span><br><span class="line">                            modifiable[i]._wid = w_tem;</span><br><span class="line">                            modifiable[i]._hei = h1;</span><br><span class="line">                            modifiable[i].verti = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        _wid = c / h1;</span><br><span class="line">                        _hei = h1;</span><br><span class="line">                        verti = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                    m_area += c;</span><br><span class="line">                    squarify(children,modifiable,w,h,sum,m_area);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>数据采用 <code>javascript</code> 的 <code>Math.random()</code> 随机生成，个数为 10 ，范围 1 到 100 。(可是这个函数生成的随机数不太随机……)</p><p>整体 Treemap 的长宽比固定为 3:2 ，其中一个生成效果图如下：</p><p><img src="https://i.loli.net/2020/11/22/lBhtcrIbQzq6Nf9.png" alt="image.png"></p><p>有点问题就是，如果随机生成的这些数十分接近的话，会变成堆叠的长矩形……</p><p><img src="https://i.loli.net/2020/11/22/aFRp5SKOoCrzjyi.png" alt="image.png"></p><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;header&gt;treemap&lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;svg id="svgOne" viewBox="0 0 610 410" xmlns="http:/</span><span class="regexp">/www.w3.org/</span><span class="number">2000</span>/svg<span class="string">"&gt;&lt;/svg&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        var margin = &#123;top: 10, right: 10, bottom: 10, left: 10&#125;,</span></span><br><span class="line"><span class="string">          width = 600 - margin.left - margin.right,</span></span><br><span class="line"><span class="string">          height = 400 - margin.top - margin.bottom;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var last_vert = true, beginx = margin.left, beginy = margin.top;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var colori = 0;</span></span><br><span class="line"><span class="string">        var colorset = ['#ABDE9C','#5EAC39', '#688F30', '#256E4B', '#285D77', '#3A6CAD', '#489CC2',</span></span><br><span class="line"><span class="string">        '#D4A77F', '#E1CBA6', '#EBECC6', '#E3F2D8', '#EDC9DB', '#CFB5E6', '#ADA8E2'];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var randtimes = 10, maxrand = 100;</span></span><br><span class="line"><span class="string">        var data = [];</span></span><br><span class="line"><span class="string">        for(var i = 0; i &lt; randtimes; i++)</span></span><br><span class="line"><span class="string">            data.push(Math.floor((Math.random() * maxrand) + 1));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //var data = [2, 4, 23, 33, 69, 90, 54, 22, 61, 34, 32];</span></span><br><span class="line"><span class="string">        data.sort(function(a, b)&#123;return b - a&#125;);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        var sum = data.reduce(function(a, b)&#123; return a + b; &#125;, 0);</span></span><br><span class="line"><span class="string">        console.log("</span>data, sum<span class="string">", data, sum);</span></span><br><span class="line"><span class="string">        //var tempsum = prime_factor(sum);</span></span><br><span class="line"><span class="string">        //console.log("</span>tempsum<span class="string">", tempsum);</span></span><br><span class="line"><span class="string">        var tmpd = Math.sqrt(sum / 6);</span></span><br><span class="line"><span class="string">        var ori_w = 3 * tmpd, ori_h = 2 * tmpd;</span></span><br><span class="line"><span class="string">        console.log("</span>original wid, <span class="attr">hei</span>: <span class="string">", ori_w, ori_h);</span></span><br><span class="line"><span class="string">        var svgns = "</span>http:<span class="comment">//www.w3.org/2000/svg";</span></span><br><span class="line"></span><br><span class="line">        squarify(data,[],ori_w,ori_h,sum,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">drawRect</span>(<span class="params">x1, y1, w, h, area</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> rect = <span class="built_in">document</span>.createElementNS(svgns, <span class="string">'rect'</span>);</span><br><span class="line">            rect.setAttributeNS(<span class="literal">null</span>, <span class="string">'x'</span>, x1);</span><br><span class="line">            rect.setAttributeNS(<span class="literal">null</span>, <span class="string">'y'</span>, y1);</span><br><span class="line">            rect.setAttributeNS(<span class="literal">null</span>, <span class="string">'height'</span>, h - <span class="number">1</span>);</span><br><span class="line">            rect.setAttributeNS(<span class="literal">null</span>, <span class="string">'width'</span>, w - <span class="number">1</span>);</span><br><span class="line">            rect.setAttributeNS(<span class="literal">null</span>, <span class="string">'fill'</span>, colorset[colori]);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'svgOne'</span>).appendChild(rect);</span><br><span class="line"></span><br><span class="line">            colori++;</span><br><span class="line">            colori%=colorset.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> newText = <span class="built_in">document</span>.createElementNS(svgns,<span class="string">"text"</span>);</span><br><span class="line">            newText.setAttributeNS(<span class="literal">null</span>,<span class="string">"x"</span>,x1+w/<span class="number">2</span><span class="number">-1</span>);     </span><br><span class="line">            newText.setAttributeNS(<span class="literal">null</span>,<span class="string">"y"</span>,y1+h/<span class="number">2</span><span class="number">-1</span>); </span><br><span class="line">            newText.setAttributeNS(<span class="literal">null</span>,<span class="string">"font-size"</span>,<span class="string">"12"</span>);</span><br><span class="line">            <span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(area);</span><br><span class="line">            newText.appendChild(textNode);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'svgOne'</span>).appendChild(newText);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">rectangle, to_right</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(rectangle);</span><br><span class="line">            <span class="keyword">var</span> orix = beginx, oriy = beginy;</span><br><span class="line">            <span class="keyword">var</span> ratio1, ratio2;</span><br><span class="line">            <span class="keyword">var</span> sameDir = rectangle[<span class="number">0</span>].vert;</span><br><span class="line">            <span class="keyword">if</span>(sameDir == last_vert)</span><br><span class="line">                sameDir = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sameDir = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rectangle.length; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> _area = rectangle[i]._area;</span><br><span class="line">                <span class="keyword">var</span> vert = rectangle[i].verti;</span><br><span class="line">                last_vert = vert;</span><br><span class="line">                <span class="keyword">var</span> w = rectangle[i]._wid, h = rectangle[i]._hei;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"area, width, height, vert?"</span>, _area, w, h, vert);</span><br><span class="line">                ratio1 = w/ori_w*width, ratio2 = h/ori_h*height;</span><br><span class="line">                drawRect(beginx, beginy, ratio1, ratio2, _area);</span><br><span class="line">                <span class="keyword">if</span>(vert == <span class="literal">true</span>)&#123;</span><br><span class="line">                    beginy += ratio2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    beginx += ratio1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(to_right == <span class="literal">false</span>)&#123;<span class="comment">// to below</span></span><br><span class="line">                beginx = orix;</span><br><span class="line">                beginy = oriy + ratio2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="comment">//to right</span></span><br><span class="line">                beginx = orix + ratio1;</span><br><span class="line">                beginy = oriy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// assume w &gt; h, put in h first</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">squarify</span>(<span class="params">children, modifiable, w, h, sum, m_area</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//console.log("current in: ",children[0], modifiable);</span></span><br><span class="line">            <span class="keyword">if</span>(children.length === <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"quit"</span>);</span><br><span class="line">                <span class="keyword">var</span> to_right = modifiable[<span class="number">0</span>].verti;</span><br><span class="line">                draw(modifiable, to_right);<span class="comment">// ..............</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> c = children.shift();</span><br><span class="line">            <span class="keyword">var</span> _area = c, _wid, _hei, verti;</span><br><span class="line">            <span class="keyword">if</span>(modifiable.length === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//console.log("case 0");</span></span><br><span class="line">                m_area += c;</span><br><span class="line">                <span class="keyword">if</span>(w &lt;= h) &#123;<span class="comment">// vertical set</span></span><br><span class="line">                    _wid = w;</span><br><span class="line">                    verti = <span class="literal">true</span>;</span><br><span class="line">                    _hei = c / _wid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="comment">// horizontal set</span></span><br><span class="line">                    _hei = h;</span><br><span class="line">                    _wid = c / _hei;</span><br><span class="line">                    verti = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                squarify(children,modifiable,w,h,sum, m_area);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//case 1</span></span><br><span class="line">                <span class="keyword">var</span> leftover = sum - m_area;</span><br><span class="line">                <span class="keyword">var</span> neww, newh;</span><br><span class="line">                <span class="keyword">if</span> (w &gt; h) &#123;</span><br><span class="line">                    neww = leftover / h;</span><br><span class="line">                    newh = h;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    neww = w;</span><br><span class="line">                    newh = leftover / w;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (neww &lt;= newh)&#123;<span class="comment">// vertical set</span></span><br><span class="line">                    _wid = neww;</span><br><span class="line">                    _hei = c / _wid;</span><br><span class="line">                    verti = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">// horizontal set</span></span><br><span class="line">                    _wid = c / newh;</span><br><span class="line">                    _hei = newh;</span><br><span class="line">                    verti= <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//console.log("w,h",_wid,_hei);</span></span><br><span class="line">                <span class="keyword">var</span> temp1 = <span class="built_in">Math</span>.max(_wid,_hei)/<span class="built_in">Math</span>.min(_wid,_hei);<span class="comment">// put in new area</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// case 2</span></span><br><span class="line">                <span class="keyword">var</span> temp_area = m_area + c;<span class="comment">// else include in old area</span></span><br><span class="line">                <span class="keyword">var</span> w1, h1, temp2;</span><br><span class="line">                <span class="keyword">if</span>(w &gt; h) &#123;</span><br><span class="line">                    w1 = temp_area / h;</span><br><span class="line">                    h1 = h;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    w1 = w;</span><br><span class="line">                    h1 = temp_area / w;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(w1 &lt;= h1)&#123;<span class="comment">// stack up, width is the same</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"current 1"</span>, w1, h1);</span><br><span class="line">                    temp2 = <span class="built_in">Math</span>.max(w1,c/w1)/<span class="built_in">Math</span>.min(w1,c/w1);<span class="comment">// put in old area, w1/(c/w1), wid:hei</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)</span><br><span class="line">                        temp2 = <span class="built_in">Math</span>.max(temp2, <span class="built_in">Math</span>.max(w1,modifiable[i]._area/w1)/<span class="built_in">Math</span>.min(w1,modifiable[i]._area/w1));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">//stack right, height is the same</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"current 2"</span>, w1, h1);</span><br><span class="line">                    temp2 = <span class="built_in">Math</span>.max(h1,c/h1)/<span class="built_in">Math</span>.min(h1,c/h1);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)</span><br><span class="line">                        temp2 = <span class="built_in">Math</span>.max(temp2, <span class="built_in">Math</span>.max(modifiable[i]._area/h1,h1)/<span class="built_in">Math</span>.min(modifiable[i]._area/h1,h1));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//console.log("t1,t2",temp1,temp2);</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// case 1</span></span><br><span class="line">                <span class="keyword">if</span> (temp1 &lt;= temp2)&#123;<span class="comment">// clear all modifiable, draw</span></span><br><span class="line">                    <span class="comment">//console.log("case 1");</span></span><br><span class="line">                    <span class="keyword">var</span> to_right = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(w &lt;= h)</span><br><span class="line">                        to_right = <span class="literal">false</span>;</span><br><span class="line">                    draw(modifiable, to_right);<span class="comment">// ..............</span></span><br><span class="line">                    </span><br><span class="line">                    modifiable = [];<span class="comment">//clear it</span></span><br><span class="line">                    modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                    squarify(children,modifiable,neww,newh,sum-m_area,_area);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//case 2</span></span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">// put in modifiable</span></span><br><span class="line">                    <span class="comment">//console.log("case 2");</span></span><br><span class="line">                    <span class="keyword">if</span>(w &gt; h)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)&#123;</span><br><span class="line">                            <span class="keyword">var</span> cur_area = modifiable[i]._area;</span><br><span class="line">                            <span class="keyword">var</span> h_tem = cur_area / w1;</span><br><span class="line">                            modifiable[i]._wid = w1;</span><br><span class="line">                            modifiable[i]._hei = h_tem;</span><br><span class="line">                            modifiable[i].verti = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        _wid = w1;</span><br><span class="line">                        _hei = c / _wid;</span><br><span class="line">                        verti = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)&#123;</span><br><span class="line">                            <span class="keyword">var</span> cur_area = modifiable[i]._area;</span><br><span class="line">                            <span class="keyword">var</span> w_tem = cur_area / h1;</span><br><span class="line">                            modifiable[i]._wid = w_tem;</span><br><span class="line">                            modifiable[i]._hei = h1;</span><br><span class="line">                            modifiable[i].verti = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        _wid = c / h1;</span><br><span class="line">                        _hei = h1;</span><br><span class="line">                        verti = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                    m_area += c;</span><br><span class="line">                    squarify(children,modifiable,w,h,sum,m_area);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Squarified-Treemap&quot;&gt;&lt;a href=&quot;#Squarified-Treemap&quot; class=&quot;headerlink&quot; title=&quot;Squarified Treemap&quot;&gt;&lt;/a&gt;Squarified Treemap&lt;/h1&gt;&lt;h2 id=&quot;Algorithm&quot;&gt;&lt;a href=&quot;#Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Algorithm&quot;&gt;&lt;/a&gt;Algorithm&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;procedure squarify(list of real children, list of real row, real w)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;begin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	real c = head(children);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; worst(row, w)  worst(row++[c], w) then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		squarify(tail(children), row++[c], w)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		layoutrow(row);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		squarify(children, [], width());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Visualization" scheme="co10.github.io/categories/Visualization/"/>
    
    
      <category term="HTML" scheme="co10.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Bézier Curve</title>
    <link href="co10.github.io/2020/10/28/Bezier-Curve/"/>
    <id>co10.github.io/2020/10/28/Bezier-Curve/</id>
    <published>2020-10-28T06:31:24.000Z</published>
    <updated>2021-01-14T07:22:53.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Curves"><a href="#Curves" class="headerlink" title="Curves"></a>Curves</h1><a id="more"></a><h2 id="Hermite-Curve"><a href="#Hermite-Curve" class="headerlink" title="Hermite Curve"></a>Hermite Curve</h2><p>The parametric equation of curves is: </p><script type="math/tex; mode=display">P(t)=a_3t^3+a_2t^2+a_1t+a_0, t∈[0,1]</script><p>Derivate it: </p><script type="math/tex; mode=display">P'(t)=3a_3t^2+2a_2t+a_1</script><p>Let $t=0$ and $t=1$, we get: </p><script type="math/tex; mode=display">P(0)=a_0, P'(0)=a_1, P(1)=a_3+a_2+a_1+a_0, P'(1)=3a_3+2a_2+a_1</script><p>So, we take $P_0,P_0’,P_1,P_1’$ as:</p><script type="math/tex; mode=display">P_0=a_0</script><script type="math/tex; mode=display">P_0'=a_1</script><script type="math/tex; mode=display">P_1=a_3+a_2+a_1+a_0</script><script type="math/tex; mode=display">P_1'=3a_3+2a_2+a_1</script><p>so we get: </p><script type="math/tex; mode=display">a_0=P_0</script><script type="math/tex; mode=display">a_1=P_0'</script><script type="math/tex; mode=display">a_2=-3P_0-2P_0'+3P_1-P_1'</script><script type="math/tex; mode=display">a_3=2P_0+P_0'-2P_1+P_1'</script><p>Thus, </p><script type="math/tex; mode=display">P(t)=(2P_0+P_0'-2P_1+P_1')t^3+(-3P_0-2P_0'+3P_1-P_1')t^2+P_0't+P_0</script><p>After simplification: </p><script type="math/tex; mode=display">P(t)=(2t^3-3t^2+1)P_0+(-2t^3+3t^2)P_1+(t^3-2t^2+t)P_0'+(t^3-t^2)P_1',t∈[0,1]</script><p>Let $F_0(t)=2t^3-3t^2+1$, $F_1(t)=-2t^3+3t^2$, $G_0(t)=t^3-2t^2+t$, $G_1(t)=t^3-t^2$. </p><script type="math/tex; mode=display">P(t)=F_0P_0+F_1P_1+G_0P_0'+G_1P_1'=[F_0,F_1,G_0,G_1] \begin{bmatrix}P_0\\P_1\\P_0'\\P_1'\end{bmatrix}</script><p>Let $M=\left[\begin{matrix}1&amp;0&amp;0&amp;0\\0&amp;0&amp;1&amp;0\\ -3&amp;3&amp; -2&amp; -1 \\2&amp; -2 &amp;1&amp;1\end{matrix}\right]$ , so we get: $P(t)=[1,t,t^2,t^3]M\left[\begin{matrix}1&amp;0&amp;0&amp;0\\0&amp;0&amp;1&amp;0\\ -3&amp;3&amp;-2&amp;-1\\2&amp;-2&amp;1&amp;1\end{matrix}\right]$</p><h2 id="Bezier-curve"><a href="#Bezier-curve" class="headerlink" title="Bézier curve"></a>Bézier curve</h2><p>The curve is defined by four points: <strong>the initial position</strong> and <strong>the terminating position</strong> i.e $P_0$ and $P_3$ respectively (which are called “anchors”) and <strong>two separate middle points</strong> i.e $P_1$ and $P_2$ (which are called “handles”) in our example.</p><p>Given distinct points $P_0$ and $P_1$, a linear Bézier curve is simply a  straight line between those two points. The curve is given by</p><script type="math/tex; mode=display">B(t)=(1-t)P_0+tP_1, t∈[0,1]</script><p>A quadratic Bézier curve is the path traced by the function $B(t)$, given points $P_0$, $P_1$, and $P_2$,</p><script type="math/tex; mode=display">B(t)=(1-t)[(1-t)P_0+tP_1]+t[(1-t)P_1+tP_2],t∈[0,1]</script><script type="math/tex; mode=display">B(t)=(1-t)^2P_0+2t(1-t)P_1+t^2P_2,t∈[0,1]</script><p>This can be written in a way that highlights the symmetry with respect to $P_1$:</p><script type="math/tex; mode=display">B(t)=P_1+(1-t)^2(P_0-P_1)+t^2(P_2-P_1), t∈[0,1]</script><script type="math/tex; mode=display">B'(t)=2(1-t)(P_1-P_0)+2t(P_2-P_1)</script><script type="math/tex; mode=display">B''(t)=2(P_2-2P_1+P_0)</script><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>给定空间 $n+1$ 个点的位置矢量 $P_i(i=0,1,2,…,n)$，则 Bézier 曲线可定义为：</p><script type="math/tex; mode=display">P(t)=\sum^{n}_{i=0}P_iB_{i,n}(t), t∈[0,1]</script><p>where $B_{i,n}(t)$ is Bernstein basis polynomials of degree $n$ :</p><script type="math/tex; mode=display">B_{i,n}(t)=\mbox{C}_n^it^i(1-t)^{n-i}=\frac{n!}{i!(n-i)!}(1-t)^{n-i},(i=0,1,...,n)</script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Curves&quot;&gt;&lt;a href=&quot;#Curves&quot; class=&quot;headerlink&quot; title=&quot;Curves&quot;&gt;&lt;/a&gt;Curves&lt;/h1&gt;
    
    </summary>
    
    
      <category term="CG" scheme="co10.github.io/categories/CG/"/>
    
    
      <category term="曲线" scheme="co10.github.io/tags/%E6%9B%B2%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>Liang-Barsky Algorithm</title>
    <link href="co10.github.io/2020/10/14/Liang-Barsky-Algorithm/"/>
    <id>co10.github.io/2020/10/14/Liang-Barsky-Algorithm/</id>
    <published>2020-10-14T06:49:45.000Z</published>
    <updated>2021-01-14T07:18:24.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Liang-Barsky"><a href="#Liang-Barsky" class="headerlink" title="Liang-Barsky"></a>Liang-Barsky</h1><a id="more"></a><h2 id="参数方程"><a href="#参数方程" class="headerlink" title="参数方程"></a>参数方程</h2><p>两点式：</p><script type="math/tex; mode=display">\frac{x-x_1}{y-y_1}=\frac{x_2-x_1}{y_2-y_1}</script><p>换下位置，并设其等于 $t$ ：</p><script type="math/tex; mode=display">\frac{x-x_1}{x_2-x_1}=\frac{y-y_1}{y_2-y_1}=t, t∈[0,1]</script><p>其中 $(x_1,y_1)$ 为左下边界， $(x_2,y_2)$ 为右上边界， $(x,y)$ 位于其间。</p><p>则参数方程可表示为：</p><script type="math/tex; mode=display">x=x_1+t(x_2-x_1)</script><script type="math/tex; mode=display">y=y_1+t(y_2-y_1)</script><h2 id="裁剪窗口不等式"><a href="#裁剪窗口不等式" class="headerlink" title="裁剪窗口不等式"></a>裁剪窗口不等式</h2><script type="math/tex; mode=display">xw_{min}≤x_1+t(x_2-x_1)≤xw_{max}</script><script type="math/tex; mode=display">yw_{min}≤y_1+t(y_2-y_1)≤yw_{max}</script><p>( $xw,yw$ 为边界)</p><p>不等式可表示为：</p><script type="math/tex; mode=display">tp_k≤q_k</script><p>其中， $k=1,2,3,4$ 分别表示左右下上四边界。</p><p>$p$ 与 $q$ 的定义为：</p><script type="math/tex; mode=display">p_1 = -(x_2-x_1),  q_1 = x_1 - xw_{min} (左边界)</script><script type="math/tex; mode=display">p_2 =  (x_2-x_1),  q_2 = xw_{max} - x_1 (右边界)</script><script type="math/tex; mode=display">p_3 = -(y_2-y_1),  q_3 = y_1 - yw_{min} (下边界)</script><script type="math/tex; mode=display">p_4 = (y_2-y_1),  q_4 = yw_{max} - y_1 (上边界)</script><h3 id="判定"><a href="#判定" class="headerlink" title="判定"></a>判定</h3><div class="table-container"><table><thead><tr><th>条件</th><th>线的位置</th></tr></thead><tbody><tr><td>$p_k=0$</td><td>平行于裁剪边界</td></tr><tr><td>$p_k=0$ 且 $q_k&lt;0$</td><td>完全在边界外</td></tr><tr><td>$p_k = 0$ 且 $q_k ≥ 0$</td><td>在边界内</td></tr><tr><td>$p_k &lt; 0$</td><td>线从外到内</td></tr><tr><td>$p_k &gt; 0$</td><td>线从内到外</td></tr></tbody></table></div><p>参数 $t_1,t_2$ 可以判定线的某部分位于裁剪矩形内，当：</p><script type="math/tex; mode=display">p_k<0, 取maximum(0,\frac{q_k}{p_k})</script><script type="math/tex; mode=display">p_k>0, 取minimum(1,\frac{q_k}{p_k})</script><p>若 $t_1 &gt; t_2$, 则线完全在窗口外，可舍弃；否则，裁剪线的止点可由参数 $t$ 决定。</p><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><ol><li>Set $t_{min}=0, t_{max}=1$.</li><li>Calculate the values of $t$ ($t(left)$, $t(right)$, $t(top)$, $t(bottom)$),<br>(a) If $t &lt; t_{min}$ ignore that and move to the next edge.<br>(b) else separate the $t$ values as entering or exiting values using the inner product.<br>(c) If $t$ is entering value, set $t_{min}=t$; if $t$ is existing value, set $t_{max} = t$.</li><li>If $t_{min} &lt; t_{max}$, draw a line from $(x_1 + t_{min}(x_2-x_1), y_1 + t_{min}(y_2-y_1))$ to $(x_1 + t_{max}(x_2-x_1), y_1 + t_{max}(y_2-y_1))$</li><li>If the line crosses over the window, $(x_1 + t_{min}(x_2-x_1), y_1 + t_{min}(y_2-y_1))$ and $(x_1 + t_{max}(x_2-x_1), y_1 + t_{max}(y_2-y_1))$ are the intersection point of line and edge.</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.geeksforgeeks.org/liang-barsky-algorithm/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/liang-barsky-algorithm/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Liang-Barsky&quot;&gt;&lt;a href=&quot;#Liang-Barsky&quot; class=&quot;headerlink&quot; title=&quot;Liang-Barsky&quot;&gt;&lt;/a&gt;Liang-Barsky&lt;/h1&gt;
    
    </summary>
    
    
      <category term="CG" scheme="co10.github.io/categories/CG/"/>
    
    
      <category term="裁剪" scheme="co10.github.io/tags/%E8%A3%81%E5%89%AA/"/>
    
  </entry>
  
</feed>
