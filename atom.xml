<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荒芜知地</title>
  
  <subtitle>Knowhere</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="co10.github.io/"/>
  <updated>2021-03-13T08:09:10.890Z</updated>
  <id>co10.github.io/</id>
  
  <author>
    <name>K</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Connecting to VPS in VS Code</title>
    <link href="co10.github.io/2021/03/13/Connecting-to-VPS-in-VS-Code/"/>
    <id>co10.github.io/2021/03/13/Connecting-to-VPS-in-VS-Code/</id>
    <published>2021-03-13T07:45:46.000Z</published>
    <updated>2021-03-13T08:09:10.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Connecting-to-VPS-in-VS-Code"><a href="#Connecting-to-VPS-in-VS-Code" class="headerlink" title="Connecting to VPS in VS Code"></a>Connecting to VPS in VS Code</h1><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="In-Windows"><a href="#In-Windows" class="headerlink" title="In Windows"></a>In Windows</h3><p>Install VS Code. Install Remote - SSH in VS Code.</p><p>Press F1, edit the configuration. Then Connect.</p><p>In Explorer, you can open the remote directory.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Connecting-to-VPS-in-VS-Code&quot;&gt;&lt;a href=&quot;#Connecting-to-VPS-in-VS-Code&quot; class=&quot;headerlink&quot; title=&quot;Connecting to VPS in VS Code&quot;&gt;&lt;/a&gt;Co
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="co10.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Using FTP in Linux</title>
    <link href="co10.github.io/2021/03/13/Using-FTP-in-Linux/"/>
    <id>co10.github.io/2021/03/13/Using-FTP-in-Linux/</id>
    <published>2021-03-13T05:33:18.000Z</published>
    <updated>2021-03-13T05:33:50.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Using-FTP-in-VPS"><a href="#Using-FTP-in-VPS" class="headerlink" title="Using FTP in VPS"></a>Using FTP in VPS</h1><h2 id="Install-vsftpd"><a href="#Install-vsftpd" class="headerlink" title="Install vsftpd"></a>Install vsftpd</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure><p>check vsftpd version</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vsftpd -v</span><br></pre></td></tr></table></figure><p>Change FTP password</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo passwd ftp</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>The configuration file locates in <code>/etc/vsftpd.conf</code> . Change Below: </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">listen=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=<span class="number">022</span></span><br></pre></td></tr></table></figure><p>Go to file <code>/etc/pam.d/vsftpd</code> , change below: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">auth    required        pam_shells.so</span></span><br></pre></td></tr></table></figure><h2 id="Install-WinSCP"><a href="#Install-WinSCP" class="headerlink" title="Install WinSCP"></a>Install WinSCP</h2><p>In Windows, install WinSCP .</p><p>Choose SFTP. Login to VPS.</p><p>Done. Enjoy.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Using-FTP-in-VPS&quot;&gt;&lt;a href=&quot;#Using-FTP-in-VPS&quot; class=&quot;headerlink&quot; title=&quot;Using FTP in VPS&quot;&gt;&lt;/a&gt;Using FTP in VPS&lt;/h1&gt;&lt;h2 id=&quot;Install-v
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="co10.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Using Nachos in Linux</title>
    <link href="co10.github.io/2021/03/05/Using-Nachos-in-Linux/"/>
    <id>co10.github.io/2021/03/05/Using-Nachos-in-Linux/</id>
    <published>2021-03-05T02:08:37.000Z</published>
    <updated>2021-03-13T06:01:41.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Make sure the Linux is 32-bit!</p><p>Go to <a href="https://homes.cs.washington.edu/~tom/nachos/" target="_blank" rel="noopener">https://homes.cs.washington.edu/~tom/nachos/</a>, download <code>nachos-4.0.tar</code>, and download <code>mips-x86.linux-xgcc</code> .</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://www.cs.washington.edu/homes/tom/nachos/nachos-4.0.tar</span><br><span class="line">wget https://inst.eecs.berkeley.edu//~cs162/fa13/Nachos/xgcc/mips-x86_64.linux-xgcc.tar.gz</span><br></pre></td></tr></table></figure><p>Place it to somewhere.</p><p>（Well, that’s the original one. But my Experiment uses 3.4 version modified by my teacher.）</p><p>Before anything, make sure you have install GNU/GCC, and csh.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install gcc-multilib g++-multilib</span><br><span class="line">sudo apt-get install manpages-dev</span><br><span class="line">sudo apt-get install csh</span><br></pre></td></tr></table></figure><p>Unzip it.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf nachos-4.0.tar</span><br></pre></td></tr></table></figure><p>Use <code>cp -r</code> to copy <strong>Code</strong> directory to somewhere.</p><p>Copy <code>gcc-2.8.1-mips.tar.gz</code> to <code>usr/local</code> directory, and unzip it.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp gcc-2.8.1-mips.tar.gz &#x2F;usr&#x2F;local</span><br><span class="line">cd usr&#x2F;local</span><br><span class="line">tar -xvf gcc-2.8.1-mips.tar.gz</span><br></pre></td></tr></table></figure><p>Add permission by <code>chmod +rwx filename</code> .</p><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>Go back to the <code>Code</code> folder. Here is what we have in <code>Code</code> directory.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ass3  bin      lab2  lab5    machine          Makefile.dep  network  threads   vm</span><br><span class="line">ass4  filesys  lab3  lab7-8  Makefile.common  monitor       test     userprog</span><br></pre></td></tr></table></figure><p>Go to <code>/test/arch/unknown-i386-linux</code> folder, delete files in folders <code>depends</code> and <code>objects</code> (don’t remove the two folders), and in <code>test</code>, delete all files end in <code>.noff</code>.</p><h3 id="Test-test"><a href="#Test-test" class="headerlink" title="Test test"></a>Test test</h3><p>Makefile.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>If failed, remember to add permission to certain files (<code>_the_directory_name_/bin/arch/unknown-i386-linux/bin/coff2noff</code> &amp; <code>coff2flat</code>) suggested. If success, we got some <code>.noff</code> files in test: </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arch    halt.flat  Makefile       matmult.c     matmult.noff  shell.c     shell.noff  sort.flat  start.s halt.c  halt.noff  Makefile.orig  matmult.flat  script        shell.flat  sort.c      sort.noff</span><br></pre></td></tr></table></figure><p>And something like:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Converting to flat file: arch/unknown-i386-linux/bin/sort.flat &lt;&lt;&lt;</span></span><br><span class="line">../bin/arch/unknown-i386-linux/bin/coff2flat arch/unknown-i386-linux/objects/sort.coff arch/unknown-i386-linux/bin/sort.flat</span><br><span class="line">Loading 3 sections:</span><br><span class="line">        ".text", filepos 0xd0, mempos 0x0, size 0x2c0</span><br><span class="line">        ".data", filepos 0x390, mempos 0x2c0, size 0x0</span><br><span class="line">        ".bss", filepos 0x0, mempos 0x2c0, size 0x1000</span><br><span class="line">Adding stack of size: 1024</span><br></pre></td></tr></table></figure><h3 id="Test-threats"><a href="#Test-threats" class="headerlink" title="Test threats"></a>Test threats</h3><p>Make. Ignore Warnings. Then we get something like this: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Assembling switch-linux.s &lt;&lt;&lt;</span></span><br><span class="line">/lib/cpp  -D HOST_i386 -D HOST_LINUX switch-linux.s &gt; arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line">as -o arch/unknown-i386-linux/objects/switch-linux.o arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line">switch-linux.s: Assembler messages:</span><br><span class="line">switch-linux.s:61: Warning: indirect call without `*'</span><br><span class="line">switch-linux.s:62: Warning: indirect call without `*'</span><br><span class="line">switch-linux.s:63: Warning: indirect call without `*'</span><br><span class="line">rm arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Linking arch/unknown-i386-linux/bin/nachos &lt;&lt;&lt;</span></span><br><span class="line">g++ arch/unknown-i386-linux/objects/main.o arch/unknown-i386-linux/objects/list.o arch/unknown-i386-linux/objects/scheduler.o arch/unknown-i386-linux/objects/synch.o arch/unknown-i386-linux/objects/synchlist.o arch/unknown-i386-linux/objects/system.o arch/unknown-i386-linux/objects/thread.o arch/unknown-i386-linux/objects/utility.o arch/unknown-i386-linux/objects/threadtest.o arch/unknown-i386-linux/objects/synchtest.o arch/unknown-i386-linux/objects/interrupt.o arch/unknown-i386-linux/objects/sysdep.o arch/unknown-i386-linux/objects/stats.o arch/unknown-i386-linux/objects/timer.o arch/unknown-i386-linux/objects/switch-linux.o  -o arch/unknown-i386-linux/bin/nachos</span><br><span class="line">ln -sf arch/unknown-i386-linux/bin/nachos nachos</span><br></pre></td></tr></table></figure><p>If successful, a link-file named <code>nachos</code> will be generated.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">arch         dump     main.cc         nachos        switch.h        synch.cc      synchlist.h   system.h   threadtest.cc</span><br><span class="line">bool.h       list.cc  Makefile        scheduler.cc  switch-linux.s  synch.h       synchtest.cc  thread.cc  utility.cc</span><br><span class="line">copyright.h  list.h   Makefile.local  scheduler.h   switch.s        synchlist.cc  system.cc     thread.h   utility.h</span><br></pre></td></tr></table></figure><p>Run <code>./nachos</code>, then got:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 130, idle 0, system 130, user 0</span><br><span class="line">Disk I/O: reads 0, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure><h3 id="Test-filesys"><a href="#Test-filesys" class="headerlink" title="Test filesys"></a>Test filesys</h3><p>Make, and got: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Assembling ../threads/switch-linux.s &lt;&lt;&lt;</span></span><br><span class="line">/lib/cpp  -D HOST_i386 -D HOST_LINUX ../threads/switch-linux.s &gt; arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line">as -o arch/unknown-i386-linux/objects/switch-linux.o arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line">../threads/switch-linux.s: Assembler messages:</span><br><span class="line">../threads/switch-linux.s:61: Warning: indirect call without `*'</span><br><span class="line">../threads/switch-linux.s:62: Warning: indirect call without `*'</span><br><span class="line">../threads/switch-linux.s:63: Warning: indirect call without `*'</span><br><span class="line">rm arch/unknown-i386-linux/objects/tmp.s</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Linking arch/unknown-i386-linux/bin/nachos &lt;&lt;&lt;</span></span><br><span class="line">g++ arch/unknown-i386-linux/objects/main.o arch/unknown-i386-linux/objects/list.o arch/unknown-i386-linux/objects/scheduler.o arch/unknown-i386-linux/objects/synch.o arch/unknown-i386-linux/objects/synchlist.o arch/unknown-i386-linux/objects/system.o arch/unknown-i386-linux/objects/thread.o arch/unknown-i386-linux/objects/utility.o arch/unknown-i386-linux/objects/threadtest.o arch/unknown-i386-linux/objects/synchtest.o arch/unknown-i386-linux/objects/interrupt.o arch/unknown-i386-linux/objects/sysdep.o arch/unknown-i386-linux/objects/stats.o arch/unknown-i386-linux/objects/timer.o arch/unknown-i386-linux/objects/bitmap.o arch/unknown-i386-linux/objects/directory.o arch/unknown-i386-linux/objects/filehdr.o arch/unknown-i386-linux/objects/filesys.o arch/unknown-i386-linux/objects/fstest.o arch/unknown-i386-linux/objects/openfile.o arch/unknown-i386-linux/objects/synchdisk.o arch/unknown-i386-linux/objects/disk.o arch/unknown-i386-linux/objects/switch-linux.o  -o arch/unknown-i386-linux/bin/nachos</span><br><span class="line">ln -sf arch/unknown-i386-linux/bin/nachos nachos</span><br></pre></td></tr></table></figure><p>Run <code>./nachos</code>, then got:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 1190, idle 1000, system 190, user 0</span><br><span class="line">Disk I/O: reads 2, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure><h3 id="Test-vm"><a href="#Test-vm" class="headerlink" title="Test vm"></a>Test vm</h3><p>Make then run: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 130, idle 0, system 130, user 0</span><br><span class="line">Disk I/O: reads 0, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure><h3 id="Test-monitor"><a href="#Test-monitor" class="headerlink" title="Test monitor"></a>Test monitor</h3><p>Make then run: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">No threads ready or runnable, and no pending interrupts.</span><br><span class="line">Assuming the program completed.</span><br><span class="line">Machine halting!</span><br><span class="line"></span><br><span class="line">Ticks: total 590, idle 0, system 590, user 0</span><br><span class="line">Disk I/O: reads 0, writes 0</span><br><span class="line">Console I/O: reads 0, writes 0</span><br><span class="line">Paging: faults 0</span><br><span class="line">Network I/O: packets received 0, sent 0</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure><h3 id="Test-network"><a href="#Test-network" class="headerlink" title="Test network"></a>Test network</h3><p>Make then run: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*** thread 0 looped 0 times</span><br><span class="line">*** thread 1 looped 0 times</span><br><span class="line">*** thread 0 looped 1 times</span><br><span class="line">*** thread 1 looped 1 times</span><br><span class="line">*** thread 0 looped 2 times</span><br><span class="line">*** thread 1 looped 2 times</span><br><span class="line">*** thread 0 looped 3 times</span><br><span class="line">*** thread 1 looped 3 times</span><br><span class="line">*** thread 0 looped 4 times</span><br><span class="line">*** thread 1 looped 4 times</span><br></pre></td></tr></table></figure><h3 id="Test-userprog"><a href="#Test-userprog" class="headerlink" title="Test userprog"></a>Test userprog</h3><p>Make but I got: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">../Makefile.common:92: recipe for target 'arch/unknown-i386-linux/bin/nachos' failed</span><br><span class="line">make: *** [arch/unknown-i386-linux/bin/nachos] Error 1</span><br></pre></td></tr></table></figure><h2 id="If-using-x64-Ubuntu"><a href="#If-using-x64-Ubuntu" class="headerlink" title="If using x64 Ubuntu"></a>If using x64 Ubuntu</h2><p>Install libc6-dev-i386: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libc6-dev-i386</span><br></pre></td></tr></table></figure><p>In <code>code</code> directory, edit <code>Makefile.common</code> :</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CFLAGS = -g -Wall -Wshadow $(INCPATH) $(DEFINES) $(HOST) -DCHANGED</span></span><br><span class="line">CFLAGS = -g -Wall -Wshadow -m32 <span class="variable">$(INCPATH)</span> <span class="variable">$(DEFINES)</span> <span class="variable">$(HOST)</span> -DCHANGED</span><br></pre></td></tr></table></figure><p>Also edit <code>Makefile.dep</code> :</p><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#CPP=/lib/cpp</span></span><br><span class="line"><span class="comment">#CC = g++</span></span><br><span class="line"><span class="comment">#LD = g++</span></span><br><span class="line"><span class="comment">#AS = as</span></span><br><span class="line">CPP= gcc -E -m32</span><br><span class="line">CC = g++ -m32</span><br><span class="line">LD = g++ -m32</span><br><span class="line">AS = as --32</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;&lt;p&gt;Make sure the Linux is 32-bit!
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="co10.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux Commands</title>
    <link href="co10.github.io/2021/03/05/Linux-Commands/"/>
    <id>co10.github.io/2021/03/05/Linux-Commands/</id>
    <published>2021-03-05T00:45:19.000Z</published>
    <updated>2021-03-07T11:30:20.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="File-Commands"><a href="#File-Commands" class="headerlink" title="File Commands"></a>File Commands</h2><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a><code>pwd</code></h3><p><strong>P</strong>rint <strong>W</strong>orking <strong>D</strong>irectory. Find out the <em>path</em> of the current working directory.</p><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a><code>cd</code></h3><p><strong>C</strong>hange <strong>D</strong>irectory. Change the current working directory</p><ul><li><strong>cd <em>somewhere</em></strong> to go to that directory.</li><li><strong>cd ..</strong> (with two dots) to move one directory up.</li><li><strong>cd</strong> to go straight to the home folder.</li><li><strong>cd-</strong> (with a hyphen) to move to your previous directory.</li></ul><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a><code>ls</code></h3><p>List. View the contents of a directory.</p><ul><li><strong>ls</strong> will list current directory.</li><li><strong>ls <em>somewhere</em></strong> will list the directory named.</li><li><strong>ls -R</strong> will list all the files in the sub-directories as well.</li><li><strong>ls -a</strong> will show the hidden files.</li><li><strong>ls -al</strong> will list the files and directories with detailed information like the permissions, size, owner, etc.</li></ul><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a><code>cat</code></h3><p>Concatenate. List the contents of a file on the standard output (<code>stdout</code>).</p><ul><li><strong>cat filename (or filename1 filename2 filename3 …)</strong> will show content of given filename(s).</li><li><strong>cat -n filename</strong> will show contents with line numbers.</li><li><strong>cat &gt; filename</strong> creates a new file</li><li><strong>cat filename1 filename2 &gt; filename3</strong> joins two files (1 and 2) and stores the output of them in a new file (3)</li><li>to convert a file to upper or lower case use, <strong>cat filename | tr a-z A-Z &gt; output.txt</strong></li></ul><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a><code>cp</code></h3><p>Copy. <strong>cp <em>filename</em> <em>somewhere</em></strong> will copy file to the directory.</p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a><code>mv</code></h3><p>Move files, and also can be used to rename files. </p><ul><li><strong>mv <em>filename</em> <em>somewhere</em></strong> will move the file to the directory.</li><li><strong>mv <em>old_filename</em> <em>new_filename</em></strong> will rename the file with a new name.</li></ul><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><code>mkdir</code></h3><p>Make Directory. </p><ul><li><strong>mkdir <em>somewhere</em></strong></li><li><strong>mkdir <em>somewhere1/somewhere2/…/destination</em></strong></li><li><strong>mkdir <em>somewhere1/destination/somewhere2</em></strong></li></ul><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a><code>rmdir</code></h3><p>Remove Directory. Only allows you to delete empty directories.</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h3><p>Remove Files. <code>rm -r</code> alternative to <code>rmdir</code>. </p><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a><code>touch</code></h3><p>Create a blank new file.</p><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a><code>locate</code></h3><p>Locate a file. Use <code>locate -i</code> to be case-insensitive. <code>locate A*B</code> search files contain <code>A</code> and <code>B</code>.</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a><code>find</code></h3><p>Similar to locate. But you need to give it a directory.</p><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a><code>grep</code></h3><p>Search through all the text in a given file.</p><h2 id="Higher"><a href="#Higher" class="headerlink" title="Higher"></a>Higher</h2><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a><code>sudo</code></h3><p><strong>S</strong>uper<strong>U</strong>ser <strong>Do</strong>.</p><h3 id="df"><a href="#df" class="headerlink" title="df"></a><code>df</code></h3><p>Get a report on the system’s disk space usage, shown in percentage and KBs.</p><p><code>df -m</code> to show in megabytes.</p><h3 id="du"><a href="#du" class="headerlink" title="du"></a><code>du</code></h3><p><strong>D</strong>isk <strong>U</strong>sage. type <code>-h</code> to get human readable statics.</p><h3 id="head"><a href="#head" class="headerlink" title="head"></a><code>head</code></h3><p>View the first lines of any text file.</p><p><strong>head -n somenumber filename.txt</strong>. View fist somenumber lines of file.</p><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a><code>tail</code></h3><p>View last lines.</p><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a><code>diff</code></h3><p>Difference. Compares the contents of two files <em>line by line</em>. After analyzing the files, it will <em>output the lines that do not match</em>.</p><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a><code>tar</code></h3><p>Archive multiple files into a <strong>tarball</strong>.</p><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a><code>chmod</code></h3><p>Change the read, write, and execute permissions of files and directories.</p><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a><code>chown</code></h3><p>Change or transfer the ownership of a file to the specified username.</p><h3 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a><code>jobs</code></h3><p>Display all current jobs along with their statuses.</p><h3 id="Kill"><a href="#Kill" class="headerlink" title="Kill"></a><code>Kill</code></h3><p>Send a certain signal to an app and instructs the app to terminate itself. Kill by its PID. </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.hostinger.com/tutorials/linux-commands" target="_blank" rel="noopener">https://www.hostinger.com/tutorials/linux-commands</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;File-Commands&quot;&gt;&lt;a href=&quot;#File-Commands&quot; class=&quot;headerlink&quot; title=&quot;File Commands&quot;&gt;&lt;/a&gt;File Commands&lt;/h2&gt;&lt;h3 id=&quot;pwd&quot;&gt;&lt;a href=&quot;#pwd&quot; c
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="co10.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Sparkclouds</title>
    <link href="co10.github.io/2020/12/11/Sparkclouds/"/>
    <id>co10.github.io/2020/12/11/Sparkclouds/</id>
    <published>2020-12-11T07:52:23.000Z</published>
    <updated>2021-01-14T07:53:28.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sparkclouds"><a href="#Sparkclouds" class="headerlink" title="Sparkclouds"></a>Sparkclouds</h1><a id="more"></a><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>找出 Shakespeares’s Sonnet 1-20, 存为 <code>.txt</code> 文件，但后进行以下操作：</p><h3 id="统计词频"><a href="#统计词频" class="headerlink" title="统计词频"></a>统计词频</h3><p>用 C++ 写个程序，统计词频，能处理大小写、标点符号、’s 后缀等，代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span>&gt; StrIntMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> marks[] = &#123; <span class="string">','</span>, <span class="string">'.'</span>, <span class="string">':'</span>, <span class="string">'?'</span>, <span class="string">'!'</span>, <span class="string">';'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wordCnt</span><span class="params">(<span class="built_in">std</span>::istream&amp; in, StrIntMap&amp; words)</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">while</span> (in &gt;&gt; s) &#123;</span><br><span class="line"><span class="keyword">if</span> (s.back() == <span class="string">'\0'</span> || s.back() == <span class="string">'\n'</span>)</span><br><span class="line">s.erase(s.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s.back() == marks[i]) &#123;</span><br><span class="line">s.erase(s.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] &gt;= <span class="string">'A'</span> &amp;&amp; s[<span class="number">0</span>] &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line"><span class="keyword">bool</span> changed = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'I'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">changed = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">1</span>] &lt; <span class="string">'a'</span> || s[<span class="number">1</span>] &gt; <span class="string">'z'</span>)</span><br><span class="line">changed = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] &lt; <span class="string">'A'</span> || s[i]&gt;<span class="string">'Z'</span>) &#123;</span><br><span class="line">changed = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">changed = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (changed)</span><br><span class="line">s[<span class="number">0</span>] += (<span class="string">'a'</span> - <span class="string">'A'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s.back() == <span class="string">'s'</span> &amp;&amp; s.<span class="built_in">size</span>() &gt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[s.<span class="built_in">size</span>() - <span class="number">2</span>] == <span class="string">'\''</span>) &#123;</span><br><span class="line">s.erase(s.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line">s.erase(s.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//std::cout &lt;&lt; s &lt;&lt; "\t";</span></span><br><span class="line">++words[s];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span>(EXIT_FAILURE);</span><br><span class="line"><span class="function"><span class="built_in">std</span>::ifstream <span class="title">in</span><span class="params">(argv[<span class="number">1</span>])</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!in) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"open error\n"</span>;</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> outname = argv[<span class="number">1</span>];</span><br><span class="line">outname += <span class="string">".csv"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::fstream opt;</span><br><span class="line">opt.<span class="built_in">open</span>(outname, <span class="built_in">std</span>::fstream::in | <span class="built_in">std</span>::fstream::out | <span class="built_in">std</span>::fstream::app);</span><br><span class="line"><span class="keyword">if</span> (!opt) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fail\n"</span>;</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrIntMap w;</span><br><span class="line">wordCnt(in, w);</span><br><span class="line"></span><br><span class="line">in.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (StrIntMap::iterator p = w.<span class="built_in">begin</span>(); p != w.<span class="built_in">end</span>(); ++p) &#123;</span><br><span class="line">opt &lt;&lt; p-&gt;first &lt;&lt; <span class="string">","</span> &lt;&lt; p-&gt;second &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">opt.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后处理那 20 个 <code>.txt</code> 文档：</p><p><img src="https://i.loli.net/2020/12/18/hEnUSGYgvofrFNu.png" alt="image.png"></p><p>当然还有一个 <code>all.txt</code> 用于统计所有词频。</p><h3 id="整理数据"><a href="#整理数据" class="headerlink" title="整理数据"></a>整理数据</h3><p>先手动处理了古英语的 <code>&#39;</code> 前缀缩写。</p><p>用 Excel 的 <code>VLOOKUP</code> 函数整合统计所有 <code>.csv</code> 文件，最终生成一个：</p><p><img src="https://i.loli.net/2020/12/18/epAkbnNBLPSiQfq.png" alt="image.png"></p><h3 id="D3-实现"><a href="#D3-实现" class="headerlink" title="D3 实现"></a>D3 实现</h3><p>对于总词频低的单词，统一用小字号；词频高的，根据词频调整字号，并在下方根据 20 个 Sonnets 各自出现频率画出 sparkline 。</p><p>根据字号、单词长度，初略计算下一个单词应该出现的坐标。对于词频高的预留大空间。每个新加的单词根据占用空间进行判断位置。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://i.loli.net/2020/12/18/CnTXEZc6F8Wafho.png" alt="image.png"></p><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;meta charset = <span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;script src = <span class="string">"https://d3js.org/d3.v4.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id = "word_cloud"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> margin = &#123;<span class="attr">top</span>: <span class="number">20</span>, <span class="attr">right</span>: <span class="number">20</span>, <span class="attr">bottom</span>: <span class="number">20</span>, <span class="attr">left</span>: <span class="number">20</span>&#125;;</span><br><span class="line">        <span class="keyword">var</span> width = <span class="number">800</span> - margin.left - margin.right,</span><br><span class="line">            height = <span class="number">600</span> - margin.top - margin.bottom;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> svg = d3.select(<span class="string">"#word_cloud"</span>).append(<span class="string">"svg"</span>)</span><br><span class="line">            .attr(<span class="string">"width"</span>, width + margin.left + margin.right)</span><br><span class="line">            .attr(<span class="string">"height"</span>, height + margin.top + margin.bottom)</span><br><span class="line">            .append(<span class="string">"g"</span>)</span><br><span class="line">            .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> positionTaken = <span class="keyword">new</span> <span class="built_in">Array</span>(width + <span class="number">101</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; positionTaken.length; i++)</span><br><span class="line">            positionTaken[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(height + <span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; positionTaken.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; positionTaken[i].length; j++) &#123;</span><br><span class="line">                positionTaken[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(positionTaken);</span><br><span class="line"></span><br><span class="line">        d3.csv(<span class="string">"https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/04/0/20_sonets_wordcount.csv"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"data"</span>, data);</span><br><span class="line">            <span class="keyword">var</span> x0 = margin.left, y0 = margin.top;</span><br><span class="line">            <span class="keyword">var</span> thisline = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> lineFunc = d3.line()</span><br><span class="line">                .x(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> x0 + d.x; &#125;)</span><br><span class="line">                .y(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> y0 + d.y; &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> wordsize = <span class="string">"6px"</span>, wordcolor = <span class="string">"#ACAEE3"</span>, bigword = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">var</span> tempsize = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (data[i][<span class="string">"SUM"</span>] &gt; <span class="number">6</span>) &#123;</span><br><span class="line">                    tempsize = data[i][<span class="string">"SUM"</span>];</span><br><span class="line">                    wordsize = tempsize + <span class="string">"px"</span>;</span><br><span class="line">                    wordcolor = <span class="string">"#254170"</span>;</span><br><span class="line">                    bigword = <span class="number">1</span>;</span><br><span class="line">                    thisline = <span class="built_in">Math</span>.max(thisline, tempsize);</span><br><span class="line">                    <span class="keyword">var</span> iii = <span class="number">0</span>, jjj = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (iii = x0; iii &lt;= x0 + data[i][<span class="string">"word"</span>].length*<span class="number">0.5</span>*(+data[i][<span class="string">"SUM"</span>]); iii++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (jjj = y0; jjj &lt;= y0 + data[i][<span class="string">"word"</span>].length*(+data[i][<span class="string">"SUM"</span>]/<span class="number">5</span>); jjj++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((iii &lt;= width + <span class="number">10</span>) &amp;&amp; (jjj &lt;= height + <span class="number">10</span>))</span><br><span class="line">                                positionTaken[iii][jjj] = <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (iii = x0; iii &lt;= x0 + <span class="number">3</span>*(data[i][<span class="string">"word"</span>].length); iii++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (jjj = y0; jjj &lt;= y0 + <span class="number">8</span>; jjj++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((iii &lt;= width + <span class="number">10</span>) &amp;&amp; (jjj &lt;= height + <span class="number">10</span>))</span><br><span class="line">                                positionTaken[iii][jjj] = <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                svg.append(<span class="string">"text"</span>)</span><br><span class="line">                    .attr(<span class="string">"x"</span>, x0).attr(<span class="string">"y"</span>, y0)</span><br><span class="line">                    .text(data[i][<span class="string">"word"</span>])</span><br><span class="line">                    .style(<span class="string">"font-size"</span>, wordsize)</span><br><span class="line">                    .style(<span class="string">"fill"</span>, wordcolor)</span><br><span class="line">                    <span class="comment">//.attr("text-anchor", "start")</span></span><br><span class="line">                    .attr(<span class="string">"alignment-baseline"</span>, <span class="string">"central"</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (bigword == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> newdata = [];</span><br><span class="line">                    <span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; <span class="number">21</span>; j++) &#123;</span><br><span class="line">                        <span class="keyword">var</span> tempS = <span class="string">"S"</span>;</span><br><span class="line">                        tempS += j;</span><br><span class="line">                        <span class="keyword">if</span> (j &gt; <span class="number">1</span>)</span><br><span class="line">                            x += (tempsize*data[i][<span class="string">"word"</span>].length*<span class="number">0.5</span> / <span class="number">20</span>);</span><br><span class="line">                        <span class="keyword">var</span> y = tempsize/<span class="number">2</span> - (+data[i][tempS]);</span><br><span class="line">                        newdata.push(&#123;x, y&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//console.log(newdata);</span></span><br><span class="line">                    svg.append(<span class="string">"path"</span>)</span><br><span class="line">                        .attr(<span class="string">"d"</span>, lineFunc(newdata))</span><br><span class="line">                        .attr(<span class="string">"stroke"</span>, <span class="string">"#254170"</span>)</span><br><span class="line">                        .attr(<span class="string">"fill"</span>, <span class="string">"none"</span>);</span><br><span class="line"></span><br><span class="line">                    svg.append(<span class="string">"line"</span>)</span><br><span class="line">                        .attr(<span class="string">"x1"</span>, x0 + newdata[<span class="number">0</span>].x)</span><br><span class="line">                        .attr(<span class="string">"y1"</span>, y0 + tempsize/<span class="number">2</span>)</span><br><span class="line">                        .attr(<span class="string">"x2"</span>, x0 + newdata[<span class="number">19</span>].x)</span><br><span class="line">                        .attr(<span class="string">"y2"</span>, y0 + tempsize/<span class="number">2</span>)</span><br><span class="line">                        .attr(<span class="string">"stroke"</span>, <span class="string">"#254170"</span>)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> delta_x = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> ii = x0; ii &lt;= width; ii++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (positionTaken[ii][y0] == <span class="number">1</span>)</span><br><span class="line">                        delta_x++;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                x0 += delta_x;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (x0 &gt;= (width - margin.right)) &#123;</span><br><span class="line">                    x0 = margin.left;</span><br><span class="line">                    y0 += <span class="number">8</span>;</span><br><span class="line">                    <span class="comment">//if (thisline &gt; 0) &#123;</span></span><br><span class="line">                        <span class="comment">//y0 += (thisline/2 - 8);</span></span><br><span class="line">                        <span class="comment">//thisline = 0;</span></span><br><span class="line">                    <span class="comment">//&#125;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Sparkclouds&quot;&gt;&lt;a href=&quot;#Sparkclouds&quot; class=&quot;headerlink&quot; title=&quot;Sparkclouds&quot;&gt;&lt;/a&gt;Sparkclouds&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Visualization" scheme="co10.github.io/categories/Visualization/"/>
    
    
      <category term="HTML" scheme="co10.github.io/tags/HTML/"/>
    
      <category term="D3" scheme="co10.github.io/tags/D3/"/>
    
  </entry>
  
  <entry>
    <title>Force Directed Graph Layout</title>
    <link href="co10.github.io/2020/11/20/Force-Directed-Graph-Layout/"/>
    <id>co10.github.io/2020/11/20/Force-Directed-Graph-Layout/</id>
    <published>2020-11-20T07:30:48.000Z</published>
    <updated>2021-01-14T07:51:59.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Force-Directed-Graph-Layout"><a href="#Force-Directed-Graph-Layout" class="headerlink" title="Force Directed Graph Layout"></a>Force Directed Graph Layout</h1><a id="more"></a><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><h2 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h2><p>对于所有连接起来的相邻点，可把其当成一个整体，计算弹簧弹力的时候，可以只计算一个整体和另一个整体之间的弹簧弹力，然后再把这个力附加到每一个个体中。</p><p>同理计算斥力的时候也可取一堆点的平均分布，代替计算两点间的斥力。</p><p>我大概就只会这样了，不过计算斥力的时候我并没有用整体算。</p><p>计算力的时候，我把引力和弹簧弹力一起算的，用 <code>if</code> 判断是否需要计算弹力。</p><p>不考虑随机生成数据所用时间，算法的时间复杂度是 $O(n^2)$ 。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>有两层图，颜色浅的那层是初始数据，颜色深的是计算后的数据。</p><p>随机生成 200 个节点：</p><p><img src="https://i.loli.net/2020/11/29/3bl2ezqfxiRVnsa.png" alt="image.png"></p><p>随机生成 800 个节点：</p><p><img src="https://i.loli.net/2020/11/29/tiq7W18bGHkPXIa.png" alt="image.png"></p><h2 id="Play-amp-Have-Fun"><a href="#Play-amp-Have-Fun" class="headerlink" title="Play &amp; Have Fun"></a>Play &amp; Have Fun</h2><html>    <meta charset="utf-8">    <header>force directed graph</header>    <style>        #svgHolder {            position: relative        }        .svg2 {            position: absolute;            top: 0px;            left: 0px;        }    </style>    <body>    <label for="n_cnt">Nodes Count:</label>    <input type="number" id="n_cnt" name="n_cnt" value="60" min="30" max="1000">    <button type="button" onclick="update()">Generate</button><br><br>    <div id="svgHolder">        <svg id="svgOne" width="590" height="290"/>        <svg id="svgTwo" class="svg2" width="590" height="290"/>    </div>    <script>        var margin = {top: 10, right: 10, bottom: 10, left: 10},          width = 600 - margin.left - margin.right,          height = 300 - margin.top - margin.bottom;        var svgns = "http://www.w3.org/2000/svg";        var colorset1 = ['#FFADAD', '#FFC2A9', '#FFD6A5', '#FDFFB6', '#CAFFBF', '#9BF6FF', '#A0C4FF', '#BDB2FF', '#FFC6FF', '#FFFFFC'];        var colorset2 = ['#F94144', '#F3722C', '#F8961E', '#F9C74F', '#90BE6D', '#52838F', '#577590', '#7209B7', '#B5179E', '#EDF2F4'];        let o_nodes = [], nodes = [];        var node_cnt = 60, maxNodeX = width - 2, maxNodeY = height - 2;        var connect = [], con_fsx = [], con_fsy = [], con_fs = [];        var L = 50, K_r = 6250, K_s = 1, delta_t = 0.04;        var MAX_DIS_SQR = 50;// ???        gen_d();        draw_old();        cal_force();        update_position();        draw_new()        function update() {            document.getElementById('svgOne').innerHTML = "";            document.getElementById('svgTwo').innerHTML = "";            o_nodes.length = 0, nodes.length = 0, node_cnt = document.getElementById("n_cnt").value;            connect.length = 0, con_fsx.length = 0, con_fsy.length = 0, con_fs.length = 0;            gen_d();            draw_old();            cal_force();            update_position();            draw_new();        }        function update2(_l, _kr, _ks, _dt, _msd) {            document.getElementById('svgTwo').innerHTML = "";            if (_l != -1)                L = _l;            if (_kr != -1)                K_r = _kr;            if (_ks != -1)                K_s = _ks;            if (_dt != -1)                delta_t = _dt;            if (_msd != -1)                MAX_DIS_SQR = _msd;            con_fs.length = 0;            for (var i = 0; i < con_fsx.length; i++) {                for (var j = 0; j < con_fsx[i].length; j++) {                    con_fsx[i][j] = 0;                    con_fsy[i][j] = 0;                }            }            nodes.length = 0;            nodes = deepClone(o_nodes);            cal_force();            update_position();            draw_new();        }        function deepClone (obj) {            if (typeof obj !== 'object')                return obj;            if (!obj) // obj null                return obj;            if (obj instanceof Date)                return new Date(obj);            if (obj instanceof RegExp)                return new RegExp(obj);            if (obj instanceof Function)                return obj;            let newObj;            if (obj instanceof Array) {                newObj = [];                for(let i = 0, len = obj.length; i < len; i++)                    newObj.push(deepClone(obj[i]));                return newObj;            }            newObj = {};            for (let key in obj) {                if (obj.hasOwnProperty(key)) {                    if (typeof obj[key] !== 'object')                        newObj[key] = obj[key];                    else                        newObj[key] = deepClone(obj[key]);                }            }            return newObj;        }        // generate data....        function gen_d() {            var temp_cnt = 0, group = 0;            while (temp_cnt < node_cnt) {//max-min+1 +min                // generate nodes                var x0 = Math.floor(Math.random() * (maxNodeX - 1 + 1) ) + 1;                var y0 = Math.floor(Math.random() * (maxNodeY - 1 + 1) ) + 1;                var cnt1 = Math.floor(Math.random() * (15 - 2 + 1) ) + 2;                if (temp_cnt + cnt1 > node_cnt)                    cnt1 = node_cnt - temp_cnt;                var range_g = 50;                var Fr_x = 0, Fr_y = 0, Fs_x = 0, Fs_y = 0;                var x = x0, y = y0;                o_nodes[group] = new Array;                nodes[group] = new Array;                o_nodes[group].push({x,y,Fr_x,Fr_y,Fs_x,Fs_y});                nodes[group].push({x,y,Fr_x,Fr_y,Fs_x,Fs_y});                for (var i = 1; i < cnt1; i++) { // generate group nodes                    var dx = Math.floor(Math.random() * (range_g - 1 + 1) ) + 1;                    var dy = Math.floor(Math.random() * (range_g - 1 + 1) ) + 1;                    var x1 = x0 + dx, y1 = y0 + dy;                    var x2 = x0 - dx, y2 = y0 - dy;                    var x, y;                    if (x1 > maxNodeX || x1 < 0)                        x = x2;                    else x = x1;                    if (y1 > maxNodeY || y1 < 0)                        y = y2;                    else y = y1;                    o_nodes[group].push({x,y,Fr_x,Fr_y,Fs_x,Fs_y});                    nodes[group].push({x,y,Fr_x,Fr_y,Fs_x,Fs_y});                }                // generate connection                var con0 = [];                for (var i = 0; i < cnt1; i++) {                    con0[i] = new Array(cnt1);                    con0[i].fill(0, 0, cnt1);                }                for (var i = 0; i < cnt1 - 1; i++) {                    for (var j = i + 1; j < cnt1; j++) {                        var isconnected = Math.floor(Math.random() * 10);                        if (isconnected >= 6) {                            con0[i][j] = 1;                            con0[j][i] = 1;                        }                    }                }                connect.push(con0);                group++;                temp_cnt += cnt1;            }            var con1 = [];            for (var i = 0; i < group; i++) {                con1[i] = new Array(group);                con1[i].fill(0, 0, group);                con_fsx[i] = new Array(group);                con_fsx[i].fill(0, 0, group);                con_fsy[i] = new Array(group);                con_fsy[i].fill(0, 0, group);            }            for (var i = 0; i < group - 1; i++) {                var newCon = Math.floor(Math.random() * group - i) + i;                con1[newCon][i] = 1;                con1[i][newCon] = 1;                for (var j = i + 1; j < group; j++) {                    var isconnected = Math.floor(Math.random() * 10);                    if (isconnected >= 6) {                        con1[i][j] = 1;                        con1[j][i] = 1;                    }                }            }            connect.push(con1);            console.log("connected? : ", connect);            console.log("now get data: ", o_nodes);            console.log("copy nodes: ", nodes);        }        function cal_force() {            // repulsion force between all pairs            // if they are connected, calculate spring force            for (var i1 = 0; i1 < nodes.length; i1++) {                for (var i2 = 0; i2 < nodes[i1].length - 1; i2++) {                    var node1 = nodes[i1][i2];                    for(var j1 = i1; j1 < nodes.length; j1++) {                        for (var j2 = 0; j2 < nodes[j1].length; j2++) {                            if (j1 == i1 && j2 <= i2)                                continue;                            var node2 = nodes[j1][j2];                            var dx = node2.x - node1.x;                            var dy = node2.y - node1.y;                            if (dx != 0 || dy != 0) {                                var disSqu = dx*dx + dy*dy;                                var dis = Math.sqrt(disSqu);                                var force = K_r / disSqu;                                var fx = force * dx / dis;                                var fy = force * dy / dis;                                node1.Fr_x = node1.Fr_x - fx;                                node1.Fr_y = node1.Fr_y - fy;                                node2.Fr_x = node2.Fr_x + fx;                                node2.Fr_y = node2.Fr_y + fy;                                if (i1 == j1 && connect[i1][i2][j2] == 1) {                                    var force2 = K_s * (dis - L);                                    var fx2 = force2 * dx / dis;                                    var fy2 = force2 * dy / dis;                                    node1.Fs_x = node1.Fs_x + fx2;                                    node1.Fs_y = node1.Fs_y + fy2;                                    node2.Fs_x = node2.Fs_x - fx2;                                    node2.Fs_y = node2.Fs_y - fy2;                                }                                if (i2 == 0 && j2 == 0 && i1 != j1) {                                    if (connect[nodes.length][i1][j1] == 1) {                                        var force3 = K_s * (dis - L);                                        var fx3 = force3 * dx / dis;                                        var fy3 = force3 * dy / dis;                                        con_fsx[i1][j1] += fx3;                                        con_fsy[i1][j1] += fy3;                                        con_fsx[j1][i1] -= fx3;                                        con_fsy[j1][i1] -= fy3;                                    }                                }                                nodes[i1][i2] = node1;                                nodes[j1][j2] = node2;                            }                        }                    }                }            }            for (var i = 0; i < con_fsx.length; i++) {                var x = 0, y = 0;                for (var j = 0; j < con_fsx.length; j++) {                    x = x + con_fsx[i][j];                    y = y + con_fsy[i][j];                }                con_fs.push({x,y});            }        }        function update_position() {            for (var i1 = 0; i1 < nodes.length; i1++) {                for (var i2  = 0; i2 < nodes[i1].length; i2++) {                    var _node = nodes[i1][i2];                    var dx = delta_t * (_node.Fr_x + _node.Fs_x + con_fs[i1].x);                    var dy = delta_t * (_node.Fr_y + _node.Fs_y + con_fs[i1].y);                    var displacement_Sqr = dx*dx + dy*dy;                    if (displacement_Sqr > MAX_DIS_SQR) {                        var disS = Math.sqrt(MAX_DIS_SQR / displacement_Sqr);                        dx = dx * disS;                        dy = dy * disS;                    }                    _node.x = _node.x + dx;                    _node.y = _node.y + dy;                    nodes[i1][i2] = _node;                }            }            console.log("old & new nodes are here: ", o_nodes, nodes);        }        function draw_old() {            // draw line            for (var i = 0; i < connect.length; i++) {                var temp_con = connect[i];                for (var j = 0; j < temp_con.length - 1; j++) {                    for (var k = j + 1; k < temp_con.length; k++) {                        if (temp_con[j][k] == 1) {                            var x1, x2, y1, y2;                            var lineStroke = '#ffdab9';                            var lineLen = 0.5;                            if (i == connect.length - 1) {                                x1 = o_nodes[j][0].x, y1 = o_nodes[j][0].y;                                x2 = o_nodes[k][0].x, y2 = o_nodes[k][0].y;                                lineStroke = '#f08080';                                lineLen = 1.0;                            }                            else{                                x1 = o_nodes[i][j].x, y1 = o_nodes[i][j].y;                                x2 = o_nodes[i][k].x, y2 = o_nodes[i][k].y;                            }                            var line = document.createElementNS(svgns, 'line');                            line.setAttributeNS(null, 'x1', x1);                            line.setAttributeNS(null, 'x2', x2);                            line.setAttributeNS(null, 'y1', y1);                            line.setAttributeNS(null, 'y2', y2);                            line.setAttributeNS(null, 'stroke', lineStroke);                            line.setAttributeNS(null, 'stroke-width', lineLen);                            document.getElementById('svgOne').appendChild(line);                        }                    }                }            }            // draw circle            for (var i = 0; i < o_nodes.length; i++) {                for (j = 0; j < o_nodes[i].length; j++) {                    var getx = o_nodes[i][j].x;                    var gety = o_nodes[i][j].y;                    var circle = document.createElementNS(svgns, 'circle');                    circle.setAttributeNS(null, "cx", getx);                    circle.setAttributeNS(null, "cy", gety);                    circle.setAttributeNS(null, "r", 3);                    circle.setAttributeNS(null, "fill", colorset1[i % colorset1.length]);                    circle.setAttributeNS(null, "stroke", "none");                    document.getElementById('svgOne').appendChild(circle);                }            }        }        function draw_new() {            // draw line            for (var i = 0; i < connect.length; i++) {                var temp_con = connect[i];                for (var j = 0; j < temp_con.length - 1; j++) {                    for (var k = j + 1; k < temp_con.length; k++) {                        if (temp_con[j][k] == 1) {                            var x1, x2, y1, y2;                            var lineStroke = '#ffcad4';                            var lineLen = 1.0;                            if (i == connect.length - 1) {                                x1 = nodes[j][0].x, y1 = nodes[j][0].y;                                x2 = nodes[k][0].x, y2 = nodes[k][0].y;                                lineStroke = '#9e2a2b';                                lineLen = 1.5;                            }                            else{                                x1 = nodes[i][j].x, y1 = nodes[i][j].y;                                x2 = nodes[i][k].x, y2 = nodes[i][k].y;                            }                            var line = document.createElementNS(svgns, 'line');                            line.setAttributeNS(null, 'x1', x1);                            line.setAttributeNS(null, 'x2', x2);                            line.setAttributeNS(null, 'y1', y1);                            line.setAttributeNS(null, 'y2', y2);                            line.setAttributeNS(null, 'stroke', lineStroke);                            line.setAttributeNS(null, 'stroke-width', lineLen);                            document.getElementById('svgTwo').appendChild(line);                        }                    }                }            }            // draw circle            for (var i = 0; i < nodes.length; i++) {                for (j = 0; j < nodes[i].length; j++) {                    var getx = nodes[i][j].x;                    var gety = nodes[i][j].y;                    var circle = document.createElementNS(svgns, 'circle');                    circle.setAttributeNS(null, "cx", getx);                    circle.setAttributeNS(null, "cy", gety);                    circle.setAttributeNS(null, "r", 4.5);                    circle.setAttributeNS(null, "fill", colorset2[i % colorset2.length]);                    circle.setAttributeNS(null, "stroke", "none");                    document.getElementById('svgTwo').appendChild(circle);                }            }        }    </script>    <div class="slidecontainer" id="slidecon">        <label>L: </label>        <input type="range" min="10" max="1000" value="50" class="slider" id="s_L" oninput="document.getElementById('l_L').innerHTML = this.value" onchange="update2(this.value, -1, -1, -1, -1)">        <label id="l_L">50</label>        <br>        <label>K_s: </label>        <input type="range" min="100" max="10000" value="6250" class="slider" id="s_S" oninput="document.getElementById('l_S').innerHTML = this.value" onchange="update2(-1, this.value, -1, -1, -1)">        <label id="l_S">6250</label>        <br>        <label>K_r: </label>        <input type="range" min="0.01" max="5" value="1" step="0.01" class="slider" id="s_R" oninput="document.getElementById('l_R').innerHTML = this.value" onchange="update2(-1, -1, this.value, -1, -1)">        <label id="l_R">1</label>        <br>        <label>Δt: </label>        <input type="range" min="0.005" max="5.000" value="0.04" step="0.001" class="slider" id="s_T" oninput="document.getElementById('l_T').innerHTML = this.value" onchange="update2(-1, -1, -1, this.value, -1)">        <label id="l_T">0.04</label>        <br>        <label>MAX_DIS_SQR: </label>        <input type="range" min="10" max="200" value="50" class="slider" id="s_M" oninput="document.getElementById('l_M').innerHTML = this.value" onchange="update2(-1, -1, -1, -1, this.value)">        <label id="l_M">50</label>        <br>    </div>    </body></html><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;header&gt;force directed graph&lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        #svgHolder &#123;</span></span><br><span class="line"><span class="regexp">            position: relative</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .svg2 &#123;</span></span><br><span class="line"><span class="regexp">            position: absolute;</span></span><br><span class="line"><span class="regexp">            top: 0px;</span></span><br><span class="line"><span class="regexp">            left: 0px;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span> = <span class="string">"n_cnt"</span>&gt;Nodes Count:&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type = "number" id = "n_cnt" name = "n_cnt" value = "60" min = "30" max = "1000"&gt;&lt;/i</span>nput&gt;</span><br><span class="line">    &lt;button type = <span class="string">"button"</span> onclick = <span class="string">"update()"</span>&gt;Generate&lt;<span class="regexp">/button&gt;&lt;br&gt;&lt;/</span>br&gt;</span><br><span class="line">    &lt;div id = <span class="string">"svgHolder"</span>&gt;</span><br><span class="line">        &lt;svg id = <span class="string">"svgOne"</span> width =<span class="string">"1190"</span> height = <span class="string">"590"</span>&gt;&lt;<span class="regexp">/svg&gt;</span></span><br><span class="line"><span class="regexp">        &lt;svg id = "svgTwo" class = "svg2" width ="1190" height = "590"&gt;&lt;/</span>svg&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var margin = &#123;top: 10, right: 10, bottom: 10, left: 10&#125;,</span></span><br><span class="line"><span class="regexp">          width = 1200 - margin.left - margin.right,</span></span><br><span class="line"><span class="regexp">          height = 600 - margin.top - margin.bottom;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        var svgns = "http:/</span><span class="regexp">/www.w3.org/</span><span class="number">2000</span>/svg<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var colorset1 = ['#FFADAD', '#FFC2A9', '#FFD6A5', '#FDFFB6', '#CAFFBF', '#9BF6FF', '#A0C4FF', '#BDB2FF', '#FFC6FF', '#FFFFFC'];</span></span><br><span class="line"><span class="string">        var colorset2 = ['#F94144', '#F3722C', '#F8961E', '#F9C74F', '#90BE6D', '#52838F', '#577590', '#7209B7', '#B5179E', '#EDF2F4'];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        let o_nodes = [], nodes = [];</span></span><br><span class="line"><span class="string">        var node_cnt = 60, maxNodeX = width - 2, maxNodeY = height - 2;</span></span><br><span class="line"><span class="string">        var connect = [], con_fsx = [], con_fsy = [], con_fs = [];</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        var L = 50, K_r = 6250, K_s = 1, delta_t = 0.04;</span></span><br><span class="line"><span class="string">        var MAX_DIS_SQR = 50;// ???</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        gen_d();</span></span><br><span class="line"><span class="string">        draw_old();</span></span><br><span class="line"><span class="string">        cal_force();</span></span><br><span class="line"><span class="string">        update_position();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        draw_new()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        function update() &#123;</span></span><br><span class="line"><span class="string">            document.getElementById('svgOne').innerHTML = "</span><span class="string">";</span></span><br><span class="line"><span class="string">            document.getElementById('svgTwo').innerHTML = "</span><span class="string">";</span></span><br><span class="line"><span class="string">            o_nodes.length = 0, nodes.length = 0, node_cnt = document.getElementById("</span>n_cnt<span class="string">").value;</span></span><br><span class="line"><span class="string">            connect.length = 0, con_fsx.length = 0, con_fsy.length = 0, con_fs.length = 0;</span></span><br><span class="line"><span class="string">            gen_d();</span></span><br><span class="line"><span class="string">            draw_old();</span></span><br><span class="line"><span class="string">            cal_force();</span></span><br><span class="line"><span class="string">            update_position();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            draw_new();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        function update2(_l, _kr, _ks, _dt, _msd) &#123;</span></span><br><span class="line"><span class="string">            document.getElementById('svgTwo').innerHTML = "</span><span class="string">";</span></span><br><span class="line"><span class="string">            if (_l != -1)</span></span><br><span class="line"><span class="string">                L = _l;</span></span><br><span class="line"><span class="string">            if (_kr != -1)</span></span><br><span class="line"><span class="string">                K_r = _kr;</span></span><br><span class="line"><span class="string">            if (_ks != -1)</span></span><br><span class="line"><span class="string">                K_s = _ks;</span></span><br><span class="line"><span class="string">            if (_dt != -1)</span></span><br><span class="line"><span class="string">                delta_t = _dt;</span></span><br><span class="line"><span class="string">            if (_msd != -1)</span></span><br><span class="line"><span class="string">                MAX_DIS_SQR = _msd;</span></span><br><span class="line"><span class="string">            con_fs.length = 0;</span></span><br><span class="line"><span class="string">            for (var i = 0; i &lt; con_fsx.length; i++) &#123;</span></span><br><span class="line"><span class="string">                for (var j = 0; j &lt; con_fsx[i].length; j++) &#123;</span></span><br><span class="line"><span class="string">                    con_fsx[i][j] = 0;</span></span><br><span class="line"><span class="string">                    con_fsy[i][j] = 0;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            nodes.length = 0;</span></span><br><span class="line"><span class="string">            nodes = deepClone(o_nodes);</span></span><br><span class="line"><span class="string">               </span></span><br><span class="line"><span class="string">            cal_force();</span></span><br><span class="line"><span class="string">            update_position();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            draw_new();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        function deepClone (obj) &#123;</span></span><br><span class="line"><span class="string">            if (typeof obj !== 'object')</span></span><br><span class="line"><span class="string">                return obj;</span></span><br><span class="line"><span class="string">            if (!obj) // obj null</span></span><br><span class="line"><span class="string">                return obj;</span></span><br><span class="line"><span class="string">            if (obj instanceof Date)</span></span><br><span class="line"><span class="string">                return new Date(obj);</span></span><br><span class="line"><span class="string">            if (obj instanceof RegExp)</span></span><br><span class="line"><span class="string">                return new RegExp(obj);</span></span><br><span class="line"><span class="string">            if (obj instanceof Function)</span></span><br><span class="line"><span class="string">                return obj;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            let newObj;</span></span><br><span class="line"><span class="string">            if (obj instanceof Array) &#123;</span></span><br><span class="line"><span class="string">                newObj = [];</span></span><br><span class="line"><span class="string">                for(let i = 0, len = obj.length; i &lt; len; i++)</span></span><br><span class="line"><span class="string">                    newObj.push(deepClone(obj[i]));</span></span><br><span class="line"><span class="string">                return newObj;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            newObj = &#123;&#125;;</span></span><br><span class="line"><span class="string">            for (let key in obj) &#123;</span></span><br><span class="line"><span class="string">                if (obj.hasOwnProperty(key)) &#123;</span></span><br><span class="line"><span class="string">                    if (typeof obj[key] !== 'object')</span></span><br><span class="line"><span class="string">                        newObj[key] = obj[key];</span></span><br><span class="line"><span class="string">                    else</span></span><br><span class="line"><span class="string">                        newObj[key] = deepClone(obj[key]);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            return newObj;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // generate data....</span></span><br><span class="line"><span class="string">        function gen_d() &#123;</span></span><br><span class="line"><span class="string">            var temp_cnt = 0, group = 0;</span></span><br><span class="line"><span class="string">            while (temp_cnt &lt; node_cnt) &#123;//max-min+1 +min</span></span><br><span class="line"><span class="string">                // generate nodes</span></span><br><span class="line"><span class="string">                var x0 = Math.floor(Math.random() * (maxNodeX - 1 + 1) ) + 1;</span></span><br><span class="line"><span class="string">                var y0 = Math.floor(Math.random() * (maxNodeY - 1 + 1) ) + 1;</span></span><br><span class="line"><span class="string">                var cnt1 = Math.floor(Math.random() * (15 - 2 + 1) ) + 2;</span></span><br><span class="line"><span class="string">                if (temp_cnt + cnt1 &gt; node_cnt)</span></span><br><span class="line"><span class="string">                    cnt1 = node_cnt - temp_cnt;</span></span><br><span class="line"><span class="string">                var range_g = 50;</span></span><br><span class="line"><span class="string">                var Fr_x = 0, Fr_y = 0, Fs_x = 0, Fs_y = 0;</span></span><br><span class="line"><span class="string">                var x = x0, y = y0;</span></span><br><span class="line"><span class="string">                o_nodes[group] = new Array;</span></span><br><span class="line"><span class="string">                nodes[group] = new Array;</span></span><br><span class="line"><span class="string">                o_nodes[group].push(&#123;x,y,Fr_x,Fr_y,Fs_x,Fs_y&#125;);</span></span><br><span class="line"><span class="string">                nodes[group].push(&#123;x,y,Fr_x,Fr_y,Fs_x,Fs_y&#125;);</span></span><br><span class="line"><span class="string">                for (var i = 1; i &lt; cnt1; i++) &#123; // generate group nodes</span></span><br><span class="line"><span class="string">                    var dx = Math.floor(Math.random() * (range_g - 1 + 1) ) + 1;</span></span><br><span class="line"><span class="string">                    var dy = Math.floor(Math.random() * (range_g - 1 + 1) ) + 1;</span></span><br><span class="line"><span class="string">                    var x1 = x0 + dx, y1 = y0 + dy;</span></span><br><span class="line"><span class="string">                    var x2 = x0 - dx, y2 = y0 - dy;</span></span><br><span class="line"><span class="string">                    var x, y;</span></span><br><span class="line"><span class="string">                    if (x1 &gt; maxNodeX || x1 &lt; 0)</span></span><br><span class="line"><span class="string">                        x = x2;</span></span><br><span class="line"><span class="string">                    else x = x1;</span></span><br><span class="line"><span class="string">                    if (y1 &gt; maxNodeY || y1 &lt; 0)</span></span><br><span class="line"><span class="string">                        y = y2;</span></span><br><span class="line"><span class="string">                    else y = y1;</span></span><br><span class="line"><span class="string">                    o_nodes[group].push(&#123;x,y,Fr_x,Fr_y,Fs_x,Fs_y&#125;);</span></span><br><span class="line"><span class="string">                    nodes[group].push(&#123;x,y,Fr_x,Fr_y,Fs_x,Fs_y&#125;);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                // generate connection</span></span><br><span class="line"><span class="string">                var con0 = [];</span></span><br><span class="line"><span class="string">                for (var i = 0; i &lt; cnt1; i++) &#123;</span></span><br><span class="line"><span class="string">                    con0[i] = new Array(cnt1);</span></span><br><span class="line"><span class="string">                    con0[i].fill(0, 0, cnt1);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                for (var i = 0; i &lt; cnt1 - 1; i++) &#123;</span></span><br><span class="line"><span class="string">                    for (var j = i + 1; j &lt; cnt1; j++) &#123;</span></span><br><span class="line"><span class="string">                        var isconnected = Math.floor(Math.random() * 10);</span></span><br><span class="line"><span class="string">                        if (isconnected &gt;= 6) &#123;</span></span><br><span class="line"><span class="string">                            con0[i][j] = 1;</span></span><br><span class="line"><span class="string">                            con0[j][i] = 1;</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                connect.push(con0);</span></span><br><span class="line"><span class="string">                group++;</span></span><br><span class="line"><span class="string">                temp_cnt += cnt1;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            var con1 = [];</span></span><br><span class="line"><span class="string">            for (var i = 0; i &lt; group; i++) &#123;</span></span><br><span class="line"><span class="string">                con1[i] = new Array(group);</span></span><br><span class="line"><span class="string">                con1[i].fill(0, 0, group);</span></span><br><span class="line"><span class="string">                con_fsx[i] = new Array(group);</span></span><br><span class="line"><span class="string">                con_fsx[i].fill(0, 0, group);</span></span><br><span class="line"><span class="string">                con_fsy[i] = new Array(group);</span></span><br><span class="line"><span class="string">                con_fsy[i].fill(0, 0, group);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            for (var i = 0; i &lt; group - 1; i++) &#123;</span></span><br><span class="line"><span class="string">                var newCon = Math.floor(Math.random() * group - i) + i;</span></span><br><span class="line"><span class="string">                con1[newCon][i] = 1;</span></span><br><span class="line"><span class="string">                con1[i][newCon] = 1;</span></span><br><span class="line"><span class="string">                for (var j = i + 1; j &lt; group; j++) &#123;</span></span><br><span class="line"><span class="string">                    var isconnected = Math.floor(Math.random() * 10);</span></span><br><span class="line"><span class="string">                    if (isconnected &gt;= 6) &#123;</span></span><br><span class="line"><span class="string">                        con1[i][j] = 1;</span></span><br><span class="line"><span class="string">                        con1[j][i] = 1;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            connect.push(con1);</span></span><br><span class="line"><span class="string">            console.log("</span>connected? : <span class="string">", connect);</span></span><br><span class="line"><span class="string">            console.log("</span>now <span class="keyword">get</span> data: ", o_nodes);</span><br><span class="line">            console.log("copy nodes: ", nodes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function cal_force() &#123;</span><br><span class="line">            <span class="comment">// repulsion force between all pairs</span></span><br><span class="line">            <span class="comment">// if they are connected, calculate spring force</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i1 = <span class="number">0</span>; i1 &lt; nodes.length; i1++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i2 = <span class="number">0</span>; i2 &lt; nodes[i1].length - <span class="number">1</span>; i2++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> node1 = nodes[i1][i2];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> j1 = i1; j1 &lt; nodes.length; j1++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> j2 = <span class="number">0</span>; j2 &lt; nodes[j1].length; j2++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (j1 == i1 &amp;&amp; j2 &lt;= i2)</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            <span class="keyword">var</span> node2 = nodes[j1][j2];</span><br><span class="line">                            <span class="keyword">var</span> dx = node2.x - node1.x;</span><br><span class="line">                            <span class="keyword">var</span> dy = node2.y - node1.y;</span><br><span class="line">                            <span class="keyword">if</span> (dx != <span class="number">0</span> || dy != <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">var</span> disSqu = dx*dx + dy*dy;</span><br><span class="line">                                <span class="keyword">var</span> dis = <span class="built_in">Math</span>.sqrt(disSqu);</span><br><span class="line">                                <span class="keyword">var</span> force = K_r / disSqu;</span><br><span class="line">                                <span class="keyword">var</span> fx = force * dx / dis;</span><br><span class="line">                                <span class="keyword">var</span> fy = force * dy / dis;</span><br><span class="line">                                node1.Fr_x = node1.Fr_x - fx;</span><br><span class="line">                                node1.Fr_y = node1.Fr_y - fy;</span><br><span class="line">                                node2.Fr_x = node2.Fr_x + fx;</span><br><span class="line">                                node2.Fr_y = node2.Fr_y + fy;</span><br><span class="line">                                <span class="keyword">if</span> (i1 == j1 &amp;&amp; connect[i1][i2][j2] == <span class="number">1</span>) &#123;</span><br><span class="line">                                    <span class="keyword">var</span> force2 = K_s * (dis - L);</span><br><span class="line">                                    <span class="keyword">var</span> fx2 = force2 * dx / dis;</span><br><span class="line">                                    <span class="keyword">var</span> fy2 = force2 * dy / dis;</span><br><span class="line">                                    node1.Fs_x = node1.Fs_x + fx2;</span><br><span class="line">                                    node1.Fs_y = node1.Fs_y + fy2;</span><br><span class="line">                                    node2.Fs_x = node2.Fs_x - fx2;</span><br><span class="line">                                    node2.Fs_y = node2.Fs_y - fy2;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (i2 == <span class="number">0</span> &amp;&amp; j2 == <span class="number">0</span> &amp;&amp; i1 != j1) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (connect[nodes.length][i1][j1] == <span class="number">1</span>) &#123;</span><br><span class="line">                                        <span class="keyword">var</span> force3 = K_s * (dis - L);</span><br><span class="line">                                        <span class="keyword">var</span> fx3 = force3 * dx / dis;</span><br><span class="line">                                        <span class="keyword">var</span> fy3 = force3 * dy / dis;</span><br><span class="line">                                        con_fsx[i1][j1] += fx3;</span><br><span class="line">                                        con_fsy[i1][j1] += fy3;</span><br><span class="line">                                        con_fsx[j1][i1] -= fx3;</span><br><span class="line">                                        con_fsy[j1][i1] -= fy3;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                nodes[i1][i2] = node1;</span><br><span class="line">                                nodes[j1][j2] = node2;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; con_fsx.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; con_fsx.length; j++) &#123;</span><br><span class="line">                    x = x + con_fsx[i][j];</span><br><span class="line">                    y = y + con_fsy[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">                con_fs.push(&#123;x,y&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">update_position</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i1 = <span class="number">0</span>; i1 &lt; nodes.length; i1++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i2  = <span class="number">0</span>; i2 &lt; nodes[i1].length; i2++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> _node = nodes[i1][i2];</span><br><span class="line">                    <span class="keyword">var</span> dx = delta_t * (_node.Fr_x + _node.Fs_x + con_fs[i1].x);</span><br><span class="line">                    <span class="keyword">var</span> dy = delta_t * (_node.Fr_y + _node.Fs_y + con_fs[i1].y);</span><br><span class="line">                    <span class="keyword">var</span> displacement_Sqr = dx*dx + dy*dy;</span><br><span class="line">                    <span class="keyword">if</span> (displacement_Sqr &gt; MAX_DIS_SQR) &#123;</span><br><span class="line">                        <span class="keyword">var</span> disS = <span class="built_in">Math</span>.sqrt(MAX_DIS_SQR / displacement_Sqr);</span><br><span class="line">                        dx = dx * disS;</span><br><span class="line">                        dy = dy * disS;</span><br><span class="line">                    &#125;</span><br><span class="line">                    _node.x = _node.x + dx;</span><br><span class="line">                    _node.y = _node.y + dy;</span><br><span class="line">                    nodes[i1][i2] = _node;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"old &amp; new nodes are here: "</span>, o_nodes, nodes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">draw_old</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// draw line</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; connect.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp_con = connect[i];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; temp_con.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> k = j + <span class="number">1</span>; k &lt; temp_con.length; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (temp_con[j][k] == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">var</span> x1, x2, y1, y2;</span><br><span class="line">                            <span class="keyword">var</span> lineStroke = <span class="string">'#ffdab9'</span>;</span><br><span class="line">                            <span class="keyword">var</span> lineLen = <span class="number">0.5</span>;</span><br><span class="line">                            <span class="keyword">if</span> (i == connect.length - <span class="number">1</span>) &#123;</span><br><span class="line">                                x1 = o_nodes[j][<span class="number">0</span>].x, y1 = o_nodes[j][<span class="number">0</span>].y;</span><br><span class="line">                                x2 = o_nodes[k][<span class="number">0</span>].x, y2 = o_nodes[k][<span class="number">0</span>].y;</span><br><span class="line">                                lineStroke = <span class="string">'#f08080'</span>;</span><br><span class="line">                                lineLen = <span class="number">1.0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span>&#123;</span><br><span class="line">                                x1 = o_nodes[i][j].x, y1 = o_nodes[i][j].y;</span><br><span class="line">                                x2 = o_nodes[i][k].x, y2 = o_nodes[i][k].y;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">var</span> line = <span class="built_in">document</span>.createElementNS(svgns, <span class="string">'line'</span>);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'x1'</span>, x1);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'x2'</span>, x2);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'y1'</span>, y1);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'y2'</span>, y2);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'stroke'</span>, lineStroke);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'stroke-width'</span>, lineLen);</span><br><span class="line">                            <span class="built_in">document</span>.getElementById(<span class="string">'svgOne'</span>).appendChild(line);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// draw circle</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; o_nodes.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; o_nodes[i].length; j++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> getx = o_nodes[i][j].x;</span><br><span class="line">                    <span class="keyword">var</span> gety = o_nodes[i][j].y;</span><br><span class="line">                    <span class="keyword">var</span> circle = <span class="built_in">document</span>.createElementNS(svgns, <span class="string">'circle'</span>);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"cx"</span>, getx);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"cy"</span>, gety);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"r"</span>, <span class="number">3</span>);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"fill"</span>, colorset1[i % colorset1.length]);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"stroke"</span>, <span class="string">"none"</span>);</span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">'svgOne'</span>).appendChild(circle);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">draw_new</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// draw line</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; connect.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp_con = connect[i];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; temp_con.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> k = j + <span class="number">1</span>; k &lt; temp_con.length; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (temp_con[j][k] == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">var</span> x1, x2, y1, y2;</span><br><span class="line">                            <span class="keyword">var</span> lineStroke = <span class="string">'#ffcad4'</span>;</span><br><span class="line">                            <span class="keyword">var</span> lineLen = <span class="number">1.0</span>;</span><br><span class="line">                            <span class="keyword">if</span> (i == connect.length - <span class="number">1</span>) &#123;</span><br><span class="line">                                x1 = nodes[j][<span class="number">0</span>].x, y1 = nodes[j][<span class="number">0</span>].y;</span><br><span class="line">                                x2 = nodes[k][<span class="number">0</span>].x, y2 = nodes[k][<span class="number">0</span>].y;</span><br><span class="line">                                lineStroke = <span class="string">'#9e2a2b'</span>;</span><br><span class="line">                                lineLen = <span class="number">1.5</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span>&#123;</span><br><span class="line">                                x1 = nodes[i][j].x, y1 = nodes[i][j].y;</span><br><span class="line">                                x2 = nodes[i][k].x, y2 = nodes[i][k].y;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">var</span> line = <span class="built_in">document</span>.createElementNS(svgns, <span class="string">'line'</span>);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'x1'</span>, x1);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'x2'</span>, x2);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'y1'</span>, y1);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'y2'</span>, y2);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'stroke'</span>, lineStroke);</span><br><span class="line">                            line.setAttributeNS(<span class="literal">null</span>, <span class="string">'stroke-width'</span>, lineLen);</span><br><span class="line">                            <span class="built_in">document</span>.getElementById(<span class="string">'svgTwo'</span>).appendChild(line);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// draw circle</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; nodes[i].length; j++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> getx = nodes[i][j].x;</span><br><span class="line">                    <span class="keyword">var</span> gety = nodes[i][j].y;</span><br><span class="line">                    <span class="keyword">var</span> circle = <span class="built_in">document</span>.createElementNS(svgns, <span class="string">'circle'</span>);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"cx"</span>, getx);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"cy"</span>, gety);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"r"</span>, <span class="number">4.5</span>);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"fill"</span>, colorset2[i % colorset2.length]);</span><br><span class="line">                    circle.setAttributeNS(<span class="literal">null</span>, <span class="string">"stroke"</span>, <span class="string">"none"</span>);</span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">'svgTwo'</span>).appendChild(circle);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class = "slidecontainer" id = "slidecon"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;label&gt;L: &lt;/</span>label&gt;</span><br><span class="line">        &lt;input type = <span class="string">"range"</span> min = <span class="string">"10"</span> max=<span class="string">"1000"</span> value = <span class="string">"50"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"slider"</span></span><br><span class="line">            id = <span class="string">"s_L"</span> oninput = <span class="string">"document.getElementById('l_L').innerHTML = this.value"</span></span><br><span class="line">            onchange = <span class="string">"update2(this.value, -1, -1, -1, -1)"</span> /&gt;</span><br><span class="line">        &lt;label id = <span class="string">"l_L"</span>&gt;<span class="number">50</span>&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br&gt;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        &lt;label&gt;K_s: &lt;/</span>label&gt;</span><br><span class="line">        &lt;input type = <span class="string">"range"</span> min = <span class="string">"100"</span> max=<span class="string">"10000"</span> value = <span class="string">"6250"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"slider"</span></span><br><span class="line">            id = <span class="string">"s_S"</span> oninput = <span class="string">"document.getElementById('l_S').innerHTML = this.value"</span></span><br><span class="line">            onchange = <span class="string">"update2(-1, this.value, -1, -1, -1)"</span> /&gt;</span><br><span class="line">        &lt;label id = <span class="string">"l_S"</span>&gt;<span class="number">6250</span>&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;label&gt;K_r: &lt;/</span>label&gt;</span><br><span class="line">        &lt;input type = <span class="string">"range"</span> min = <span class="string">"0.01"</span> max=<span class="string">"5"</span> value = <span class="string">"1"</span> step = <span class="string">"0.01"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"slider"</span></span><br><span class="line">            id = <span class="string">"s_R"</span> oninput = <span class="string">"document.getElementById('l_R').innerHTML = this.value"</span></span><br><span class="line">            onchange = <span class="string">"update2(-1, -1, this.value, -1, -1)"</span> /&gt;</span><br><span class="line">        &lt;label id = <span class="string">"l_R"</span>&gt;<span class="number">1</span>&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;label&gt;Δt: &lt;/</span>label&gt;</span><br><span class="line">        &lt;input type = <span class="string">"range"</span> min = <span class="string">"0.005"</span> max=<span class="string">"5.000"</span> value = <span class="string">"0.04"</span> step = <span class="string">"0.001"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"slider"</span></span><br><span class="line">            id = <span class="string">"s_T"</span> oninput = <span class="string">"document.getElementById('l_T').innerHTML = this.value"</span></span><br><span class="line">            onchange = <span class="string">"update2(-1, -1, -1, this.value, -1)"</span> /&gt;</span><br><span class="line">        &lt;label id = <span class="string">"l_T"</span>&gt;<span class="number">0.04</span>&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;label&gt;MAX_DIS_SQR: &lt;/</span>label&gt;</span><br><span class="line">        &lt;input type = <span class="string">"range"</span> min = <span class="string">"10"</span> max=<span class="string">"200"</span> value = <span class="string">"50"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"slider"</span></span><br><span class="line">            id = <span class="string">"s_M"</span> oninput = <span class="string">"document.getElementById('l_M').innerHTML = this.value"</span></span><br><span class="line">            onchange = <span class="string">"update2(-1, -1, -1, -1, this.value)"</span> /&gt;</span><br><span class="line">        &lt;label id = <span class="string">"l_M"</span>&gt;<span class="number">50</span>&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Force-Directed-Graph-Layout&quot;&gt;&lt;a href=&quot;#Force-Directed-Graph-Layout&quot; class=&quot;headerlink&quot; title=&quot;Force Directed Graph Layout&quot;&gt;&lt;/a&gt;Force Directed Graph Layout&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Visualization" scheme="co10.github.io/categories/Visualization/"/>
    
    
      <category term="HTML" scheme="co10.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Squarified Treemap</title>
    <link href="co10.github.io/2020/11/13/Squarified-Treemap/"/>
    <id>co10.github.io/2020/11/13/Squarified-Treemap/</id>
    <published>2020-11-13T07:27:59.000Z</published>
    <updated>2021-01-14T07:30:14.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Squarified-Treemap"><a href="#Squarified-Treemap" class="headerlink" title="Squarified Treemap"></a>Squarified Treemap</h1><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">procedure squarify(list of real children, list of real row, real w)</span><br><span class="line">begin</span><br><span class="line">real c = head(children);</span><br><span class="line"><span class="keyword">if</span> worst(row, w)  worst(row++[c], w) then</span><br><span class="line">squarify(tail(children), row++[c], w)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">layoutrow(row);</span><br><span class="line">squarify(children, [], width());</span><br><span class="line">fi</span><br><span class="line">end</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><img src="https://www.researchgate.net/profile/Fernando_Marson3/publication/47696530/figure/fig13/AS:325701468213287@1454664689810/Example-of-squarified-treemap-process-6.png" alt="img-001"></p><p>如图所示，数据为 <code>[6, 6, 4, 3, 2, 2, 1]</code> , <code>sum = 24 = 6 * 4</code> 所以 treemap 可用 $6×4$ 的矩形表示。</p><ol><li>放入 6，优先靠着短边放，比例为 <code>4:1.5</code>， 标记灰色(表示可更改)。</li><li>放入 6，测试与原先放置的 6 堆叠，靠着短边放，所得 2 个 $2×3$ 的矩形，<code>长边:短边=3:2</code> ，小于 <code>4:1.5</code> 的放置方式。可取，同时加入灰色标记。</li><li>放入 4， 如 Step 3 所示，<code>max(长边:短边) in step3</code> &gt; <code>max(长边:短边) in step 4</code> ，故采取 Step 4 的放置方式，同时把原先标记灰色的部分画出来，标记白色(表示不可更改)。灰色清空，新加入的 4 标记灰色。</li><li>循环方式如前述，最后把剩余空间填满。</li></ol><p>代码采用递归，判断思路如上。</p><h2 id="Major-function-code-of-the-Algorithm"><a href="#Major-function-code-of-the-Algorithm" class="headerlink" title="Major function code of the Algorithm"></a>Major function code of the Algorithm</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">squarify</span>(<span class="params">children, modifiable, w, h, sum, m_area</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//console.log("current in: ",children[0], modifiable);</span></span><br><span class="line">            <span class="keyword">if</span>(children.length === <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"quit"</span>);</span><br><span class="line">                <span class="keyword">var</span> to_right = modifiable[<span class="number">0</span>].verti;</span><br><span class="line">                draw(modifiable, to_right);<span class="comment">// ..............</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> c = children.shift();</span><br><span class="line">            <span class="keyword">var</span> _area = c, _wid, _hei, verti;</span><br><span class="line">            <span class="keyword">if</span>(modifiable.length === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//console.log("case 0");</span></span><br><span class="line">                m_area += c;</span><br><span class="line">                <span class="keyword">if</span>(w &lt;= h) &#123;<span class="comment">// vertical set</span></span><br><span class="line">                    _wid = w;</span><br><span class="line">                    verti = <span class="literal">true</span>;</span><br><span class="line">                    _hei = c / _wid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="comment">// horizontal set</span></span><br><span class="line">                    _hei = h;</span><br><span class="line">                    _wid = c / _hei;</span><br><span class="line">                    verti = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                squarify(children,modifiable,w,h,sum, m_area);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//case 1</span></span><br><span class="line">                <span class="keyword">var</span> leftover = sum - m_area;</span><br><span class="line">                <span class="keyword">var</span> neww, newh;</span><br><span class="line">                <span class="keyword">if</span> (w &gt; h) &#123;</span><br><span class="line">                    neww = leftover / h;</span><br><span class="line">                    newh = h;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    neww = w;</span><br><span class="line">                    newh = leftover / w;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (neww &lt;= newh)&#123;<span class="comment">// vertical set</span></span><br><span class="line">                    _wid = neww;</span><br><span class="line">                    _hei = c / _wid;</span><br><span class="line">                    verti = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">// horizontal set</span></span><br><span class="line">                    _wid = c / newh;</span><br><span class="line">                    _hei = newh;</span><br><span class="line">                    verti= <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//console.log("w,h",_wid,_hei);</span></span><br><span class="line">                <span class="keyword">var</span> temp1 = <span class="built_in">Math</span>.max(_wid,_hei)/<span class="built_in">Math</span>.min(_wid,_hei);<span class="comment">// put in new area</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// case 2</span></span><br><span class="line">                <span class="keyword">var</span> temp_area = m_area + c;<span class="comment">// else include in old area</span></span><br><span class="line">                <span class="keyword">var</span> w1, h1, temp2;</span><br><span class="line">                <span class="keyword">if</span>(w &gt; h) &#123;</span><br><span class="line">                    w1 = temp_area / h;</span><br><span class="line">                    h1 = h;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    w1 = w;</span><br><span class="line">                    h1 = temp_area / w;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(w1 &lt;= h1)&#123;<span class="comment">// stack up, width is the same</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"current 1"</span>, w1, h1);</span><br><span class="line">                    temp2 = <span class="built_in">Math</span>.max(w1,c/w1)/<span class="built_in">Math</span>.min(w1,c/w1);<span class="comment">// put in old area, w1/(c/w1), wid:hei</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)</span><br><span class="line">                        temp2 = <span class="built_in">Math</span>.max(temp2, <span class="built_in">Math</span>.max(w1,modifiable[i]._area/w1)/<span class="built_in">Math</span>.min(w1,modifiable[i]._area/w1));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">//stack right, height is the same</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"current 2"</span>, w1, h1);</span><br><span class="line">                    temp2 = <span class="built_in">Math</span>.max(h1,c/h1)/<span class="built_in">Math</span>.min(h1,c/h1);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)</span><br><span class="line">                        temp2 = <span class="built_in">Math</span>.max(temp2, <span class="built_in">Math</span>.max(modifiable[i]._area/h1,h1)/<span class="built_in">Math</span>.min(modifiable[i]._area/h1,h1));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//console.log("t1,t2",temp1,temp2);</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// case 1</span></span><br><span class="line">                <span class="keyword">if</span> (temp1 &lt;= temp2)&#123;<span class="comment">// clear all modifiable, draw</span></span><br><span class="line">                    <span class="comment">//console.log("case 1");</span></span><br><span class="line">                    <span class="keyword">var</span> to_right = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(w &lt;= h)</span><br><span class="line">                        to_right = <span class="literal">false</span>;</span><br><span class="line">                    draw(modifiable, to_right);<span class="comment">// ..............</span></span><br><span class="line">                    </span><br><span class="line">                    modifiable = [];<span class="comment">//clear it</span></span><br><span class="line">                    modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                    squarify(children,modifiable,neww,newh,sum-m_area,_area);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//case 2</span></span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">// put in modifiable</span></span><br><span class="line">                    <span class="comment">//console.log("case 2");</span></span><br><span class="line">                    <span class="keyword">if</span>(w &gt; h)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)&#123;</span><br><span class="line">                            <span class="keyword">var</span> cur_area = modifiable[i]._area;</span><br><span class="line">                            <span class="keyword">var</span> h_tem = cur_area / w1;</span><br><span class="line">                            modifiable[i]._wid = w1;</span><br><span class="line">                            modifiable[i]._hei = h_tem;</span><br><span class="line">                            modifiable[i].verti = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        _wid = w1;</span><br><span class="line">                        _hei = c / _wid;</span><br><span class="line">                        verti = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)&#123;</span><br><span class="line">                            <span class="keyword">var</span> cur_area = modifiable[i]._area;</span><br><span class="line">                            <span class="keyword">var</span> w_tem = cur_area / h1;</span><br><span class="line">                            modifiable[i]._wid = w_tem;</span><br><span class="line">                            modifiable[i]._hei = h1;</span><br><span class="line">                            modifiable[i].verti = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        _wid = c / h1;</span><br><span class="line">                        _hei = h1;</span><br><span class="line">                        verti = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                    m_area += c;</span><br><span class="line">                    squarify(children,modifiable,w,h,sum,m_area);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>数据采用 <code>javascript</code> 的 <code>Math.random()</code> 随机生成，个数为 10 ，范围 1 到 100 。(可是这个函数生成的随机数不太随机……)</p><p>整体 Treemap 的长宽比固定为 3:2 ，其中一个生成效果图如下：</p><p><img src="https://i.loli.net/2020/11/22/lBhtcrIbQzq6Nf9.png" alt="image.png"></p><p>有点问题就是，如果随机生成的这些数十分接近的话，会变成堆叠的长矩形……</p><p><img src="https://i.loli.net/2020/11/22/aFRp5SKOoCrzjyi.png" alt="image.png"></p><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;header&gt;treemap&lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;svg id="svgOne" viewBox="0 0 610 410" xmlns="http:/</span><span class="regexp">/www.w3.org/</span><span class="number">2000</span>/svg<span class="string">"&gt;&lt;/svg&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        var margin = &#123;top: 10, right: 10, bottom: 10, left: 10&#125;,</span></span><br><span class="line"><span class="string">          width = 600 - margin.left - margin.right,</span></span><br><span class="line"><span class="string">          height = 400 - margin.top - margin.bottom;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var last_vert = true, beginx = margin.left, beginy = margin.top;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var colori = 0;</span></span><br><span class="line"><span class="string">        var colorset = ['#ABDE9C','#5EAC39', '#688F30', '#256E4B', '#285D77', '#3A6CAD', '#489CC2',</span></span><br><span class="line"><span class="string">        '#D4A77F', '#E1CBA6', '#EBECC6', '#E3F2D8', '#EDC9DB', '#CFB5E6', '#ADA8E2'];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var randtimes = 10, maxrand = 100;</span></span><br><span class="line"><span class="string">        var data = [];</span></span><br><span class="line"><span class="string">        for(var i = 0; i &lt; randtimes; i++)</span></span><br><span class="line"><span class="string">            data.push(Math.floor((Math.random() * maxrand) + 1));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //var data = [2, 4, 23, 33, 69, 90, 54, 22, 61, 34, 32];</span></span><br><span class="line"><span class="string">        data.sort(function(a, b)&#123;return b - a&#125;);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        var sum = data.reduce(function(a, b)&#123; return a + b; &#125;, 0);</span></span><br><span class="line"><span class="string">        console.log("</span>data, sum<span class="string">", data, sum);</span></span><br><span class="line"><span class="string">        //var tempsum = prime_factor(sum);</span></span><br><span class="line"><span class="string">        //console.log("</span>tempsum<span class="string">", tempsum);</span></span><br><span class="line"><span class="string">        var tmpd = Math.sqrt(sum / 6);</span></span><br><span class="line"><span class="string">        var ori_w = 3 * tmpd, ori_h = 2 * tmpd;</span></span><br><span class="line"><span class="string">        console.log("</span>original wid, <span class="attr">hei</span>: <span class="string">", ori_w, ori_h);</span></span><br><span class="line"><span class="string">        var svgns = "</span>http:<span class="comment">//www.w3.org/2000/svg";</span></span><br><span class="line"></span><br><span class="line">        squarify(data,[],ori_w,ori_h,sum,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">drawRect</span>(<span class="params">x1, y1, w, h, area</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> rect = <span class="built_in">document</span>.createElementNS(svgns, <span class="string">'rect'</span>);</span><br><span class="line">            rect.setAttributeNS(<span class="literal">null</span>, <span class="string">'x'</span>, x1);</span><br><span class="line">            rect.setAttributeNS(<span class="literal">null</span>, <span class="string">'y'</span>, y1);</span><br><span class="line">            rect.setAttributeNS(<span class="literal">null</span>, <span class="string">'height'</span>, h - <span class="number">1</span>);</span><br><span class="line">            rect.setAttributeNS(<span class="literal">null</span>, <span class="string">'width'</span>, w - <span class="number">1</span>);</span><br><span class="line">            rect.setAttributeNS(<span class="literal">null</span>, <span class="string">'fill'</span>, colorset[colori]);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'svgOne'</span>).appendChild(rect);</span><br><span class="line"></span><br><span class="line">            colori++;</span><br><span class="line">            colori%=colorset.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> newText = <span class="built_in">document</span>.createElementNS(svgns,<span class="string">"text"</span>);</span><br><span class="line">            newText.setAttributeNS(<span class="literal">null</span>,<span class="string">"x"</span>,x1+w/<span class="number">2</span><span class="number">-1</span>);     </span><br><span class="line">            newText.setAttributeNS(<span class="literal">null</span>,<span class="string">"y"</span>,y1+h/<span class="number">2</span><span class="number">-1</span>); </span><br><span class="line">            newText.setAttributeNS(<span class="literal">null</span>,<span class="string">"font-size"</span>,<span class="string">"12"</span>);</span><br><span class="line">            <span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(area);</span><br><span class="line">            newText.appendChild(textNode);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'svgOne'</span>).appendChild(newText);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">rectangle, to_right</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(rectangle);</span><br><span class="line">            <span class="keyword">var</span> orix = beginx, oriy = beginy;</span><br><span class="line">            <span class="keyword">var</span> ratio1, ratio2;</span><br><span class="line">            <span class="keyword">var</span> sameDir = rectangle[<span class="number">0</span>].vert;</span><br><span class="line">            <span class="keyword">if</span>(sameDir == last_vert)</span><br><span class="line">                sameDir = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sameDir = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rectangle.length; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> _area = rectangle[i]._area;</span><br><span class="line">                <span class="keyword">var</span> vert = rectangle[i].verti;</span><br><span class="line">                last_vert = vert;</span><br><span class="line">                <span class="keyword">var</span> w = rectangle[i]._wid, h = rectangle[i]._hei;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"area, width, height, vert?"</span>, _area, w, h, vert);</span><br><span class="line">                ratio1 = w/ori_w*width, ratio2 = h/ori_h*height;</span><br><span class="line">                drawRect(beginx, beginy, ratio1, ratio2, _area);</span><br><span class="line">                <span class="keyword">if</span>(vert == <span class="literal">true</span>)&#123;</span><br><span class="line">                    beginy += ratio2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    beginx += ratio1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(to_right == <span class="literal">false</span>)&#123;<span class="comment">// to below</span></span><br><span class="line">                beginx = orix;</span><br><span class="line">                beginy = oriy + ratio2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="comment">//to right</span></span><br><span class="line">                beginx = orix + ratio1;</span><br><span class="line">                beginy = oriy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// assume w &gt; h, put in h first</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">squarify</span>(<span class="params">children, modifiable, w, h, sum, m_area</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//console.log("current in: ",children[0], modifiable);</span></span><br><span class="line">            <span class="keyword">if</span>(children.length === <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"quit"</span>);</span><br><span class="line">                <span class="keyword">var</span> to_right = modifiable[<span class="number">0</span>].verti;</span><br><span class="line">                draw(modifiable, to_right);<span class="comment">// ..............</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> c = children.shift();</span><br><span class="line">            <span class="keyword">var</span> _area = c, _wid, _hei, verti;</span><br><span class="line">            <span class="keyword">if</span>(modifiable.length === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//console.log("case 0");</span></span><br><span class="line">                m_area += c;</span><br><span class="line">                <span class="keyword">if</span>(w &lt;= h) &#123;<span class="comment">// vertical set</span></span><br><span class="line">                    _wid = w;</span><br><span class="line">                    verti = <span class="literal">true</span>;</span><br><span class="line">                    _hei = c / _wid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="comment">// horizontal set</span></span><br><span class="line">                    _hei = h;</span><br><span class="line">                    _wid = c / _hei;</span><br><span class="line">                    verti = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                squarify(children,modifiable,w,h,sum, m_area);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//case 1</span></span><br><span class="line">                <span class="keyword">var</span> leftover = sum - m_area;</span><br><span class="line">                <span class="keyword">var</span> neww, newh;</span><br><span class="line">                <span class="keyword">if</span> (w &gt; h) &#123;</span><br><span class="line">                    neww = leftover / h;</span><br><span class="line">                    newh = h;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    neww = w;</span><br><span class="line">                    newh = leftover / w;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (neww &lt;= newh)&#123;<span class="comment">// vertical set</span></span><br><span class="line">                    _wid = neww;</span><br><span class="line">                    _hei = c / _wid;</span><br><span class="line">                    verti = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">// horizontal set</span></span><br><span class="line">                    _wid = c / newh;</span><br><span class="line">                    _hei = newh;</span><br><span class="line">                    verti= <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//console.log("w,h",_wid,_hei);</span></span><br><span class="line">                <span class="keyword">var</span> temp1 = <span class="built_in">Math</span>.max(_wid,_hei)/<span class="built_in">Math</span>.min(_wid,_hei);<span class="comment">// put in new area</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// case 2</span></span><br><span class="line">                <span class="keyword">var</span> temp_area = m_area + c;<span class="comment">// else include in old area</span></span><br><span class="line">                <span class="keyword">var</span> w1, h1, temp2;</span><br><span class="line">                <span class="keyword">if</span>(w &gt; h) &#123;</span><br><span class="line">                    w1 = temp_area / h;</span><br><span class="line">                    h1 = h;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    w1 = w;</span><br><span class="line">                    h1 = temp_area / w;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(w1 &lt;= h1)&#123;<span class="comment">// stack up, width is the same</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"current 1"</span>, w1, h1);</span><br><span class="line">                    temp2 = <span class="built_in">Math</span>.max(w1,c/w1)/<span class="built_in">Math</span>.min(w1,c/w1);<span class="comment">// put in old area, w1/(c/w1), wid:hei</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)</span><br><span class="line">                        temp2 = <span class="built_in">Math</span>.max(temp2, <span class="built_in">Math</span>.max(w1,modifiable[i]._area/w1)/<span class="built_in">Math</span>.min(w1,modifiable[i]._area/w1));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">//stack right, height is the same</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"current 2"</span>, w1, h1);</span><br><span class="line">                    temp2 = <span class="built_in">Math</span>.max(h1,c/h1)/<span class="built_in">Math</span>.min(h1,c/h1);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)</span><br><span class="line">                        temp2 = <span class="built_in">Math</span>.max(temp2, <span class="built_in">Math</span>.max(modifiable[i]._area/h1,h1)/<span class="built_in">Math</span>.min(modifiable[i]._area/h1,h1));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//console.log("t1,t2",temp1,temp2);</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// case 1</span></span><br><span class="line">                <span class="keyword">if</span> (temp1 &lt;= temp2)&#123;<span class="comment">// clear all modifiable, draw</span></span><br><span class="line">                    <span class="comment">//console.log("case 1");</span></span><br><span class="line">                    <span class="keyword">var</span> to_right = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(w &lt;= h)</span><br><span class="line">                        to_right = <span class="literal">false</span>;</span><br><span class="line">                    draw(modifiable, to_right);<span class="comment">// ..............</span></span><br><span class="line">                    </span><br><span class="line">                    modifiable = [];<span class="comment">//clear it</span></span><br><span class="line">                    modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                    squarify(children,modifiable,neww,newh,sum-m_area,_area);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//case 2</span></span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">// put in modifiable</span></span><br><span class="line">                    <span class="comment">//console.log("case 2");</span></span><br><span class="line">                    <span class="keyword">if</span>(w &gt; h)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)&#123;</span><br><span class="line">                            <span class="keyword">var</span> cur_area = modifiable[i]._area;</span><br><span class="line">                            <span class="keyword">var</span> h_tem = cur_area / w1;</span><br><span class="line">                            modifiable[i]._wid = w1;</span><br><span class="line">                            modifiable[i]._hei = h_tem;</span><br><span class="line">                            modifiable[i].verti = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        _wid = w1;</span><br><span class="line">                        _hei = c / _wid;</span><br><span class="line">                        verti = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modifiable.length; i++)&#123;</span><br><span class="line">                            <span class="keyword">var</span> cur_area = modifiable[i]._area;</span><br><span class="line">                            <span class="keyword">var</span> w_tem = cur_area / h1;</span><br><span class="line">                            modifiable[i]._wid = w_tem;</span><br><span class="line">                            modifiable[i]._hei = h1;</span><br><span class="line">                            modifiable[i].verti = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        _wid = c / h1;</span><br><span class="line">                        _hei = h1;</span><br><span class="line">                        verti = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    modifiable.push(&#123;_area,_wid,_hei,verti&#125;);</span><br><span class="line">                    m_area += c;</span><br><span class="line">                    squarify(children,modifiable,w,h,sum,m_area);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Squarified-Treemap&quot;&gt;&lt;a href=&quot;#Squarified-Treemap&quot; class=&quot;headerlink&quot; title=&quot;Squarified Treemap&quot;&gt;&lt;/a&gt;Squarified Treemap&lt;/h1&gt;&lt;h2 id=&quot;Algorithm&quot;&gt;&lt;a href=&quot;#Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Algorithm&quot;&gt;&lt;/a&gt;Algorithm&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;procedure squarify(list of real children, list of real row, real w)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;begin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	real c = head(children);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; worst(row, w)  worst(row++[c], w) then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		squarify(tail(children), row++[c], w)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		layoutrow(row);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		squarify(children, [], width());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Visualization" scheme="co10.github.io/categories/Visualization/"/>
    
    
      <category term="HTML" scheme="co10.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Bézier Curve</title>
    <link href="co10.github.io/2020/10/28/Bezier-Curve/"/>
    <id>co10.github.io/2020/10/28/Bezier-Curve/</id>
    <published>2020-10-28T06:31:24.000Z</published>
    <updated>2021-01-14T07:22:53.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Curves"><a href="#Curves" class="headerlink" title="Curves"></a>Curves</h1><a id="more"></a><h2 id="Hermite-Curve"><a href="#Hermite-Curve" class="headerlink" title="Hermite Curve"></a>Hermite Curve</h2><p>The parametric equation of curves is: </p><script type="math/tex; mode=display">P(t)=a_3t^3+a_2t^2+a_1t+a_0, t∈[0,1]</script><p>Derivate it: </p><script type="math/tex; mode=display">P'(t)=3a_3t^2+2a_2t+a_1</script><p>Let $t=0$ and $t=1$, we get: </p><script type="math/tex; mode=display">P(0)=a_0, P'(0)=a_1, P(1)=a_3+a_2+a_1+a_0, P'(1)=3a_3+2a_2+a_1</script><p>So, we take $P_0,P_0’,P_1,P_1’$ as:</p><script type="math/tex; mode=display">P_0=a_0</script><script type="math/tex; mode=display">P_0'=a_1</script><script type="math/tex; mode=display">P_1=a_3+a_2+a_1+a_0</script><script type="math/tex; mode=display">P_1'=3a_3+2a_2+a_1</script><p>so we get: </p><script type="math/tex; mode=display">a_0=P_0</script><script type="math/tex; mode=display">a_1=P_0'</script><script type="math/tex; mode=display">a_2=-3P_0-2P_0'+3P_1-P_1'</script><script type="math/tex; mode=display">a_3=2P_0+P_0'-2P_1+P_1'</script><p>Thus, </p><script type="math/tex; mode=display">P(t)=(2P_0+P_0'-2P_1+P_1')t^3+(-3P_0-2P_0'+3P_1-P_1')t^2+P_0't+P_0</script><p>After simplification: </p><script type="math/tex; mode=display">P(t)=(2t^3-3t^2+1)P_0+(-2t^3+3t^2)P_1+(t^3-2t^2+t)P_0'+(t^3-t^2)P_1',t∈[0,1]</script><p>Let $F_0(t)=2t^3-3t^2+1$, $F_1(t)=-2t^3+3t^2$, $G_0(t)=t^3-2t^2+t$, $G_1(t)=t^3-t^2$. </p><script type="math/tex; mode=display">P(t)=F_0P_0+F_1P_1+G_0P_0'+G_1P_1'=[F_0,F_1,G_0,G_1] \begin{bmatrix}P_0\\P_1\\P_0'\\P_1'\end{bmatrix}</script><p>Let $M=\left[\begin{matrix}1&amp;0&amp;0&amp;0\\0&amp;0&amp;1&amp;0\\ -3&amp;3&amp; -2&amp; -1 \\2&amp; -2 &amp;1&amp;1\end{matrix}\right]$ , so we get: $P(t)=[1,t,t^2,t^3]M\left[\begin{matrix}1&amp;0&amp;0&amp;0\\0&amp;0&amp;1&amp;0\\ -3&amp;3&amp;-2&amp;-1\\2&amp;-2&amp;1&amp;1\end{matrix}\right]$</p><h2 id="Bezier-curve"><a href="#Bezier-curve" class="headerlink" title="Bézier curve"></a>Bézier curve</h2><p>The curve is defined by four points: <strong>the initial position</strong> and <strong>the terminating position</strong> i.e $P_0$ and $P_3$ respectively (which are called “anchors”) and <strong>two separate middle points</strong> i.e $P_1$ and $P_2$ (which are called “handles”) in our example.</p><p>Given distinct points $P_0$ and $P_1$, a linear Bézier curve is simply a  straight line between those two points. The curve is given by</p><script type="math/tex; mode=display">B(t)=(1-t)P_0+tP_1, t∈[0,1]</script><p>A quadratic Bézier curve is the path traced by the function $B(t)$, given points $P_0$, $P_1$, and $P_2$,</p><script type="math/tex; mode=display">B(t)=(1-t)[(1-t)P_0+tP_1]+t[(1-t)P_1+tP_2],t∈[0,1]</script><script type="math/tex; mode=display">B(t)=(1-t)^2P_0+2t(1-t)P_1+t^2P_2,t∈[0,1]</script><p>This can be written in a way that highlights the symmetry with respect to $P_1$:</p><script type="math/tex; mode=display">B(t)=P_1+(1-t)^2(P_0-P_1)+t^2(P_2-P_1), t∈[0,1]</script><script type="math/tex; mode=display">B'(t)=2(1-t)(P_1-P_0)+2t(P_2-P_1)</script><script type="math/tex; mode=display">B''(t)=2(P_2-2P_1+P_0)</script><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>给定空间 $n+1$ 个点的位置矢量 $P_i(i=0,1,2,…,n)$，则 Bézier 曲线可定义为：</p><script type="math/tex; mode=display">P(t)=\sum^{n}_{i=0}P_iB_{i,n}(t), t∈[0,1]</script><p>where $B_{i,n}(t)$ is Bernstein basis polynomials of degree $n$ :</p><script type="math/tex; mode=display">B_{i,n}(t)=\mbox{C}_n^it^i(1-t)^{n-i}=\frac{n!}{i!(n-i)!}(1-t)^{n-i},(i=0,1,...,n)</script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Curves&quot;&gt;&lt;a href=&quot;#Curves&quot; class=&quot;headerlink&quot; title=&quot;Curves&quot;&gt;&lt;/a&gt;Curves&lt;/h1&gt;
    
    </summary>
    
    
      <category term="CG" scheme="co10.github.io/categories/CG/"/>
    
    
      <category term="曲线" scheme="co10.github.io/tags/%E6%9B%B2%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>Liang-Barsky Algorithm</title>
    <link href="co10.github.io/2020/10/14/Liang-Barsky-Algorithm/"/>
    <id>co10.github.io/2020/10/14/Liang-Barsky-Algorithm/</id>
    <published>2020-10-14T06:49:45.000Z</published>
    <updated>2021-01-14T07:18:24.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Liang-Barsky"><a href="#Liang-Barsky" class="headerlink" title="Liang-Barsky"></a>Liang-Barsky</h1><a id="more"></a><h2 id="参数方程"><a href="#参数方程" class="headerlink" title="参数方程"></a>参数方程</h2><p>两点式：</p><script type="math/tex; mode=display">\frac{x-x_1}{y-y_1}=\frac{x_2-x_1}{y_2-y_1}</script><p>换下位置，并设其等于 $t$ ：</p><script type="math/tex; mode=display">\frac{x-x_1}{x_2-x_1}=\frac{y-y_1}{y_2-y_1}=t, t∈[0,1]</script><p>其中 $(x_1,y_1)$ 为左下边界， $(x_2,y_2)$ 为右上边界， $(x,y)$ 位于其间。</p><p>则参数方程可表示为：</p><script type="math/tex; mode=display">x=x_1+t(x_2-x_1)</script><script type="math/tex; mode=display">y=y_1+t(y_2-y_1)</script><h2 id="裁剪窗口不等式"><a href="#裁剪窗口不等式" class="headerlink" title="裁剪窗口不等式"></a>裁剪窗口不等式</h2><script type="math/tex; mode=display">xw_{min}≤x_1+t(x_2-x_1)≤xw_{max}</script><script type="math/tex; mode=display">yw_{min}≤y_1+t(y_2-y_1)≤yw_{max}</script><p>( $xw,yw$ 为边界)</p><p>不等式可表示为：</p><script type="math/tex; mode=display">tp_k≤q_k</script><p>其中， $k=1,2,3,4$ 分别表示左右下上四边界。</p><p>$p$ 与 $q$ 的定义为：</p><script type="math/tex; mode=display">p_1 = -(x_2-x_1),  q_1 = x_1 - xw_{min} (左边界)</script><script type="math/tex; mode=display">p_2 =  (x_2-x_1),  q_2 = xw_{max} - x_1 (右边界)</script><script type="math/tex; mode=display">p_3 = -(y_2-y_1),  q_3 = y_1 - yw_{min} (下边界)</script><script type="math/tex; mode=display">p_4 = (y_2-y_1),  q_4 = yw_{max} - y_1 (上边界)</script><h3 id="判定"><a href="#判定" class="headerlink" title="判定"></a>判定</h3><div class="table-container"><table><thead><tr><th>条件</th><th>线的位置</th></tr></thead><tbody><tr><td>$p_k=0$</td><td>平行于裁剪边界</td></tr><tr><td>$p_k=0$ 且 $q_k&lt;0$</td><td>完全在边界外</td></tr><tr><td>$p_k = 0$ 且 $q_k ≥ 0$</td><td>在边界内</td></tr><tr><td>$p_k &lt; 0$</td><td>线从外到内</td></tr><tr><td>$p_k &gt; 0$</td><td>线从内到外</td></tr></tbody></table></div><p>参数 $t_1,t_2$ 可以判定线的某部分位于裁剪矩形内，当：</p><script type="math/tex; mode=display">p_k<0, 取maximum(0,\frac{q_k}{p_k})</script><script type="math/tex; mode=display">p_k>0, 取minimum(1,\frac{q_k}{p_k})</script><p>若 $t_1 &gt; t_2$, 则线完全在窗口外，可舍弃；否则，裁剪线的止点可由参数 $t$ 决定。</p><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><ol><li>Set $t_{min}=0, t_{max}=1$.</li><li>Calculate the values of $t$ ($t(left)$, $t(right)$, $t(top)$, $t(bottom)$),<br>(a) If $t &lt; t_{min}$ ignore that and move to the next edge.<br>(b) else separate the $t$ values as entering or exiting values using the inner product.<br>(c) If $t$ is entering value, set $t_{min}=t$; if $t$ is existing value, set $t_{max} = t$.</li><li>If $t_{min} &lt; t_{max}$, draw a line from $(x_1 + t_{min}(x_2-x_1), y_1 + t_{min}(y_2-y_1))$ to $(x_1 + t_{max}(x_2-x_1), y_1 + t_{max}(y_2-y_1))$</li><li>If the line crosses over the window, $(x_1 + t_{min}(x_2-x_1), y_1 + t_{min}(y_2-y_1))$ and $(x_1 + t_{max}(x_2-x_1), y_1 + t_{max}(y_2-y_1))$ are the intersection point of line and edge.</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.geeksforgeeks.org/liang-barsky-algorithm/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/liang-barsky-algorithm/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Liang-Barsky&quot;&gt;&lt;a href=&quot;#Liang-Barsky&quot; class=&quot;headerlink&quot; title=&quot;Liang-Barsky&quot;&gt;&lt;/a&gt;Liang-Barsky&lt;/h1&gt;
    
    </summary>
    
    
      <category term="CG" scheme="co10.github.io/categories/CG/"/>
    
    
      <category term="裁剪" scheme="co10.github.io/tags/%E8%A3%81%E5%89%AA/"/>
    
  </entry>
  
  <entry>
    <title>Comparison</title>
    <link href="co10.github.io/2020/10/09/Comparison/"/>
    <id>co10.github.io/2020/10/09/Comparison/</id>
    <published>2020-10-09T07:54:33.000Z</published>
    <updated>2021-01-14T07:56:32.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Data-Collection"><a href="#Data-Collection" class="headerlink" title="Data Collection"></a>Data Collection</h2><a id="more"></a><p>The raw data are from <a href="https://github.com/ZeningQu/World-Bank-Data-by-Indicators" target="_blank" rel="noopener">Word-Bank-Data-by-Indicators</a> . And I picked the <a href="https://github.com/ZeningQu/World-Bank-Data-by-Indicators/tree/master/environment" target="_blank" rel="noopener">Environment data</a> . </p><p>数据来源于 <a href="https://github.com/ZeningQu/World-Bank-Data-by-Indicators" target="_blank" rel="noopener">Word-Bank-Data-by-Indicators</a> . 我挑出了 <a href="https://github.com/ZeningQu/World-Bank-Data-by-Indicators/tree/master/environment" target="_blank" rel="noopener">Environment data</a> . </p><p>However, the raw data are large, widely-ranged, and unobservable. So I sorted them in Excel and choose the data of China simply because I’m a Chinese and I want to explore the historical environment changes in China, where I am living now.</p><p>So I put forward some questions: </p><ul><li>Did the environment changed a great deal in a particular time, or it just simply gets better or worse as time goes by?</li><li>Does it has anything to do with the economy? Do we just develop by means of changing our environment? </li><li>Compared to some countries around us, such as Japan, what can we learn?</li></ul><h2 id="Visual-Analysis"><a href="#Visual-Analysis" class="headerlink" title="Visual Analysis"></a>Visual Analysis</h2><h3 id="Adjusted-savings"><a href="#Adjusted-savings" class="headerlink" title="Adjusted savings"></a>Adjusted savings</h3><p><img src="https://i.loli.net/2020/10/24/4tdHxinfRMJ2GyK.png" alt="image.png"></p><p>很明显可以看出，固定资本消费(consumption of <a href="https://en.wikipedia.org/wiki/Fixed_capital" target="_blank" rel="noopener">fixed capital</a>)是最高的，毕竟中国在发展，在某一方面的投入比重会很大(具体哪一方面不知道)，但同时，二氧化碳的危害也是俱增的，两条折线几乎平行且比重较大。</p><p>能源损耗和矿产损耗也是呈现增长的趋势，但可以发现 <code>[1995, 2005]</code> 这个区间，矿产消耗有一段的急剧下滑，猜测跟当时的某个大事件有关(1999年的洪水？猜的)。</p><h3 id="Emissions"><a href="#Emissions" class="headerlink" title="Emissions"></a>Emissions</h3><p><img src="https://i.loli.net/2020/10/24/QKk3WYCTRH9aA7D.png" alt="image.png"></p><p>氧化气体的排放量逐年增加，同时也可以看出一个特别的波动：1970、1980与1990年的排放量三者均脱离原始趋势而飙升，次年复原。推测是某个事件引起，或者说数据错了。</p><p>同时也可以看出，在2002年后，三者增幅明显增加。</p><h3 id="Fisheries-Production"><a href="#Fisheries-Production" class="headerlink" title="Fisheries Production"></a>Fisheries Production</h3><p><img src="https://i.loli.net/2020/10/24/ZE46Lfh3B1mKyiT.png" alt="image.png"></p><p>1985年以前，以捕鱼业为主。1985年之后，以水产养殖业为主。从中可以看出中国的发展的：随着人民经济水平的提高，从较原始的捕鱼业(自给自足)转向水产养殖业(商品买卖)。</p><h3 id="Rents"><a href="#Rents" class="headerlink" title="Rents"></a>Rents</h3><p><img src="https://i.loli.net/2020/10/24/teqo9G2ZNP6yDKC.png" alt="image-20201024201932114.png"></p><p>6条曲线，其中天然气、矿产、森林资源非常接近0，可见收入主要是煤和石油。</p><p><del>（就是说中国还有大量的地下资源可以开采嘛）</del></p><h3 id="Area"><a href="#Area" class="headerlink" title="Area"></a>Area</h3><p><img src="https://i.loli.net/2020/10/24/kUVSTDBOKNLui9x.png" alt="image.png"></p><p>陆地和森林面几有基础突起的波动——总觉得是数据错了。</p><p>森林面积虽然说逐年增长，但总觉得跟陆地面积比起来还是差了好多。</p><h3 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h3><h4 id="Area-amp-Forest"><a href="#Area-amp-Forest" class="headerlink" title="Area &amp; Forest"></a>Area &amp; Forest</h4><p><img src="https://i.loli.net/2020/10/24/KZcJGF6pd51Ms4e.png" alt="image.png"></p><p>左上：中日陆地面积对比；左下：1991年至2015年中日森林面积的变化；右：1991年至2015年中日森林面积占陆地面积的比重。</p><p>显而易见，中国陆地面积比日本大得多，森林面积也比日本多，但问题在于，中国森林面积占陆地面积的比重是远低于日本的。</p><p>虽然说中国森林面积逐年增长，比重也逐年增大，但对于日本森林面积基本维持不变的状况，我们不难思考：是日本的森林面积受限于陆地面积而停止增长，还是说，发展到如此程度后，对森林资源的开发和再生已经达到了一种可持续的动态平衡？</p><p><img src="https://i.loli.net/2020/10/24/zNierkafZgVwBL1.png" alt="image.png"></p><p>结合该图可知，日本收入来源基本不包含森林，而中国收入来源森林的比重也越来越低，可见，为了我们的环境，不要破坏森林。</p><h4 id="Fishing-Production"><a href="#Fishing-Production" class="headerlink" title="Fishing Production"></a>Fishing Production</h4><p><img src="https://i.loli.net/2020/10/24/JLafBIbjz8XFEtv.png" alt="image.png"></p><p>1990年是个转折点，之后中国水产超过日本，日本不断降低，中国增幅明显增大。难道说，日本在刻意的保护本国资源，其需要的资源靠进口？</p><h4 id="CO2-排放量"><a href="#CO2-排放量" class="headerlink" title="CO2 排放量"></a>CO<sub>2</sub> 排放量</h4><p><img src="https://i.loli.net/2020/10/24/Zhf3ILgAjl5ENkF.png" alt="image.png"></p><p>日本二氧化碳排放量挺稳定的，而且比中国低，中国的排放实在是太猛了，而且增幅一直变大。</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><ol><li>中国在不断发展，从 CO<sub>2</sub> 、CH<sub>4</sub> 、NO 等排放量可知，环境越来越差。</li><li>某些历史时期的突破事件可能源于对环境的破坏，大自然的惩罚才缓解了我们对他的索取与破坏。然后时过境迁，烂事依旧。</li><li>煤矿、石油资源不断开发，不可持续，以后迟早耗尽。这点该学日本，靠进口，抑制本土不可再生资源的开发。</li><li>为了生物多样性，捕鱼业道理同上，需要适当降低。</li><li>森林面积的曲线不够陡，占比还是太低了。</li><li>虽然说森林面积在增大，但资源也不断在开发、 CO<sub>2</sub> 排放恐怖增加，对环境的保护力度会明显低于破坏力度。</li><li>中国太广了，地貌也不尽相同，没有各个地区的自对比很难得出哪里环境变差，哪里环境得到改善，但可以明确2016年比1960年的环境差了非常多。</li></ol><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><p>Too many.</p><p>Lazy to paste.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Data-Collection&quot;&gt;&lt;a href=&quot;#Data-Collection&quot; class=&quot;headerlink&quot; title=&quot;Data Collection&quot;&gt;&lt;/a&gt;Data Collection&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Visualization" scheme="co10.github.io/categories/Visualization/"/>
    
    
      <category term="HTML" scheme="co10.github.io/tags/HTML/"/>
    
      <category term="D3" scheme="co10.github.io/tags/D3/"/>
    
  </entry>
  
  <entry>
    <title>Boxplot</title>
    <link href="co10.github.io/2020/10/07/Boxplot/"/>
    <id>co10.github.io/2020/10/07/Boxplot/</id>
    <published>2020-10-07T07:15:58.000Z</published>
    <updated>2021-01-14T07:24:09.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Boxplot"><a href="#Boxplot" class="headerlink" title="Boxplot"></a>Boxplot</h1><a id="more"></a><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>疫情数据找来找去都太不合适了，样本差距比较大，数据不集中后来我就找了气温的数据。</p><p>使用的是2020年青岛6、7、8月份的日高低温<sup><a href="http://www.weather.com.cn/weather40dn/101120201.shtml" target="_blank" rel="noopener">[1]</a></sup>。</p><p>先找一个模板<sup><a href="https://www.d3-graph-gallery.com/graph/boxplot_show_individual_points.html" target="_blank" rel="noopener">[2]</a></sup>，然后修改。</p><p>先是写了高温的数据，然后在旁边显示低温数据，用于对比。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><html>    <body>        <meta charset="utf-8">        <script src="https://d3js.org/d3.v4.js"></script>        <p>Qingdao daily high and low temperature of Jun, Jul and Aug, 2020</p>        <div id="qdtempera"></div>        <script>            var margin = {top: 10, right: 30, bottom: 30, left: 40},                width = 460 - margin.left - margin.right,                height = 400 - margin.top - margin.bottom;            var svg = d3.select("#qdtempera")                .append("svg")                .attr("width", width + margin.left + margin.right)                .attr("height", height + margin.top + margin.bottom)                .append("g")                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");                svg.append("text")                    .attr("x", 6)                    .attr("y", 0)                    .text("Temperature / ℃")                    .style("font-size", "10px")                    .attr("alignment-baseline","middle")            d3.csv("https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/02/qingdao_temperature.csv", function(data) {                var sumstat = d3.nest()                    .key(function(d) { return d.month; })                    .rollup(function(d) {                    q1 = d3.quantile(d.map(function(g) { return g.high;}).sort(d3.ascending),.25)                    median = d3.quantile(d.map(function(g) { return g.high;}).sort(d3.ascending),.5)                    q3 = d3.quantile(d.map(function(g) { return g.high;}).sort(d3.ascending),.75)                    interQuantileRange = q3 - q1                    min = q1 - 1.5 * interQuantileRange;                    max = q3 + 1.5 * interQuantileRange;                    return({q1: q1, median: median, q3: q3, interQuantileRange: interQuantileRange, min: min, max: max})                })                .entries(data)                var sumstat2 = d3.nest()                    .key(function(d) { return d.month; })                    .rollup(function(d) {                    q1 = d3.quantile(d.map(function(g) { return g.low;}).sort(d3.ascending),.25)                    median = d3.quantile(d.map(function(g) { return g.low;}).sort(d3.ascending),.5)                    q3 = d3.quantile(d.map(function(g) { return g.low;}).sort(d3.ascending),.75)                    interQuantileRange = q3 - q1                    min = q1 - 1.5 * interQuantileRange;                    max = q3 + 1.5 * interQuantileRange;                    return({q1: q1, median: median, q3: q3, interQuantileRange: interQuantileRange, min: min, max: max})                })                .entries(data)                var color1 = ["#e85d04", "#f48c06", "#faa307", "#ffba08"];                var color2 = ["#00b4d8", "#48cae4", "#90e0ef", "#ade8f4"];                var x = d3.scaleBand()                    .range([0, width])                    .domain(["Jun", "Jul", "Aug"])                    .paddingInner(1)                    .paddingOuter(.5)                svg.append("g")                    .attr("transform", "translate(0," + height + ")")                    .call(d3.axisBottom(x))                var y = d3.scaleLinear()                    .domain([13,33])                    .range([height, 0])                svg.append("g").call(d3.axisLeft(y))                var fillopa = 0.8;                svg.selectAll("vertLines")                    .data(sumstat)                    .enter()                    .append("line")                    .attr("x1", function(d){return(x(d.key))})                    .attr("x2", function(d){return(x(d.key))})                    .attr("y1", function(d){return(y(d.value.min))})                    .attr("y2", function(d){return(y(d.value.max))})                    .attr("fill-opacity",fillopa)                    .attr("stroke", color1[1])                    .style("stroke-dasharray", ("4, 4"))                var s2offset = 20;                var s20 = svg.selectAll("vertLines")                    .data(sumstat2)                    .enter()                    .append("line")                    .attr("x1", function(d){return(x(d.key)+s2offset)})                    .attr("x2", function(d){return(x(d.key)+s2offset)})                    .attr("y1", function(d){return(y(d.value.min))})                    .attr("y2", function(d){return(y(d.value.max))})                    .attr("fill-opacity",fillopa)                    .attr("stroke", color2[1])                    .style("stroke-dasharray", ("4, 4"))                var boxWidth = 100;                svg.selectAll("boxes")                    .data(sumstat)                    .enter()                    .append("rect")                    .attr("x", function(d){return(x(d.key)-boxWidth/2)})                    .attr("y", function(d){return(y(d.value.q3))})                    .attr("height", function(d){return(y(d.value.q1)-y(d.value.q3))})                    .attr("width", boxWidth )                    .attr("fill-opacity",fillopa)                    .attr("stroke", color1[1])                    .attr("fill-opacity",fillopa)                    .style("fill", color1[0]);                var s21 = svg.selectAll("boxes")                    .data(sumstat2)                    .enter()                    .append("rect")                    .attr("x", function(d){return(x(d.key)-boxWidth/2 + s2offset)})                    .attr("y", function(d){return(y(d.value.q3))})                    .attr("height", function(d){return(y(d.value.q1)-y(d.value.q3))})                    .attr("width", boxWidth )                    .attr("fill-opacity",fillopa)                    .attr("stroke", color2[1])                    .attr("fill-opacity",fillopa)                    .style("fill", color2[0]);                svg.selectAll("medianLines")                    .data(sumstat)                    .enter()                    .append("line")                    .attr("x1", function(d){return(x(d.key)-boxWidth/2) })                    .attr("x2", function(d){return(x(d.key)+boxWidth/2) })                    .attr("y1", function(d){return(y(d.value.median))})                    .attr("y2", function(d){return(y(d.value.median))})                    .attr("fill-opacity",fillopa)                    .attr("stroke", color1[2])                    .style("width", 80);                var s22 = svg.selectAll("medianLines")                    .data(sumstat2)                    .enter()                    .append("line")                    .attr("x1", function(d){return(x(d.key)-boxWidth/2+s2offset) })                    .attr("x2", function(d){return(x(d.key)+boxWidth/2+s2offset) })                    .attr("y1", function(d){return(y(d.value.median))})                    .attr("y2", function(d){return(y(d.value.median))})                    .attr("fill-opacity",fillopa)                    .attr("stroke", color2[2])                    .style("width", 80);                var jitterWidth = 60;                svg.selectAll("indPoints")                    .data(data)                    .enter()                    .append("circle")                    .attr("cx", function(d){return(x(d.month) - jitterWidth/2 + Math.random()*jitterWidth )})                    .attr("cy", function(d){return(y(d.high))})                    .attr("r", 4)                    .attr("fill-opacity",fillopa)                    .style("fill", color1[3]);                var s23 = svg.selectAll("indPoints")                    .data(data)                    .enter()                    .append("circle")                    .attr("cx", function(d){return(x(d.month) - jitterWidth/2 + Math.random()*jitterWidth + s2offset )})                    .attr("cy", function(d){return(y(d.low))})                    .attr("r", 4)                    .attr("fill-opacity",fillopa)                    .style("fill", color2[3]);            });        </script>    </body></html><h2 id="HTML源代码"><a href="#HTML源代码" class="headerlink" title="HTML源代码"></a>HTML源代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Qingdao daily high and low temperature of Jun, Jul and Aug, 2020<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> = <span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"https://d3js.org/d3.v4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"qdtempera"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> p = d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="actionscript">            p.style(<span class="string">"color"</span>,<span class="string">"#6d6875"</span>).style(<span class="string">"font-size"</span>,<span class="string">"24px"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> margin = &#123;top: <span class="number">10</span>, right: <span class="number">30</span>, bottom: <span class="number">30</span>, left: <span class="number">40</span>&#125;,</span></span><br><span class="line">                width = 460 - margin.left - margin.right,</span><br><span class="line">                height = 400 - margin.top - margin.bottom;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> svg = d3.select(<span class="string">"#qdtempera"</span>)</span></span><br><span class="line"><span class="actionscript">                .append(<span class="string">"svg"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"width"</span>, width + margin.left + margin.right)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"height"</span>, height + margin.top + margin.bottom)</span></span><br><span class="line"><span class="actionscript">                .append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x"</span>, <span class="number">6</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y"</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">                    .text(<span class="string">"Temperature / ℃"</span>)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"font-size"</span>, <span class="string">"10px"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            d3.csv(<span class="string">"https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/02/qingdao_temperature.csv"</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> sumstat = d3.nest()</span></span><br><span class="line"><span class="actionscript">                    .key(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> d.month; &#125;)</span></span><br><span class="line"><span class="actionscript">                    .rollup(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    q1 = d3.quantile(d.map(<span class="function"><span class="keyword">function</span><span class="params">(g)</span> </span>&#123; <span class="keyword">return</span> g.high;&#125;).sort(d3.ascending),<span class="number">.25</span>)</span></span><br><span class="line"><span class="actionscript">                    median = d3.quantile(d.map(<span class="function"><span class="keyword">function</span><span class="params">(g)</span> </span>&#123; <span class="keyword">return</span> g.high;&#125;).sort(d3.ascending),<span class="number">.5</span>)</span></span><br><span class="line"><span class="actionscript">                    q3 = d3.quantile(d.map(<span class="function"><span class="keyword">function</span><span class="params">(g)</span> </span>&#123; <span class="keyword">return</span> g.high;&#125;).sort(d3.ascending),<span class="number">.75</span>)</span></span><br><span class="line">                    interQuantileRange = q3 - q1</span><br><span class="line">                    min = q1 - 1.5 * interQuantileRange;</span><br><span class="line">                    max = q3 + 1.5 * interQuantileRange;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span>(&#123;q1: q1, median: median, q3: q3, interQuantileRange: interQuantileRange, min: min, max: max&#125;)</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .entries(data)</span><br><span class="line">                </span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> sumstat2 = d3.nest()</span></span><br><span class="line"><span class="actionscript">                    .key(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> d.month; &#125;)</span></span><br><span class="line"><span class="actionscript">                    .rollup(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    q1 = d3.quantile(d.map(<span class="function"><span class="keyword">function</span><span class="params">(g)</span> </span>&#123; <span class="keyword">return</span> g.low;&#125;).sort(d3.ascending),<span class="number">.25</span>)</span></span><br><span class="line"><span class="actionscript">                    median = d3.quantile(d.map(<span class="function"><span class="keyword">function</span><span class="params">(g)</span> </span>&#123; <span class="keyword">return</span> g.low;&#125;).sort(d3.ascending),<span class="number">.5</span>)</span></span><br><span class="line"><span class="actionscript">                    q3 = d3.quantile(d.map(<span class="function"><span class="keyword">function</span><span class="params">(g)</span> </span>&#123; <span class="keyword">return</span> g.low;&#125;).sort(d3.ascending),<span class="number">.75</span>)</span></span><br><span class="line">                    interQuantileRange = q3 - q1</span><br><span class="line">                    min = q1 - 1.5 * interQuantileRange;</span><br><span class="line">                    max = q3 + 1.5 * interQuantileRange;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span>(&#123;q1: q1, median: median, q3: q3, interQuantileRange: interQuantileRange, min: min, max: max&#125;)</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .entries(data)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> color1 = [<span class="string">"#e85d04"</span>, <span class="string">"#f48c06"</span>, <span class="string">"#faa307"</span>, <span class="string">"#ffba08"</span>];</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> color2 = [<span class="string">"#00b4d8"</span>, <span class="string">"#48cae4"</span>, <span class="string">"#90e0ef"</span>, <span class="string">"#ade8f4"</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> x = d3.scaleBand()</span></span><br><span class="line">                    .range([0, width])</span><br><span class="line"><span class="actionscript">                    .domain([<span class="string">"Jun"</span>, <span class="string">"Jul"</span>, <span class="string">"Aug"</span>])</span></span><br><span class="line">                    .paddingInner(1)</span><br><span class="line">                    .paddingOuter(.5)</span><br><span class="line"><span class="actionscript">                svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>)</span></span><br><span class="line">                    .call(d3.axisBottom(x))</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> y = d3.scaleLinear()</span></span><br><span class="line">                    .domain([13,33])</span><br><span class="line">                    .range([height, 0])</span><br><span class="line"><span class="actionscript">                svg.append(<span class="string">"g"</span>).call(d3.axisLeft(y))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> fillopa = <span class="number">0.8</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                svg.selectAll(<span class="string">"vertLines"</span>)</span></span><br><span class="line">                    .data(sumstat)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"line"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.min))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.max))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"stroke"</span>, color1[<span class="number">1</span>])</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"stroke-dasharray"</span>, (<span class="string">"4, 4"</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> s2offset = <span class="number">20</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> s20 = svg.selectAll(<span class="string">"vertLines"</span>)</span></span><br><span class="line">                    .data(sumstat2)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"line"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)+s2offset)&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)+s2offset)&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.min))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.max))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"stroke"</span>, color2[<span class="number">1</span>])</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"stroke-dasharray"</span>, (<span class="string">"4, 4"</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> boxWidth = <span class="number">100</span>;</span></span><br><span class="line"><span class="actionscript">                svg.selectAll(<span class="string">"boxes"</span>)</span></span><br><span class="line">                    .data(sumstat)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)-boxWidth/<span class="number">2</span>)&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.q3))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.q1)-y(d.value.q3))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"width"</span>, boxWidth )</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"stroke"</span>, color1[<span class="number">1</span>])</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"fill"</span>, color1[<span class="number">0</span>]);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> s21 = svg.selectAll(<span class="string">"boxes"</span>)</span></span><br><span class="line">                    .data(sumstat2)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)-boxWidth/<span class="number">2</span> + s2offset)&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.q3))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.q1)-y(d.value.q3))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"width"</span>, boxWidth )</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"stroke"</span>, color2[<span class="number">1</span>])</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"fill"</span>, color2[<span class="number">0</span>]);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                svg.selectAll(<span class="string">"medianLines"</span>)</span></span><br><span class="line">                    .data(sumstat)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"line"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)-boxWidth/<span class="number">2</span>) &#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)+boxWidth/<span class="number">2</span>) &#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.median))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.median))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"stroke"</span>, color1[<span class="number">2</span>])</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"width"</span>, <span class="number">80</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> s22 = svg.selectAll(<span class="string">"medianLines"</span>)</span></span><br><span class="line">                    .data(sumstat2)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"line"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)-boxWidth/<span class="number">2</span>+s2offset) &#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(x(d.key)+boxWidth/<span class="number">2</span>+s2offset) &#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y1"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.median))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y2"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.value.median))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"stroke"</span>, color2[<span class="number">2</span>])</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"width"</span>, <span class="number">80</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> jitterWidth = <span class="number">60</span>;</span></span><br><span class="line"><span class="actionscript">                svg.selectAll(<span class="string">"indPoints"</span>)</span></span><br><span class="line">                    .data(data)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="javascript">                    .attr(<span class="string">"cx"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span>(x(d.month) - jitterWidth/<span class="number">2</span> + <span class="built_in">Math</span>.random()*jitterWidth )&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"cy"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.high))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"fill"</span>, color1[<span class="number">3</span>]);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> s23 = svg.selectAll(<span class="string">"indPoints"</span>)</span></span><br><span class="line">                    .data(data)</span><br><span class="line">                    .enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="javascript">                    .attr(<span class="string">"cx"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span>(x(d.month) - jitterWidth/<span class="number">2</span> + <span class="built_in">Math</span>.random()*jitterWidth + s2offset )&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"cy"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span>(y(d.low))&#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"fill-opacity"</span>,fillopa)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"fill"</span>, color2[<span class="number">3</span>]);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p><code>d3.nest()</code>分组数据，然后计算<em>Q</em><sub>1</sub>、<em>Q</em><sub>2</sub>、<em>Q</em><sub>3</sub>、Interquartile range (IQR)、<em>max</em>、<em>min</em> <sup><a href="https://en.wikipedia.org/wiki/Box_plot" target="_blank" rel="noopener">[3]</a></sup>。</p><p><em>Q</em><sub>1</sub> 为0.25的数据点，<em>Q</em><sub>2</sub> 为中间数，<em>Q</em><sub>3</sub> 为0.75的数据点，<em>IQR</em> 为四分位差。</p><script type="math/tex; mode=display">IQR = Q{_3} - Q{_1}</script><p>最大值区间：</p><script type="math/tex; mode=display">max = Q{_3} + 1.5IQR</script><p>最小值区间：</p><script type="math/tex; mode=display">min = Q{_1} - 1.5IQR</script><p>后面的数据点用<code>Math.random()</code>增加 <em>x</em> 方向的偏移量，避免集中在一条直线上。</p><p>低温的数据直接 copy 高温数据建立的代码就行，然后增加 <em>x</em> 方向的偏移量和透明度，再改个颜色，这样好看许多。</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>首先要了解 boxplot 是什么，几个点怎么计算的。</p><p>boxplot 的数据选择一定要选数据点集中的，不然做不起来。</p><p>boxplot 可以反映出数据集中在哪里，围绕着哪条线上下波动。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="http://www.weather.com.cn/weather40dn/101120201.shtml" target="_blank" rel="noopener">http://www.weather.com.cn/weather40dn/101120201.shtml</a></p><p>[2] <a href="https://www.d3-graph-gallery.com/graph/boxplot_show_individual_points.html" target="_blank" rel="noopener">https://www.d3-graph-gallery.com/graph/boxplot_show_individual_points.html</a></p><p>[3] <a href="https://en.wikipedia.org/wiki/Box_plot" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Box_plot</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Boxplot&quot;&gt;&lt;a href=&quot;#Boxplot&quot; class=&quot;headerlink&quot; title=&quot;Boxplot&quot;&gt;&lt;/a&gt;Boxplot&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Visualization" scheme="co10.github.io/categories/Visualization/"/>
    
    
      <category term="HTML" scheme="co10.github.io/tags/HTML/"/>
    
      <category term="D3" scheme="co10.github.io/tags/D3/"/>
    
  </entry>
  
  <entry>
    <title>Histogram</title>
    <link href="co10.github.io/2020/10/07/Histogram/"/>
    <id>co10.github.io/2020/10/07/Histogram/</id>
    <published>2020-10-07T07:08:14.000Z</published>
    <updated>2021-01-14T07:24:25.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h1><a id="more"></a><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>直方图用于统计样本及其数量的度量，由于中国疫情已经过去，使用历史数据筛选出来太麻烦了，所以我找了美国疫情的当天的数据(Cases, Deaths, Recovery, Hospitalization)<sup><a href="https://en.wikipedia.org/wiki/COVID-19_pandemic_in_the_United_States#covid19-container" target="_blank" rel="noopener">[1]</a></sup>。</p><p>先找一个模板<sup><a href="https://www.d3-graph-gallery.com/graph/histogram_basic.html" target="_blank" rel="noopener">[2]</a></sup>，然后修改。</p><p>后来我又加入了<code>button</code>的功能<sup><a href="https://www.d3-graph-gallery.com/graph/line_change_data.html" target="_blank" rel="noopener">[3]</a></sup>，用于查看那4类数据。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><html>    <body>        <p>Covid-19 statistics in US of all states, 7th, Oct, 2020</p>        <meta charset="utf-8">        <script src="https://d3js.org/d3.v4.js"></script>        <style>            .button {                background-color: #fff5eb;                border: none;                border-radius: 8px;                color: #936223;                padding: 8px 20px;                text-align: center;                text-decoration: none;                display: inline-block;                font-size: 16px;                box-shadow: 0 8px 12px 0 rgba(0,0,0,0.2), 0 3px 6px 0 rgba(0,0,0,0.19);            }        </style>        <button class="button" onclick="choose(1)">Cases</button>        <button class="button" onclick="choose(2)">Deaths</button>        <button class="button" onclick="choose(3)">Recov.</button>        <button class="button" onclick="choose(4)">Hosp.</button>        <div id="covid19"></div>        <script>            var p = d3.select("body").selectAll("p");            var margin = {top: 30, right: 30, bottom: 30, left: 40},                width = 600 - margin.left - margin.right,                height = 450 - margin.top - margin.bottom;            var svg = d3.select("#covid19")                .append("svg")                .attr("width", width + margin.left + margin.right)                .attr("height", height + margin.top + margin.bottom)                .append("g")                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");            var x = d3.scaleLinear().range([0, width]);            var xAxis = d3.axisBottom().scale(x);            svg.append("g")                .attr("transform", "translate(0," + height + ")")                .attr("class","myXaxis");            var y = d3.scaleLinear().range([height, 0]);            var yAxis = d3.axisLeft().scale(y);            svg.append("g")                .attr("class","myYaxis");            var cases = [], deaths = [], recovery = [], hosp = [];            d3.csv("https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/02/covid-19_US_7th%2COct%2C20.csv", function(data){                data.map(function(d) {                    cases.push(d.Cases);                    deaths.push(d.Deaths);                    recovery.push(d.Recovery);                    hosp.push(d.Hospitalization);                });            })            function choose(choice) {                var datas = [];                switch(choice){                    case 1: datas = cases; break;                    case 2: datas = deaths; break;                    case 3: datas = recovery; break;                    case 4: datas = hosp; break;                    default: datas = cases; break;                }                update(datas);            }            function update(datas) {                var durSpeed = 1000;                var maxX = d3.max(datas, function(d) { return +d });                x.domain([0, maxX])                svg.selectAll(".myXaxis").transition()                    .duration(durSpeed)                    .call(xAxis);                var bins = d3.histogram()                    .domain(x.domain())                    .thresholds(x.ticks(90))                    (datas);                y.domain([0, d3.max(bins, function(d) { return d.length; })]);                svg.selectAll(".myYaxis")                    .transition()                    .duration(durSpeed)                    .call(yAxis);                var u = svg.selectAll(".rectTrans")                    .data(bins);                u.enter()                    .append("rect")                    .attr("class", "rectTrans")                    .merge(u)                    .transition()                    .duration(durSpeed)                    .attr("x", 1)                    .attr("transform", function(d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })                    .attr("width", function(d) { return x(d.x1) - x(d.x0) - 1; })                    .attr("height", function(d) { return height - y(d.length); })                    .style("fill", "#f26e5d");                svg.append("text")                    .attr("x", width)                    .attr("y", height+10)                    .text("count")                    .style("font-size", "10px")                    .attr("alignment-baseline","middle")                svg.append("text")                    .attr("x", 6)                    .attr("y", 0)                    .text("frequency")                    .style("font-size", "10px")                    .attr("alignment-baseline","middle")            }            choose(1);        </script>    </body></html><h2 id="HTML源代码"><a href="#HTML源代码" class="headerlink" title="HTML源代码"></a>HTML源代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Covid-19 statistics in US of all states, 7th, Oct, 2020<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://d3js.org/d3.v4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.button</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#fff5eb</span>;</span></span><br><span class="line">                border: none;</span><br><span class="line">                border-radius: 8px;</span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#936223</span>;</span></span><br><span class="line">                padding: 8px 20px;</span><br><span class="line">                text-align: center;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">                display: inline-block;</span><br><span class="line">                font-size: 16px;</span><br><span class="line"><span class="css">                <span class="selector-tag">box-shadow</span>: 0 8<span class="selector-tag">px</span> 12<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.2</span>), 0 3<span class="selector-tag">px</span> 6<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.19</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span> = <span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"choose(1)"</span>&gt;</span>Cases<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span> = <span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"choose(2)"</span>&gt;</span>Deaths<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span> = <span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"choose(3)"</span>&gt;</span>Recov.<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span> = <span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"choose(4)"</span>&gt;</span>Hosp.<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"covid19"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> p = d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="actionscript">            p.style(<span class="string">"color"</span>,<span class="string">"#87753c"</span>).style(<span class="string">"font-size"</span>,<span class="string">"24px"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> margin = &#123;top: <span class="number">30</span>, right: <span class="number">30</span>, bottom: <span class="number">30</span>, left: <span class="number">40</span>&#125;,</span></span><br><span class="line">                width = 600 - margin.left - margin.right,</span><br><span class="line">                height = 450 - margin.top - margin.bottom;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> svg = d3.select(<span class="string">"#covid19"</span>)</span></span><br><span class="line"><span class="actionscript">                .append(<span class="string">"svg"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"width"</span>, width + margin.left + margin.right)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"height"</span>, height + margin.top + margin.bottom)</span></span><br><span class="line"><span class="actionscript">                .append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> x = d3.scaleLinear().range([<span class="number">0</span>, width]);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> xAxis = d3.axisBottom().scale(x);</span></span><br><span class="line"><span class="actionscript">            svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"class"</span>,<span class="string">"myXaxis"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> y = d3.scaleLinear().range([height, <span class="number">0</span>]);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> yAxis = d3.axisLeft().scale(y);</span></span><br><span class="line"><span class="actionscript">            svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                .attr(<span class="string">"class"</span>,<span class="string">"myYaxis"</span>);</span></span><br><span class="line">            </span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> cases = [], deaths = [], recovery = [], hosp = [];</span></span><br><span class="line"><span class="actionscript">            d3.csv(<span class="string">"https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/02/covid-19_US_7th%2COct%2C20.csv"</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                data.map(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line">                    cases.push(d.Cases);</span><br><span class="line">                    deaths.push(d.Deaths);</span><br><span class="line">                    recovery.push(d.Recovery);</span><br><span class="line">                    hosp.push(d.Hospitalization);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">choose</span><span class="params">(choice)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> datas = [];</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">switch</span>(choice)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="number">1</span>: datas = cases; <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="number">2</span>: datas = deaths; <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="number">3</span>: datas = recovery; <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">case</span> <span class="number">4</span>: datas = hosp; <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">default</span>: datas = cases; <span class="keyword">break</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">                update(datas);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(datas)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> durSpeed = <span class="number">1000</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> maxX = d3.max(datas, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> +d &#125;);</span></span><br><span class="line">                x.domain([0, maxX])</span><br><span class="line"><span class="actionscript">                svg.selectAll(<span class="string">".myXaxis"</span>).transition()</span></span><br><span class="line">                    .duration(durSpeed)</span><br><span class="line">                    .call(xAxis);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> bins = d3.histogram()</span></span><br><span class="line">                    .domain(x.domain())</span><br><span class="line">                    .thresholds(x.ticks(90))</span><br><span class="line">                    (datas);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                y.domain([<span class="number">0</span>, d3.max(bins, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> d.length; &#125;)]);</span></span><br><span class="line"><span class="actionscript">                svg.selectAll(<span class="string">".myYaxis"</span>)</span></span><br><span class="line">                    .transition()</span><br><span class="line">                    .duration(durSpeed)</span><br><span class="line">                    .call(yAxis);</span><br><span class="line">                    </span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> u = svg.selectAll(<span class="string">".rectTrans"</span>)</span></span><br><span class="line">                    .data(bins);</span><br><span class="line">                </span><br><span class="line">                u.enter()</span><br><span class="line"><span class="actionscript">                    .append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"class"</span>, <span class="string">"rectTrans"</span>)</span></span><br><span class="line">                    .merge(u)</span><br><span class="line">                    .transition()</span><br><span class="line">                    .duration(durSpeed)</span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x"</span>, <span class="number">1</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> <span class="string">"translate("</span> + x(d.x0) + <span class="string">","</span> + y(d.length) + <span class="string">")"</span>; &#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"width"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> x(d.x1) - x(d.x0) - <span class="number">1</span>; &#125;)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> height - y(d.length); &#125;)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"fill"</span>, <span class="string">"#f26e5d"</span>);</span></span><br><span class="line">                    </span><br><span class="line"></span><br><span class="line"><span class="actionscript">                svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x"</span>, width)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y"</span>, height+<span class="number">10</span>)</span></span><br><span class="line"><span class="actionscript">                    .text(<span class="string">"count"</span>)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"font-size"</span>, <span class="string">"10px"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"><span class="actionscript">                svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"x"</span>, <span class="number">6</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"y"</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">                    .text(<span class="string">"frequency"</span>)</span></span><br><span class="line"><span class="actionscript">                    .style(<span class="string">"font-size"</span>, <span class="string">"10px"</span>)</span></span><br><span class="line"><span class="actionscript">                    .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            choose(1);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p><code>d3.histogram()</code>创建直方图。用<code>bins</code>存每一桶的数据。</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>数据选的是2020年10月7日(或者说是6日)美国各个州的感染、死亡、恢复、住院数量，各个州差别可能会比较大，所以数据还是太稀疏了，有些数据中间的数据点空了一大片。</p><p>修正方法是将X轴中间的空白处折叠，但是我不会折叠啊……</p><p>本来也想加入渐变色的，越后面颜色越深表示越严重，但是改来改去没改出来……</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://en.wikipedia.org/wiki/COVID-19_pandemic_in_the_United_States#covid19-container" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/COVID-19_pandemic_in_the_United_States#covid19-container</a></p><p>[2] <a href="https://www.d3-graph-gallery.com/graph/histogram_basic.html" target="_blank" rel="noopener">https://www.d3-graph-gallery.com/graph/histogram_basic.html</a></p><p>[3] <a href="https://www.d3-graph-gallery.com/graph/line_change_data.html" target="_blank" rel="noopener">https://www.d3-graph-gallery.com/graph/line_change_data.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Histogram&quot;&gt;&lt;a href=&quot;#Histogram&quot; class=&quot;headerlink&quot; title=&quot;Histogram&quot;&gt;&lt;/a&gt;Histogram&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Visualization" scheme="co10.github.io/categories/Visualization/"/>
    
    
      <category term="HTML" scheme="co10.github.io/tags/HTML/"/>
    
      <category term="D3" scheme="co10.github.io/tags/D3/"/>
    
  </entry>
  
  <entry>
    <title>Grouped Bar</title>
    <link href="co10.github.io/2020/09/25/Grouped-Bar/"/>
    <id>co10.github.io/2020/09/25/Grouped-Bar/</id>
    <published>2020-09-25T07:05:54.000Z</published>
    <updated>2021-01-14T07:13:57.433Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不同地区、不同季度销售量。</p></blockquote><a id="more"></a><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>表格给出的数据具有同类项：同季度或者同地区。</p><p>可以把相同季度的数据组合，以区域为横轴，销售量为纵轴，每个季度中画出4个季度的销售量(方案1)。</p><p>也可以反过来，以季度为横轴，销售量为纵轴，每个季度中画出3个区域的销售量(方案2)。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>Sales of different Regions and Quarters<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"https://d3js.org/d3.v4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"sales"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// title</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> p = d3.select(<span class="string">"body"</span>)</span></span><br><span class="line"><span class="actionscript">            .selectAll(<span class="string">"p"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"color"</span>,<span class="string">"#1979a9"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>,<span class="string">"24px"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// dimensions and margins</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> margin = &#123; top: <span class="number">10</span>, right: <span class="number">30</span>, bottom: <span class="number">20</span>, left: <span class="number">50</span> &#125;,</span></span><br><span class="line">          width = 460 - margin.left - margin.right,</span><br><span class="line">          height = 400 - margin.top - margin.bottom;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// append the svg object to the body of the page</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> svg = d3.select(<span class="string">"#sales"</span>)</span></span><br><span class="line"><span class="actionscript">            .append(<span class="string">"svg"</span>)</span></span><br><span class="line"><span class="actionscript">              .attr(<span class="string">"width"</span>, width + margin.left + margin.right)</span></span><br><span class="line"><span class="actionscript">              .attr(<span class="string">"height"</span>, height + margin.top + margin.bottom)</span></span><br><span class="line"><span class="actionscript">            .append(<span class="string">"g"</span>) <span class="comment">// group</span></span></span><br><span class="line"><span class="actionscript">              .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Data</span></span></span><br><span class="line"><span class="actionscript">          d3.csv(<span class="string">"https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/01/quarter_region_data.csv"</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// List of subgroups = header of the csv files = soil condition here</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> subgroups = data.columns.slice(<span class="number">1</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// List of groups = species here = value of the first column called group -&gt; I show them on the X axis</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> groups = d3.map(data, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> (d.group) &#125;).keys()</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Add X axis</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> x = d3.scaleBand()</span></span><br><span class="line">            .domain(groups)</span><br><span class="line">            .range([0, width])</span><br><span class="line">            .padding([0.4])</span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>)</span></span><br><span class="line">            .call(d3.axisBottom(x).tickSize(0));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Add Y axis</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> y = d3.scaleLinear()</span></span><br><span class="line">            .domain([0, 90])</span><br><span class="line">            .range([height, 0]);</span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"g"</span>)</span></span><br><span class="line">            .call(d3.axisLeft(y));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Another scale for subgroup position?</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> xSubgroup = d3.scaleBand()</span></span><br><span class="line">            .domain(subgroups)</span><br><span class="line">            .range([0, x.bandwidth()])</span><br><span class="line">            .padding([0.2])</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// color</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> color = d3.scaleOrdinal()</span></span><br><span class="line">            .domain(subgroups)</span><br><span class="line"><span class="actionscript">            .range([<span class="string">'#248760'</span>,<span class="string">'#e33617'</span>,<span class="string">'#ecb814'</span>,<span class="string">'#66abdd'</span>])</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> gbars = svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">            .selectAll(<span class="string">"g"</span>)</span></span><br><span class="line">            .data(data)</span><br><span class="line">            .enter()</span><br><span class="line"><span class="actionscript">            .append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> <span class="string">"translate("</span> + x(d.group) + <span class="string">",0)"</span>; &#125;);</span></span><br><span class="line"><span class="actionscript">          gbars.selectAll(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">            .data(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> subgroups.map(<span class="function"><span class="keyword">function</span><span class="params">(key)</span> </span>&#123; <span class="keyword">return</span> &#123;key: key, value: d[key]&#125;; &#125;); &#125;)</span></span><br><span class="line"><span class="actionscript">            .enter().append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> xSubgroup(d.key); &#125;)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> y(d.value); &#125;)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"width"</span>, xSubgroup.bandwidth())</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> height - y(d.value); &#125;)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"fill"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> color(d.key); &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>,<span class="number">5</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>,<span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"Sales"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cx"</span>,<span class="number">280</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cy"</span>,<span class="number">10</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"fill"</span>, color(<span class="number">1</span>))</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cx"</span>,<span class="number">280</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cy"</span>,<span class="number">30</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"fill"</span>, color(<span class="number">2</span>))</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cx"</span>,<span class="number">280</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cy"</span>,<span class="number">50</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"fill"</span>, color(<span class="number">3</span>))</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cx"</span>,<span class="number">280</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cy"</span>,<span class="number">70</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"fill"</span>, color(<span class="number">4</span>))</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">290</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">10</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"Quarter 1"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">290</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">30</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"Quarter 2"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">290</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">50</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"Quarter 3"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">290</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">70</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"Quarter 4"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line">          &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><h4 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>Sales of different Quarters and Regions<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"https://d3js.org/d3.v4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"sales"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// title</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> p = d3.select(<span class="string">"body"</span>)</span></span><br><span class="line"><span class="actionscript">            .selectAll(<span class="string">"p"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"color"</span>, <span class="string">"#1979a9"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>,<span class="string">"24px"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// dimensions and margins</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> margin = &#123; top: <span class="number">10</span>, right: <span class="number">30</span>, bottom: <span class="number">20</span>, left: <span class="number">50</span> &#125;,</span></span><br><span class="line">          width = 460 - margin.left - margin.right,</span><br><span class="line">          height = 400 - margin.top - margin.bottom;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// append the svg object to the body of the page</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> svg = d3.select(<span class="string">"#sales"</span>)</span></span><br><span class="line"><span class="actionscript">            .append(<span class="string">"svg"</span>)</span></span><br><span class="line"><span class="actionscript">              .attr(<span class="string">"width"</span>, width + margin.left + margin.right)</span></span><br><span class="line"><span class="actionscript">              .attr(<span class="string">"height"</span>, height + margin.top + margin.bottom)</span></span><br><span class="line"><span class="actionscript">            .append(<span class="string">"g"</span>) <span class="comment">// group</span></span></span><br><span class="line"><span class="actionscript">              .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Data</span></span></span><br><span class="line"><span class="actionscript">          d3.csv(<span class="string">"https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/01/region_quarter_data.csv"</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// List of subgroups = header of the csv files = soil condition here</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> subgroups = data.columns.slice(<span class="number">1</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// List of groups = species here = value of the first column called group -&gt; I show them on the X axis</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> groups = d3.map(data, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> (d.group) &#125;).keys()</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Add X axis</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> x = d3.scaleBand()</span></span><br><span class="line">            .domain(groups)</span><br><span class="line">            .range([0, width])</span><br><span class="line">            .padding([0.4])</span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>)</span></span><br><span class="line">            .call(d3.axisBottom(x).tickSize(0));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Add Y axis</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> y = d3.scaleLinear()</span></span><br><span class="line">            .domain([0, 90])</span><br><span class="line">            .range([height, 0]);</span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"g"</span>)</span></span><br><span class="line">            .call(d3.axisLeft(y));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// Another scale for subgroup position?</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> xSubgroup = d3.scaleBand()</span></span><br><span class="line">            .domain(subgroups)</span><br><span class="line">            .range([0, x.bandwidth()])</span><br><span class="line">            .padding([0.2])</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// color</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> color = d3.scaleOrdinal()</span></span><br><span class="line">            .domain(subgroups)</span><br><span class="line"><span class="actionscript">            .range([<span class="string">'#99cccc'</span>,<span class="string">'#66b2b2'</span>,<span class="string">'#329999'</span>])</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> gbars = svg.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">            .selectAll(<span class="string">"g"</span>)</span></span><br><span class="line">            .data(data)</span><br><span class="line">            .enter()</span><br><span class="line"><span class="actionscript">            .append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> <span class="string">"translate("</span> + x(d.group) + <span class="string">",0)"</span>; &#125;);</span></span><br><span class="line"><span class="actionscript">          gbars.selectAll(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">            .data(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> subgroups.map(<span class="function"><span class="keyword">function</span><span class="params">(key)</span> </span>&#123; <span class="keyword">return</span> &#123;key: key, value: d[key]&#125;; &#125;); &#125;)</span></span><br><span class="line"><span class="actionscript">            .enter().append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> xSubgroup(d.key); &#125;)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> y(d.value); &#125;)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"width"</span>, xSubgroup.bandwidth())</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> height - y(d.value); &#125;)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"fill"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> color(d.key); &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>,<span class="number">5</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>,<span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"Sales"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cx"</span>,<span class="number">350</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cy"</span>,<span class="number">10</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"fill"</span>, color(<span class="number">1</span>))</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cx"</span>,<span class="number">350</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cy"</span>,<span class="number">30</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"fill"</span>, color(<span class="number">2</span>))</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"circle"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cx"</span>,<span class="number">350</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"cy"</span>,<span class="number">50</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"r"</span>, <span class="number">4</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"fill"</span>, color(<span class="number">3</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">360</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">10</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"East"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">360</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">30</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"West"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">360</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">50</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"North"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line">        </span><br><span class="line"><span class="actionscript">          svg.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"x"</span>, <span class="number">360</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"y"</span>, <span class="number">380</span>)</span></span><br><span class="line"><span class="actionscript">            .text(<span class="string">"Quarter"</span>)</span></span><br><span class="line"><span class="actionscript">            .style(<span class="string">"font-size"</span>, <span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">            .attr(<span class="string">"alignment-baseline"</span>,<span class="string">"middle"</span>)</span></span><br><span class="line">          &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>通过 <code>d3.map</code> 实现组合。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>方案1主要比较的是同一地区、不同季度的销售额：东部：第三季度尤为突出；西部：二、三季度较为突出；北部：4季度持平。</p><p>方案2主要比较的是同一季度、不同地区的销售额：1、2、4季度均是东部 &lt; 西部 &lt; 北部的明显阶梯形式，然而第三季度东部反常，销售额极高。</p><p>由于题目也没给太多信息(卖的是什么，销售额的单位)，可以反思，是否是第三季度东部地区的销售额的数据错了。</p><h2 id="参考模板"><a href="#参考模板" class="headerlink" title="参考模板"></a>参考模板</h2><p><a href="https://www.d3-graph-gallery.com/graph/barplot_grouped_basicWide.html" target="_blank" rel="noopener">https://www.d3-graph-gallery.com/graph/barplot_grouped_basicWide.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不同地区、不同季度销售量。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Visualization" scheme="co10.github.io/categories/Visualization/"/>
    
    
      <category term="HTML" scheme="co10.github.io/tags/HTML/"/>
    
      <category term="D3" scheme="co10.github.io/tags/D3/"/>
    
  </entry>
  
  <entry>
    <title>Stacked Bar</title>
    <link href="co10.github.io/2020/09/18/stacked-bar/"/>
    <id>co10.github.io/2020/09/18/stacked-bar/</id>
    <published>2020-09-18T06:28:10.000Z</published>
    <updated>2021-01-14T07:02:36.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不同发色、不同眼睛颜色学生数量。</p></blockquote><a id="more"></a><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>表格给出的是一个 4×4 的矩阵，可以以列为横轴、行为纵轴，画出堆叠柱形图（方案1）。</p><p>也可以反过来，以行为横轴、以列为纵轴，画出堆叠柱形图（方案2）。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>chart 1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>The eye-color statics of different-hair-colored students<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.bar</span> &#123; <span class="attribute">fill</span>: steelblue; &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.axis</span> <span class="selector-tag">path</span> &#123; <span class="attribute">display</span>: none;&#125;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://d3js.org/d3.v4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"350"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> svg=d3.select(<span class="string">"svg"</span>),</span></span><br><span class="line">                margin=&#123;top:20, right:20, bottom: 40, left:40&#125;,</span><br><span class="line"><span class="actionscript">                width=+svg.attr(<span class="string">"width"</span>)-margin.left-margin.right,</span></span><br><span class="line"><span class="actionscript">                height = +svg.attr(<span class="string">"height"</span>) - margin.top - margin.bottom,</span></span><br><span class="line"><span class="actionscript">                g = svg.append(<span class="string">"g"</span>).attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> x=d3.scaleBand()</span></span><br><span class="line">                .rangeRound([0,width])</span><br><span class="line">                .padding(0.1)</span><br><span class="line">                .align(0.1)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> y=d3.scaleLinear()</span></span><br><span class="line">                .rangeRound([height,0]);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> z=d3.scaleOrdinal()</span></span><br><span class="line"><span class="actionscript">                .range([<span class="string">"#b75454"</span>,<span class="string">"#0080ff"</span>,<span class="string">"#a8b461"</span>,<span class="string">"#4ca64c"</span>])</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> stack=d3.stack();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            d3.csv(<span class="string">"https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/00/eye_hair_color_data.csv"</span>,type,<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                x.domain(data.map(<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.Hair_color;&#125;));</span></span><br><span class="line"><span class="actionscript">                y.domain([<span class="number">0</span>,d3.max(data,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.total;&#125;)]).nice();</span></span><br><span class="line">                z.domain(data.columns.slice(1));</span><br><span class="line"></span><br><span class="line">                stack.keys(data.columns.slice(1));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                g.selectAll(<span class="string">".serie"</span>)</span></span><br><span class="line">                    .data(stack(data))</span><br><span class="line"><span class="actionscript">                    .enter().append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>,<span class="string">"serie"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"fill"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> z(d.key);&#125;)</span></span><br><span class="line"><span class="actionscript">                    .selectAll(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                    .data(<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d;&#125;)</span></span><br><span class="line"><span class="actionscript">                    .enter().append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> x(d.data.Hair_color);&#125;)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> y(d[<span class="number">1</span>]);&#125;)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> y(d[<span class="number">0</span>]) - y(d[<span class="number">1</span>]); &#125;)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"width"</span>, x.bandwidth());</span></span><br><span class="line">                </span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>, <span class="string">"axis axis--x"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>)</span></span><br><span class="line">                        .call(d3.axisBottom(x));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>, <span class="string">"axis axis--y"</span>)</span></span><br><span class="line"><span class="actionscript">                        .call(d3.axisLeft(y).ticks(<span class="number">10</span>, <span class="string">"s"</span>))</span></span><br><span class="line"><span class="actionscript">                        .append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>, <span class="number">1</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>, y(y.ticks(<span class="number">10</span>).pop())<span class="number">-10</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"dy"</span>, <span class="string">"0.35em"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"text-anchor"</span>, <span class="string">"start"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"fill"</span>, <span class="string">"#000"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="string">"Number"</span>);</span></span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>,<span class="number">240</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>,<span class="number">370</span>)</span></span><br><span class="line"><span class="actionscript">                        .style(<span class="string">"font-size"</span>,<span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="string">"Hair Color"</span>)</span></span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>,<span class="number">237</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>,<span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">                        .style(<span class="string">"font-size"</span>,<span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="string">"Eye Color"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> legend = g.selectAll(<span class="string">".legend"</span>)</span></span><br><span class="line">                        .data(data.columns.slice(1).reverse())</span><br><span class="line"><span class="actionscript">                        .enter().append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>, <span class="string">"legend"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d, i)</span> </span>&#123; <span class="keyword">return</span> <span class="string">"translate(0,"</span> + i * <span class="number">20</span> + <span class="string">")"</span>; &#125;)</span></span><br><span class="line"><span class="actionscript">                        .style(<span class="string">"font"</span>, <span class="string">"10px sans-serif"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    legend.append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>, width - <span class="number">18</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"width"</span>, <span class="number">16</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"height"</span>, <span class="number">16</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"fill"</span>, z);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    legend.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>, width - <span class="number">24</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>, <span class="number">9</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"dy"</span>, <span class="string">".35em"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"text-anchor"</span>, <span class="string">"end"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> d; &#125;);</span></span><br><span class="line">              </span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">type</span><span class="params">(d, i, columns)</span> </span>&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                for (i = 1, t = 0; i <span class="tag">&lt; <span class="attr">columns.length</span>; ++<span class="attr">i</span>) <span class="attr">t</span> += <span class="string">d[columns[i]]</span> = <span class="string">+d[columns[i]];</span></span></span></span></span><br><span class="line">                    d.total = t;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> d;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> p =d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="actionscript">            p.style(<span class="string">"color"</span>,<span class="string">"#1979a9"</span>).style(<span class="string">"font-size"</span>,<span class="string">"28px"</span>);</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><h4 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>chart 1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>The hair-color statics of different-eye-colored students<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.bar</span> &#123; <span class="attribute">fill</span>: steelblue; &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.axis</span> <span class="selector-tag">path</span> &#123; <span class="attribute">display</span>: none;&#125;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://d3js.org/d3.v4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"350"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> svg=d3.select(<span class="string">"svg"</span>),</span></span><br><span class="line">                margin=&#123;top:20, right:20, bottom: 40, left:40&#125;,</span><br><span class="line"><span class="actionscript">                width=+svg.attr(<span class="string">"width"</span>)-margin.left-margin.right,</span></span><br><span class="line"><span class="actionscript">                height = +svg.attr(<span class="string">"height"</span>) - margin.top - margin.bottom,</span></span><br><span class="line"><span class="actionscript">                g = svg.append(<span class="string">"g"</span>).attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + margin.left + <span class="string">","</span> + margin.top + <span class="string">")"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> x=d3.scaleBand()</span></span><br><span class="line">                .rangeRound([0,width])</span><br><span class="line">                .padding(0.1)</span><br><span class="line">                .align(0.1)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> y=d3.scaleLinear()</span></span><br><span class="line">                .rangeRound([height,0]);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> z=d3.scaleOrdinal()</span></span><br><span class="line"><span class="actionscript">                .range([<span class="string">"#141619"</span>,<span class="string">"#A52A2A"</span>,<span class="string">"#E50000"</span>,<span class="string">"#FAF0BE"</span>])</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> stack=d3.stack();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            d3.csv(<span class="string">"https://raw.githubusercontent.com/Co10/d3_files/master/CSV_files/00/hair_eye_color_data.csv"</span>,type,<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                x.domain(data.map(<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.Eye_color;&#125;));</span></span><br><span class="line"><span class="actionscript">                y.domain([<span class="number">0</span>,d3.max(data,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d.total;&#125;)]).nice();</span></span><br><span class="line">                z.domain(data.columns.slice(1));</span><br><span class="line"></span><br><span class="line">                stack.keys(data.columns.slice(1));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                g.selectAll(<span class="string">".serie"</span>)</span></span><br><span class="line">                    .data(stack(data))</span><br><span class="line"><span class="actionscript">                    .enter().append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>,<span class="string">"serie"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"fill"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> z(d.key);&#125;)</span></span><br><span class="line"><span class="actionscript">                    .selectAll(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                    .data(<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> d;&#125;)</span></span><br><span class="line"><span class="actionscript">                    .enter().append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> x(d.data.Eye_color);&#125;)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span><span class="params">(d)</span></span>&#123;<span class="keyword">return</span> y(d[<span class="number">1</span>]);&#125;)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> y(d[<span class="number">0</span>]) - y(d[<span class="number">1</span>]); &#125;)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"width"</span>, x.bandwidth());</span></span><br><span class="line">                </span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>, <span class="string">"axis axis--x"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"transform"</span>, <span class="string">"translate(0,"</span> + height + <span class="string">")"</span>)</span></span><br><span class="line">                        .call(d3.axisBottom(x));</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>, <span class="string">"axis axis--y"</span>)</span></span><br><span class="line"><span class="actionscript">                        .call(d3.axisLeft(y).ticks(<span class="number">10</span>, <span class="string">"s"</span>))</span></span><br><span class="line"><span class="actionscript">                        .append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>, <span class="number">1</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>, y(y.ticks(<span class="number">10</span>).pop())<span class="number">-10</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"dy"</span>, <span class="string">"0.35em"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"text-anchor"</span>, <span class="string">"start"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"fill"</span>, <span class="string">"#000"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="string">"Number"</span>);</span></span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>,<span class="number">250</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>,<span class="number">370</span>)</span></span><br><span class="line"><span class="actionscript">                        .style(<span class="string">"font-size"</span>,<span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="string">"Eye Color"</span>)</span></span><br><span class="line"><span class="actionscript">                    g.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>,<span class="number">235</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>,<span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">                        .style(<span class="string">"font-size"</span>,<span class="string">"12px"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="string">"Hair Color"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> legend = g.selectAll(<span class="string">".legend"</span>)</span></span><br><span class="line">                        .data(data.columns.slice(1).reverse())</span><br><span class="line"><span class="actionscript">                        .enter().append(<span class="string">"g"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"class"</span>, <span class="string">"legend"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d, i)</span> </span>&#123; <span class="keyword">return</span> <span class="string">"translate(0,"</span> + i * <span class="number">20</span> + <span class="string">")"</span>; &#125;)</span></span><br><span class="line"><span class="actionscript">                        .style(<span class="string">"font"</span>, <span class="string">"10px sans-serif"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    legend.append(<span class="string">"rect"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>, width - <span class="number">18</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"width"</span>, <span class="number">16</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"height"</span>, <span class="number">16</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"fill"</span>, z);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    legend.append(<span class="string">"text"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"x"</span>, width - <span class="number">24</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"y"</span>, <span class="number">9</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"dy"</span>, <span class="string">".35em"</span>)</span></span><br><span class="line"><span class="actionscript">                        .attr(<span class="string">"text-anchor"</span>, <span class="string">"end"</span>)</span></span><br><span class="line"><span class="actionscript">                        .text(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123; <span class="keyword">return</span> d; &#125;);</span></span><br><span class="line">              </span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">type</span><span class="params">(d, i, columns)</span> </span>&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                for (i = 1, t = 0; i <span class="tag">&lt; <span class="attr">columns.length</span>; ++<span class="attr">i</span>) <span class="attr">t</span> += <span class="string">d[columns[i]]</span> = <span class="string">+d[columns[i]];</span></span></span></span></span><br><span class="line">                    d.total = t;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> d;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> p =d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="actionscript">            p.style(<span class="string">"color"</span>,<span class="string">"#1979a9"</span>).style(<span class="string">"font-size"</span>,<span class="string">"28px"</span>);</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>通过 <code>d3.stack</code> 实现堆叠。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>两张图对比，不管是方案1还是方案2，横向对比都能看出不同眼色(发色)数量多少，纵向可明显看出发色(眼色)数量大小。</p><p>除此之外，方案1能看出棕色发色学生最多，棕眼、蓝眼相比绿、绿褐的柱形图明显较高，综合可看出棕眼、蓝眼学生数量较多，绿褐次之，绿最少。</p><p>同样，方案2能看出棕、蓝眼学生数量相当且较多，发色依然可以通过色块大小、数量看出棕发学生数量最多，红发学生数量最少。</p><p>不管是方案1还是方案2，每个单一矩形都代表着同一发色、同一眼色的学生数量，可以看出数量最多的三大块：棕发棕眼 &gt; 金发蓝眼 &gt; 棕发蓝眼。</p><h2 id="参考模板"><a href="#参考模板" class="headerlink" title="参考模板"></a>参考模板</h2><p><a href="https://www.d3-graph-gallery.com/graph/barplot_stacked_basicWide.html" target="_blank" rel="noopener">https://www.d3-graph-gallery.com/graph/barplot_stacked_basicWide.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不同发色、不同眼睛颜色学生数量。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Visualization" scheme="co10.github.io/categories/Visualization/"/>
    
    
      <category term="HTML" scheme="co10.github.io/tags/HTML/"/>
    
      <category term="D3" scheme="co10.github.io/tags/D3/"/>
    
  </entry>
  
  <entry>
    <title>GL/glut.h</title>
    <link href="co10.github.io/2020/09/17/GL-glut-h/"/>
    <id>co10.github.io/2020/09/17/GL-glut-h/</id>
    <published>2020-09-17T00:19:14.000Z</published>
    <updated>2021-01-14T07:17:44.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><a id="more"></a><h2 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h2><h3 id="glutInit"><a href="#glutInit" class="headerlink" title="glutInit()"></a>glutInit()</h3><p><code>glutInit(&amp;argc, argv);</code>    Initialize the GLUT library.</p><ul><li><p><code>argc</code>: A pointer to the program’s unmodified <code>argc</code> variable from <code>main</code>. Upon return, the value pointed to by <code>argc</code> will be updated, because <code>glutInit</code> extracts any command line options intended for the <code>GLUT</code> library.</p></li><li><p><code>argv</code>: The program’s unmodified <code>argv</code> variable from main. Like <code>argc</code>, the data for argv will be updated because <code>glutInit</code> extracts any command line options understood by the <code>GLUT</code> library.</p></li></ul><h3 id="glutInitDisplayMode"><a href="#glutInitDisplayMode" class="headerlink" title="glutInitDisplayMode()"></a>glutInitDisplayMode()</h3><p><code>void glutInitDisplayMode(MODE);</code>    sets the <em>initial display mode</em>.</p><h4 id="MODE"><a href="#MODE" class="headerlink" title="MODE"></a>MODE</h4><ul><li>GLUT_RGBA / GLUT_RGB</li></ul><p>Bit mask to select an RGBA mode window. This is the default if neither <code>GLUT_RGBA</code> nor <code>GLUT_INDEX</code> are specified.</p><ul><li>GLUT_INDEX</li></ul><p>Bit mask to select a color index mode window. This overrides <code>GLUT_RGBA</code> if it is also specified.</p><ul><li>GLUT_SINGLE</li></ul><p>Bit mask to select a single buffered window. This is the default if neither <code>GLUT_DOUBLE</code> or <code>GLUT_SINGLE</code> are specified.</p><ul><li>GLUT_DOUBLE</li></ul><p>Bit mask to select a double buffered window. This overrides <code>GLUT_SINGLE</code> if it is also specified.</p><ul><li>GLUT_ACCUM</li></ul><p>Bit mask to select a window with an accumulation buffer.</p><ul><li>GLUT_ALPHA</li></ul><p>Bit mask to select a window with an alpha component to the color buffer(s).</p><ul><li>GLUT_DEPTH</li></ul><p>Bit mask to select a window with a depth buffer.</p><ul><li>GLUT_STENCIL</li></ul><p>Bit mask to select a window with a stencil buffer.</p><ul><li>GLUT_MULTISAMPLE</li></ul><p>Bit mask to select a window with multisampling support. If multisampling is not available, a non-multisampling window will automatically be chosen. Note: both the OpenGL client-side and server-side implementations must support the <code>GLX_SAMPLE_SGIS</code> extension for multisampling to be available.</p><ul><li>GLUT_STEREO</li></ul><p>Bit mask to select a stereo window.</p><ul><li>GLUT_LUMINANCE</li></ul><p>Bit mask to select a window with a “luminance’’ color model. This model provides the functionality of OpenGL’s RGBA color model, but the green and blue components are not maintained in the frame buffer. Instead each pixel’s red component is converted to an index between zero and <code>glutGet(GLUT_WINDOW_COLORMAP_SIZE)-1</code> and looked up in a per-window color map to determine the color of pixels within the window. The initial colormap of <code>GLUT_LUMINANCE</code> windows is initialized to be a linear gray ramp, but can be modified with GLUT’s colormap routines.</p><h3 id="glutInitWindowSize-glutInitWindowPosition"><a href="#glutInitWindowSize-glutInitWindowPosition" class="headerlink" title="glutInitWindowSize(), glutInitWindowPosition()"></a>glutInitWindowSize(), glutInitWindowPosition()</h3><p><code>glutInitWindowSize(int width, int height);</code></p><p><code>glutInitWindowPosition(int x, int y);</code></p><h3 id="glutCreateWindow"><a href="#glutCreateWindow" class="headerlink" title="glutCreateWindow()"></a>glutCreateWindow()</h3><p><code>glutCreateWindow(string window_name);</code></p><h2 id="DIsplay"><a href="#DIsplay" class="headerlink" title="DIsplay"></a>DIsplay</h2><h3 id="glclear-glClearColor"><a href="#glclear-glClearColor" class="headerlink" title="glclear(), glClearColor()"></a>glclear(), glClearColor()</h3><p><code>void glclear(GLbitfield mask);</code></p><ul><li><p><code>GL_COLOR_BUFFER_BIT</code></p><p>Indicates the buffers currently enabled for color writing.</p></li><li><p><code>GL_DEPTH_BUFFER_BIT</code></p><p>Indicates the depth buffer.</p></li><li><p><code>GL_ACCUM_BUFFER_BIT</code></p><p>Indicates the accumulation buffer.</p></li><li><p><code>GL_STENCIL_BUFFER_BIT</code></p><p>Indicates the stencil buffer.</p></li></ul><p>The value to which each buffer is cleared depends on the setting of the clear value for that buffer.</p><p><code>void glClearColor(red, green, blue, (alpha))</code></p><p><code>glClearColor(, , ,)</code> specifies the red, green, blue, and alpha values used by <code>glClear(, , , )</code> to clear the color buffers. Values specified by <code>glClearColor(, , ,)</code> are clamped to the range 0 1 .</p><h3 id="glColor-red-green-blue-alpha"><a href="#glColor-red-green-blue-alpha" class="headerlink" title="glColor(red, green, blue, (alpha))"></a>glColor(red, green, blue, (alpha))</h3><p>set the current color. </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3b</span><span class="params">(<span class="keyword">byte</span>, <span class="keyword">byte</span>, <span class="keyword">byte</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3s</span><span class="params">(short, short, short)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3i</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3f</span><span class="params">(<span class="keyword">float</span>, <span class="keyword">float</span>, <span class="keyword">float</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3d</span><span class="params">(<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3ub</span><span class="params">(ubyte, ubyte, ubyte)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3us</span><span class="params">(ushort, ushort, ushort)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor3ui</span><span class="params">(uint, uint, uint)</span></span>;</span><br><span class="line">-------</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glColor4b</span><span class="params">(<span class="keyword">byte</span>, <span class="keyword">byte</span>, <span class="keyword">byte</span>, <span class="keyword">byte</span>)</span></span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="glBegin-glEnd-glFlush"><a href="#glBegin-glEnd-glFlush" class="headerlink" title="glBegin(), glEnd(), glFlush()"></a>glBegin(), glEnd(), glFlush()</h3><h4 id="description"><a href="#description" class="headerlink" title="description"></a>description</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glBegin</span><span class="params">(GLenum mode)</span></span>;</span><br><span class="line">...<span class="comment">//(do something)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glEnd</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>Specifies the primitive or primitives that will be created from vertices presented between glBegin and the subsequent glEnd.</p><h4 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h4><p><code>GL_POINTS</code>, <code>GL_LINES</code>, <code>GL_LINE_STRIP</code>, <code>GL_LINE_LOOP</code>, <code>GL_TRIANGLES</code>, <code>GL_TRIANGLE_STRIP</code>, <code>GL_TRIANGLE_FAN</code>, <code>GL_QUADS</code>, <code>GL_QUAD_STRIP</code>, and <code>GL_POLYGON</code>.</p><ul><li><code>GL_POINTS</code></li></ul><p>Treats each vertex as a single point. Vertex $n$ defines point $n$. $N$ points are drawn.</p><ul><li><code>GL_LINES</code></li></ul><p>Treats each pair of vertices as an independent line segment. Vertices $2n - 1$ and  $2n$ define line $n$. $N/2$ lines are drawn.</p><ul><li><code>GL_LINE_STRIP</code></li></ul><p>Draws a connected group of line segments from the first vertex to the last. Vertices $n$ and $n + 1$ define line $n$. $N - 1$ lines are drawn.</p><ul><li><code>GL_LINE_LOOP</code></li></ul><p>Draws a connected group of line segments from the first vertex to the last, then back to the first. Vertices $n$ and $n + 1$ define line $n$. The last line, however, is defined by vertices $N$ and $1$ . $N$ lines are drawn.</p><ul><li><code>GL_TRIANGLES</code></li></ul><p>Treats each triplet of vertices as an independent triangle. Vertices $3n - 2$ , $3 n - 1$ , and $3n$ define triangle $n$. $N /3$ triangles are drawn.</p><ul><li><code>GL_TRIANGLE_STRIP</code></li></ul><p>Draws a connected group of triangles. One triangle is defined for each vertex presented after the first two vertices. For odd $n$, vertices $n$, $n + 1$ , and $n + 2$ define triangle $n$. For even $n$, vertices $n + 1$ , $n$, and $n + 2$ define triangle $n$. $N - 2$ triangles are drawn.</p><ul><li><code>GL_TRIANGLE_FAN</code></li></ul><p>Draws a connected group of triangles. One triangle is defined for each vertex presented after the first two vertices. Vertices $1$ , $n + 1$ , and $n + 2$ define triangle $n$. $N - 2$ triangles are drawn.</p><ul><li><code>GL_QUADS</code></li></ul><p>Treats each group of four vertices as an independent quadrilateral. Vertices $4 ⁢ n - 3$ , $4 ⁢ n - 2$ , $4 ⁢ n - 1$ , and $4 ⁢ n $ define quadrilateral $n$. $N/4$ quadrilaterals are drawn.</p><ul><li><code>GL_QUAD_STRIP</code></li></ul><p>Draws a connected group of quadrilaterals. One quadrilateral is defined for each pair of vertices presented after the first pair. Vertices $2 ⁢ n - 1$ , $2 ⁢ n$ , $2 ⁢ n + 2$ , and $2 ⁢ n + 1$ define quadrilateral $n$. $N/2 - 1$ quadrilaterals are drawn. Note that the order in which vertices are used to construct a quadrilateral from strip data is different from that used with independent data.</p><ul><li><code>GL_POLYGON</code></li></ul><p>Draws a single, convex polygon. Vertices $1$ through $N$ define this polygon.</p><h3 id="glFlush"><a href="#glFlush" class="headerlink" title="glFlush()"></a>glFlush()</h3><p>Force execution of GL commands in finite time.</p><h3 id="glVertex-x-y-z-w-…"><a href="#glVertex-x-y-z-w-…" class="headerlink" title="glVertex(x, y, z, w, …)"></a>glVertex(x, y, z, w, …)</h3><p>Specify a vertex.</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex2s</span><span class="params">(short, short)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex2i</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex2f</span><span class="params">(<span class="keyword">float</span>, <span class="keyword">float</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex2d</span><span class="params">(<span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex3s</span><span class="params">(, , )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex3i</span><span class="params">(, , )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex3f</span><span class="params">(, , )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex3d</span><span class="params">(, , )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex4s</span><span class="params">(, , , )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex4i</span><span class="params">(, , , )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex4f</span><span class="params">(, , , )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex4d</span><span class="params">(, , , )</span></span>;</span><br></pre></td></tr></table></figure><h3 id="glPointSize"><a href="#glPointSize" class="headerlink" title="glPointSize()"></a>glPointSize()</h3><p>Specify the diameter of rasterized points.</p><p><code>void glPointSize(float size)</code>. The initial value is 1.</p><h3 id="glMatrixMode"><a href="#glMatrixMode" class="headerlink" title="glMatrixMode()"></a>glMatrixMode()</h3><p>Specify which matrix is the current matrix.</p><p><code>void glMatrixMode(Glenum mode);</code></p><ul><li><code>GL_MODELVIEW</code></li></ul><p>Applies subsequent matrix operations to the modelview matrix stack.</p><ul><li><code>GL_PROJECTION</code></li></ul><p>Applies subsequent matrix operations to the projection matrix stack.</p><ul><li><code>GL_TEXTURE</code></li></ul><p>Applies subsequent matrix operations to the texture matrix stack.</p><ul><li><code>GL_COLOR</code></li></ul><p>Applies subsequent matrix operations to the color matrix stack.</p><p>To find out which matrix stack is currently the target of all matrix operations, call <code>glGet()</code> with argument <code>GL_MATRIX_MODE</code>. The initial value is <code>GL_MODELVIEW</code>.</p><h3 id="gluOrtho2D"><a href="#gluOrtho2D" class="headerlink" title="gluOrtho2D()"></a>gluOrtho2D()</h3><p>Define a 2D orthographic projection matrix. </p><p><code>void gluOrtho2D(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top);</code></p><h3 id="glutMouseFunc"><a href="#glutMouseFunc" class="headerlink" title="glutMouseFunc()"></a>glutMouseFunc()</h3><p><code>void glutMouseFunc(void (*func)(int button, int state, int x, int y));</code> sets the mouse callback for the <em>current window</em>.</p><p>The <code>button</code> parameter is one of <code>GLUT_LEFT_BUTTON</code>, <code>GLUT_MIDDLE_BUTTON</code>, or <code>GLUT_RIGHT_BUTTON</code>.</p><p>The <code>state</code> parameter is either <code>GLUT_UP</code> or <code>GLUT_DOWN</code> indicating whether the callback was due to a release or press respectively.</p><p>Passing <code>NULL</code> to <code>glutMouseFunc</code> disables the generation of mouse callbacks.</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.opengl.org/resources/libraries/glut/" target="_blank" rel="noopener">https://www.opengl.org/resources/libraries/glut/</a></p><p><a href="https://www.khronos.org/registry/OpenGL-Refpages/" target="_blank" rel="noopener">https://www.khronos.org/registry/OpenGL-Refpages/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Functions&quot;&gt;&lt;a href=&quot;#Functions&quot; class=&quot;headerlink&quot; title=&quot;Functions&quot;&gt;&lt;/a&gt;Functions&lt;/h1&gt;
    
    </summary>
    
    
      <category term="CG" scheme="co10.github.io/categories/CG/"/>
    
    
      <category term="GLUT" scheme="co10.github.io/tags/GLUT/"/>
    
  </entry>
  
  <entry>
    <title>Setup OpenGL with Visual Studio 2019</title>
    <link href="co10.github.io/2020/09/16/Setup-OpenGL-with-Visual-Studio-2019/"/>
    <id>co10.github.io/2020/09/16/Setup-OpenGL-with-Visual-Studio-2019/</id>
    <published>2020-09-16T14:20:30.000Z</published>
    <updated>2021-01-14T06:16:15.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Setup-OpenGL-with-Visual-Studio-2019"><a href="#Setup-OpenGL-with-Visual-Studio-2019" class="headerlink" title="Setup OpenGL with Visual Studio 2019"></a>Setup OpenGL with Visual Studio 2019</h1><a id="more"></a><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol><li>Download GLUT header, lib, and dll files from <a href="https://www.opengl.org/resources/libraries/glut/glut_downloads.php" target="_blank" rel="noopener">OpenGL - GLUT</a></li><li>Paste <code>include-&gt;GL</code> in <code>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include</code></li><li>Download <a href="https://www.opengl.org/resources/libraries/glut/glutdlls37beta.zip" target="_blank" rel="noopener">https://www.opengl.org/resources/libraries/glut/glutdlls37beta.zip</a><br>Paste <code>glut32.lib</code> in <code>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\lib\x86</code><br>and <code>glut.lib</code> in <code>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\lib\x64</code></li><li>Paste <code>glut32.dll</code> in <code>C:\Windows\System32</code>, <code>C:\Windows</code>,  and <code>glut.dll</code> in <code>C:\Windows\SysWOW64</code></li></ol><h2 id="Create-a-project"><a href="#Create-a-project" class="headerlink" title="Create a project"></a>Create a project</h2><ol><li><p>Open <code>Visual Studio</code>, select <code>create a new project</code>, choose <code>Empty Project</code>. </p></li><li><p>Go to <code>Project -&gt; Properties (Alt + F7)</code>, on the top select <code>All Configurations</code> from <code>Configuration</code> dropdown menu.<br>Choose <code>Configuration Properties -&gt; C/C++ -&gt; Precompiled Headers</code>, set <code>Precompiled Header</code>‘s value to <code>Not Using Precompiled Headers</code>.<br>Choose <code>Configuration Properties -&gt; Linker -&gt; Input</code>, click <code>Additional Dependencies</code>, and then click <code>Edit</code>, and type: </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opengl32.lib</span><br><span class="line">glu32.lib</span><br><span class="line">glut32.lib</span><br></pre></td></tr></table></figure><p>then click OK.</p></li><li><p>Paste the code I found in Internet to test: </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line">glColor3f(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line">glBegin(GL_POINTS);</span><br><span class="line">glVertex2f(<span class="number">10.0</span>, <span class="number">10.0</span>);</span><br><span class="line">glVertex2f(<span class="number">150.0</span>, <span class="number">80.0</span>);</span><br><span class="line">glVertex2f(<span class="number">100.0</span>, <span class="number">20.0</span>);</span><br><span class="line">glVertex2f(<span class="number">200.0</span>, <span class="number">100.0</span>);</span><br><span class="line">glEnd();</span><br><span class="line">glFlush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myinit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">glClearColor(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">glColor3f(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">glPointSize(<span class="number">5.0</span>);</span><br><span class="line">glMatrixMode(GL_PROJECTION);</span><br><span class="line">glLoadIdentity();</span><br><span class="line">gluOrtho2D(<span class="number">0.0</span>, <span class="number">499.0</span>, <span class="number">0.0</span>, <span class="number">499.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">glutInit(&amp;argc, argv);</span><br><span class="line">glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);</span><br><span class="line">glutInitWindowSize(<span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">glutInitWindowPosition(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">glutCreateWindow(<span class="string">"Points"</span>);</span><br><span class="line">glutDisplayFunc(<span class="built_in">display</span>);</span><br><span class="line"></span><br><span class="line">myinit();</span><br><span class="line">glutMainLoop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then Compile and run(x86). </p></li></ol><h2 id="One-more-thing…"><a href="#One-more-thing…" class="headerlink" title="One more thing…"></a>One more thing…</h2><p>If you upgrade VS, you should re-install OpenGL, since the folder is moved to a higher version one.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Special thanks to <a href="https://www.absingh.com/opengl/" target="_blank" rel="noopener">https://www.absingh.com/opengl/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Setup-OpenGL-with-Visual-Studio-2019&quot;&gt;&lt;a href=&quot;#Setup-OpenGL-with-Visual-Studio-2019&quot; class=&quot;headerlink&quot; title=&quot;Setup OpenGL with Visual Studio 2019&quot;&gt;&lt;/a&gt;Setup OpenGL with Visual Studio 2019&lt;/h1&gt;
    
    </summary>
    
    
      <category term="CG" scheme="co10.github.io/categories/CG/"/>
    
    
      <category term="GLUT" scheme="co10.github.io/tags/GLUT/"/>
    
  </entry>
  
  <entry>
    <title>Seedr - The best FREE cloud torrenting service</title>
    <link href="co10.github.io/2020/07/20/Seedr-The-best-FREE-cloud-torrenting-service/"/>
    <id>co10.github.io/2020/07/20/Seedr-The-best-FREE-cloud-torrenting-service/</id>
    <published>2020-07-20T00:22:10.000Z</published>
    <updated>2020-09-10T02:39:27.868Z</updated>
    
    <content type="html"><![CDATA[<p>It’s been quite a long time since I used Seedr (<a href="https://www.seedr.cc" target="_blank" rel="noopener">https://www.seedr.cc</a>), and here is my experience.</p><a id="more"></a><p><img src="https://i.loli.net/2020/07/21/ikRurJfACIODz6Q.jpg" alt="seedr.jpg"></p><h2 id="Why-Seedr"><a href="#Why-Seedr" class="headerlink" title="Why Seedr"></a>Why Seedr</h2><p>Torrenting a movie is forbidden, as we all know, which results in FBI warning or something worse from your ISP. So the thought of clouding torrent occurred to me. That is to say, the cloud seeds via BT and once it’s done, I can download the file from cloud via HTTP. That’s how seedr works.</p><p>At first I googled several cloud torrenting service providers, and seedr, with an obvious ad label marked at the top of search results, draw my attention, and I gave it a try in 2018.</p><p>Compared to some other torrenting providers I tried  mostly at the same period, such as FileStream and Bitport, 2GB Seedr providing for free users is considerably sufficient because they only offer 1GB at most for free users. We know that a 720p or 1080p movie is usually around 1.5GB or 2GB if the quality is at least acceptable. Obviously Seedr is the best choice.</p><p><img src="https://i.loli.net/2020/07/21/Asa4Qu6lOqrZ7iy.jpg" alt="interface.jpg"></p><p><em>User Interface</em></p><h2 id="Experience"><a href="#Experience" class="headerlink" title="Experience"></a>Experience</h2><p>Seedr supports both magnet and torrent.</p><p>The experience is good, ad-free, and what’s more amazing is that you can <strong>earn free space</strong> by inviting friends, posting blogs, following pinterest and twitter, up to 4Gb at most. That helps a lot since a better quality movie is usually more than 3GB and that solves the problem a bit. </p><p><img src="https://i.loli.net/2020/07/21/18C69VDkXPb5EjF.jpg" alt="earnfreespace.jpg"></p><p><em>earn free space</em></p><h2 id="Speed"><a href="#Speed" class="headerlink" title="Speed"></a>Speed</h2><p>The speed is pretty fast. If a torrent has been downloaded before, I believe it’s stored in the cloud and thus you don’t have to wait for fetching files and just directly download it from the cloud. Mostly a YIFI torrent is instantly accessible, none of which has resulted in waiting as many times as I’ve tried. If a torrent happens to download, you just leave it and have a cup of tea. The speed is okay if it’s not dead. </p><p>Free users are allowed to keep it downloading for 3 hours, but if it fails to completely download you may cancel it and restart from the very beginning. It doesn’t bother me since it only happens few times if the torrent has good tracks and seeders.</p><p><img src="https://i.loli.net/2020/07/21/9OJGaW4FSD5MxYZ.jpg" alt="cloud speed.jpg"></p><p><em>Cloud torrenting speed when fetching files</em></p><p>The downloading speed is unlimited, and it’s extremely fast. A 2GB file would be completed within 5 minutes.</p><p><img src="https://i.loli.net/2020/07/21/DtWBTmrgjXUV8kd.jpg" alt="downloadingspeed.jpg"></p><p><em>local download speed from Seedr</em></p><h2 id="One-more-thing"><a href="#One-more-thing" class="headerlink" title="One more thing"></a>One more thing</h2><p>Sadly it currently doesn’t support to choose what to download in a torrent file. So if a torrent contains several videos up to 6GB, but each video is merely 1GB, you may fail to fetch them. Usually packed TV episodes can’t do because of this.  </p><p>Free users like me would appreciate it were it improved.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It’s been quite a long time since I used Seedr (&lt;a href=&quot;https://www.seedr.cc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.seedr.cc&lt;/a&gt;), and here is my experience.&lt;/p&gt;
    
    </summary>
    
    
      <category term="torrent" scheme="co10.github.io/categories/torrent/"/>
    
    
  </entry>
  
  <entry>
    <title>201809-3-元素选择器</title>
    <link href="co10.github.io/2020/06/08/201809-3-%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>co10.github.io/2020/06/08/201809-3-%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8/</id>
    <published>2020-06-08T09:23:53.000Z</published>
    <updated>2020-09-10T02:42:01.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a><strong>元素选择器</strong></h1><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a><strong>问题背景</strong></h2><p>层叠样式表 (Cascading Style Sheets, 缩写 CSS) 是一种用来为结构化文档 (如 HTML 文档) 添加样式 (字体、间距和颜色等) 的计算机语言。例如，对于以下的 HTML 文档：</p><a id="more"></a><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"Subtitle"</span>&gt;</span>Greetings<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配合以下 CSS 片段可以为其中的标题和段落设置相应的格式：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-weight</span>: bold; &#125;</span><br><span class="line"><span class="selector-id">#subtitle</span> &#123; <span class="attribute">font-size</span>: <span class="number">12px</span>; &#125;</span><br></pre></td></tr></table></figure><p>这段 CSS 片段为前面 HTML 文档添加了样式，使得标题 “Hello” 具有粗体，使得段落 “Greetings” 具有 12 个像素的字体大小。这里，CSS 片段第 1 行中出现的 <code>h1</code> 是一个选择器，它选中了 HTML 文档第 6 行的 <code>h1</code> 元素。CSS片段第 2 行中出现的 <code>#subtitle</code> 也是一个选择器，选中了 HTML 文档第 7 行 <code>id</code> 属性为 <code>subtitle</code> 的 <code>p</code> 元素。注意它并<strong>没有选中</strong> HTML 文档第 8 行不带属性的 <code>p</code> 元素。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本题要求实现一个简化版的元素选择器。给出一个结构化文档，和若干个选择器，对每个选择器找出文档中所对应选中的元素。</span><br><span class="line"></span><br><span class="line">【结构化文档】结构化文档由元素组成，一个元素可以包含若干个子元素 (可以没有)。一个文档有一个跟元素，在整体上形成树的结构。以下是本题结构化文档的一个例子：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line">..head</span><br><span class="line">....title</span><br><span class="line">..body</span><br><span class="line">....h1</span><br><span class="line">....p #subtitle</span><br><span class="line">....div #main</span><br><span class="line">......h2</span><br><span class="line">......p #one</span><br><span class="line">......div</span><br><span class="line">........p #two</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文档中每行表示一个元素，元素的标签由一个或者多个字母或数字组成。标签大小写不敏感，例如 div、Div、DIV 都是同一类标签。</span><br><span class="line">元素可以附加一个 id 属性，属性值也是由一个或者多个字母或数字组成，之前有一个井号 #。id 属性大小写敏感，例如 a 和 A 是两个不同的 id。如果元素有 id 属性，标签和属性之间用一个空格字符分隔。</span><br><span class="line">标签之前的缩进表示元素之间的包含关系：一个元素 E 所在行之后连续的缩进更深的行代表的元素是元素 E 的后代元素，其中缩进恰好深一层的是元素 E 的子元素。为了便于观察，每一级缩进用两个小数点符号 .. 表示。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【选择器】  本题中出现的选择器有三种，分别为：</span><br><span class="line">[标签选择器] 用标签来表示。例如 p 表示选择标签为 p 的所有元素。</span><br><span class="line">[id 选择器] 用 id 属性来表示。例如 #main 表示选择 id 属性为 main 的元素。题目保证文档中不同的元素不会有相同的 id 属性。</span><br><span class="line">[后代选择器] 复合表达式，格式为 A B ，其中 A 和 B 均为 标签选择器或 id 选择器，中间用一个空格字符分隔，表示选择满足选择器 B 的所有元素，且满足这些元素有祖先元素满足选择器 A 。例如，选择器 div p 在上面的文档中会选中最后一行的元素 p ，但不会选中 id 属性为 subtitle 的那个元素 p 。注意，后代选择器可以有更多的组成部分构成， div p 是一个两级的后代选择器，而 div div p 则是一个三级的后代选择器。</span><br></pre></td></tr></table></figure><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入第一行是两个正整数 n, m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10)，分别表示结构化文档的行数，和待查询的选择器的个数，中间用一个空格字符分隔。</span><br><span class="line">第 2 行至 第 n + 1 行逐行给出结构化文档的内容。</span><br><span class="line">第 n + 2 行至第 n + m + 1 行每行给出一个待查询的选择器。记第 n + 1 + i 行的选择器为 si， 1 ≤ i ≤ m。</span><br><span class="line">结构化文档和待查询的选择器每行长度不超过 80 个字符(不包括换行符)，保证输入的结构化文档和待查询的选择器都是合法的。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出共 m 行，每行有若干个整数。第 i 行表示选择器 si 选中的结果 (1 ≤ i ≤ m)。其中第一个整数 ri 表示 si 选中的元素个数。随后 ri 个整数，分别表示选中元素在结构化文档中出现的行号(行号从 1 开始编号)。行号按从小到大排序，相邻整数之间用一个空格字符分隔。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">11 5</span><br><span class="line">html</span><br><span class="line">..head</span><br><span class="line">....title</span><br><span class="line">..body</span><br><span class="line">....h1</span><br><span class="line">....p #subtitle</span><br><span class="line">....div #main</span><br><span class="line">......h2</span><br><span class="line">......p #one</span><br><span class="line">......div</span><br><span class="line">........p #two</span><br><span class="line">p</span><br><span class="line">#subtitle</span><br><span class="line">h3</span><br><span class="line">div p</span><br><span class="line">div div p</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">3 6 9 11</span><br><span class="line">1 6</span><br><span class="line">0</span><br><span class="line">2 9 11</span><br><span class="line">1 11</span><br><span class="line"></span><br><span class="line">Explain:</span><br><span class="line">对于样例中查询的 5 个选择器：</span><br><span class="line">1. p 选中所有的元素 p ；</span><br><span class="line">2. #subtitle 选中第 6 行 id 属性为 subtitle 的元素 p ；</span><br><span class="line">3. 由于没有标签为 h3 的元素，因此 h3 没有选中任何元素；</span><br><span class="line">4. 第 9 行和第 11 行的 p 元素都有祖先是 div 元素，而第 6 行的 p 元素 没有祖先是 div 元素；</span><br><span class="line">5. div div p 要求选中的 p 元素有两级祖先都是 div 元素，只有第 11 行的 p 元素满足这个条件。</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p><del>题目太长了，输入格式还不够 HTML 直观。</del></p><p><code>..</code>的数量可以看成级数，整体可以看成文件目录，若没有 <code>..</code> 则为根目录，每一次 <code>..</code> 的增加都是在当前目录下开出了一个新目录，样例可以变成：</p><p><img src="https://i.loli.net/2020/06/11/YIOtWJAqvc5uoiC.png" alt="ele_picker.png"></p><p>很明显的具有树形结构。根据题意，输入一定是按 HTML 文档顺序输入的，要求也只是查找，因此可以用数组或向量存储数据，不用建立树的结构。</p><p>储存的时候，处理数据，根据 <code>..</code> 赋值级数，根据是否有 <code>#</code> 处理 id、标签，并且标签全部转化为小写。并同时用一个变量 <code>father</code> 从后往前遍历向量，标记父节点位置，方便多级查询。</p><p>查询的时候，分隔 string，判断是哪一种选择器；若 substring 个数为1，则只需顺序遍历向量进行查询，根据 <code>#</code> 判断是否需要大小写处理；若不只有一个 substring，则从后往前遍历向量，从后往前逐级“剥去” id 或 标签，找到就 push 行数。</p><p>最后根据题意输出。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> lev, fa;</span><br><span class="line"><span class="built_in">string</span> label, id;</span><br><span class="line">node() &#123; lev = <span class="number">-2</span>; fa = <span class="number">-2</span>; &#125;</span><br><span class="line">node(<span class="keyword">int</span> l, <span class="keyword">int</span> f, <span class="built_in">string</span> la, <span class="built_in">string</span> ID) :lev(l), fa(f), label(la), id(ID) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">lowerCase</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c &gt;= <span class="number">65</span> &amp;&amp; c &lt;= <span class="number">90</span>)</span><br><span class="line">c += <span class="number">32</span>;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (s[pos] == <span class="string">'.'</span>)</span><br><span class="line">pos++;</span><br><span class="line"><span class="keyword">int</span> lev = pos / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> fa;</span><br><span class="line"><span class="keyword">if</span> (v.empty() || lev == <span class="number">0</span>)</span><br><span class="line">fa = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = v.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i].lev == lev - <span class="number">1</span>) &#123;</span><br><span class="line">fa = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> la, ID;</span><br><span class="line"><span class="keyword">bool</span> labeled = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (pos &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[pos] == <span class="string">'#'</span> || labeled) &#123;</span><br><span class="line">labeled = <span class="literal">true</span>;</span><br><span class="line">la += s[pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s[pos] != <span class="string">' '</span>)</span><br><span class="line">ID += lowerCase(s[pos]);</span><br><span class="line">&#125;</span><br><span class="line">pos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">tnode</span><span class="params">(lev, fa, la, ID)</span></span>;</span><br><span class="line">v.push_back(tnode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">lowerCaseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != s.<span class="built_in">size</span>(); i++)</span><br><span class="line">s[i] = lowerCase(s[i]);</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">lookup</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; sv;</span><br><span class="line"><span class="keyword">while</span> (!ss.eof()) &#123;</span><br><span class="line"><span class="built_in">string</span> stemp;</span><br><span class="line">ss &gt;&gt; stemp;</span><br><span class="line"><span class="keyword">if</span> (stemp[<span class="number">0</span>] != <span class="string">'#'</span>)</span><br><span class="line">stemp = lowerCaseString(stemp);</span><br><span class="line">sv.push_back(stemp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = v.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">int</span> pos2 = sv.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (sv[pos2] != v[i].label &amp;&amp; sv[pos2] != v[i].id)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">pos = v[i].fa;</span><br><span class="line">pos2--;</span><br><span class="line"><span class="keyword">while</span> (pos &gt;= <span class="number">0</span> &amp;&amp; pos2 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[pos].label == sv[pos2] || v[pos].id == sv[pos2])</span><br><span class="line">pos2--;</span><br><span class="line">pos = v[pos].fa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pos2 == <span class="number">-1</span>)</span><br><span class="line">ans.push_back(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">reverse(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line">v.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>, s);</span><br><span class="line">initial(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>, s);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans = lookup(s);</span><br><span class="line"><span class="keyword">if</span> (ans.empty())</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != ans.<span class="built_in">size</span>(); i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; ans[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;元素选择器&quot;&gt;&lt;a href=&quot;#元素选择器&quot; class=&quot;headerlink&quot; title=&quot;元素选择器&quot;&gt;&lt;/a&gt;&lt;strong&gt;元素选择器&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题背景&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;层叠样式表 (Cascading Style Sheets, 缩写 CSS) 是一种用来为结构化文档 (如 HTML 文档) 添加样式 (字体、间距和颜色等) 的计算机语言。例如，对于以下的 HTML 文档：&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSP" scheme="co10.github.io/categories/CSP/"/>
    
    
      <category term="字符串" scheme="co10.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>GCD &amp; 二叉搜索树</title>
    <link href="co10.github.io/2020/06/07/GCD-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>co10.github.io/2020/06/07/GCD-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</id>
    <published>2020-06-07T13:53:45.000Z</published>
    <updated>2020-09-10T02:39:12.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GCD-amp-二叉搜索树"><a href="#GCD-amp-二叉搜索树" class="headerlink" title="GCD &amp; 二叉搜索树"></a><strong>GCD &amp; 二叉搜索树</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有一些数，这些数要拼成一棵树。</span><br><span class="line">此树为二叉搜索树，且任意树边相连的两个节点的gcd都超过1。</span><br><span class="line">求这些数是否满足要求。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行一个整数 t，表示数据组数。</span><br><span class="line">对于每组数据，第一行输入一个 n，表示数的个数。</span><br><span class="line">接下来一行有 n 个数，保证输入是升序的。</span><br><span class="line">t ≤ 5，n ≤ 700，ai ≤ 1e9。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每组数据输出一行，如果能够造出来满足题目描述的树，输出Yes，否则输出No。</span><br><span class="line">无行末空格。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">3 6 9 18 36 108</span><br><span class="line">Output: </span><br><span class="line">Yes</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">7 17</span><br><span class="line">9</span><br><span class="line">4 8 10 12 15 18 33 44 81</span><br><span class="line">Output: </span><br><span class="line">No</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      5000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>一开始我是完全当作平衡二叉搜索树来做了，赛后补题才发现只是普通的二叉搜索树……</p><p>当时的思路是这样的：</p><p>中间位置为 root，分为左右两半，每半的中间位置是 father node，再分为左右两半……以此递归，可以确定节点以及其左右孩子，即确定数组的某位置与哪些位置相连，就像数组模拟的堆结构一样。</p><p><img src="https://i.loli.net/2020/06/11/VJabzdpCnRwy1hx.png" alt="bstree.png"></p><p>然而这棵树并不平衡，不可用数组这么“偷懒”，(按这么做的话样例 2 是错的，81不符合，当时我怎么就没发现呢。赛后补题觉得样例2好奇怪，看了好久才明白不是平衡二叉搜索树……)</p><p>既然他不平衡，如果要建树(我是觉得肯定不可能去写二叉树结构的，太费时间了)插入的时候就很有不确定性，有些节点无法明确插在哪，所以肯定不是要写树的结构。</p><p>然后一头雾水了。参考别人解法的时候发现这是个区间 dp 问题。</p><p>用两个数组 <code>l[i][j]</code>, <code>r[i][j]</code> 表示以 <em>i</em> 为父节点，向左到 <em>j</em>、向右到 <em>j</em> 可以到达的左子树、右子树。用 <code>dp[i][j]</code> 表示 <em>i</em>, <em>j</em> 可以构成一棵树。</p><p>若 <code>l[k][i] = r[k][j] = true</code>，<code>dp[i][j] = true</code>，<em>i</em> 和 <em>j</em> 以 <em>k</em> 为父节点。</p><p>状态转移方程为：</p><script type="math/tex; mode=display">l_{j+1,i} |=gcd(a_{j+1},a_k)，i≤k≤j</script><script type="math/tex; mode=display">r_{i-1,j} |=gcd(a_{i-1},a_k)，i≤k≤j</script><p>初始化时将 <code>l[i][i] = r[i][i] =true</code>，表示当 <em>i</em> 左右子树为空，符合题意。</p><p>结果返回 <code>dp[1][n]</code> 表示这个数组是否能建树。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">750</span>;</span><br><span class="line"><span class="keyword">int</span> arr[maxN];</span><br><span class="line"><span class="keyword">bool</span> dp[maxN][maxN], l[maxN][maxN], r[maxN][maxN], g[maxN][maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> _a, <span class="keyword">int</span> _b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> _b == <span class="number">0</span> ? _a : gcd(_b, _a % _b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">has_gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gcd(a, b) &gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBST_GCD</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n - i + <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt;= i + j - <span class="number">1</span>; k++) &#123;</span><br><span class="line"><span class="keyword">if</span> (l[k][j] &amp;&amp; r[k][i + j - <span class="number">1</span>]) &#123;</span><br><span class="line">dp[j][i + j - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">l[i + j][j] |= g[i + j][k];</span><br><span class="line">r[j - <span class="number">1</span>][i + j - <span class="number">1</span>] |= g[j - <span class="number">1</span>][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">1</span>][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">10</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n + <span class="number">10</span>; j++) &#123;</span><br><span class="line">l[i][j] = <span class="literal">false</span>;</span><br><span class="line">r[i][j] = <span class="literal">false</span>;</span><br><span class="line">dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">l[i][i] = <span class="literal">true</span>;</span><br><span class="line">r[i][i] = <span class="literal">true</span>;</span><br><span class="line">dp[i][i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">g[i][j] = has_gcd(arr[i], arr[j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isBST_GCD(n))</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GCD-amp-二叉搜索树&quot;&gt;&lt;a href=&quot;#GCD-amp-二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;GCD &amp;amp; 二叉搜索树&quot;&gt;&lt;/a&gt;&lt;strong&gt;GCD &amp;amp; 二叉搜索树&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;有一些数，这些数要拼成一棵树。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;此树为二叉搜索树，且任意树边相连的两个节点的gcd都超过1。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;求这些数是否满足要求。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="程设" scheme="co10.github.io/categories/%E7%A8%8B%E8%AE%BE/"/>
    
    
      <category term="GCD" scheme="co10.github.io/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>保护罩</title>
    <link href="co10.github.io/2020/06/06/%E4%BF%9D%E6%8A%A4%E7%BD%A9/"/>
    <id>co10.github.io/2020/06/06/%E4%BF%9D%E6%8A%A4%E7%BD%A9/</id>
    <published>2020-06-06T13:40:04.000Z</published>
    <updated>2020-09-10T02:39:39.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="保护罩"><a href="#保护罩" class="headerlink" title="保护罩"></a><strong>保护罩</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设宇宙射线的发射点位于一个平面，ZJM已经通过特殊手段获取了所有宇宙射线的发射点，他们的坐标都是整数。而ZJM要构造一个保护罩，这个保护罩是一个圆形，中心位于⼀个宇宙射线的发射点上。为了节省经费，需要做一个最⼩⾯积的保护罩。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输⼊第一行一个正整数 n，表示宇宙射线发射点的个数</span><br><span class="line">接下来 N 行，每行两个整数 x,y，表示宇宙射线发射点的位置</span><br><span class="line">n ≤ 1000，|x| ≤ 100000，|y| ≤ 100000</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出包括两行</span><br><span class="line">第一行输出保护罩的中心坐标 x, y，用空格隔开</span><br><span class="line">第二行输出保护罩半径的平方</span><br><span class="line">（所有输出保留两位小数，如有多解，输出 x 较小的点，如扔有多解，输出 y 较小的点）</span><br><span class="line">无行末空格</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">5</span><br><span class="line">0 0</span><br><span class="line">0 1</span><br><span class="line">1 0</span><br><span class="line">0 -1</span><br><span class="line">-1 0</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">0.00 0.00</span><br><span class="line">1.00</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time limit      1000 ms</span><br><span class="line">Memory limit    262144 kb</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>一开始是想成最小圆覆盖问题，有注意到圆心在其中的某个点上，最后还是 <code>WA</code> 了……</p><p>然后其实这道题暴力就能解决，对于每个点，求出其他点到这个点的距离，取最大值，即得出这个点能到达的最远点；然后取这些最大值的最小值，就是所求半径。</p><p>全部用 <code>double</code> 来处理小数点问题。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line">dot() &#123; x = <span class="number">0</span>; y = <span class="number">0</span>; &#125;</span><br><span class="line">dot(<span class="keyword">double</span> a, <span class="keyword">double</span> b) :x(a), y(b) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">disBetPow</span><span class="params">(dot a, dot b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> xx = a.x - b.x;</span><br><span class="line"><span class="keyword">double</span> yy = a.y - b.y;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">double</span>)(xx * xx + yy * yy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;dot&gt; v;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="function">dot <span class="title">D</span><span class="params">(x, y)</span></span>;</span><br><span class="line">v.push_back(D);</span><br><span class="line">&#125;</span><br><span class="line">dot O = v[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">double</span> dis1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != v.<span class="built_in">size</span>(); i++)</span><br><span class="line">dis1 = <span class="built_in">max</span>(dis1, disBetPow(O, v[i]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> o_x = O.x, o_y = O.y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">double</span> dis2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != v.<span class="built_in">size</span>(); j++)</span><br><span class="line">dis2 = <span class="built_in">max</span>(dis2, disBetPow(v[i], v[j]));</span><br><span class="line"><span class="keyword">if</span> (dis1 &gt;= dis2) &#123;</span><br><span class="line"><span class="keyword">if</span> ((dis2 == dis1 &amp;&amp; (v[i].x &lt; o_x || (v[i].x == o_x &amp;&amp; v[i].y &lt; o_y)))</span><br><span class="line">|| dis1 &gt; dis2) &#123;</span><br><span class="line">o_x = v[i].x;</span><br><span class="line">o_y = v[i].y;</span><br><span class="line">dis1 = dis2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; o_x &lt;&lt; <span class="string">" "</span> &lt;&lt; o_y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dis1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;保护罩&quot;&gt;&lt;a href=&quot;#保护罩&quot; class=&quot;headerlink&quot; title=&quot;保护罩&quot;&gt;&lt;/a&gt;&lt;strong&gt;保护罩&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;假设宇宙射线的发射点位于一个平面，ZJM已经通过特殊手段获取了所有宇宙射线的发射点，他们的坐标都是整数。而ZJM要构造一个保护罩，这个保护罩是一个圆形，中心位于⼀个宇宙射线的发射点上。为了节省经费，需要做一个最⼩⾯积的保护罩。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="程设" scheme="co10.github.io/categories/%E7%A8%8B%E8%AE%BE/"/>
    
    
  </entry>
  
</feed>
