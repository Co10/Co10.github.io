<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荒芜知地</title>
  
  <subtitle>无人 唯知</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="co10.github.io/"/>
  <updated>2020-04-03T02:47:36.063Z</updated>
  <id>co10.github.io/</id>
  
  <author>
    <name>K</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>路径解析</title>
    <link href="co10.github.io/2020/04/03/%E8%B7%AF%E5%BE%84%E8%A7%A3%E6%9E%90/"/>
    <id>co10.github.io/2020/04/03/%E8%B7%AF%E5%BE%84%E8%A7%A3%E6%9E%90/</id>
    <published>2020-04-03T00:37:18.000Z</published>
    <updated>2020-04-03T02:47:36.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路径解析"><a href="#路径解析" class="headerlink" title="路径解析"></a><strong>路径解析</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在操作系统中，数据通常以文件的形式存储在文件系统中。文件系统一般采用层次化的组织形式，由目录（或者文件夹）和文件构成，形成一棵树的形状。文件有内容，用于存储数据。目录是容器，可包含文件或其他目录。同一个目录下的所有文件和目录的名字各不相同，不同目录下可以有名字相同的文件或目录。</span><br><span class="line">　　为了指定文件系统中的某个文件，需要用路径来定位。在类 Unix 系统（Linux、Max OS X、FreeBSD等）中，路径由若干部分构成，每个部分是一个目录或者文件的名字，相邻两个部分之间用 &#x2F; 符号分隔。</span><br><span class="line">　　有一个特殊的目录被称为根目录，是整个文件系统形成的这棵树的根节点，用一个单独的 &#x2F; 符号表示。在操作系统中，有当前目录的概念，表示用户目前正在工作的目录。根据出发点可以把路径分为两类：</span><br><span class="line">　　 绝对路径：以 &#x2F; 符号开头，表示从根目录开始构建的路径。</span><br><span class="line">　　 相对路径：不以 &#x2F; 符号开头，表示从当前目录开始构建的路径。</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    例如，有一个文件系统的结构如下图所示。在这个文件系统中，有根目录 &#x2F; 和其他普通目录 d1、d2、d3、d4，以及文件 f1、f2、f3、f1、f4。其中，两个 f1 是同名文件，但在不同的目录下。</span><br><span class="line">&#x2F; -+- d1 -+- f1</span><br><span class="line">   |      \- f2</span><br><span class="line">   |</span><br><span class="line">   \- d2 -+- d3 --- f3</span><br><span class="line">          |</span><br><span class="line">          +- d4 --- f1</span><br><span class="line">          |</span><br><span class="line">          \- f4</span><br><span class="line">　　对于 d4 目录下的 f1 文件，可以用绝对路径 &#x2F;d2&#x2F;d4&#x2F;f1 来指定。如果当前目录是 &#x2F;d2&#x2F;d3，这个文件也可以用相对路径 ..&#x2F;d4&#x2F;f1 来指定，这里 .. 表示上一级目录（注意，根目录的上一级目录是它本身）。还有 . 表示本目录，例如 &#x2F;d1&#x2F;.&#x2F;f1 指定的就是 &#x2F;d1&#x2F;f1。注意，如果有多个连续的 &#x2F; 出现，其效果等同于一个 &#x2F;，例如 &#x2F;d1&#x2F;&#x2F;&#x2F;f1 指定的也是 &#x2F;d1&#x2F;f1。</span><br><span class="line">　　本题会给出一些路径，要求对于每个路径，给出正规化以后的形式。一个路径经过正规化操作后，其指定的文件不变，但是会变成一个不包含 . 和 .. 的绝对路径，且不包含连续多个 &#x2F; 符号。如果一个路径以 &#x2F; 结尾，那么它代表的一定是一个目录，正规化操作要去掉结尾的 &#x2F;。若这个路径代表根目录，则正规化操作的结果是 &#x2F;。若路径为空字符串，则正规化操作的结果是当前目录。</span><br></pre></td></tr></table></figure><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">第一行包含一个整数 P，表示需要进行正规化操作的路径个数。</span><br><span class="line">第二行包含一个字符串，表示当前目录。</span><br><span class="line">以下 P 行，每行包含一个字符串，表示需要进行正规化操作的路径。</span><br><span class="line"></span><br><span class="line">1 ≤ P ≤ 10。</span><br><span class="line">文件和目录的名字只包含大小写字母、数字和小数点 .、减号 - 以及下划线 _。</span><br><span class="line">不会有文件或目录的名字是 . 或 .. ，它们具有题目描述中给出的特殊含义。</span><br><span class="line">输入的所有路径每个长度不超过 1000 个字符。</span><br><span class="line">输入的当前目录保证是一个经过正规化操作后的路径。</span><br><span class="line">对于前 30% 的测试用例，需要正规化的路径的组成部分不包含 . 和 .. 。</span><br><span class="line">对于前 60% 的测试用例，需要正规化的路径都是绝对路径。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">共 P 行，每行一个字符串，表示经过正规化操作后的路径，顺序与输入对应。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">input: </span><br><span class="line">7</span><br><span class="line">&#x2F;d2&#x2F;d3</span><br><span class="line">&#x2F;d2&#x2F;d4&#x2F;f1</span><br><span class="line">..&#x2F;d4&#x2F;f1</span><br><span class="line">&#x2F;d1&#x2F;.&#x2F;f1</span><br><span class="line">&#x2F;d1&#x2F;&#x2F;&#x2F;f1</span><br><span class="line">&#x2F;d1&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#x2F;</span><br><span class="line">&#x2F;d1&#x2F;..&#x2F;..&#x2F;d2</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">&#x2F;d2&#x2F;d4&#x2F;f1</span><br><span class="line">&#x2F;d2&#x2F;d4&#x2F;f1</span><br><span class="line">&#x2F;d1&#x2F;f1</span><br><span class="line">&#x2F;d1&#x2F;f1</span><br><span class="line">&#x2F;d1</span><br><span class="line">&#x2F;</span><br><span class="line">&#x2F;d2</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1000 ms</span><br><span class="line">Memory limit262144 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>题目很长，但是只要提取出以下关键点即可: </p><ol><li><code>/</code> 表示根目录</li><li><strong>绝对路径</strong>以 <code>/</code> 符号开头，表示从<strong>根目录</strong>开始构建的路径。</li><li><strong>相对路径</strong>不以 <code>/</code> 符号开头，表示从<strong>当前目录</strong>开始构建的路径。</li><li><code>..</code> 表示上一级目录，根目录的上一级目录是它<strong>本身</strong></li><li><code>/d1/./f1</code> = <code>/d1/f1</code>，即<code>/./</code> = <code>/</code></li><li><code>/d1///f1</code> = <code>/d1/f1</code>，即<code>/// = /</code></li><li>路径以 <code>/</code> 结尾，那么它代表的一定是一个目录，正规化操作要去掉结尾的 <code>/</code></li><li>若这个路径代表根目录，则正规化操作的结果是 <code>/</code></li><li>若路径为空字符串，则正规化操作的结果是当前目录</li><li>文件和目录的名字只包含大小写字母、数字和小数点 <code>.</code>、减号 <code>-</code> 以及下划线 <code>_</code>。</li><li>不会有文件或目录的名字是 <code>.</code> 或 <code>..</code> ，它们具有题目描述中给出的特殊含义。</li></ol><p>先是处理绝对路径与相对路径的问题：相对路径不以<code>/</code>开头，所以可以把相对路径变成绝对路径，即把当前路径加在相对路径前，就变成了绝对路径，接下来就变成了处理绝对路径的问题。</p><p>首先是处理多个<code>/</code>的问题，可以利用<code>/</code>将字符串分隔成多个目录或文件，储存到数组中，最后输出时再把数组元素前加上<code>/</code>即可。</p><p>然后就是处理<code>.</code>跟<code>..</code>，由于前面已经把<code>/</code>去除，结果所有字串存在数组里，接下来只要去除<code>..</code>跟上级目录、去除<code>.</code>就行。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> root, <span class="built_in">string</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">0</span>] != <span class="string">'/'</span>)</span><br><span class="line">a = root + <span class="string">'/'</span> + a;<span class="comment">//相对路径变成绝对路径</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line"><span class="built_in">string</span> temp = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">bool</span> found = <span class="literal">true</span>;<span class="comment">//标记是否遇到 '/', 便于处理以 '/' 结尾</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] == <span class="string">'/'</span> || i == a.<span class="built_in">size</span>()) &#123;<span class="comment">//遇到了 '/' 或到头了</span></span><br><span class="line"><span class="keyword">if</span> (found == <span class="literal">false</span>) &#123;<span class="comment">// 不是连续出现的 '/'</span></span><br><span class="line">found = <span class="literal">true</span>;</span><br><span class="line">v.push_back(temp);</span><br><span class="line">temp.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//没遇到 '/' 就一路通行，将字符一个一个加入temp</span></span><br><span class="line">found = <span class="literal">false</span>;</span><br><span class="line">temp += a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>();) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i] == <span class="string">".."</span>) &#123;<span class="comment">//遇到了 '..'</span></span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;<span class="comment">//擦除 '..' 和上级</span></span><br><span class="line">i--;</span><br><span class="line">v.erase(v.<span class="built_in">begin</span>() + i);</span><br><span class="line">v.erase(v.<span class="built_in">begin</span>() + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">v.erase(v.<span class="built_in">begin</span>() + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (v[i] == <span class="string">"."</span>)<span class="comment">//遇到了一个'.'</span></span><br><span class="line">v.erase(v.<span class="built_in">begin</span>() + i);<span class="comment">//直接去掉</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">i++;<span class="comment">//指针前进</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span> (v.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">res = <span class="string">"/"</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">res += <span class="string">"/"</span>;</span><br><span class="line">res+= v[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line"><span class="built_in">string</span> curr;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; curr;</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != p; i++) &#123;</span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line">getline(<span class="built_in">cin</span>, a);</span><br><span class="line"><span class="built_in">string</span> b = convert(curr, a);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;路径解析&quot;&gt;&lt;a href=&quot;#路径解析&quot; class=&quot;headerlink&quot; title=&quot;路径解析&quot;&gt;&lt;/a&gt;&lt;strong&gt;路径解析&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;在操作系统中，数据通常以文件的形式存储在文件系统中。文件系统一般采用层次化的组织形式，由目录（或者文件夹）和文件构成，形成一棵树的形状。文件有内容，用于存储数据。目录是容器，可包含文件或其他目录。同一个目录下的所有文件和目录的名字各不相同，不同目录下可以有名字相同的文件或目录。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　为了指定文件系统中的某个文件，需要用路径来定位。在类 Unix 系统（Linux、Max OS X、FreeBSD等）中，路径由若干部分构成，每个部分是一个目录或者文件的名字，相邻两个部分之间用 &amp;#x2F; 符号分隔。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　有一个特殊的目录被称为根目录，是整个文件系统形成的这棵树的根节点，用一个单独的 &amp;#x2F; 符号表示。在操作系统中，有当前目录的概念，表示用户目前正在工作的目录。根据出发点可以把路径分为两类：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　 绝对路径：以 &amp;#x2F; 符号开头，表示从根目录开始构建的路径。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　 相对路径：不以 &amp;#x2F; 符号开头，表示从当前目录开始构建的路径。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="字符串处理" scheme="co10.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>扑克牌牌型</title>
    <link href="co10.github.io/2020/03/31/%E6%89%91%E5%85%8B%E7%89%8C%E7%89%8C%E5%9E%8B/"/>
    <id>co10.github.io/2020/03/31/%E6%89%91%E5%85%8B%E7%89%8C%E7%89%8C%E5%9E%8B/</id>
    <published>2020-03-31T13:47:38.000Z</published>
    <updated>2020-04-02T18:44:08.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="扑克牌牌型"><a href="#扑克牌牌型" class="headerlink" title="扑克牌牌型"></a><strong>扑克牌牌型</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">有 A × B 张扑克牌。每张扑克牌有一个大小(整数，记为a，范围区间是 0 到 A - 1）和一个花色（整数，记为b，范围区间是 0 到 B - 1。</span><br><span class="line">扑克牌是互异的，也就是独一无二的，也就是说没有两张牌大小和花色都相同。</span><br><span class="line">“一手牌”的意思是你手里有5张不同的牌，这 5 张牌没有谁在前谁在后的顺序之分，它们可以形成一个牌型。 我们定义了 9 种牌型，如下是 9 种牌型的规则，我们用“低序号优先”来匹配牌型，即这“一手牌”从上到下满足的第一个牌型规则就是它的“牌型编号”（一个整数，属于1到9）:</span><br><span class="line">1. 同花顺: 同时满足规则 5 和规则 4.</span><br><span class="line">2. 炸弹 : 5张牌其中有4张牌的大小相等.</span><br><span class="line">3. 三带二 : 5张牌其中有3张牌的大小相等，且另外2张牌的大小也相等.</span><br><span class="line">4. 同花 : 5张牌都是相同花色的.</span><br><span class="line">5. 顺子 : 5张牌的大小形如 x, x + 1, x + 2, x + 3, x + 4</span><br><span class="line">6. 三条: 5张牌其中有3张牌的大小相等.</span><br><span class="line">7. 两对: 5张牌其中有2张牌的大小相等，且另外3张牌中2张牌的大小相等.</span><br><span class="line">8. 一对: 5张牌其中有2张牌的大小相等.</span><br><span class="line">9. 要不起: 这手牌不满足上述的牌型中任意一个.</span><br><span class="line">现在从A × B 张扑克牌中拿走 2 张牌，分别是 (a1, b1) 和 (a2, b2). （其中a表示大小，b表示花色），现在要从剩下的扑克牌中再随机拿出 3 张，组成一手牌。</span><br><span class="line">求在所有可能的方案中，这 9 种牌型每种牌型的方案数。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第 1 行包含了整数 A 和 B (5 ≤ A ≤ 25, 1 ≤ B ≤ 4).</span><br><span class="line">第 2 行包含了整数 a1, b1, a2, b2 (0 ≤ a1, a2 ≤ A - 1, 0 ≤ b1, b2 ≤ B - 1, (a1, b1) ≠ (a2, b2)).</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一行，这行有 9 个整数，每个整数代表了 9 种牌型的方案数（按牌型编号从小到大的顺序）</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">5 2</span><br><span class="line">1 0 3 1</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">0 0 0 0 8 0 12 36 0</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">25 4</span><br><span class="line">0 0 24 3</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">0 2 18 0 0 644 1656 36432 113344</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit2000 ms</span><br><span class="line">Memory limit524288 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>这是一道搜索问题，暴力<code>for</code>循环搜索就能解决，不需要用到排列组合……</p><p>本题主要有两步：求出所有组合，判断属于哪种牌型。</p><h3 id="求组合"><a href="#求组合" class="headerlink" title="求组合"></a>求组合</h3><p>本来是采用递归求出所有组合的，但是扑克牌有点数和花色，二维数组的组合枚举不会写……由于每一张牌都不同，所以把二维数组变成一维数组进行枚举，然后……不知怎么样反正就是<code>WA</code>了，判断牌型没出问题，但是找不出组合哪里出问题，纠结半天，也还是找不出来……后来看见某人发了说说才恍然大悟——这是一个搜索问题！😕</p><p>看数据比较小，25×4，多重<code>for</code>循环应该不会超时，所以后来直接暴力<code>for</code>循环求组合，但是又出现了新问题：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != a; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != b; j++)</span><br><span class="line"><span class="keyword">if</span> (!(i == a1 &amp;&amp; j == b1) &amp;&amp; !(i == a2 &amp;&amp; j == b2))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ii = i; ii != a; ii++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> jj = <span class="number">0</span>; jj != b; jj++)</span><br><span class="line"><span class="keyword">if</span> (!(ii == a1 &amp;&amp; jj == b1) &amp;&amp; !(ii == a2 &amp;&amp; jj == b2) &amp;&amp;</span><br><span class="line">!(ii == i &amp;&amp; jj == j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> iii = ii; iii != a; iii++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> jjj = jj; jjj != b; jjj++)</span><br><span class="line"><span class="keyword">if</span> (!(iii == a1 &amp;&amp; jjj == b1) &amp;&amp;</span><br><span class="line">!(iii == a2 &amp;&amp; jjj == b2) &amp;&amp;</span><br><span class="line">!(iii == i &amp;&amp; jjj == j) &amp;&amp;</span><br><span class="line">!(iii == ii &amp;&amp; jjj == jj)) &#123;</span><br><span class="line"><span class="function">poke <span class="title">p1</span><span class="params">(i, j)</span></span>;</span><br><span class="line">pv.push_back(p1);</span><br><span class="line"><span class="function">poke <span class="title">p2</span><span class="params">(ii, jj)</span></span>;</span><br><span class="line">pv.push_back(p2);</span><br><span class="line"><span class="function">poke <span class="title">p3</span><span class="params">(iii, jjj)</span></span>;</span><br><span class="line">pv.push_back(p3);</span><br><span class="line">sort(pv.<span class="built_in">begin</span>(), pv.<span class="built_in">end</span>(), cmp);</span><br><span class="line">pokeKind(pv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二&amp;第三大次的<code>for</code>循环无法保证选的牌这一次和下一次选的不是相反的，比如第n次选牌，第二大次<code>for</code>循环选了红桃4，第三大次<code>for</code>循环选了黑桃4；然而第n+1次选牌，第二大次<code>for</code>循环选了黑桃4，第三大次<code>for</code>循环选了红桃4……</p><p>我的改进就是每2个小次的for循环合并，<code>手牌标号%总点数 = 当前点数</code>，<code>手牌标号/总点数= 当前花色</code>，比如<code>手牌(点数, 花色): (0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), ..., (4, 0), (4, 1)</code>标号就是<code>0, 1, 2, 3, 4, 5, ..., 8, 9</code>。</p><h3 id="排序后判断牌型"><a href="#排序后判断牌型" class="headerlink" title="排序后判断牌型"></a>排序后判断牌型</h3><p>我用了5个变量：<code>int sameC, diffC</code>：几组两两连续的点数相同/不同；<code>bool colorS, Shunza</code>：是否同花/顺子；<code>int diffPos</code>：最后一次出现连续两两不等的位置。</p><p>具体见<code>pokeKind()</code>函数区分。</p><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><p>有时暴力一下可能出奇迹……</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poke</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">int</span> color;</span><br><span class="line">poke(<span class="keyword">int</span> p, <span class="keyword">int</span> c) :<span class="built_in">point</span>(p), color(c) &#123;  &#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> poke p)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (p.<span class="built_in">point</span> == <span class="built_in">point</span>)</span><br><span class="line"><span class="keyword">return</span> color &lt; p.color;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">point</span> &lt; p.<span class="built_in">point</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pK[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(poke a, poke b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pokeKind</span><span class="params">(<span class="built_in">vector</span>&lt;poke&gt; v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sameC = <span class="number">0</span>, diffC = <span class="number">0</span>; <span class="comment">//4=; 3=&amp;2=; 3=; 2=&amp;2=; 2=</span></span><br><span class="line"><span class="keyword">int</span> diffPos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> colorS = <span class="literal">true</span>;<span class="comment">//同花</span></span><br><span class="line"><span class="keyword">bool</span> Shunza = <span class="literal">true</span>;<span class="comment">//顺子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != v.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i].<span class="built_in">point</span> == v[i + <span class="number">1</span>].<span class="built_in">point</span>)</span><br><span class="line">sameC++;</span><br><span class="line"><span class="keyword">if</span> (v[i].<span class="built_in">point</span> != v[i + <span class="number">1</span>].<span class="built_in">point</span>) &#123;</span><br><span class="line">diffC++;</span><br><span class="line">diffPos = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (colorS == <span class="literal">true</span> &amp;&amp; v[i].color != v[i + <span class="number">1</span>].color)</span><br><span class="line">colorS = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (Shunza == <span class="literal">true</span> &amp;&amp; v[i].<span class="built_in">point</span> + <span class="number">1</span> != v[i + <span class="number">1</span>].<span class="built_in">point</span>)</span><br><span class="line">Shunza = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (colorS == <span class="literal">true</span> &amp;&amp; Shunza == <span class="literal">true</span>) &#123;</span><br><span class="line">pK[<span class="number">0</span>]++;<span class="comment">//1 同花顺</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sameC == <span class="number">3</span> &amp;&amp; diffC == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (diffPos == <span class="number">0</span> || diffPos == <span class="number">3</span>)</span><br><span class="line">pK[<span class="number">1</span>]++;<span class="comment">//2 炸弹</span></span><br><span class="line"><span class="keyword">if</span> (diffPos == <span class="number">1</span> || diffPos == <span class="number">2</span>)</span><br><span class="line">pK[<span class="number">2</span>]++;<span class="comment">//3 三带二</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (colorS == <span class="literal">true</span> &amp;&amp; Shunza == <span class="literal">false</span>) &#123;</span><br><span class="line">pK[<span class="number">3</span>]++;<span class="comment">//4 同花</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (colorS == <span class="literal">false</span> &amp;&amp; Shunza == <span class="literal">true</span>) &#123;</span><br><span class="line">pK[<span class="number">4</span>]++;<span class="comment">//5 顺子</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sameC == <span class="number">2</span> &amp;&amp; diffC == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">bool</span> same3 = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=v.<span class="built_in">size</span>()<span class="number">-2</span>;i++)</span><br><span class="line"><span class="keyword">if</span> (v[i].<span class="built_in">point</span> == v[i + <span class="number">2</span>].<span class="built_in">point</span>)</span><br><span class="line">same3 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (same3 == <span class="literal">true</span>)</span><br><span class="line">pK[<span class="number">5</span>]++;<span class="comment">//6 三条</span></span><br><span class="line"><span class="keyword">if</span> (same3 == <span class="literal">false</span>)</span><br><span class="line">pK[<span class="number">6</span>]++;<span class="comment">//7 两对</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sameC == <span class="number">1</span> &amp;&amp; diffC == <span class="number">3</span>) &#123;</span><br><span class="line">pK[<span class="number">7</span>]++;<span class="comment">//8 一对</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pK[<span class="number">8</span>]++;<span class="comment">//9 要不起</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a1, b1, a2, b2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a1 &gt;&gt; b1 &gt;&gt; a2 &gt;&gt; b2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">pK[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != a * b - <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> ai = i % a, bi = i / a;</span><br><span class="line"><span class="keyword">if</span> (!(ai == a1 &amp;&amp; bi == b1) &amp;&amp; !(ai == a2 &amp;&amp; bi == b2)) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j != a * b - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> aj = j % a, bj = j / a;</span><br><span class="line"><span class="keyword">if</span> (!(aj == a1 &amp;&amp; bj == b1) &amp;&amp; !(aj == a2 &amp;&amp; bj == b2)) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k != a * b; k++) &#123;</span><br><span class="line"><span class="keyword">int</span> ak = k % a, bk = k / a;</span><br><span class="line"><span class="keyword">if</span> (!(ak == a1 &amp;&amp; bk == b1) &amp;&amp; !(ak == a2 &amp;&amp; bk == b2)) &#123;</span><br><span class="line"><span class="function">poke <span class="title">o1</span><span class="params">(a1, b1)</span></span>;</span><br><span class="line"><span class="function">poke <span class="title">o2</span><span class="params">(a2, b2)</span></span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;poke&gt; pv;</span><br><span class="line">pv.push_back(o1);</span><br><span class="line">pv.push_back(o2);</span><br><span class="line"></span><br><span class="line"><span class="function">poke <span class="title">p1</span><span class="params">(ai, bi)</span></span>;</span><br><span class="line">pv.push_back(p1);</span><br><span class="line"><span class="function">poke <span class="title">p2</span><span class="params">(aj, bj)</span></span>;</span><br><span class="line">pv.push_back(p2);</span><br><span class="line"><span class="function">poke <span class="title">p3</span><span class="params">(ak, bk)</span></span>;</span><br><span class="line">pv.push_back(p3);</span><br><span class="line">sort(pv.<span class="built_in">begin</span>(), pv.<span class="built_in">end</span>(), cmp);</span><br><span class="line">pokeKind(pv);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; pK[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;扑克牌牌型&quot;&gt;&lt;a href=&quot;#扑克牌牌型&quot; class=&quot;headerlink&quot; title=&quot;扑克牌牌型&quot;&gt;&lt;/a&gt;&lt;strong&gt;扑克牌牌型&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;有 A × B 张扑克牌。每张扑克牌有一个大小(整数，记为a，范围区间是 0 到 A - 1）和一个花色（整数，记为b，范围区间是 0 到 B - 1。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;扑克牌是互异的，也就是独一无二的，也就是说没有两张牌大小和花色都相同。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;“一手牌”的意思是你手里有5张不同的牌，这 5 张牌没有谁在前谁在后的顺序之分，它们可以形成一个牌型。 我们定义了 9 种牌型，如下是 9 种牌型的规则，我们用“低序号优先”来匹配牌型，即这“一手牌”从上到下满足的第一个牌型规则就是它的“牌型编号”（一个整数，属于1到9）:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1. 同花顺: 同时满足规则 5 和规则 4.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. 炸弹 : 5张牌其中有4张牌的大小相等.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 三带二 : 5张牌其中有3张牌的大小相等，且另外2张牌的大小也相等.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. 同花 : 5张牌都是相同花色的.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5. 顺子 : 5张牌的大小形如 x, x + 1, x + 2, x + 3, x + 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6. 三条: 5张牌其中有3张牌的大小相等.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7. 两对: 5张牌其中有2张牌的大小相等，且另外3张牌中2张牌的大小相等.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8. 一对: 5张牌其中有2张牌的大小相等.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9. 要不起: 这手牌不满足上述的牌型中任意一个.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;现在从A × B 张扑克牌中拿走 2 张牌，分别是 (a1, b1) 和 (a2, b2). （其中a表示大小，b表示花色），现在要从剩下的扑克牌中再随机拿出 3 张，组成一手牌。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;求在所有可能的方案中，这 9 种牌型每种牌型的方案数。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="枚举" scheme="co10.github.io/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>数据中心</title>
    <link href="co10.github.io/2020/03/30/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83/"/>
    <id>co10.github.io/2020/03/30/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83/</id>
    <published>2020-03-30T13:47:01.000Z</published>
    <updated>2020-04-02T18:10:28.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据中心"><a href="#数据中心" class="headerlink" title="数据中心"></a><strong>数据中心</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在一个集中式网络中，存在一个根节点，需要长时间接收其余结点传输给它的反馈数据。</span><br><span class="line">存在一个 n 结点的网络图，编号从 1 到 n。该网络的传输时全双工的，所以是无向图。如果两结点 vi, ui 相连，表明 vi, ui 之间可以互相收发数据，边权是传输数据所需时间 ti。现在每个结点需要选择一条路径将数据发送到 root 号节点。希望求出一个最优的树结构传输图，使得完成这个任务所需要的时间最少。root 结点只能接收数据，其余任何一个节点可以将数据传输给另外的一个节点，但是不能将数据传输给多个节点。所有节点可以接收多个不同节点的数据。</span><br><span class="line">一个树结构传输图的传输时间为Tmax，其中Tmax &#x3D; max(Th), h为接收点在树中的深度，Th &#x3D; max(th,j), th,j表示 j 条不同的边，这 j 条边接收点的深度都为 h。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">从标准输入读入数据。</span><br><span class="line">输入的第 1 行包含一个正整数 n，保证 n ≤ 5 × 10^4</span><br><span class="line">输入的第 2 行包含一个正整数 m，保证 m ≤ 10^5。</span><br><span class="line">输入的第 3 行包含一个正整数 root，保证 root ≤ 5 × 10^4</span><br><span class="line">输入的第 4 行至第 3+m 行包含 3 个正整数 vi, ui, ti，保证 vi ≤ 5 × 10^4, ui ≤ 5 × 10^4, ti ≤ 10^6, vi ≠ ui。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出到标准输出。</span><br><span class="line">输出仅有一行，包含一个正整数 ans，表示最优的树结构流水线所耗时 Tmax。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">1</span><br><span class="line">1 2 3</span><br><span class="line">1 3 4</span><br><span class="line">1 4 5</span><br><span class="line">2 3 8</span><br><span class="line">3 4 2</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">1</span><br><span class="line">1 2 3</span><br><span class="line">1 3 4</span><br><span class="line">1 4 5</span><br><span class="line">2 3 8</span><br><span class="line">3 4 2</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a><strong>Note</strong></h2><p><img src="https://i.loli.net/2020/04/03/juJwNGV2FL7dXm5.png" alt="image-20200403020036204.png"></p><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1000 ms</span><br><span class="line">Memory limit524288 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p><del>本题又臭又长，题设变量花里胡哨，样例解释东拉西扯，</del>题意大致就是n个节点的带权无向图，连接每个点求总权重最小，其实就是一个最小生成树问题，可以用Kruskal算法，算法具体思路同上一篇。</p><p>就是吐槽一下test好像跑了120组，测试用了7分钟……也太多了吧，在那等着出结果等的心好慌，测那么多万一<code>WA</code>了还是啥的会崩溃的……🙃</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">305</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u, v, w;</span><br><span class="line">edge(<span class="keyword">int</span> _u, <span class="keyword">int</span> _v, <span class="keyword">int</span> _w) :u(_u), v(_v), w(_w) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> par[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (par[x] == x)</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> par[x] = <span class="built_in">find</span>(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;edge&gt; v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> edgeCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">par[i] = i;</span><br><span class="line">sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> p1 = <span class="built_in">find</span>(v[i].u);</span><br><span class="line"><span class="keyword">int</span> p2 = <span class="built_in">find</span>(v[i].v);</span><br><span class="line"><span class="keyword">if</span> (p1 != p2) &#123;</span><br><span class="line">par[p1] = p2;</span><br><span class="line">ans += v[i].w;</span><br><span class="line">edgeCount++;</span><br><span class="line"><span class="keyword">if</span> (edgeCount == n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="function">edge <span class="title">e1</span><span class="params">(<span class="number">0</span>, i, a)</span></span>;</span><br><span class="line"><span class="function">edge <span class="title">e2</span><span class="params">(i, <span class="number">0</span>, a)</span></span>;</span><br><span class="line">v.push_back(e1);</span><br><span class="line">v.push_back(e2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="function">edge <span class="title">e</span><span class="params">(i, j, a)</span></span>;</span><br><span class="line">v.push_back(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = kruskal(n, v);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据中心&quot;&gt;&lt;a href=&quot;#数据中心&quot; class=&quot;headerlink&quot; title=&quot;数据中心&quot;&gt;&lt;/a&gt;&lt;strong&gt;数据中心&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;在一个集中式网络中，存在一个根节点，需要长时间接收其余结点传输给它的反馈数据。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;存在一个 n 结点的网络图，编号从 1 到 n。该网络的传输时全双工的，所以是无向图。如果两结点 vi, ui 相连，表明 vi, ui 之间可以互相收发数据，边权是传输数据所需时间 ti。现在每个结点需要选择一条路径将数据发送到 root 号节点。希望求出一个最优的树结构传输图，使得完成这个任务所需要的时间最少。root 结点只能接收数据，其余任何一个节点可以将数据传输给另外的一个节点，但是不能将数据传输给多个节点。所有节点可以接收多个不同节点的数据。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一个树结构传输图的传输时间为Tmax，其中Tmax &amp;#x3D; max(Th), h为接收点在树中的深度，Th &amp;#x3D; max(th,j), th,j表示 j 条不同的边，这 j 条边接收点的深度都为 h。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="最小生成树" scheme="co10.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="Kruskal" scheme="co10.github.io/tags/Kruskal/"/>
    
  </entry>
  
  <entry>
    <title>农田引水</title>
    <link href="co10.github.io/2020/03/28/%E5%86%9C%E7%94%B0%E5%BC%95%E6%B0%B4/"/>
    <id>co10.github.io/2020/03/28/%E5%86%9C%E7%94%B0%E5%BC%95%E6%B0%B4/</id>
    <published>2020-03-28T13:45:59.000Z</published>
    <updated>2020-04-02T17:59:06.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="农田引水"><a href="#农田引水" class="headerlink" title="农田引水"></a><strong>农田引水</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">农田有 n 块，编号从 1~n。种田要灌水。</span><br><span class="line">众所周知东东是一个魔法师，他可以消耗一定的 MP 在一块田上施展魔法，使得黄河之水天上来。他也可以消耗一定的 MP 在两块田的渠上建立传送门，使得这块田引用那块有水的田的水。(1 ≤ n ≤ 300)</span><br><span class="line">黄河之水天上来的消耗是 Wi，i 是农田编号 (1 ≤ Wi ≤ 1e5)</span><br><span class="line">建立传送门的消耗是 Pij，i、j 是农田编号 (1 ≤ Pij ≤ 1e5, Pij &#x3D; Pji, Pii &#x3D; 0)</span><br><span class="line">求为所有的田灌水的最小消耗。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第 1 行：一个数 n</span><br><span class="line">第 2 行到第 n + 1 行：数 wi</span><br><span class="line">第 n + 2 行到第 2n + 1 行：矩阵即 pij 矩阵</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最小消耗的MP值</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">0 2 2 2</span><br><span class="line">2 0 3 3</span><br><span class="line">2 3 0 4</span><br><span class="line">2 3 4 0</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">9</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1000 ms</span><br><span class="line">Memory limit262144 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>可以将“天上来”作为源点，即第0号农田到第 i 号农田灌水需要消耗的MP值，因此样例的数组可变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 5 4 4 3</span><br><span class="line">0 2 2 25 0 2 2 2</span><br><span class="line">2 0 3 3→4 2 0 3 3</span><br><span class="line">2 3 0 4 4 2 3 0 4</span><br><span class="line">2 3 4 03 2 3 4 0</span><br></pre></td></tr></table></figure><p>本题就变成了最小生成树问题，可以用Kruskal算法:<br>将所有的边按边权升序排列，每次加入最小权的边到生成树中，保证加入的边在该连通图中，且不会生成环，直到最小生成树中的边数等于总顶点数减1。</p><p>这些权重之和就是答案。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">305</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u, v, w;</span><br><span class="line">edge(<span class="keyword">int</span> _u, <span class="keyword">int</span> _v, <span class="keyword">int</span> _w) :u(_u), v(_v), w(_w) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> par[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (par[x] == x)</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> par[x] = <span class="built_in">find</span>(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;edge&gt; v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> edgeCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">par[i] = i;</span><br><span class="line">sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> p1 = <span class="built_in">find</span>(v[i].u);</span><br><span class="line"><span class="keyword">int</span> p2 = <span class="built_in">find</span>(v[i].v);</span><br><span class="line"><span class="keyword">if</span> (p1 != p2) &#123;<span class="comment">//并查集保证不会生成环</span></span><br><span class="line">par[p1] = p2;</span><br><span class="line">ans += v[i].w;</span><br><span class="line">edgeCount++;</span><br><span class="line"><span class="keyword">if</span> (edgeCount == n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="function">edge <span class="title">e1</span><span class="params">(<span class="number">0</span>, i, a)</span></span>;</span><br><span class="line"><span class="function">edge <span class="title">e2</span><span class="params">(i, <span class="number">0</span>, a)</span></span>;</span><br><span class="line">v.push_back(e1);</span><br><span class="line">v.push_back(e2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="function">edge <span class="title">e</span><span class="params">(i, j, a)</span></span>;</span><br><span class="line">v.push_back(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = kruskal(n, v);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;农田引水&quot;&gt;&lt;a href=&quot;#农田引水&quot; class=&quot;headerlink&quot; title=&quot;农田引水&quot;&gt;&lt;/a&gt;&lt;strong&gt;农田引水&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;农田有 n 块，编号从 1~n。种田要灌水。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;众所周知东东是一个魔法师，他可以消耗一定的 MP 在一块田上施展魔法，使得黄河之水天上来。他也可以消耗一定的 MP 在两块田的渠上建立传送门，使得这块田引用那块有水的田的水。(1 ≤ n ≤ 300)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;黄河之水天上来的消耗是 Wi，i 是农田编号 (1 ≤ Wi ≤ 1e5)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;建立传送门的消耗是 Pij，i、j 是农田编号 (1 ≤ Pij ≤ 1e5, Pij &amp;#x3D; Pji, Pii &amp;#x3D; 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;求为所有的田灌水的最小消耗。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="最小生成树" scheme="co10.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="Kruskal" scheme="co10.github.io/tags/Kruskal/"/>
    
  </entry>
  
  <entry>
    <title>传染病</title>
    <link href="co10.github.io/2020/03/27/%E4%BC%A0%E6%9F%93%E7%97%85/"/>
    <id>co10.github.io/2020/03/27/%E4%BC%A0%E6%9F%93%E7%97%85/</id>
    <published>2020-03-27T13:45:38.000Z</published>
    <updated>2020-04-02T17:42:54.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="COVID-19传染病"><a href="#COVID-19传染病" class="headerlink" title="COVID-19传染病"></a><strong>COVID-19传染病</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果一个感染者走入一个群体，那么这个群体需要被隔离。</span><br><span class="line">小A同学被确诊为新冠感染，并且没有戴口罩！</span><br><span class="line">需要尽快找到所有和小A同学直接或者间接接触过的同学，将他们隔离，防止更大范围的扩散。</span><br><span class="line">众所周知，学生的交际可能是分小团体的，一位学生可能同时参与多个小团体内。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">多组数据，对于每组测试数据：</span><br><span class="line">第一行为两个整数n和m（n &#x3D; m &#x3D; 0表示输入结束，不需要处理），n 是学生的数量，m 是学生群体的数量。0 &lt; n ≤ 30000 ， 0 ≤ m ≤ 500</span><br><span class="line">学生编号为0~ n-1</span><br><span class="line">小A编号为0</span><br><span class="line">随后，m 行，每行有一个整数 num 即小团体人员数量。随后有 num 个整数代表这个小团体的学生。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出要隔离的人数，每组数据的答案输出占一行</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">100 4</span><br><span class="line">2 1 2</span><br><span class="line">5 10 13 11 12 14</span><br><span class="line">2 0 1</span><br><span class="line">2 99 2</span><br><span class="line">200 2</span><br><span class="line">1 5</span><br><span class="line">5 1 2 3 4 5</span><br><span class="line">1 0</span><br><span class="line">0 0</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1000 ms</span><br><span class="line">Memory limit20000 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>并查集：并：合并两个集合，将元素A作为元素B的父节点；查：确定两个元素是否属于同一集合，每次查找当前节点的父节点，直到遇到根节点，如果两个元素的根节点相同，则它们属于同一集合。</p><p>初始化每个成员都属于一个只包括自己的集合，并以自己为代表元素，然后根据题目条件逐一合并集合。</p><p>用一个<code>Rank[]</code>数组来维护集合的秩，避免“大树”挂在“小树”上面，使得树更高。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">30005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> par[maxN];</span><br><span class="line"><span class="keyword">int</span> Rank[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">par[i] = i;</span><br><span class="line">Rank[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (par[x] == x)</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> par[x] = <span class="built_in">find</span>(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">unit</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x = <span class="built_in">find</span>(x);</span><br><span class="line">y = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span> (x == y)<span class="comment">//同一集合</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (Rank[x] &gt; Rank[y])</span><br><span class="line">swap(x, y);<span class="comment">//避免大的挂在小的名下</span></span><br><span class="line">par[x] = y;</span><br><span class="line">Rank[x] += Rank[y];</span><br><span class="line">Rank[y] = Rank[x];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span> (scanf_s(<span class="string">"%d%d"</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">initial(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line"><span class="keyword">int</span> ori;</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;ori);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; num; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">unit(ori, a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = Rank[<span class="built_in">find</span>(<span class="number">0</span>)];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;COVID-19传染病&quot;&gt;&lt;a href=&quot;#COVID-19传染病&quot; class=&quot;headerlink&quot; title=&quot;COVID-19传染病&quot;&gt;&lt;/a&gt;&lt;strong&gt;COVID-19传染病&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;如果一个感染者走入一个群体，那么这个群体需要被隔离。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;小A同学被确诊为新冠感染，并且没有戴口罩！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;需要尽快找到所有和小A同学直接或者间接接触过的同学，将他们隔离，防止更大范围的扩散。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;众所周知，学生的交际可能是分小团体的，一位学生可能同时参与多个小团体内。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="并查集" scheme="co10.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>最长网线</title>
    <link href="co10.github.io/2020/03/26/%E6%9C%80%E9%95%BF%E7%BD%91%E7%BA%BF/"/>
    <id>co10.github.io/2020/03/26/%E6%9C%80%E9%95%BF%E7%BD%91%E7%BA%BF/</id>
    <published>2020-03-26T03:06:14.000Z</published>
    <updated>2020-04-02T17:32:23.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最长网线"><a href="#最长网线" class="headerlink" title="最长网线"></a><strong>最长网线</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实验室里原先有一台电脑(编号为 1 )，最近又购置了 N - 1 台电脑，编号为 2 到 N 。每台电脑都用网线连接到一台先前安装的电脑上。求第 i 台电脑到其他电脑的最大网线长度。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入文件包含多组测试数据。对于每组测试数据，第一行一个整数 N (N ≤ 10000)，接下来有 N - 1 行，每一行两个数，对于第 j 行的两个数，它们表示与 i 号电脑连接的电脑编号以及它们之间网线的长度。网线的总长度不会超过 10^9，每个数之间用一个空格隔开。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每组测试数据输出 N 行，第 i 行表示 i 号电脑的答案 (1 ≤ i ≤ N).</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">5</span><br><span class="line">1 1</span><br><span class="line">2 1</span><br><span class="line">3 1</span><br><span class="line">1 1</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1000 ms</span><br><span class="line">Memory limit32768 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>每台电脑最多有2条网线相连，因此可以看成一棵树，采用邻接矩阵来储存节点。</p><p>利用DFS逐个求出每个节点的最长路径会超时，但是本题连接的网线可以看成一棵没有分支的树，是一条链，树的直径就是链长，因此可以求出链的两端点到每个节点的距离，更新最大距离即可。</p><p>树的直径：从某个点开始遍历，它能到达的终点就是直径的一个端点；再从这个得到的端点开始遍历，它能到达的终点就是直径的另一个端点。</p><p>本题进行3次DFS就能得出结果。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">10005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w;</span><br><span class="line">edge() &#123; v = <span class="number">0</span>; w = <span class="number">0</span>; &#125;</span><br><span class="line">edge(<span class="keyword">int</span> _v, <span class="keyword">long</span> <span class="keyword">long</span> _w) :v(_v), w(_w) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; edges[maxN];</span><br><span class="line"><span class="keyword">bool</span> visit[maxN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> path[maxN];</span><br><span class="line"><span class="keyword">int</span> source;<span class="comment">//直径的端点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">long</span> <span class="keyword">long</span> length)</span> </span>&#123;</span><br><span class="line">visit[s] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edges[s].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = edges[s].at(i).v;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tempW = edges[s].at(i).w;</span><br><span class="line"><span class="keyword">if</span> (!visit[temp]) &#123;</span><br><span class="line">path[temp] = <span class="built_in">max</span>(path[temp], length + tempW);</span><br><span class="line"><span class="keyword">if</span> (path[source] &lt; path[temp])</span><br><span class="line">source = temp;</span><br><span class="line">dfs(temp, length + tempW);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thePath</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">source = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line"><span class="built_in">memset</span>(path, <span class="number">0</span>, <span class="keyword">sizeof</span>(path));</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">0</span>);<span class="comment">//第一次 从第一个点开始 求得直径的一个端点</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">dfs(source, <span class="number">0</span>);<span class="comment">//第二次 从求得的端点开始 求得另一端点 同时更新最长路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">dfs(source, <span class="number">0</span>);<span class="comment">//第三次 从上一次求得的端点开始 更新最长路径</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, path[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (scanf_s(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b;</span><br><span class="line">scanf_s(<span class="string">"%d %lld"</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="function">edge <span class="title">e1</span><span class="params">(a, b)</span></span>;</span><br><span class="line"><span class="function">edge <span class="title">e2</span><span class="params">(i, b)</span></span>;</span><br><span class="line">edges[i].push_back(e1);</span><br><span class="line">edges[a].push_back(e2);</span><br><span class="line">&#125;</span><br><span class="line">thePath(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">edges[i].<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;最长网线&quot;&gt;&lt;a href=&quot;#最长网线&quot; class=&quot;headerlink&quot; title=&quot;最长网线&quot;&gt;&lt;/a&gt;&lt;strong&gt;最长网线&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;实验室里原先有一台电脑(编号为 1 )，最近又购置了 N - 1 台电脑，编号为 2 到 N 。每台电脑都用网线连接到一台先前安装的电脑上。求第 i 台电脑到其他电脑的最大网线长度。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="DFS" scheme="co10.github.io/tags/DFS/"/>
    
      <category term="树的直径" scheme="co10.github.io/tags/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口</title>
    <link href="co10.github.io/2020/03/24/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>co10.github.io/2020/03/24/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id>
    <published>2020-03-24T08:21:47.000Z</published>
    <updated>2020-04-02T17:20:28.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a><strong>滑动窗口</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有一个长度为 n 的数列和一个大小为 k 的窗口, 窗口可以在数列上来回移动。问在窗口从左往右滑的时候，每次窗口内数的最大值和最小值分别是多少？</span><br><span class="line">例如：数列是 [1 3 -1 -3 5 3 6 7], 其中 k 等于 3。</span><br></pre></td></tr></table></figure><a id="more"></a><table><thead><tr><th><strong>Window position</strong></th><th align="right"><strong>Minimum value</strong></th><th align="right"><strong>Maximum value</strong></th></tr></thead><tbody><tr><td><code>[1 3 -1] -3 5 3 6 7</code></td><td align="right">-1</td><td align="right">3</td></tr><tr><td><code>1 [3 -1 -3] 5 3 6 7</code></td><td align="right">-3</td><td align="right">3</td></tr><tr><td><code>1 3 [-1 -3 5] 3 6 7</code></td><td align="right">-3</td><td align="right">5</td></tr><tr><td><code>1 3 -1 [-3 5 3] 6 7</code></td><td align="right">-3</td><td align="right">5</td></tr><tr><td><code>1 3 -1 -3 [5 3 6] 7</code></td><td align="right">3</td><td align="right">6</td></tr><tr><td><code>1 3 -1 -3 5 [3 6 7]</code></td><td align="right">3</td><td align="right">7</td></tr></tbody></table><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入有两行。第一行两个整数 n 和k分别表示数列的长度和滑动窗口的大小，1 ≤ k ≤ n ≤ 1000000。</span><br><span class="line">第二行有n个整数表示数列。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出有两行。第一行输出滑动窗口在从左到右的每个位置时，滑动窗口中的最小值。第二行是最大值。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input: </span><br><span class="line">8 3</span><br><span class="line">1 3 -1 -3 5 3 6 7</span><br><span class="line">output: </span><br><span class="line">-1 -3 -3 -3 3 3</span><br><span class="line">3 3 5 5 6 7</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit12000 ms</span><br><span class="line">Memory limit65536 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>维护局部单调性，可以用单调队列。</p><p>求最小值可以用单调非减队列，从左往右依次入队，若入队的元素比队尾小则不断弹出队尾元素直到符合条件。当<code>队尾索引 - 队首索引 + 1 = 滑动窗口大小</code>时，队首元素弹出，此时队首元素就是最小值。</p><p>同理，求最大值用单调非增队列。</p><p>两次遍历就能求出最大最小值。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span> &#123;</span><span class="comment">//记录元素值与位置</span></span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">num(<span class="keyword">int</span> x, <span class="keyword">int</span> y) :a(x), b(y) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getMin</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;num&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; i++) &#123;</span><br><span class="line"><span class="keyword">while</span> (!q.empty() &amp;&amp; q.back().a &gt;= arr[i])</span><br><span class="line">q.pop_back();<span class="comment">//队尾大于要入队的元素</span></span><br><span class="line"><span class="function">num <span class="title">x</span><span class="params">(arr[i], i)</span></span>;</span><br><span class="line">q.push_back(x);<span class="comment">//符合条件 可以入队</span></span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">1</span> &gt;= k) &#123;<span class="comment">//到达了窗口的宽度  队首弹出</span></span><br><span class="line"><span class="keyword">while</span> (i - q.front().b &gt; k - <span class="number">1</span>)</span><br><span class="line">q.pop_front();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, q.front().a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;num&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; i++) &#123;</span><br><span class="line"><span class="keyword">while</span> (!q.empty() &amp;&amp; q.back().a &lt;= arr[i])</span><br><span class="line">q.pop_back();<span class="comment">//队尾小于要入队的元素</span></span><br><span class="line"><span class="function">num <span class="title">x</span><span class="params">(arr[i], i)</span></span>;</span><br><span class="line">q.push_back(x);<span class="comment">//符合条件 可以入队</span></span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">1</span> &gt;= k) &#123;<span class="comment">//到达了窗口的宽度  队首弹出</span></span><br><span class="line"><span class="keyword">while</span> (i - q.front().b &gt; k - <span class="number">1</span>)</span><br><span class="line">q.pop_front();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, q.front().a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line">scanf_s(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; i++)</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">getMin(arr, n, k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">getMax(arr, n, k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;滑动窗口&quot;&gt;&lt;a href=&quot;#滑动窗口&quot; class=&quot;headerlink&quot; title=&quot;滑动窗口&quot;&gt;&lt;/a&gt;&lt;strong&gt;滑动窗口&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;有一个长度为 n 的数列和一个大小为 k 的窗口, 窗口可以在数列上来回移动。问在窗口从左往右滑的时候，每次窗口内数的最大值和最小值分别是多少？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如：数列是 [1 3 -1 -3 5 3 6 7], 其中 k 等于 3。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="单调队列" scheme="co10.github.io/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>平衡字符串</title>
    <link href="co10.github.io/2020/03/24/%E5%B9%B3%E8%A1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>co10.github.io/2020/03/24/%E5%B9%B3%E8%A1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-03-24T08:21:21.000Z</published>
    <updated>2020-04-02T17:03:20.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="平衡字符串"><a href="#平衡字符串" class="headerlink" title="平衡字符串"></a><strong>平衡字符串</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一个长度为 n 的字符串 s，其中仅包含 &#39;Q&#39;, &#39;W&#39;, &#39;E&#39;, &#39;R&#39; 四种字符。</span><br><span class="line">如果四种字符在字符串中出现次数均为 n&#x2F;4，则其为一个平衡字符串。</span><br><span class="line">现可以将 s 中连续的一段子串替换成相同长度的只包含那四个字符的任意字符串，使其变为一个平衡字符串，问替换子串的最小长度?</span><br><span class="line">如果 s 已经平衡则输出0。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一行字符表示给定的字符串s。</span><br><span class="line">(字符串长度 n 是4的倍数，1 ≤ n ≤ 10^5，字符串中仅包含字符 &#39;Q&#39;, &#39;W&#39;, &#39;E&#39; 和 &#39;R&#39;。)</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个整数表示答案。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">input: </span><br><span class="line">QWER</span><br><span class="line">output: </span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">QQWE</span><br><span class="line">output: </span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">QQQW</span><br><span class="line">output: </span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">QQQQ</span><br><span class="line">output: </span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1000 ms</span><br><span class="line">Memory limit262144 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>这是一个滑动窗口问题，可以用双指针的方法，首先记录4个字符的出现频率，然后维护一个区间内的字符出现频率，二者之差可以得到区间外的每种字符频率。如果区间外每种字符的出现次数都小于等于 <em>n</em>/4，则这个区间是合法的，否则需要通过减少其他字符串的频率来达到平衡。滑动过之后，每个区间外的字符串都满足小于等于 <em>n</em>/4。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getN</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;<span class="comment">//对字符标记</span></span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'Q'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'W'</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'E'</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'R'</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRes</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> ans = s.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">int</span> avg = s.<span class="built_in">size</span>() / <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != s.<span class="built_in">size</span>(); i++)</span><br><span class="line">count[getN(s[i])]++;<span class="comment">//记录4个字符的个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != s.<span class="built_in">size</span>(); j++) &#123;<span class="comment">//活动窗口i, j左右指针</span></span><br><span class="line">count[getN(s[j])]--;</span><br><span class="line"><span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; count[<span class="number">0</span>] &lt;= avg &amp;&amp;</span><br><span class="line">count[<span class="number">1</span>] &lt;= avg &amp;&amp; count[<span class="number">2</span>] &lt;= avg</span><br><span class="line">&amp;&amp; count[<span class="number">3</span>] &lt;= avg) &#123;<span class="comment">//找到了可以替换的字符串</span></span><br><span class="line">ans = <span class="built_in">min</span>(ans, j - i + <span class="number">1</span>);<span class="comment">//计算字符串长度</span></span><br><span class="line">count[getN(s[i++])]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; getRes(s) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;平衡字符串&quot;&gt;&lt;a href=&quot;#平衡字符串&quot; class=&quot;headerlink&quot; title=&quot;平衡字符串&quot;&gt;&lt;/a&gt;&lt;strong&gt;平衡字符串&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;一个长度为 n 的字符串 s，其中仅包含 &amp;#39;Q&amp;#39;, &amp;#39;W&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;R&amp;#39; 四种字符。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果四种字符在字符串中出现次数均为 n&amp;#x2F;4，则其为一个平衡字符串。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;现可以将 s 中连续的一段子串替换成相同长度的只包含那四个字符的任意字符串，使其变为一个平衡字符串，问替换子串的最小长度?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果 s 已经平衡则输出0。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="滑动窗口" scheme="co10.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>区间赋值</title>
    <link href="co10.github.io/2020/03/24/%E5%8C%BA%E9%97%B4%E8%B5%8B%E5%80%BC/"/>
    <id>co10.github.io/2020/03/24/%E5%8C%BA%E9%97%B4%E8%B5%8B%E5%80%BC/</id>
    <published>2020-03-24T03:41:41.000Z</published>
    <updated>2020-04-02T16:31:19.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区间赋值"><a href="#区间赋值" class="headerlink" title="区间赋值"></a><strong>区间赋值</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Select n cities from the world map, and a[i] represents the asset value owned by the i-th city.</span><br><span class="line">Then there will be several operations. Each turn is to choose the city in the interval [l, r] and increase their asset value by c. And finally, it is required to give the asset value of each city after q operations. </span><br><span class="line">------------------------------------------------------</span><br><span class="line">从世界地图从选出 n 个城市，a[i]表示选出的第 i 个城市的值。</span><br><span class="line">接下来会有 q 个操作。每一次从区间[l, r]中选出城市，并把它们的值提高 c。</span><br><span class="line">最终求得各个城市的值。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The first line contains two integers n,q (1 ≤ n,q ≤ 2⋅10^5) — the number of cities and operations.</span><br><span class="line">The second line contains elements of the sequence a: integer numbers a1, a2, ..., an (−10^6 ≤ ai ≤ 10^6).</span><br><span class="line">Then q lines follow, each line represents an operation. The i-th line contains three integers l, r and c (1 ≤ l ≤ r ≤ n, −10^5 ≤ c ≤ 10^5) for the i-th operation.</span><br><span class="line">------------------------------------------------------</span><br><span class="line">第一行两个整数 n, q (1 ≤ n,q ≤ 2⋅10^5)，表示城市数和操作数。</span><br><span class="line">第二行 n 个整数，表示城市 a1, a2, ..., an (−10^6 ≤ ai ≤ 10^6)。</span><br><span class="line">接下来的 q 行，每一行代表一个操作，每一行包括3个整数 l, r 和 c (1 ≤ l ≤ r ≤ n, −10^5 ≤ c ≤ 10^5)。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Print n integers a1,a2,…,an one per line, and ai should be equal to the final asset value of the i-th city.</span><br><span class="line">------------------------------------------------------</span><br><span class="line">输出n个整数，a1, a2, …, an。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">input: </span><br><span class="line">4 2</span><br><span class="line">-3 6 8 4</span><br><span class="line">4 4 -2</span><br><span class="line">3 3 1</span><br><span class="line">output: </span><br><span class="line">-3 6 9 2</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">2 1</span><br><span class="line">5 -2</span><br><span class="line">1 2 4</span><br><span class="line">output: </span><br><span class="line">9 2</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">1 2</span><br><span class="line">0</span><br><span class="line">1 1 -8</span><br><span class="line">1 1 -6</span><br><span class="line">output: </span><br><span class="line">-14</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1000 ms</span><br><span class="line">Memory limit262144 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>q 次操作区间，每次对区间内每个数进行加/减操作，暴力做法就是每次赋值操作都来一个<code>for</code>循环，时间复杂度为<em>O</em>(<em>qn</em>)，考虑到数据范围，会超时。</p><p>这边就要用到差分跟前缀和。</p><p>差分：原数组第二个元素起，每个元素与前一元素之差形成一个新数组。如：<br>原数组<code>a[n]</code>, 新数组<code>b[n]</code>, <code>b[1] = a[1], b[i] = a[i] - a[i-1] (i ≥2)</code></p><p>前缀和可以在<em>O</em>(1)时间复杂度内求一个区域内所有元素之和，利用差分数组只进行单点修改，可以更新一个区域内的数值。</p><p>比如第一个样例，原数组<code>a[4] = {-3, 6, 8, 4}</code>, 差分数组<code>b[4] = {-3, 9, 2, -4}</code>。<br>第一次操作：第4个数降值2，<code>a&#39;[4] = {-3, 6, 8, 2}</code>, <code>b&#39;[4] = {-3, 9, 2, -6}</code>。<br>第二次操作：第3个数增值1，<code>a&#39;&#39;[4] = {-3, 6, 9, 2}</code>, <code>b&#39;&#39; = {-3, 9, 3, -7}</code>, 前缀和生成数组<code>c[4] = {-3, 6, 9, 2}</code>, 与<code>a&#39;&#39;</code>相同。</p><p>本题由于数据范围，如果使用<code>int</code>在test 17会<code>WA</code>，所以得用<code>long long</code>。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, q;<span class="comment">//n个数 q个操作</span></span><br><span class="line">scanf_s(<span class="string">"%lld%lld"</span>, &amp;n, &amp;q);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span>* arr = <span class="keyword">new</span> <span class="keyword">long</span> <span class="keyword">long</span>[n + <span class="number">10</span>];<span class="comment">//原数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">scanf_s(<span class="string">"%lld"</span>, &amp;arr[i]);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span>* arr1 = <span class="keyword">new</span> <span class="keyword">long</span> <span class="keyword">long</span>[n + <span class="number">10</span>];<span class="comment">//差分数组</span></span><br><span class="line">arr1[<span class="number">0</span>] = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; i++)</span><br><span class="line">arr1[i] = arr[i] - arr[i - <span class="number">1</span>];<span class="comment">//求得差分</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;<span class="comment">//q次操作</span></span><br><span class="line"><span class="keyword">int</span> l, r, c;</span><br><span class="line">scanf_s(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;c);</span><br><span class="line">arr1[l - <span class="number">1</span>] += c;</span><br><span class="line">arr1[r] -= c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span>* arr2 = <span class="keyword">new</span> <span class="keyword">long</span> <span class="keyword">long</span>[n + <span class="number">10</span>];<span class="comment">//前缀和成数组</span></span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; i++)</span><br><span class="line">arr2[i] = arr2[i - <span class="number">1</span>] + arr1[i];<span class="comment">//前缀和</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>, arr1[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>, arr2[i] + arr1[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;区间赋值&quot;&gt;&lt;a href=&quot;#区间赋值&quot; class=&quot;headerlink&quot; title=&quot;区间赋值&quot;&gt;&lt;/a&gt;&lt;strong&gt;区间赋值&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Select n cities from the world map, and a[i] represents the asset value owned by the i-th city.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Then there will be several operations. Each turn is to choose the city in the interval [l, r] and increase their asset value by c. And finally, it is required to give the asset value of each city after q operations. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;从世界地图从选出 n 个城市，a[i]表示选出的第 i 个城市的值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;接下来会有 q 个操作。每一次从区间[l, r]中选出城市，并把它们的值提高 c。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;最终求得各个城市的值。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="前缀和" scheme="co10.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
      <category term="差分" scheme="co10.github.io/tags/%E5%B7%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>最大矩形</title>
    <link href="co10.github.io/2020/03/21/%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2/"/>
    <id>co10.github.io/2020/03/21/%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2/</id>
    <published>2020-03-21T01:55:58.000Z</published>
    <updated>2020-04-02T15:59:30.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最大矩形"><a href="#最大矩形" class="headerlink" title="最大矩形"></a><strong>最大矩形</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给一个直方图，求直方图中的最大矩形的面积。</span><br><span class="line">例如，下面这个图片中直方图的高度从左到右分别是2, 1, 4, 5, 1, 3, 3, 他们的宽都是1，其中最大的矩形是阴影部分。</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://i.loli.net/2020/03/21/yL5phGK9S2vljgs.gif" alt="Max_rec.png"></p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入包含多组数据。每组数据用一个整数n来表示直方图中小矩形的个数，你可以假定1 ≤ n ≤ 100000. 然后接下来n个整数h1, ..., hn, 满足 0 ≤ hi ≤ 1000000000. 这些数字表示直方图中从左到右每个小矩形的高度，每个小矩形的宽度为1。 测试数据以0结尾。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每组测试数据输出一行一个整数表示答案。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">7 2 1 4 5 1 3 3</span><br><span class="line">4 1000 1000 1000 1000</span><br><span class="line">0</span><br><span class="line">Output: </span><br><span class="line">8</span><br><span class="line">4000</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1000 ms</span><br><span class="line">Memory limit32768 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p><code>直方图的矩形面积 = (右端点 - 左端点) × 限制高度</code>，每次维护一个左端点和右端点，用最小高度计算矩形面积，暴力做法就是对于每一个柱形图往左&amp;往右找第一个小于他的高度的左/右端点，得到宽度，再乘上高度就能更新最大面积，时间复杂度为<em>O</em>(<em>n</em><sup>2</sup>)，显然后面会超时。</p><p>这里就要用到单调栈。</p><p>每次维护矩形的左右端点的高度，利用单调非增栈，开始遇到矮的就弹栈，否则入栈并一直更新右端点，这样就能在线性时间内找到第一个比当前元素小的右端点高度，每一次弹栈的过程中更新矩形的最大面积。</p><p>这题比较要注意的就是后面 h 会很大，面积可能会超出<code>int</code>的范围，所以高度和面积的数据类型要用<code>long long</code>。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rec</span> &#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="built_in">height</span>;</span><br><span class="line"><span class="keyword">int</span> left;</span><br><span class="line">rec() &#123; <span class="built_in">height</span> = <span class="number">0</span>; left = <span class="number">0</span>; &#125;</span><br><span class="line">rec(<span class="keyword">long</span> <span class="keyword">long</span> h, <span class="keyword">int</span> l) :<span class="built_in">height</span>(h), left(l) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; n).eof()) &#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">rec arr[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> h;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; h;</span><br><span class="line"><span class="function">rec <span class="title">r</span><span class="params">(h, i)</span></span>;</span><br><span class="line">arr[i] = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;<span class="comment">//答案</span></span><br><span class="line"><span class="built_in">stack</span>&lt;rec&gt; st;<span class="comment">//栈</span></span><br><span class="line">rec temp;</span><br><span class="line">st.push(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> l = arr[i].left;<span class="comment">//矩形的右端点</span></span><br><span class="line"><span class="keyword">while</span> (!st.empty() &amp;&amp; st.top().<span class="built_in">height</span> &gt; arr[i].<span class="built_in">height</span>) &#123;</span><br><span class="line">                <span class="comment">//遇到了矮的 开始弹栈</span></span><br><span class="line">temp = st.top();</span><br><span class="line">st.pop();</span><br><span class="line">arr[i].left = temp.left;<span class="comment">//更新左端点</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sq = (l - temp.left) * temp.<span class="built_in">height</span>;<span class="comment">//计算面积</span></span><br><span class="line">ans = <span class="built_in">max</span>(sq, ans);</span><br><span class="line">&#125;</span><br><span class="line">st.push(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">            <span class="comment">//最后清栈</span></span><br><span class="line">temp = st.top();</span><br><span class="line">st.pop();</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sq = (n - temp.left) * temp.<span class="built_in">height</span>;</span><br><span class="line">ans = <span class="built_in">max</span>(sq, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;最大矩形&quot;&gt;&lt;a href=&quot;#最大矩形&quot; class=&quot;headerlink&quot; title=&quot;最大矩形&quot;&gt;&lt;/a&gt;&lt;strong&gt;最大矩形&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给一个直方图，求直方图中的最大矩形的面积。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如，下面这个图片中直方图的高度从左到右分别是2, 1, 4, 5, 1, 3, 3, 他们的宽都是1，其中最大的矩形是阴影部分。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="单调栈" scheme="co10.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>2015-12-03CSP-画图</title>
    <link href="co10.github.io/2020/03/20/2015-12-03CSP-%E7%94%BB%E5%9B%BE/"/>
    <id>co10.github.io/2020/03/20/2015-12-03CSP-%E7%94%BB%E5%9B%BE/</id>
    <published>2020-03-20T00:15:06.000Z</published>
    <updated>2020-03-20T03:19:23.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="画图"><a href="#画图" class="headerlink" title="画图"></a><strong>画图</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">　　用 ASCII 字符来画图是一件有趣的事情，并形成了一门被称为 ASCII Art 的艺术。例如，下图是用 ASCII 字符画出来的 CSPRO 字样。</span><br><span class="line">　　..____.____..____..____...___..</span><br><span class="line">　　.&#x2F;.___&#x2F;.___||.._.\|.._.\.&#x2F;._.\.</span><br><span class="line">　　|.|...\___.\|.|_).|.|_).|.|.|.|</span><br><span class="line">　　|.|___.___).|..__&#x2F;|.._.&lt;|.|_|.|</span><br><span class="line">　　.\____|____&#x2F;|_|...|_|.\_\\___&#x2F;.</span><br><span class="line">　　本题要求编程实现一个用 ASCII 字符来画图的程序，支持以下两种操作：</span><br><span class="line">　　 画线：给出两个端点的坐标，画一条连接这两个端点的线段。简便起见题目保证要画的每条线段都是水平或者竖直的。水平线段用字符 - 来画，竖直线段用字符 | 来画。如果一条水平线段和一条竖直线段在某个位置相交，则相交位置用字符 + 代替。</span><br><span class="line">　　 填充：给出填充的起始位置坐标和需要填充的字符，从起始位置开始，用该字符填充相邻位置，直到遇到画布边缘或已经画好的线段。注意这里的相邻位置只需要考虑上下左右 4 个方向，如下图所示，字符 @ 只和 4 个字符 * 相邻。</span><br><span class="line">　　.*.</span><br><span class="line">　　*@*</span><br><span class="line">　　.*.</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　第1行有三个整数m, n和q。m和n分别表示画布的宽度和高度，以字符为单位。q表示画图操作的个数。</span><br><span class="line">　　第2行至第q + 1行，每行是以下两种形式之一：</span><br><span class="line">　　 0 x1 y1 x2 y2：表示画线段的操作，(x1, y1)和(x2, y2)分别是线段的两端，满足要么x1 &#x3D; x2 且y1 ≠ y2，要么 y1 &#x3D; y2 且 x1 ≠ x2。</span><br><span class="line">　　 1 x y c：表示填充操作，(x, y)是起始位置，保证不会落在任何已有的线段上；c 为填充字符，是大小写字母。</span><br><span class="line">　　画布的左下角是坐标为 (0, 0) 的位置，向右为x坐标增大的方向，向上为y坐标增大的方向。这q个操作按照数据给出的顺序依次执行。画布最初时所有位置都是字符 .（小数点）。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　输出有n行，每行m个字符，表示依次执行这q个操作后得到的画图结果。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">4 2 3</span><br><span class="line">1 0 0 B</span><br><span class="line">0 1 0 2 0</span><br><span class="line">1 0 0 A</span><br><span class="line">Output: </span><br><span class="line">AAAA</span><br><span class="line">A--A</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">16 13 9</span><br><span class="line">0 3 1 12 1</span><br><span class="line">0 12 1 12 3</span><br><span class="line">0 12 3 6 3</span><br><span class="line">0 6 3 6 9</span><br><span class="line">0 6 9 12 9</span><br><span class="line">0 12 9 12 11</span><br><span class="line">0 12 11 3 11</span><br><span class="line">0 3 11 3 1</span><br><span class="line">1 4 2 C</span><br><span class="line">output: </span><br><span class="line">................</span><br><span class="line">...+--------+...</span><br><span class="line">...|CCCCCCCC|...</span><br><span class="line">...|CC+-----+...</span><br><span class="line">...|CC|.........</span><br><span class="line">...|CC|.........</span><br><span class="line">...|CC|.........</span><br><span class="line">...|CC|.........</span><br><span class="line">...|CC|.........</span><br><span class="line">...|CC+-----+...</span><br><span class="line">...|CCCCCCCC|...</span><br><span class="line">...+--------+...</span><br><span class="line">................</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1.0 s</span><br><span class="line">Memory limit256 MB</span><br></pre></td></tr></table></figure><h2 id="数据规模"><a href="#数据规模" class="headerlink" title="数据规模"></a><strong>数据规模</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　所有的评测用例满足：2 ≤ m, n ≤ 100，0 ≤ q ≤ 100，0 ≤ x &lt; m（x表示输入数据中所有位置的x坐标），0 ≤ y &lt; n（y表示输入数据中所有位置的y坐标）。</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>画线就是一个for循环，if判断对就行，填充的思路就是DFS。</p><p>但是，这道题有些坑啊😵……</p><h3 id="横纵坐标问题"><a href="#横纵坐标问题" class="headerlink" title="横纵坐标问题"></a>横纵坐标问题</h3><p>输入是<code>0 ≤ x &lt; m, 0 ≤ y &lt; n</code>，然而用数组表示的话，要用<code>array[y][x]</code>来表示点的坐标，因为数组是<code>n</code>行<code>m</code>列的，<code>y</code>为行，列为<code>x</code>。<br>还有就是最后的输出，由于直角坐标第一象限左下角是起始端，然而二维数组左上角是起始端，所以输出要倒过来，第一维逆序遍历，第二维正序遍历。(样例2是水平对称的，但样例1竖直对称、水平不对称，很容易发现错误)</p><h3 id="画线交界问题"><a href="#画线交界问题" class="headerlink" title="画线交界问题"></a>画线交界问题</h3><p>题意应该是只要在边界内且遇到的不是<code>-</code>或<code>|</code>就可以直接覆盖，即使是遇到了填充字符串也可以覆盖，此处很容易漏了遇到<code>+</code>的话不能覆盖。<code>|</code>遇到<code>-</code>的话覆盖成<code>+</code>，<code>-</code>遇到|的话覆盖成<code>+</code>，遇到<code>+</code>不覆盖，这边比较容易的。<br>还有就是覆盖时for循环的结束条件。题目给的从一个点(<em>x</em><sub>1</sub>, <em>y</em><sub>1</sub>)到另一个点(<em>x</em><sub>2</sub>, <em>y</em><sub>2</sub>)，for循环就是由小到大或者由大到小，但是终止的时候是<code>&lt;= 或 &gt;= 结束点横/纵坐标</code>而不是<code>!= 结束点横/纵坐标</code>，这边这个<code>=</code>很容易遗漏。</p><h3 id="标记到达问题"><a href="#标记到达问题" class="headerlink" title="标记到达问题"></a>标记到达问题</h3><p>由于填充是可以覆盖的，从样例一可以看出，A把B覆盖了，所以每一次填充，<code>reach</code>数组都要重置。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">103</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> canvas[maxN][maxN];<span class="comment">//画布</span></span><br><span class="line"><span class="keyword">bool</span> reach[maxN][maxN];<span class="comment">//标记到达</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">dot(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y) :x(_x), y(_y) &#123;  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x1 == x2 &amp;&amp; y1 != y2) &#123;<span class="comment">// |</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">min</span>(y1, y2); i &lt;= <span class="built_in">max</span>(y1, y2); i++) &#123;<span class="comment">//这边&lt;=容易写成&lt;</span></span><br><span class="line"><span class="keyword">if</span> (canvas[i][x1] == <span class="string">'-'</span>)<span class="comment">//有交叉</span></span><br><span class="line">canvas[i][x1] = <span class="string">'+'</span>;</span><br><span class="line"><span class="keyword">if</span> (canvas[i][x1] == <span class="string">'+'</span>)<span class="comment">//这个容易遗漏判断</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">canvas[i][x1] = <span class="string">'|'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (y1 == y2 &amp;&amp; x1 != x2) &#123;<span class="comment">// -</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">min</span>(x1, x2); i &lt;= <span class="built_in">max</span>(x1, x2); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (canvas[y1][i] == <span class="string">'|'</span>)<span class="comment">//有交叉</span></span><br><span class="line">canvas[y1][i] = <span class="string">'+'</span>;</span><br><span class="line"><span class="keyword">if</span> (canvas[y1][i] == <span class="string">'+'</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">canvas[y1][i] = <span class="string">'-'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;<span class="comment">//右 左</span></span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;<span class="comment">//上 下</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillCanvas</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">char</span> c, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">fill</span>(reach[i], reach[i] + m, <span class="literal">false</span>);<span class="comment">//每次都需要重置</span></span><br><span class="line"></span><br><span class="line"><span class="function">dot <span class="title">ori</span><span class="params">(x, y)</span></span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;dot&gt; q;</span><br><span class="line">q.push(ori);</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">dot temp = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> xx = temp.x, yy = temp.y;</span><br><span class="line"></span><br><span class="line">canvas[yy][xx] = c;<span class="comment">//入了队的是一定能填充的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;<span class="comment">//上下右左4个方向</span></span><br><span class="line"><span class="keyword">int</span> xxx = temp.x + dx[i];</span><br><span class="line"><span class="keyword">int</span> yyy = temp.y + dy[i];</span><br><span class="line"><span class="function">dot <span class="title">temp2</span><span class="params">(xxx, yyy)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (xxx &gt;= <span class="number">0</span> &amp;&amp; xxx &lt; m &amp;&amp; yyy &gt;= <span class="number">0</span> &amp;&amp; yyy &lt; n</span><br><span class="line">&amp;&amp; canvas[yyy][xxx] != <span class="string">'-'</span></span><br><span class="line">&amp;&amp; canvas[yyy][xxx] != <span class="string">'+'</span></span><br><span class="line">&amp;&amp; canvas[yyy][xxx] != <span class="string">'|'</span></span><br><span class="line">&amp;&amp; reach[yyy][xxx] != <span class="literal">true</span>) &#123;<span class="comment">//在边界内 &amp;&amp; 不是画的线 &amp;&amp; 没到达</span></span><br><span class="line">q.push(temp2);<span class="comment">//符合条件 可以入队</span></span><br><span class="line">reach[yyy][xxx] = <span class="literal">true</span>;<span class="comment">//标记到达</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n, q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">fill</span>(canvas[i], canvas[i] + m, <span class="string">'.'</span>);</span><br><span class="line"><span class="built_in">fill</span>(reach[i], reach[i] + m, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> ops;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ops;</span><br><span class="line"><span class="keyword">switch</span> (ops) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: &#123;<span class="comment">//画线</span></span><br><span class="line"><span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">drawLine(x1, y1, x2, y2);</span><br><span class="line">&#125;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123;<span class="comment">//填充</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">fillCanvas(x, y, c, m, n);</span><br><span class="line">&#125;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;<span class="comment">//y要记得倒序输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; canvas[i][j];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;画图&quot;&gt;&lt;a href=&quot;#画图&quot; class=&quot;headerlink&quot; title=&quot;画图&quot;&gt;&lt;/a&gt;&lt;strong&gt;画图&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;　　用 ASCII 字符来画图是一件有趣的事情，并形成了一门被称为 ASCII Art 的艺术。例如，下图是用 ASCII 字符画出来的 CSPRO 字样。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　..____.____..____..____...___..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　.&amp;#x2F;.___&amp;#x2F;.___||.._.\|.._.\.&amp;#x2F;._.\.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　|.|...\___.\|.|_).|.|_).|.|.|.|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　|.|___.___).|..__&amp;#x2F;|.._.&amp;lt;|.|_|.|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　.\____|____&amp;#x2F;|_|...|_|.\_\\___&amp;#x2F;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　本题要求编程实现一个用 ASCII 字符来画图的程序，支持以下两种操作：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　 画线：给出两个端点的坐标，画一条连接这两个端点的线段。简便起见题目保证要画的每条线段都是水平或者竖直的。水平线段用字符 - 来画，竖直线段用字符 | 来画。如果一条水平线段和一条竖直线段在某个位置相交，则相交位置用字符 + 代替。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　 填充：给出填充的起始位置坐标和需要填充的字符，从起始位置开始，用该字符填充相邻位置，直到遇到画布边缘或已经画好的线段。注意这里的相邻位置只需要考虑上下左右 4 个方向，如下图所示，字符 @ 只和 4 个字符 * 相邻。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　.*.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　*@*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　.*.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="DFS" scheme="co10.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>新数组中位数问题</title>
    <link href="co10.github.io/2020/03/19/%E6%96%B0%E6%95%B0%E7%BB%84%E4%B8%AD%E4%BD%8D%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>co10.github.io/2020/03/19/%E6%96%B0%E6%95%B0%E7%BB%84%E4%B8%AD%E4%BD%8D%E6%95%B0%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-19T12:31:57.000Z</published>
    <updated>2020-03-19T16:15:02.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新数组中位数问题"><a href="#新数组中位数问题" class="headerlink" title="新数组中位数问题"></a><strong>新数组中位数问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定一个 N 个数的数组 cat[i]，并用这个数组生成一个新数组 ans[i]。新数组定义为对于任意的 i, j 且 i !&#x3D; j，均有 ans[] &#x3D; abs(cat[i] - cat[j])，1 ≤ i &lt; j ≤ N。试求出这个新数组的中位数，中位数即为排序之后 (len+1)&#x2F;2 位置对应的数字，&#39;&#x2F;&#39; 为下取整。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多组输入，每次输入一个 N，表示有 N 个数，之后输入一个长度为 N 的序列 cat, cat[i] ≤ 1e9, 3 ≤ n ≤ 1e5</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出新数组 ans 的中位数</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">4</span><br><span class="line">1 3 2 4</span><br><span class="line">3</span><br><span class="line">1 10 2</span><br><span class="line">Output: </span><br><span class="line">1</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1000 ms</span><br><span class="line">Memory limit65536 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>C题嘛，自然对时间复杂度要求严格，暴力求解会<code>TLE</code>，而且<code>cin</code>读入慢所以要采用<code>scanf()</code>。</p><p>产生的新数列全都不小于0，且原数列排序后<code>cat[n - 1] - cat[0]</code>一定是新数列中的最大数，也就是第<code>n × (n - 1) / 2 - 1</code>个，新数列排序后是单调递增的，而中位数就位于中间，因此可以对产生的新数进行二分：若新数的排名低于<code>n × (n - 1) / 2</code>，则它一定在中位数前面，若高于，则在后面，若等于，则就是所求的中位数。</p><p>问题来了，没有求出新数列，如何计算名次？<br>首先原数列是有序排列的，所以可以利用两个指针 <em>i</em>, <em>j</em>，<em>j</em>从第二位开始一直往后扫，同时i从第一位开始，一直扫到 <em>j</em> 的前面，计算<code>cat[j] - cat[i]</code>的值，如果大于目标数，则说明目标排名的后面有这个数，则可增加 <em>i</em>，求出最逼近目标排名的坐标，<em>j</em> - <em>i</em> 表示对于这个 <em>j</em>，目标之前一定有这么多个数在他前面；把所有可行的 <em>j</em> 遍历完后就可求出相对应的 <em>j</em> - <em>i</em>，这些 <em>j</em> - <em>i</em> 求和就是目标的名次。</p><p>港真，课上如果没说，真的很难想到这个层面……</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>* arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, rank = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">while</span> (arr[j] - arr[i] &gt; a)<span class="comment">//对于每一个j, 求得距离</span></span><br><span class="line">i++;</span><br><span class="line">rank += (j - i);<span class="comment">//这些距离之和就是名次</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rank;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (scanf_s(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line"><span class="keyword">int</span>* cat = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;cat[i]);<span class="comment">//后面一直出问题 就索性从1开始记位</span></span><br><span class="line">sort(cat + <span class="number">1</span>, cat + n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N = n * (n - <span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//新数组的元素个数</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">begin</span> = <span class="number">1</span>, <span class="built_in">end</span> = cat[n];</span><br><span class="line"><span class="keyword">int</span> aim = (N + <span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//目标中位数的位置，根据题意取的+1</span></span><br><span class="line"><span class="keyword">int</span> middle = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">begin</span> &lt;= <span class="built_in">end</span>) &#123;<span class="comment">//二分求中位数</span></span><br><span class="line">middle = (<span class="built_in">begin</span> + <span class="built_in">end</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">begin</span> == <span class="built_in">end</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> theRank = Rank(middle, cat, n);<span class="comment">//当前名次</span></span><br><span class="line"><span class="keyword">if</span> (theRank &gt;= aim)<span class="comment">//in the left</span></span><br><span class="line"><span class="built_in">end</span> = middle;</span><br><span class="line"><span class="keyword">if</span> (theRank &lt; aim)<span class="comment">//in the right</span></span><br><span class="line"><span class="built_in">begin</span> = middle + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, middle);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;新数组中位数问题&quot;&gt;&lt;a href=&quot;#新数组中位数问题&quot; class=&quot;headerlink&quot; title=&quot;新数组中位数问题&quot;&gt;&lt;/a&gt;&lt;strong&gt;新数组中位数问题&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定一个 N 个数的数组 cat[i]，并用这个数组生成一个新数组 ans[i]。新数组定义为对于任意的 i, j 且 i !&amp;#x3D; j，均有 ans[] &amp;#x3D; abs(cat[i] - cat[j])，1 ≤ i &amp;lt; j ≤ N。试求出这个新数组的中位数，中位数即为排序之后 (len+1)&amp;#x2F;2 位置对应的数字，&amp;#39;&amp;#x2F;&amp;#39; 为下取整。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="二分" scheme="co10.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>4数列选数问题</title>
    <link href="co10.github.io/2020/03/19/4%E6%95%B0%E5%88%97%E9%80%89%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>co10.github.io/2020/03/19/4%E6%95%B0%E5%88%97%E9%80%89%E6%95%B0%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-19T12:31:25.000Z</published>
    <updated>2020-03-19T15:46:11.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四数列选数问题"><a href="#四数列选数问题" class="headerlink" title="四数列选数问题"></a><strong>四数列选数问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有四个数列 A, B, C, D，每个数列都有 n 个数字。从每个数列中各取出一个数，有多少种方案使得 4 个数的和为 0 ？</span><br><span class="line">(当一个数列中有多个相同的数字的时候，把它们当做不同的数对待。)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行：n (代表数列中数字的个数) (1 ≤ n ≤ 4000)</span><br><span class="line">接下来的 n 行中，第 i 行有四个数字，分别表示数列 A, B, C, D 中的第 i 个数字 (数字不超过 2 的 28 次方)</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出不同组合的个数。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">6</span><br><span class="line">-45 22 42 -16</span><br><span class="line">-41 -27 56 30</span><br><span class="line">-36 53 -37 77</span><br><span class="line">-36 30 -75 -46</span><br><span class="line">26 -38 -10 62</span><br><span class="line">-32 -54 -6 45</span><br><span class="line">Output: </span><br><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Time limit15000 ms</span><br><span class="line">Case time limit5000 ms</span><br><span class="line">Memory limit228000 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>有4个数列，用4重<code>for</code>循环暴力求解的话，时间复杂度为<em>O</em>(<em>n</em><sup>4</sup>)，一定会超时，所以要进行优化。</p><p>题意很明显求和为0，两个相反数相加为0，因此可以把4个数列优化成2个数列：A和B、C和D依次通过 <em>n</em><sup>2</sup> 次相加得到数列 E(A和B产生)和 F(C和D产生)，然后对F中的每一个数求相反数，A再从新F中找到相同的数即可。时间复杂度优化为<em>O</em>(<em>n</em><sup>2</sup>)。</p><p>优化查找效率：二分搜索。<br>标记始末，求得中间，把中间数与目标对比，大则将末改成中间-1，小则将始改成中间+1，循环搜索，直至始末相遇或找到目标。<br>这道题要标记的是有序数组中目标出现的第一个位置，然后从那个位置开始求多少个相同值，就表示有多少个方案，再对这些方案数求和就是答案。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*二分查找 是否存在那个数</span></span><br><span class="line"><span class="comment">  从两端开始往目标逼近*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findNum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> first = <span class="number">0</span>, last = n - <span class="number">1</span>, middle;</span><br><span class="line"><span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!found &amp;&amp; first &lt;= last) &#123;</span><br><span class="line">middle = (first + last) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a[middle] == x)</span><br><span class="line">found = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (a[middle] &gt; x)</span><br><span class="line">last = middle - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[middle] &lt; x)</span><br><span class="line">first = middle + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> found;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*找到那个数第一次出现的位置*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFirst</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> first = <span class="number">0</span>, last = n - <span class="number">1</span>, middle;</span><br><span class="line"><span class="keyword">while</span> (first &lt; last) &#123;</span><br><span class="line">middle = (first + last) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a[middle] &lt; x)</span><br><span class="line">first = middle + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">last = middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*其实上面两个二分搜索可以合并成一个的……</span></span><br><span class="line"><span class="comment">  就是后来懒得改了……*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*从那个数的位置开始 计算那个数在有序数组中出现了几次*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountNum</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> x, <span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] != x)</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//及时停止</span></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span>* arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];<span class="comment">//A</span></span><br><span class="line"><span class="keyword">int</span>* arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];<span class="comment">//B</span></span><br><span class="line"><span class="keyword">int</span>* arr3 = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];<span class="comment">//C</span></span><br><span class="line"><span class="keyword">int</span>* arr4 = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];<span class="comment">//D</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr1[i];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr2[i];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr3[i];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr4[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>* a1 = <span class="keyword">new</span> <span class="keyword">int</span>[n * n + <span class="number">10</span>];<span class="comment">//A和B → E</span></span><br><span class="line"><span class="keyword">int</span>* a2 = <span class="keyword">new</span> <span class="keyword">int</span>[n * n + <span class="number">10</span>];<span class="comment">//C和D → F</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">a1[count] = arr1[i] + arr2[j];</span><br><span class="line">a2[count] = (<span class="number">-1</span>) * (arr3[i] + arr4[j]);<span class="comment">//这边直接求相反数</span></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(a2, a2 + n * n);<span class="comment">//要先进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> numCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * n; i++) &#123;<span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">if</span> (findNum(a1[i], a2, n * n) == <span class="literal">true</span>) &#123;<span class="comment">//如果有</span></span><br><span class="line"><span class="keyword">int</span> first = findFirst(a1[i], a2, n * n);<span class="comment">//找到第一次出现的位置</span></span><br><span class="line">numCount += CountNum(first, a1[i], a2, n * n);<span class="comment">//计数 出现几次 求和</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; numCount &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;四数列选数问题&quot;&gt;&lt;a href=&quot;#四数列选数问题&quot; class=&quot;headerlink&quot; title=&quot;四数列选数问题&quot;&gt;&lt;/a&gt;&lt;strong&gt;四数列选数问题&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;有四个数列 A, B, C, D，每个数列都有 n 个数字。从每个数列中各取出一个数，有多少种方案使得 4 个数的和为 0 ？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(当一个数列中有多个相同的数字的时候，把它们当做不同的数对待。)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="二分" scheme="co10.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>DDL-贪婪算法</title>
    <link href="co10.github.io/2020/03/19/DDL-%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/"/>
    <id>co10.github.io/2020/03/19/DDL-%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/</id>
    <published>2020-03-19T12:30:27.000Z</published>
    <updated>2020-03-22T06:01:34.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DDL问题"><a href="#DDL问题" class="headerlink" title="DDL问题"></a><strong>DDL问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有 n 个作业，每个作业都有自己的 DDL，如果没有在 DDL 前做完这个作业，那么老师会扣掉这个作业的全部平时分。如何安排做作业的顺序，才能尽可能少扣一点分？</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入包含 T 个测试用例。输入的第一行是单个整数 T，为测试用例的数量。</span><br><span class="line">每个测试用例以一个正整数 N 开头(1 ≤ N ≤ 1000)，表示作业的数量。</span><br><span class="line">然后两行。第一行包含 N 个整数，表示 DDL，下一行包含 N 个整数，表示扣的分。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每个测试用例，您应该输出最小的总降低分数，每个测试用例一行。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">3 3 3</span><br><span class="line">10 5 1</span><br><span class="line">3</span><br><span class="line">1 3 1</span><br><span class="line">6 2 3</span><br><span class="line">7</span><br><span class="line">1 4 6 4 2 4 3</span><br><span class="line">3 2 1 7 6 5 4</span><br><span class="line">Output: </span><br><span class="line">0</span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1000 ms</span><br><span class="line">Memory limit32768 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>将扣的分数降序排列，第二关键字按DDL降序排列，然后按照时间线从后往前遍历，并用<code>reach</code>数组标记当天是否被其他作业占用，这样可以保证被扣的分最少，因为每次都优先安排分值大的，且从最晚的DDL往较近的日子安排，这样可以保证后面的晚的DDL对早的DDL的影响最小。</p><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><p>对于时间，我们总是思维定式从前往后，然而本题将时间“倒流”求解，容易得出答案。(助教课上如果没说的话我还真不会往这方面思考🤯)</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">score</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> ddl;<span class="comment">//due</span></span><br><span class="line"><span class="keyword">int</span> s;<span class="comment">//due后扣的分</span></span><br><span class="line">score()&#123; &#125;</span><br><span class="line">score(<span class="keyword">int</span> _ddl, <span class="keyword">int</span> _s) :ddl(_ddl), s(_s) &#123;  &#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> score sc)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s == sc.s)</span><br><span class="line"><span class="keyword">return</span> ddl &gt; sc.ddl;</span><br><span class="line"><span class="keyword">return</span> s &gt; sc.s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(score a, score b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">result</span><span class="params">(score* ddl, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> reach[<span class="number">10000</span>];<span class="comment">//标记在哪天是否做了作业</span></span><br><span class="line"><span class="built_in">memset</span>(reach, <span class="number">0</span>, <span class="number">10000</span>);</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x = ddl[i].ddl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> setdown = <span class="literal">false</span>;<span class="comment">//标记某作业是否完成</span></span><br><span class="line"><span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;<span class="comment">//从第x天(也就是DDL)开始安排 可安排就安置</span></span><br><span class="line"><span class="keyword">if</span> (reach[x] == <span class="number">0</span>) &#123;<span class="comment">//有空</span></span><br><span class="line">reach[x] = <span class="number">1</span>;<span class="comment">//占用当天</span></span><br><span class="line">setdown = <span class="literal">true</span>;<span class="comment">//做了这个作业</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">x--;<span class="comment">//不然继续往前一天看看是否可安排</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (setdown == <span class="literal">false</span>)<span class="comment">//若前面这些天都被占用了</span></span><br><span class="line">sum += ddl[i].s;<span class="comment">//无法完成作业 扣分</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;<span class="comment">//t组数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;<span class="comment">//n个DDL</span></span><br><span class="line"><span class="keyword">int</span>* arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span>* arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr1[j];<span class="comment">//DDL</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr2[j];<span class="comment">//分</span></span><br><span class="line"></span><br><span class="line">score* DDL = <span class="keyword">new</span> score[n + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;<span class="comment">//整理DDL跟分 存入结构体方便记录</span></span><br><span class="line"><span class="function">score <span class="title">sc</span><span class="params">(arr1[j], arr2[j])</span></span>;</span><br><span class="line">DDL[j] = sc;</span><br><span class="line">&#125;</span><br><span class="line">sort(DDL, DDL + n, cmp);<span class="comment">//按扣的分数降序 第二关键字按DDL降序</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; result(DDL, n) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//丢入函数处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DDL问题&quot;&gt;&lt;a href=&quot;#DDL问题&quot; class=&quot;headerlink&quot; title=&quot;DDL问题&quot;&gt;&lt;/a&gt;&lt;strong&gt;DDL问题&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;有 n 个作业，每个作业都有自己的 DDL，如果没有在 DDL 前做完这个作业，那么老师会扣掉这个作业的全部平时分。如何安排做作业的顺序，才能尽可能少扣一点分？&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="贪婪算法" scheme="co10.github.io/tags/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>恐怖的宇宙射线</title>
    <link href="co10.github.io/2020/03/19/%E6%81%90%E6%80%96%E7%9A%84%E5%AE%87%E5%AE%99%E5%B0%84%E7%BA%BF/"/>
    <id>co10.github.io/2020/03/19/%E6%81%90%E6%80%96%E7%9A%84%E5%AE%87%E5%AE%99%E5%B0%84%E7%BA%BF/</id>
    <published>2020-03-19T12:29:17.000Z</published>
    <updated>2020-03-19T16:27:51.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="可怕又恐怖的宇宙射线"><a href="#可怕又恐怖的宇宙射线" class="headerlink" title="可怕又恐怖的宇宙射线"></a><strong>可怕又恐怖的宇宙射线</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">宇宙射线会在无限的二维平⾯上传播(可以看做⼀个二维网格图)，初始方向默认向上。宇宙射线会在发射出⼀段距离后分裂，向该⽅向的左右45°⽅向分裂出两条宇宙射线，同时威力不变！宇宙射线会分裂 n 次，每次分裂后会在分裂方向前进 ai 个单位长度。</span><br><span class="line">求宇宙射线共经过多少个位置。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输⼊第⼀行包含⼀个正整数n(n ≤ 30)，表示宇宙射线会分裂n次</span><br><span class="line">第⼆行包含n个正整数a1, a2, ..., an，第i个数 表示第i次分裂的宇宙射线会在它原方向上继续走多少个单位长度。</span><br></pre></td></tr></table></figure><h2 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出⼀个数ans，表示有多少个位置有射线经过。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">input: </span><br><span class="line">4</span><br><span class="line">4 2 2 3</span><br><span class="line">output: </span><br><span class="line">39</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">15</span><br><span class="line">1 2 3 4 5 5 4 3 2 1 1 2 3 4 5</span><br><span class="line">output: </span><br><span class="line">6179</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">20</span><br><span class="line">1 2 3 4 5 5 4 3 2 1 1 2 3 4 5 5 4 3 2 1</span><br><span class="line">output: </span><br><span class="line">11404</span><br><span class="line"></span><br><span class="line">input: </span><br><span class="line">30</span><br><span class="line">5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5</span><br><span class="line">output: </span><br><span class="line">43348</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/20/caVDzir3ulJgp51.png" alt="0002.png"></p><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1000 ms</span><br><span class="line">Memory limit262144 kB</span><br></pre></td></tr></table></figure><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h2><table><thead><tr><th>数据点</th><th><em>n</em></th></tr></thead><tbody><tr><td>10%</td><td>≤10</td></tr><tr><td>40%</td><td>≤20</td></tr><tr><td>100%</td><td>≤30</td></tr></tbody></table><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>信息量挺大的，短时间内要理解题意，还要想出解题方法，还要写好代码，还要考虑<code>MLE</code>或者<code>TLE</code>去优化时间、空间复杂度，还要测试是否<code>CE</code>，还要自己出数据验证思路对不对……反正赛时那时间我没写出来，最后几分钟草草提交，结果<code>CE</code>了……赛后也是写了好久，一直卡在<code>MLE on test 5</code>……后来才对DFS优化剪枝，用优化前后的测试数据对比判断优化是否<code>WA</code>了……最后才<code>AC</code>……🤧</p><p>思路就是DFS，8种选择写的麻烦了一点，主要就是解题有许多坑啊……😖</p><h3 id="分裂后的方向问题"><a href="#分裂后的方向问题" class="headerlink" title="分裂后的方向问题"></a>分裂后的方向问题</h3><p>每次分裂都会往左右45°产生2个方向，二维平面总共有8个方向，因此我对这些方向标号(见代码)，原方向与分裂后产生的方向(方向1、方向2，原方向的左侧优先)就有规律可循了，用2个函数就能求出方向1、方向2。</p><h3 id="第几次分裂、前进长度问题"><a href="#第几次分裂、前进长度问题" class="headerlink" title="第几次分裂、前进长度问题"></a>第几次分裂、前进长度问题</h3><p>刚开始我的处理是对输出进行多次录入处理，比如原输入<code>1 2 3 4</code>，对应数组第<code>0 1 2 3</code>位，则对应产生的射线就是2<sup><em>i</em></sup>条(<em>i</em> 为数组下标)，则我在输入时对数组进行处理，数组元素就变成<code>{ 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4 }</code>。<br>可是后来剪枝优化的时候，发现比较难判断这是第几次分裂，况且<em>n</em>越大这个数组指数级变长……所以就要对当前是第几次大分裂进行标记，简单方法就是把这个第几次存入点<code>dot</code>的结构体中，每次要用的时候取出，每次分裂并前进结束后再对这个数+1就能清楚当前是第几次大分裂了。</p><h3 id="标记到达的问题"><a href="#标记到达的问题" class="headerlink" title="标记到达的问题"></a>标记到达的问题</h3><p>我一开始的思路是，对于每个经过点，都<code>pushback()</code>到<code>vector</code>里面，然后对这个<code>vector</code>排序，<code>for</code>循环后算出有多少个重复点，再用<code>size()</code>减去重复数量就能求出有多少点……但是后面数据太大太多，明显会<code>MLE</code>且<code>TLE</code>，所以我考虑用<code>reach</code>数组标记到达的方法。<br>但是问题又来了，我一开始的起始点思维定式成<code>(0, 0)</code>，射线可以会经过<em>x</em>轴跟<em>y</em>轴的负数区间的，数组标记不了负的下标啊……后来想想，可以用一个四维数组<code>reach[x][y][2][2]</code>，第三维的2代表x的正负，第四维的2代表y的正负。但是……好麻烦，<code>if</code>又要写一大堆还容易出错😥。<br>后来观察图形，发现是关于<em>y</em>轴对称的，所以可以只记录<em>x</em>轴正半轴处的分裂，只记录<em>y</em>的正负，降维成三维数组，最终得到的点数目×2 - 处于y轴上的点就是结果了。但是，老是要考虑正负还是麻烦啊😒……<br>后来，后来，再后来……我观察了数据范围，发现它最长能达到的横坐标是 5 × 30 × 2 = 300 (每一大次分裂都走5步, 最多30次, 正负各一次)，纵坐标奕然，所以，把起点换成<code>(150, 150)</code>就不用考虑<em>x</em>, <em>y</em>的坐标正负问题了😀……<br>思维定式真的坑🕳啊……</p><h3 id="如何剪枝的问题"><a href="#如何剪枝的问题" class="headerlink" title="如何剪枝的问题"></a>如何剪枝的问题</h3><p>每次分裂只考虑一个方向的话，8次后，方向就会绕回来了。所以那么多次分裂，很多步骤都是重复的。所以要用另一个数组标记，<code>con[x][y][8][31]</code>表示分裂起始点坐标，方向，第几次分裂(确定了第几次分裂就一定可以知道前进步数，所以不用再对步数进行标记到达)，这样就可以免去许多重复的步骤，优化复杂度。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><p><code>AC</code>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXREACH = <span class="number">310</span>;<span class="comment">//最大300，大一点点以防万一</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//x, y, direction, time</span></span><br><span class="line"><span class="keyword">bool</span> con[MAXREACH][MAXREACH][<span class="number">8</span>][<span class="number">31</span>] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> reach[MAXREACH][MAXREACH] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="comment">/*我根据产生方向的先后顺序标记的8个方向*/</span></span><br><span class="line"><span class="comment">/*↑: 1   ↖: 2   ↗: 3   ←: 4   →:5   ↙: 6   ↘: 7   ↓: 8*/</span></span><br><span class="line"><span class="comment">/*north: 1;  northwest: 2;   northeast: 3;   west: 4;</span></span><br><span class="line"><span class="comment">east: 5;   southwest: 6;   southeast: 7;   south: 8*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> dir;</span><br><span class="line"><span class="keyword">int</span> times;</span><br><span class="line">dot() &#123;  &#125;</span><br><span class="line">dot(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y) : x(_x), y(_y) &#123; dir = <span class="number">0</span>; times = <span class="number">0</span>; &#125;</span><br><span class="line">dot(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> d, <span class="keyword">int</span> t) : x(_x), y(_y), dir(d), times(t) &#123;  &#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> dot d)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (x == d.x)<span class="keyword">return</span> y &lt; d.y;</span><br><span class="line"><span class="keyword">return</span> x &lt; d.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> dot d)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (x == d.x &amp;&amp; y == d.y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nextDir1</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;<span class="comment">//往左45°产生的方向</span></span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">2</span>)<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">3</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">4</span>)<span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">5</span>)<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">6</span>)<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">7</span>)<span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">8</span>)<span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nextDir2</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;<span class="comment">//往右45°产生的方向</span></span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">2</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">3</span>)<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">4</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">5</span>)<span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">6</span>)<span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">7</span>)<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">8</span>)<span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">dot <span class="title">genDot</span><span class="params">(dot s, <span class="keyword">int</span> dir)</span> </span>&#123;<span class="comment">//每次走一步 产生下一个点</span></span><br><span class="line"><span class="function">dot <span class="title">e</span><span class="params">(s.x, s.y)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">1</span>)e.y += <span class="number">1</span>;<span class="comment">//↑</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">4</span>)e.x -= <span class="number">1</span>;<span class="comment">//←</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">5</span>)e.x += <span class="number">1</span>;<span class="comment">//→</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">8</span>)e.y -= <span class="number">1</span>;<span class="comment">//↓</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">2</span>) &#123; e.x -= <span class="number">1</span>; e.y += <span class="number">1</span>; &#125;<span class="comment">//↖</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">3</span>) &#123; e.x += <span class="number">1</span>; e.y += <span class="number">1</span>; &#125;<span class="comment">//↗</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">6</span>) &#123; e.x -= <span class="number">1</span>; e.y -= <span class="number">1</span>; &#125;<span class="comment">//↙</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">7</span>) &#123; e.x += <span class="number">1</span>; e.y -= <span class="number">1</span>; &#125;<span class="comment">//↘</span></span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span>* <span class="built_in">step</span> = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">step</span>[i];</span><br><span class="line"><span class="function">dot <span class="title">s</span><span class="params">(<span class="number">152</span>, <span class="number">152</span>, <span class="number">1</span>, <span class="number">0</span>)</span></span>;<span class="comment">//以防万一 起点变成(152, 152) 方向1 第0次分裂</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;dot&gt; q;</span><br><span class="line">q.push(s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> reachCount = <span class="number">0</span>;<span class="comment">//记录到达过多少个位置</span></span><br><span class="line"><span class="keyword">int</span> times = <span class="number">0</span>;<span class="comment">//记录第几次大分裂</span></span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">dot cur = q.front();<span class="comment">//当前点</span></span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> dir = cur.dir;<span class="comment">//当前方向</span></span><br><span class="line">times = cur.times;<span class="comment">//当前是第几次大分裂</span></span><br><span class="line"><span class="keyword">if</span> (con[cur.x][cur.y][dir - <span class="number">1</span>][times] == <span class="literal">true</span>)<span class="comment">//如果这次分裂重复来过了</span></span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">//不用管这一次了 继续下一个循环</span></span><br><span class="line">con[cur.x][cur.y][dir<span class="number">-1</span>][times] = <span class="literal">true</span>;<span class="comment">//没来过 标记true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="built_in">step</span>[times]; i++) &#123;<span class="comment">//走几步</span></span><br><span class="line">dot temp = genDot(cur, dir);<span class="comment">//产生下一个点</span></span><br><span class="line">cur = temp;</span><br><span class="line"><span class="keyword">int</span> ca = cur.x, cb = cur.y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (reach[ca][cb] == <span class="literal">false</span>) &#123;<span class="comment">//标记到达</span></span><br><span class="line">reach[ca][cb] = <span class="literal">true</span>;</span><br><span class="line">reachCount++;<span class="comment">//计数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (times &lt; n - <span class="number">1</span>) &#123;<span class="comment">//还没到最后一次的大分裂 可入队</span></span><br><span class="line"><span class="keyword">int</span> a = cur.x, b = cur.y;</span><br><span class="line"><span class="function">dot <span class="title">cur1</span><span class="params">(a, b, nextDir1(dir), times + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">dot <span class="title">cur2</span><span class="params">(a, b, nextDir2(dir), times + <span class="number">1</span>)</span></span>;</span><br><span class="line">            <span class="comment">//2个方向 入队</span></span><br><span class="line">q.push(cur1);</span><br><span class="line">q.push(cur2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; reachCount &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MLE</code>暴力代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> dir;</span><br><span class="line">dot() &#123;  &#125;</span><br><span class="line">dot(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y) : x(_x), y(_y) &#123; dir = <span class="number">0</span>; &#125;</span><br><span class="line">dot(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> d) : x(_x), y(_y), dir(d)&#123;  &#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> dot d)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (x == d.x)<span class="keyword">return</span> y &lt; d.y;</span><br><span class="line"><span class="keyword">return</span> x &lt; d.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> dot d)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (x == d.x &amp;&amp; y == d.y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nextDir1</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">2</span>)<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">3</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">4</span>)<span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">5</span>)<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">6</span>)<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">7</span>)<span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">8</span>)<span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nextDir2</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">2</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">3</span>)<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">4</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">5</span>)<span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">6</span>)<span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">7</span>)<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span> (d == <span class="number">8</span>)<span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">dot <span class="title">genDot</span><span class="params">(dot s, <span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line"><span class="function">dot <span class="title">e</span><span class="params">(s.x, s.y)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">1</span>)e.y += <span class="number">1</span>;<span class="comment">//↑</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">4</span>)e.x -= <span class="number">1</span>;<span class="comment">//←</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">5</span>)e.x += <span class="number">1</span>;<span class="comment">//→</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">8</span>)e.y -= <span class="number">1</span>;<span class="comment">//↓</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">2</span>) &#123; e.x -= <span class="number">1</span>; e.y += <span class="number">1</span>; &#125;<span class="comment">//↖</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">3</span>) &#123; e.x += <span class="number">1</span>; e.y += <span class="number">1</span>; &#125;<span class="comment">//↗</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">6</span>) &#123; e.x -= <span class="number">1</span>; e.y -= <span class="number">1</span>; &#125;<span class="comment">//↙</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">7</span>) &#123; e.x += <span class="number">1</span>; e.y -= <span class="number">1</span>; &#125;<span class="comment">//↘</span></span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">step</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> sx;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; sx;</span><br><span class="line"><span class="keyword">double</span> stimes = <span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span> j = <span class="number">0</span>; j != stimes; j++)</span><br><span class="line"><span class="built_in">step</span>.push_back(sx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">dot <span class="title">s</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;dot&gt; path;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;dot&gt; q;</span><br><span class="line">q.push(s);</span><br><span class="line"><span class="keyword">int</span> times = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">dot cur = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> dir = cur.dir;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="built_in">step</span>[times]; i++) &#123;</span><br><span class="line">dot temp = genDot(cur, dir);</span><br><span class="line">path.push_back(temp);</span><br><span class="line">cur = temp;</span><br><span class="line">&#125;</span><br><span class="line">times++;</span><br><span class="line"><span class="keyword">int</span> a = cur.x, b = cur.y;</span><br><span class="line"><span class="function">dot <span class="title">cur1</span><span class="params">(a, b, nextDir1(dir))</span></span>;</span><br><span class="line"><span class="function">dot <span class="title">cur2</span><span class="params">(a, b, nextDir2(dir))</span></span>;</span><br><span class="line">q.push(cur1);</span><br><span class="line">q.push(cur2);</span><br><span class="line"><span class="keyword">if</span> (times == <span class="built_in">step</span>.<span class="built_in">size</span>())</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">sort(path.<span class="built_in">begin</span>(), path.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">int</span> psize = path.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">int</span> sameCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=psize<span class="number">-1</span>;i++)</span><br><span class="line"><span class="keyword">if</span> (path[i] == path[i + <span class="number">1</span>])</span><br><span class="line">sameCount++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; psize - sameCount &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;可怕又恐怖的宇宙射线&quot;&gt;&lt;a href=&quot;#可怕又恐怖的宇宙射线&quot; class=&quot;headerlink&quot; title=&quot;可怕又恐怖的宇宙射线&quot;&gt;&lt;/a&gt;&lt;strong&gt;可怕又恐怖的宇宙射线&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;宇宙射线会在无限的二维平⾯上传播(可以看做⼀个二维网格图)，初始方向默认向上。宇宙射线会在发射出⼀段距离后分裂，向该⽅向的左右45°⽅向分裂出两条宇宙射线，同时威力不变！宇宙射线会分裂 n 次，每次分裂后会在分裂方向前进 ai 个单位长度。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;求宇宙射线共经过多少个位置。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="DFS" scheme="co10.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>咕咕东想吃饭</title>
    <link href="co10.github.io/2020/03/19/%E5%92%95%E5%92%95%E4%B8%9C%E6%83%B3%E5%90%83%E9%A5%AD/"/>
    <id>co10.github.io/2020/03/19/%E5%92%95%E5%92%95%E4%B8%9C%E6%83%B3%E5%90%83%E9%A5%AD/</id>
    <published>2020-03-19T11:30:57.000Z</published>
    <updated>2020-03-19T12:22:08.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="咕咕东想吃饭"><a href="#咕咕东想吃饭" class="headerlink" title="咕咕东想吃饭"></a><strong>咕咕东想吃饭</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">咕咕东考试周开始了，考试周⼀共有n天。他不想考试周这么累，于是打算每天都吃顿好的。他决定每天都吃生煎，咕咕东每天需要买ai个生煎。</span><br><span class="line">但是生煎店为了刺激消费，只有两种购买⽅式：</span><br><span class="line">①在某⼀天⼀次性买两个生煎。</span><br><span class="line">②今天买⼀个生煎，同时为明天买⼀个生煎，店家会给⼀个券，第⼆天用券来拿。</span><br><span class="line">没有其余的购买方式，这两种购买方式可以用无数次。但是咕咕东是个节俭的好孩⼦，他考试结束就走了，不允许考试结束时手里有券。咕咕东非常有钱，你不需要担心咕咕东没钱，但是咕咕东太笨了，他想问你他能否在考试周每天都能恰好买ai个生煎。</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输⼊两⾏，第⼀行输⼊⼀个正整数 n (1 ≤ n ≤ 100000)，表示考试周的天数。</span><br><span class="line">第⼆行有n个数，第i个数ai表示第i天咕咕东要买的生煎的数量。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果可以满足咕咕东奇怪的要求，输出&quot;YES&quot;，如果不能满足，输出“NO”。（输出不带引号）</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">4 1 2 1 2 </span><br><span class="line">Output: </span><br><span class="line">YES</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">3 1 0 1</span><br><span class="line">Output: </span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1000 ms</span><br><span class="line">Memory limit262144 kB</span><br></pre></td></tr></table></figure><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h2><table><thead><tr><th>数据点</th><th><em>n</em> (上限)</th><th><em>a<sub>i</sub></em> (上限)</th></tr></thead><tbody><tr><td>1, 2</td><td>10</td><td>≤ 10</td></tr><tr><td>3, 4, 5</td><td>1000</td><td>10</td></tr><tr><td>6, 7</td><td>10</td><td>10000</td></tr><tr><td>8, 9, 10</td><td>100000</td><td>10000</td></tr></tbody></table><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>比较容易，一个<code>for</code>循环再几个<code>if</code>条件判断就行了，复杂度<em>O</em>(<em>n</em>)。</p><p>每天都有两种选择，选择根据今天应该有的生煎数来选，初始时昨天预留的生煎数<code>remain = 0</code>，之后若有预留，则<code>remain = 1</code>。则 今日想买的生煎数 - remain 就是 今日应该要买的生煎数。<br>这两种选择，根据今日应买数量是否为2的倍数来判断，是则预留为0，否则预留为1。然后根据最后一天的剩余量判断就行。<br>这题比较容易出错的是0(题目说好的明明“决定每天都吃生煎”呢🤔🤨😐😑😶🙄)，还好样例2有给个0，不然我还真不会去考虑0的情况……若前一天有剩但今日为0，直接终止循环，输出NO。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">int</span> remain = <span class="number">0</span>;<span class="comment">//当日剩余生煎数</span></span><br><span class="line"><span class="keyword">bool</span> failed = <span class="literal">false</span>;<span class="comment">//不能满足？</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a = arr[i] - remain;<span class="comment">//扣去前一天剩下的券(如果有) 今天还有的生煎数</span></span><br><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">0</span>) &#123;<span class="comment">//昨天有剩券 但今天不想吃</span></span><br><span class="line">failed = <span class="literal">true</span>;<span class="comment">//不能满足</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span>)<span class="comment">//今天不需要买 券那个方案，选方案一</span></span><br><span class="line">remain = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">1</span>)<span class="comment">//需要买张券，选方案二</span></span><br><span class="line">remain = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (remain == <span class="number">0</span> &amp;&amp; failed == <span class="literal">false</span>)<span class="comment">//最后一天 没剩 且 之前都满足</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (remain == <span class="number">1</span> || failed == <span class="literal">true</span>)<span class="comment">//最后一天有剩 或 之前某天不满足</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;咕咕东想吃饭&quot;&gt;&lt;a href=&quot;#咕咕东想吃饭&quot; class=&quot;headerlink&quot; title=&quot;咕咕东想吃饭&quot;&gt;&lt;/a&gt;&lt;strong&gt;咕咕东想吃饭&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;咕咕东考试周开始了，考试周⼀共有n天。他不想考试周这么累，于是打算每天都吃顿好的。他决定每天都吃生煎，咕咕东每天需要买ai个生煎。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;但是生煎店为了刺激消费，只有两种购买⽅式：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;①在某⼀天⼀次性买两个生煎。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;②今天买⼀个生煎，同时为明天买⼀个生煎，店家会给⼀个券，第⼆天用券来拿。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;没有其余的购买方式，这两种购买方式可以用无数次。但是咕咕东是个节俭的好孩⼦，他考试结束就走了，不允许考试结束时手里有券。咕咕东非常有钱，你不需要担心咕咕东没钱，但是咕咕东太笨了，他想问你他能否在考试周每天都能恰好买ai个生煎。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>咕咕东的奇遇</title>
    <link href="co10.github.io/2020/03/19/%E5%92%95%E5%92%95%E4%B8%9C%E7%9A%84%E5%A5%87%E9%81%87/"/>
    <id>co10.github.io/2020/03/19/%E5%92%95%E5%92%95%E4%B8%9C%E7%9A%84%E5%A5%87%E9%81%87/</id>
    <published>2020-03-19T09:58:11.000Z</published>
    <updated>2020-03-19T16:27:21.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="咕咕东的奇遇"><a href="#咕咕东的奇遇" class="headerlink" title="咕咕东的奇遇"></a><strong>咕咕东的奇遇</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">咕咕东是个贪玩的孩⼦，有⼀天，他从上古遗迹中得到了⼀个神奇的圆环。这个圆环由字⺟表组成首尾相接的环，环上有⼀个指针，最初指向字⺟a。咕咕东每次可以顺时针或者逆时针旋转⼀格。例如，a顺时针旋转到z，逆时针旋转到b。咕咕东⼿⾥有⼀个字符串，但是他太笨了，所以他来请求你的帮助，问最少需要转多少次。</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://i.loli.net/2020/03/20/EUz2RqGs89xToJu.png" alt="0001.png"></p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输⼊只有⼀行，是⼀个字符串。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出最少要转的次数。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">zeus</span><br><span class="line">Output: </span><br><span class="line">18</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1000 ms</span><br><span class="line">Memory limit65536 kB</span><br></pre></td></tr></table></figure><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a><strong>数据范围</strong></h2><table><thead><tr><th>数据点</th><th>字符串长度</th></tr></thead><tbody><tr><td>1, 2</td><td>≤ 10</td></tr><tr><td>3, 4, 5</td><td>≤ 100</td></tr><tr><td>6, 7, 8, 9, 10</td><td>≤ 10000</td></tr></tbody></table><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>简单题，起点为<code>a</code>，每次只有顺时针或者逆时针2种选择，而顺/逆时针判断条件是走的步数是否≤13，由于转盘是有序的，而走的步数可以通过字母表确定。利用<code>a - z</code>的<code>ASCII码</code>有序对应<code>97 - 122</code>，两者<code>ASCII</code>的差值+26再除26求余数即可确定步数，然后把起点标记为走到的那一个，如此循环，直至走完。</p><p>但是由于个人疏忽，<code>if</code>判断处有写<code>(差值+26)%26</code>，确定步数时却忘了<code>+26</code>直接进行<code>求余</code>，看着样例没问题，自己出样例又要费时间去算，就直接提交，然后<code>WA</code>了……分全没了……😭(赛后补题补上<code>+26</code>直接<code>AC</code>了……)</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//顺逆13n</span></span><br><span class="line"><span class="keyword">char</span> start = <span class="string">'a'</span>;<span class="comment">//起始点为a</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="keyword">int</span> n = x.length();</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//总步数</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">0</span>;<span class="comment">//单次步数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (((x[i] - start + <span class="number">26</span>) % <span class="number">26</span>) &lt;= <span class="number">13</span>) &#123;<span class="comment">//逆时针</span></span><br><span class="line"><span class="built_in">step</span> = (x[i] - start + <span class="number">26</span>) % <span class="number">26</span>;</span><br><span class="line">count += <span class="built_in">step</span>;</span><br><span class="line">start = x[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (((x[i] - start + <span class="number">26</span>) % <span class="number">26</span>) &gt; <span class="number">13</span>) &#123;<span class="comment">//顺时针</span></span><br><span class="line"><span class="built_in">step</span> = <span class="number">26</span> - (x[i] - start + <span class="number">26</span>) % <span class="number">26</span>;</span><br><span class="line">count += <span class="built_in">step</span>;</span><br><span class="line">start = x[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;咕咕东的奇遇&quot;&gt;&lt;a href=&quot;#咕咕东的奇遇&quot; class=&quot;headerlink&quot; title=&quot;咕咕东的奇遇&quot;&gt;&lt;/a&gt;&lt;strong&gt;咕咕东的奇遇&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;咕咕东是个贪玩的孩⼦，有⼀天，他从上古遗迹中得到了⼀个神奇的圆环。这个圆环由字⺟表组成首尾相接的环，环上有⼀个指针，最初指向字⺟a。咕咕东每次可以顺时针或者逆时针旋转⼀格。例如，a顺时针旋转到z，逆时针旋转到b。咕咕东⼿⾥有⼀个字符串，但是他太笨了，所以他来请求你的帮助，问最少需要转多少次。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="转盘问题" scheme="co10.github.io/tags/%E8%BD%AC%E7%9B%98%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>贪婪算法-区间覆盖问题</title>
    <link href="co10.github.io/2020/03/19/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95-%E5%8C%BA%E9%97%B4%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98/"/>
    <id>co10.github.io/2020/03/19/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95-%E5%8C%BA%E9%97%B4%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-19T09:08:08.000Z</published>
    <updated>2020-03-19T09:55:36.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区间覆盖问题"><a href="#区间覆盖问题" class="headerlink" title="区间覆盖问题"></a><strong>区间覆盖问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数轴上有 n (1 ≤ n ≤ 25000) 个闭区间 [ai, bi]，选择尽量少的区间覆盖一条指定线段 [1, t] ( 1 ≤ t ≤ 1,000,000)。</span><br><span class="line">覆盖整点，即[1,2]+[3,4]可以覆盖[1,4]。</span><br><span class="line">不可能办到输出-1</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行：N 和 T</span><br><span class="line">第二行至 N+1 行: 每一行一个闭区间。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择的区间的数目，不可能办到输出-1</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">3 10</span><br><span class="line">1 7</span><br><span class="line">3 6</span><br><span class="line">6 10</span><br><span class="line">Output: </span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1000 ms</span><br><span class="line">Memory limit65536 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>这道题<code>WA</code>了好多次，主要是整点覆盖比较坑，是要在录入时就进行<code>始端-1</code>或者<code>末端+1</code>，还是在<code>if</code>条件判断的时候考虑整点，容易出错，可能会多考虑了区间比如<code>[1, 2]</code>和<code>[4, 5]</code> (2往后延长到3, 4往前延长到3)。还有录入的时候我进行了裁剪，我怕<code>[-2, 1]</code>裁剪成<code>[1, 1]</code>会影响对<code>[2, 3]</code>的判断，就选择了在<code>if</code>处判断整点，而没有选择延长区间。</p><p>首先对区间a升序，a相同时按b降序，保证每次能选到的区间最长。每次标记一个区间的起点<code>begin</code>和终点<code>end</code>，再从接下来的区间中选取起点落在<code>[begin, end+1]</code>范围内的，可行就选取最长的，然后更新起点<code>begin</code>和终点<code>end</code>，计数 + 1，如此循环，直到遇到目标终点<code>t</code>。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*区间 [a, b] */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">range</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">range(<span class="keyword">int</span> _a, <span class="keyword">int</span> _b) :a(_a), b(_b) &#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> range r)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (a == r.a)</span><br><span class="line"><span class="keyword">return</span> b &gt; r.b;</span><br><span class="line"><span class="keyword">return</span> a &lt; r.a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rangeCover</span><span class="params">(<span class="built_in">vector</span>&lt;range&gt; v, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"><span class="comment">//按a升序 按b降序</span></span><br><span class="line">sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (v.at(<span class="number">0</span>).a &gt; <span class="number">1</span>)<span class="comment">//起始不是 1，一定不能办到</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//标记当前选取区间的起点，终点</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">begin</span> = <span class="number">1</span>, <span class="built_in">end</span> = v.at(<span class="number">0</span>).b, pos = <span class="number">0</span>, count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">end</span> != t) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">begin</span> = <span class="built_in">end</span> + <span class="number">1</span>;<span class="comment">//下一个标记的起始点为本次标记终点+1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (v.at(i).a &gt; <span class="built_in">begin</span>) &#123;<span class="comment">//遇到了第一个起始点 &gt; 标记起始点的</span></span><br><span class="line">pos = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (v.at(i).a &lt;= <span class="built_in">begin</span> &amp;&amp; v.at(i).b &gt;= <span class="built_in">end</span>) &#123;<span class="comment">//可选区间</span></span><br><span class="line">temp = i;<span class="comment">//记录当前标号</span></span><br><span class="line"><span class="built_in">end</span> = v.at(i).b;<span class="comment">//更新标记末端</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">begin</span> &gt; <span class="built_in">end</span>) &#123;<span class="comment">//标记了下一个区间的起始点 但没有找到此区间</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//这个标记的区间可行</span></span><br><span class="line">pos = temp + <span class="number">1</span>;<span class="comment">//从那个标记的标号开始 进行下一次循环</span></span><br><span class="line">count++;<span class="comment">//计数+1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, t;</span><br><span class="line">scanf_s(<span class="string">"%d%d"</span>, &amp;n, &amp;t);</span><br><span class="line"><span class="built_in">vector</span>&lt;range&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">scanf_s(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">if</span> ((a &gt;= <span class="number">1</span> &amp;&amp; a &lt;= t) || (b &gt;= <span class="number">1</span> &amp;&amp; b &lt;= t)) &#123;<span class="comment">//先对输入进行裁剪</span></span><br><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">1</span>)<span class="comment">//合法区间 但 a &lt; 1，可令 a = 1</span></span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="function">range <span class="title">r</span><span class="params">(a, b)</span></span>;</span><br><span class="line">v.push_back(r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = rangeCover(v, t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;区间覆盖问题&quot;&gt;&lt;a href=&quot;#区间覆盖问题&quot; class=&quot;headerlink&quot; title=&quot;区间覆盖问题&quot;&gt;&lt;/a&gt;&lt;strong&gt;区间覆盖问题&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;数轴上有 n (1 ≤ n ≤ 25000) 个闭区间 [ai, bi]，选择尽量少的区间覆盖一条指定线段 [1, t] ( 1 ≤ t ≤ 1,000,000)。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;覆盖整点，即[1,2]+[3,4]可以覆盖[1,4]。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;不可能办到输出-1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="贪婪算法" scheme="co10.github.io/tags/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>贪婪算法-区间选点问题</title>
    <link href="co10.github.io/2020/03/19/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95-%E5%8C%BA%E9%97%B4%E9%80%89%E7%82%B9%E9%97%AE%E9%A2%98/"/>
    <id>co10.github.io/2020/03/19/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95-%E5%8C%BA%E9%97%B4%E9%80%89%E7%82%B9%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-19T07:40:09.000Z</published>
    <updated>2020-03-19T09:06:39.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区间选点问题"><a href="#区间选点问题" class="headerlink" title="区间选点问题"></a><strong>区间选点问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数轴上有 n 个闭区间 [ai, bi]。取尽量少的点，使得每个区间内都至少有一个点（不同区间内含的点可以是同一个）</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行1个整数 N（N ≤ 100）</span><br><span class="line">第 2~N+1 行，每行两个整数 a,b（a, b ≤ 100）</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个整数，代表选点的数目</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">2</span><br><span class="line">1 5</span><br><span class="line">4 6</span><br><span class="line">Output: </span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">3</span><br><span class="line">1 3</span><br><span class="line">2 5</span><br><span class="line">4 6</span><br><span class="line">Output: </span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit1000 ms</span><br><span class="line">Memory limit262144 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>按<code>b</code>的大小，将这些区间升序排序；当<code>b</code>相同时，按<code>a</code>降序。<br>排序完之后，将这些区间遍历，每次计数<code>count</code>增加时，证明这个区间与前面的区间没有重叠部分，因此可以把这个区间的<code>b</code>端作为接下来要判断的区间的判断点。<br>如果某区间与前一区间有重叠，那么一定有<code>该区间的a端 ≤ 上一区间的b端</code>且<code>该区间的b端 ≥ 上一区间的b端</code>。</p><p>如果第一字典不是<code>b</code>，而是<code>a</code>，按升序排列呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;第一字典为b</span><br><span class="line">    (X)___________</span><br><span class="line">(Y)________________________</span><br><span class="line">                      (Z)_________</span><br><span class="line">X和Y可共计1点, Z再算1点，总数共2点</span><br><span class="line">-----------------------------------------</span><br><span class="line">&gt;&gt;&gt;第一字典为a</span><br><span class="line">(Y)________________________</span><br><span class="line">    (X)___________</span><br><span class="line">                      (Z)_________</span><br><span class="line">X的a在Y的b前面，但X的b也在Y前面。</span><br><span class="line">情况一：</span><br><span class="line">if条件不考虑X的b，则Y与X归类，标记点仍为Y的b</span><br><span class="line">Z也会与Y归类。总数共计1点(Wrong Answer)</span><br><span class="line">情况二：</span><br><span class="line">if条件考虑X的b，Y不与X归类，计数+1，标记点变成X的b</span><br><span class="line">X明显不能与Z归类，计数+1，标记Z的b，到尾了，计数+1</span><br><span class="line">总数共计3点(Wrong Answer)</span><br><span class="line"></span><br><span class="line">标记点若改成a端呢？</span><br><span class="line">由于按a升序，按a端一定无法判断2个区间是否重叠！</span><br></pre></td></tr></table></figure><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*两点 表示区间*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">range</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">range(<span class="keyword">int</span> _a, <span class="keyword">int</span> _b) :a(_a), b(_b)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dotRange</span><span class="params">(<span class="built_in">vector</span>&lt;range&gt; v)</span> </span>&#123;</span><br><span class="line"><span class="comment">//按b升序 按a降序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != v.<span class="built_in">size</span>() - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (v.at(j).b &gt; v.at(j + <span class="number">1</span>).b)</span><br><span class="line">swap(v.at(j), v.at(j + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (v.at(j).b == v.at(j + <span class="number">1</span>).b)</span><br><span class="line"><span class="keyword">if</span> (v.at(j).a &lt; v.at(j + <span class="number">1</span>).a)</span><br><span class="line">swap(v.at(j), v.at(j + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dot = v.at(<span class="number">0</span>).b;<span class="comment">//排序后从头开始遍历 把第一个区间的末端作为判断点</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;<span class="comment">//计数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (v.at(i).a &lt;= dot &amp;&amp; v.at(i).b &gt;= dot) &#123;<span class="comment">//与本次标记区间有重叠 无需计数</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//到了没有重叠的区间 可计数</span></span><br><span class="line">count++;</span><br><span class="line">dot = v.at(i).b;<span class="comment">//并以该区间的末端作为接下来的区间判断点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;range&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="function">range <span class="title">r</span><span class="params">(a, b)</span></span>;</span><br><span class="line">v.push_back(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dotRange(v) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;区间选点问题&quot;&gt;&lt;a href=&quot;#区间选点问题&quot; class=&quot;headerlink&quot; title=&quot;区间选点问题&quot;&gt;&lt;/a&gt;&lt;strong&gt;区间选点问题&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;数轴上有 n 个闭区间 [ai, bi]。取尽量少的点，使得每个区间内都至少有一个点（不同区间内含的点可以是同一个）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="贪婪算法" scheme="co10.github.io/tags/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>贪婪算法 选数问题</title>
    <link href="co10.github.io/2020/03/06/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95-%E9%80%89%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>co10.github.io/2020/03/06/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95-%E9%80%89%E6%95%B0%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-06T05:07:10.000Z</published>
    <updated>2020-03-19T07:50:01.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选数问题"><a href="#选数问题" class="headerlink" title="选数问题"></a><strong>选数问题</strong></h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given n positive numbers, ZJM can select exactly K of them that sums to S. Now ZJM wonders how many ways to get it!</span><br><span class="line">_______________________________________________________</span><br><span class="line">给出n个正数，选出其中K个，使其总和为S —— 问共有多少种方法？</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The first line, an integer T ≤ 100, indicates the number of test cases. For each case, there are two lines. The first line, three integers indicate n, K and S. The second line, n integers indicate the positive numbers.</span><br><span class="line">Remember that k ≤ n ≤ 16 and all numbers can be stored in 32-bit integer. </span><br><span class="line">_______________________________________________________</span><br><span class="line">第一行，一个整数 T (T ≤ 100), 表示数据组数。</span><br><span class="line">对于每组数据，接下来两行，第一行：3个整数 n, K, S。第二行：n 个正整数。</span><br><span class="line">k ≤ n ≤ 16。所有数都能存在32位寄存器中。</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">For each case, an integer indicate the answer in a independent line.</span><br><span class="line">____________________________</span><br><span class="line">对于每组数据，独立一行输出答案。</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a><strong>Sample</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input: </span><br><span class="line">1</span><br><span class="line">10 3 10</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a><strong>Limitation</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time limit3000 ms</span><br><span class="line">Memory limit262144 kB</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h2><p>组合问题。<br>n个选出K个，共有${n \choose K}$种组合，然后从这些组合中选出符合数之和为S的情况即可。<br><del>由于这是A题，暴力求解，不要太在意时间复杂度🙄。</del><br>利用递归，每次枚举一个数加入到<code>res</code>数组中，递归之后由于每次加入的数不同，会产生多个分支。在这些分支上最终生成的数组就是这n个数的所有含有K个元素的子集，对这些子集元素求和判断是否为S即可。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*贪婪算法 每次都把可行的数加入到res数组中，加入的数达到n个后，求和*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">greedy</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> n, <span class="keyword">int</span> K, <span class="keyword">int</span> S, <span class="keyword">int</span> i, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; res)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i == n) &#123;<span class="comment">//总的n个数，已经全部考虑了</span></span><br><span class="line"><span class="keyword">if</span> (res.<span class="built_in">size</span>() == K) &#123;<span class="comment">//新数组已经达到要求的K个数时</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != K; j++)</span><br><span class="line">sum += res.at(j);<span class="comment">//求这些数的和</span></span><br><span class="line"><span class="keyword">if</span> (sum == S)<span class="comment">//该情况可行 达成目标</span></span><br><span class="line">total++;<span class="comment">//计数 + 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//递归枚举每个数，生成子集</span></span><br><span class="line">greedy(arr, n, K, S, i + <span class="number">1</span>, res);</span><br><span class="line">res.push_back(arr[i]);</span><br><span class="line">greedy(arr, n, K, S, i + <span class="number">1</span>, res);</span><br><span class="line">res.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; i++) &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> n, K, S;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; K &gt;&gt; S;<span class="comment">//n个数 选出K个 其和为S</span></span><br><span class="line"><span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[j];</span><br><span class="line">total = <span class="number">0</span>;<span class="comment">//共有total种方案</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">greedy(arr, n, K, S, <span class="number">0</span>, v);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; total &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;选数问题&quot;&gt;&lt;a href=&quot;#选数问题&quot; class=&quot;headerlink&quot; title=&quot;选数问题&quot;&gt;&lt;/a&gt;&lt;strong&gt;选数问题&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Given n positive numbers, ZJM can select exactly K of them that sums to S. Now ZJM wonders how many ways to get it!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_______________________________________________________&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;给出n个正数，选出其中K个，使其总和为S —— 问共有多少种方法？&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="贪婪算法" scheme="co10.github.io/tags/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
